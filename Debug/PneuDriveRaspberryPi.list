
PneuDriveRaspberryPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014db8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  08014fb8  08014fb8  00024fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080157d8  080157d8  0003054c  2**0
                  CONTENTS
  4 .ARM          00000008  080157d8  080157d8  000257d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080157e0  080157e0  0003054c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080157e0  080157e0  000257e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080157ec  080157ec  000257ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000054c  20000000  080157f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011a98  2000054c  08015d3c  0003054c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20011fe4  08015d3c  00031fe4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003054c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005755e  00000000  00000000  0003057a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a0d8  00000000  00000000  00087ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025c8  00000000  00000000  00091bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002208  00000000  00000000  00094178  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034ee3  00000000  00000000  00096380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002ef89  00000000  00000000  000cb263  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001171e4  00000000  00000000  000fa1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002113d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aba4  00000000  00000000  0021144c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  0021bff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  0021c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000054c 	.word	0x2000054c
 800021c:	00000000 	.word	0x00000000
 8000220:	08014fa0 	.word	0x08014fa0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000550 	.word	0x20000550
 800023c:	08014fa0 	.word	0x08014fa0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fff2 	bl	8001fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f008 fb34 	bl	800962c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f008 fb0a 	bl	80095dc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	20002604 	.word	0x20002604

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20002604 	.word	0x20002604

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e031      	b.n	80010ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f007 f990 	bl	8008398 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_Init+0x84>)
 8001098:	4013      	ands	r3, r2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f964 	bl	8001370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffffeefd 	.word	0xffffeefd

080010dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x1c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e12a      	b.n	800134e <HAL_ADC_ConfigChannel+0x272>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b09      	cmp	r3, #9
 8001106:	d93a      	bls.n	800117e <HAL_ADC_ConfigChannel+0xa2>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001110:	d035      	beq.n	800117e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68d9      	ldr	r1, [r3, #12]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	3b1e      	subs	r3, #30
 8001128:	2207      	movs	r2, #7
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10a      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	061a      	lsls	r2, r3, #24
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001156:	e035      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	4603      	mov	r3, r0
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4403      	add	r3, r0
 8001170:	3b1e      	subs	r3, #30
 8001172:	409a      	lsls	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800117c:	e022      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6919      	ldr	r1, [r3, #16]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43da      	mvns	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6919      	ldr	r1, [r3, #16]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4403      	add	r3, r0
 80011ba:	409a      	lsls	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d824      	bhi.n	8001216 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3b05      	subs	r3, #5
 80011de:	221f      	movs	r2, #31
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43da      	mvns	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	400a      	ands	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b05      	subs	r3, #5
 8001208:	fa00 f203 	lsl.w	r2, r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
 8001214:	e04c      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d824      	bhi.n	8001268 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3b23      	subs	r3, #35	; 0x23
 8001230:	221f      	movs	r2, #31
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b23      	subs	r3, #35	; 0x23
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	e023      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b41      	subs	r3, #65	; 0x41
 800127a:	221f      	movs	r2, #31
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43da      	mvns	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	400a      	ands	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10a      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d109      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d125      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_ADC_ConfigChannel+0x22e>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b11      	cmp	r3, #17
 8001308:	d11c      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 8001310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001314:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d111      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_ADC_ConfigChannel+0x28c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_ADC_ConfigChannel+0x290>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001336:	e002      	b.n	800133e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	10000012 	.word	0x10000012
 8001360:	40012000 	.word	0x40012000
 8001364:	40012300 	.word	0x40012300
 8001368:	2000000c 	.word	0x2000000c
 800136c:	431bde83 	.word	0x431bde83

08001370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001378:	4b78      	ldr	r3, [pc, #480]	; (800155c <ADC_Init+0x1ec>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a77      	ldr	r2, [pc, #476]	; (800155c <ADC_Init+0x1ec>)
 800137e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001382:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <ADC_Init+0x1ec>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4973      	ldr	r1, [pc, #460]	; (800155c <ADC_Init+0x1ec>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	021a      	lsls	r2, r3, #8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	4a58      	ldr	r2, [pc, #352]	; (8001560 <ADC_Init+0x1f0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d022      	beq.n	800144a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e00f      	b.n	800146a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0202 	bic.w	r2, r2, #2
 8001478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	005a      	lsls	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	3b01      	subs	r3, #1
 80014c4:	035a      	lsls	r2, r3, #13
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	e007      	b.n	80014e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	051a      	lsls	r2, r3, #20
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001522:	025a      	lsls	r2, r3, #9
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800153a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	029a      	lsls	r2, r3, #10
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40012300 	.word	0x40012300
 8001560:	0f000001 	.word	0x0f000001

08001564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0ed      	b.n	8001752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f006 ffe6 	bl	8008554 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0202 	bic.w	r2, r2, #2
 8001596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001598:	f7ff fd2e 	bl	8000ff8 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800159e:	e012      	b.n	80015c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a0:	f7ff fd2a 	bl	8000ff8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d90b      	bls.n	80015c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0c5      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e5      	bne.n	80015a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e4:	f7ff fd08 	bl	8000ff8 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	e012      	b.n	8001612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ec:	f7ff fd04 	bl	8000ff8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d90b      	bls.n	8001612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e09f      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0e5      	beq.n	80015ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7e5b      	ldrb	r3, [r3, #25]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e9b      	ldrb	r3, [r3, #26]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0220 	bic.w	r2, r2, #32
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7edb      	ldrb	r3, [r3, #27]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0210 	bic.w	r2, r2, #16
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0210 	orr.w	r2, r2, #16
 80016c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7f1b      	ldrb	r3, [r3, #28]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0208 	orr.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7f5b      	ldrb	r3, [r3, #29]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0204 	orr.w	r2, r2, #4
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	ea42 0103 	orr.w	r1, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001774:	7cfb      	ldrb	r3, [r7, #19]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d003      	beq.n	8001782 <HAL_CAN_ConfigFilter+0x26>
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	2b02      	cmp	r3, #2
 800177e:	f040 80c7 	bne.w	8001910 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a69      	ldr	r2, [pc, #420]	; (800192c <HAL_CAN_ConfigFilter+0x1d0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d001      	beq.n	8001790 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_CAN_ConfigFilter+0x1d4>)
 800178e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4a63      	ldr	r2, [pc, #396]	; (8001930 <HAL_CAN_ConfigFilter+0x1d4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	431a      	orrs	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2201      	movs	r2, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d123      	bne.n	800183e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	401a      	ands	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3248      	adds	r2, #72	; 0x48
 800181e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	3348      	adds	r3, #72	; 0x48
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d122      	bne.n	800188c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	431a      	orrs	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001866:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3248      	adds	r2, #72	; 0x48
 800186c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001880:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	3348      	adds	r3, #72	; 0x48
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001902:	f023 0201 	bic.w	r2, r3, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e006      	b.n	800191e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
  }
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40003400 	.word	0x40003400
 8001930:	40006400 	.word	0x40006400

08001934 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d12e      	bne.n	80019a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fb4a 	bl	8000ff8 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001966:	e012      	b.n	800198e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001968:	f7ff fb46 	bl	8000ff8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b0a      	cmp	r3, #10
 8001974:	d90b      	bls.n	800198e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2205      	movs	r2, #5
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e012      	b.n	80019b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e5      	bne.n	8001968 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e006      	b.n	80019b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
  }
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d002      	beq.n	80019da <HAL_CAN_ActivateNotification+0x1e>
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d109      	bne.n	80019ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6959      	ldr	r1, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e006      	b.n	80019fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d07c      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f97d 	bl	8001d6a <HAL_CAN_TxMailbox0CompleteCallback>
 8001a70:	e016      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	e00c      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e002      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f983 	bl	8001da6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f95d 	bl	8001d7e <HAL_CAN_TxMailbox1CompleteCallback>
 8001ac4:	e016      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	e00c      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	e002      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f963 	bl	8001dba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d024      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f93d 	bl	8001d92 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b18:	e016      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e00c      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	e002      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f943 	bl	8001dce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2208      	movs	r2, #8
 8001b86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f92a 	bl	8001de2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f00c fb28 	bl	800e1fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f902 	bl	8001df6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f00c fb14 	bl	800e238 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f8ec 	bl	8001e0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00b      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8e5 	bl	8001e1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d06c      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03d      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d038      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd6:	2b30      	cmp	r3, #48	; 0x30
 8001cd8:	d017      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x302>
 8001cda:	2b30      	cmp	r3, #48	; 0x30
 8001cdc:	d804      	bhi.n	8001ce8 <HAL_CAN_IRQHandler+0x2e0>
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d009      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x2ee>
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d00c      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ce6:	e024      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001ce8:	2b50      	cmp	r3, #80	; 0x50
 8001cea:	d018      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x316>
 8001cec:	2b60      	cmp	r3, #96	; 0x60
 8001cee:	d01b      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x320>
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d00f      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001cf4:	e01d      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfe:	e018      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d08:	e013      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d12:	e00e      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d1c:	e009      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d26:	e004      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f868 	bl	8001e32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00
 8001e8c:	05fa0000 	.word	0x05fa0000

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff4c 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fca:	f7ff ff61 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8001fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f7ff ffb1 	bl	8001f3c <NVIC_EncodePriority>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff80 	bl	8001ee8 <__NVIC_SetPriority>
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff54 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7fe ffee 	bl	8000ff8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e099      	b.n	800215c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002048:	e00f      	b.n	800206a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204a:	f7fe ffd5 	bl	8000ff8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b05      	cmp	r3, #5
 8002056:	d908      	bls.n	800206a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2203      	movs	r2, #3
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e078      	b.n	800215c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e8      	bne.n	800204a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_DMA_Init+0x158>)
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4313      	orrs	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d117      	bne.n	800212e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fb09 	bl	8002728 <DMA_CheckFifoParam>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800212a:	2301      	movs	r3, #1
 800212c:	e016      	b.n	800215c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fac0 	bl	80026bc <DMA_CalcBaseAndBitshift>
 800213c:	4603      	mov	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	223f      	movs	r2, #63	; 0x3f
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	e010803f 	.word	0xe010803f

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_DMA_Start_IT+0x26>
 800218a:	2302      	movs	r3, #2
 800218c:	e048      	b.n	8002220 <HAL_DMA_Start_IT+0xb8>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d137      	bne.n	8002212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa52 	bl	8002660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	223f      	movs	r2, #63	; 0x3f
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0216 	orr.w	r2, r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002236:	f7fe fedf 	bl	8000ff8 <HAL_GetTick>
 800223a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e052      	b.n	8002300 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0216 	bic.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_DMA_Abort+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	e013      	b.n	80022d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ac:	f7fe fea4 	bl	8000ff8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d90c      	bls.n	80022d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e015      	b.n	8002300 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e4      	bne.n	80022ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	223f      	movs	r2, #63	; 0x3f
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002358:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_DMA_IRQHandler+0x258>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_DMA_IRQHandler+0x25c>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2208      	movs	r2, #8
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2208      	movs	r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2210      	movs	r2, #16
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2210      	movs	r2, #16
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d018      	beq.n	800248e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e01f      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e016      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2220      	movs	r2, #32
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808e 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8086 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2220      	movs	r2, #32
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d136      	bne.n	8002564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x1da>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07d      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
        }
        return;
 8002562:	e078      	b.n	8002656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d108      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d030      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e02b      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d027      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e022      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0210 	bic.w	r2, r2, #16
 80025c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d032      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d022      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	429a      	cmp	r2, r3
 8002620:	d307      	bcc.n	8002632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_DMA_IRQHandler+0x2ca>
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002632:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e000      	b.n	8002658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002656:	bf00      	nop
    }
  }
}
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop

08002660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d108      	bne.n	80026a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269e:	e007      	b.n	80026b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3b10      	subs	r3, #16
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <DMA_CalcBaseAndBitshift+0x60>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <DMA_CalcBaseAndBitshift+0x64>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d908      	bls.n	80026fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	1d1a      	adds	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58
 80026fa:	e006      	b.n	800270a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	08015388 	.word	0x08015388
 8002724:	fffffc00 	.word	0xfffffc00

08002728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d855      	bhi.n	80027f4 <DMA_CheckFifoParam+0xcc>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <DMA_CheckFifoParam+0x28>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002773 	.word	0x08002773
 8002758:	08002761 	.word	0x08002761
 800275c:	080027f5 	.word	0x080027f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d045      	beq.n	80027f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e042      	b.n	80027f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277a:	d13f      	bne.n	80027fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e03c      	b.n	80027fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d121      	bne.n	80027d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d836      	bhi.n	8002800 <DMA_CheckFifoParam+0xd8>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x70>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027af 	.word	0x080027af
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	080027c1 	.word	0x080027c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e02f      	b.n	800280e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e021      	b.n	8002804 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c8:	d11e      	bne.n	8002808 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ce:	e01b      	b.n	8002808 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <DMA_CheckFifoParam+0xb4>
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d003      	beq.n	80027e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027da:	e018      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e015      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      break;
 80027f2:	e00b      	b.n	800280c <DMA_CheckFifoParam+0xe4>
      break;
 80027f4:	bf00      	nop
 80027f6:	e00a      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027f8:	bf00      	nop
 80027fa:	e008      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027fc:	bf00      	nop
 80027fe:	e006      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002800:	bf00      	nop
 8002802:	e004      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002804:	bf00      	nop
 8002806:	e002      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;   
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 800280c:	bf00      	nop
    }
  } 
  
  return status; 
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e175      	b.n	8002b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 8164 	bne.w	8002b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00b      	beq.n	800287a <HAL_GPIO_Init+0x5e>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286e:	2b11      	cmp	r3, #17
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b12      	cmp	r3, #18
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x100>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b12      	cmp	r3, #18
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80be 	beq.w	8002b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a64      	ldr	r2, [pc, #400]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b62      	ldr	r3, [pc, #392]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029be:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_GPIO_Init+0x324>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_GPIO_Init+0x328>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d037      	beq.n	8002a5a <HAL_GPIO_Init+0x23e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_GPIO_Init+0x23a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a55      	ldr	r2, [pc, #340]	; (8002b4c <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02b      	beq.n	8002a52 <HAL_GPIO_Init+0x236>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_GPIO_Init+0x334>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d025      	beq.n	8002a4e <HAL_GPIO_Init+0x232>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a53      	ldr	r2, [pc, #332]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x22e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_GPIO_Init+0x33c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x22a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_GPIO_Init+0x340>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a50      	ldr	r2, [pc, #320]	; (8002b60 <HAL_GPIO_Init+0x344>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x348>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x34c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a32:	2309      	movs	r3, #9
 8002a34:	e012      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a36:	230a      	movs	r3, #10
 8002a38:	e010      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	e00e      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a42:	2306      	movs	r3, #6
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a6c:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_GPIO_Init+0x324>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a7a:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9e:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa4:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f ae86 	bls.w	800283c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	3724      	adds	r7, #36	; 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40021c00 	.word	0x40021c00
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022400 	.word	0x40022400
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f006 f92a 	bl	8008e1c <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f005 ff42 	bl	8008a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d104      	bne.n	8002c6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_I2C_Init+0x11c>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	021a      	lsls	r2, r3, #8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	02008000 	.word	0x02008000

08002cf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b20      	cmp	r3, #32
 8002d08:	d138      	bne.n	8002d7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e032      	b.n	8002d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2224      	movs	r2, #36	; 0x24
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	e000      	b.n	8002d7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
  }
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d139      	bne.n	8002e14 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e033      	b.n	8002e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2224      	movs	r2, #36	; 0x24
 8002dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ddc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e10:	2300      	movs	r3, #0
 8002e12:	e000      	b.n	8002e16 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e14:	2302      	movs	r3, #2
  }
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e38:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_PWREx_EnableOverDrive+0x98>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1d      	ldr	r2, [pc, #116]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e52:	f7fe f8d1 	bl	8000ff8 <HAL_GetTick>
 8002e56:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e58:	e009      	b.n	8002e6e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e5a:	f7fe f8cd 	bl	8000ff8 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e68:	d901      	bls.n	8002e6e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e022      	b.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7a:	d1ee      	bne.n	8002e5a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0f      	ldr	r2, [pc, #60]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7fe f8b6 	bl	8000ff8 <HAL_GetTick>
 8002e8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e8e:	e009      	b.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e90:	f7fe f8b2 	bl	8000ff8 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9e:	d901      	bls.n	8002ea4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e007      	b.n	8002eb4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ea4:	4b06      	ldr	r3, [pc, #24]	; (8002ec0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002eb0:	d1ee      	bne.n	8002e90 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40007000 	.word	0x40007000

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e29b      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 8087 	beq.w	8002ff6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ee8:	4b96      	ldr	r3, [pc, #600]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 030c 	and.w	r3, r3, #12
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d00c      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef4:	4b93      	ldr	r3, [pc, #588]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d112      	bne.n	8002f26 <HAL_RCC_OscConfig+0x62>
 8002f00:	4b90      	ldr	r3, [pc, #576]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f0c:	d10b      	bne.n	8002f26 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0e:	4b8d      	ldr	r3, [pc, #564]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d06c      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x130>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d168      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e275      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2e:	d106      	bne.n	8002f3e <HAL_RCC_OscConfig+0x7a>
 8002f30:	4b84      	ldr	r3, [pc, #528]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a83      	ldr	r2, [pc, #524]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3a:	6013      	str	r3, [r2, #0]
 8002f3c:	e02e      	b.n	8002f9c <HAL_RCC_OscConfig+0xd8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x9c>
 8002f46:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7b      	ldr	r2, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xd8>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0xc0>
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a75      	ldr	r2, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a72      	ldr	r2, [pc, #456]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e00b      	b.n	8002f9c <HAL_RCC_OscConfig+0xd8>
 8002f84:	4b6f      	ldr	r3, [pc, #444]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a6e      	ldr	r2, [pc, #440]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a6b      	ldr	r2, [pc, #428]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d013      	beq.n	8002fcc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe f828 	bl	8000ff8 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fac:	f7fe f824 	bl	8000ff8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e229      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b61      	ldr	r3, [pc, #388]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0xe8>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe f814 	bl	8000ff8 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd4:	f7fe f810 	bl	8000ff8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b64      	cmp	r3, #100	; 0x64
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e215      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe6:	4b57      	ldr	r3, [pc, #348]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x110>
 8002ff2:	e000      	b.n	8002ff6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d069      	beq.n	80030d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003002:	4b50      	ldr	r3, [pc, #320]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00b      	beq.n	8003026 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800300e:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b08      	cmp	r3, #8
 8003018:	d11c      	bne.n	8003054 <HAL_RCC_OscConfig+0x190>
 800301a:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d116      	bne.n	8003054 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	4b47      	ldr	r3, [pc, #284]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_RCC_OscConfig+0x17a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e1e9      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800303e:	4b41      	ldr	r3, [pc, #260]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	493d      	ldr	r1, [pc, #244]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	e040      	b.n	80030d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d023      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800305c:	4b39      	ldr	r3, [pc, #228]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a38      	ldr	r2, [pc, #224]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fd ffc6 	bl	8000ff8 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003070:	f7fd ffc2 	bl	8000ff8 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1c7      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b30      	ldr	r3, [pc, #192]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0f0      	beq.n	8003070 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4929      	ldr	r1, [pc, #164]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	600b      	str	r3, [r1, #0]
 80030a2:	e018      	b.n	80030d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a26      	ldr	r2, [pc, #152]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fd ffa2 	bl	8000ff8 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fd ff9e 	bl	8000ff8 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e1a3      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1e      	ldr	r3, [pc, #120]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d038      	beq.n	8003154 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d019      	beq.n	800311e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ee:	4a15      	ldr	r2, [pc, #84]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f6:	f7fd ff7f 	bl	8000ff8 <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fe:	f7fd ff7b 	bl	8000ff8 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e180      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0f0      	beq.n	80030fe <HAL_RCC_OscConfig+0x23a>
 800311c:	e01a      	b.n	8003154 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	4a08      	ldr	r2, [pc, #32]	; (8003144 <HAL_RCC_OscConfig+0x280>)
 8003124:	f023 0301 	bic.w	r3, r3, #1
 8003128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fd ff65 	bl	8000ff8 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	e00a      	b.n	8003148 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7fd ff61 	bl	8000ff8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d903      	bls.n	8003148 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e166      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
 8003144:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003148:	4b92      	ldr	r3, [pc, #584]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800314a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ee      	bne.n	8003132 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80a4 	beq.w	80032aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b8c      	ldr	r3, [pc, #560]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b89      	ldr	r3, [pc, #548]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a88      	ldr	r2, [pc, #544]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b86      	ldr	r3, [pc, #536]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800318a:	4b83      	ldr	r3, [pc, #524]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003196:	4b80      	ldr	r3, [pc, #512]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a7f      	ldr	r2, [pc, #508]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7fd ff29 	bl	8000ff8 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7fd ff25 	bl	8000ff8 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b64      	cmp	r3, #100	; 0x64
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e12a      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031bc:	4b76      	ldr	r3, [pc, #472]	; (8003398 <HAL_RCC_OscConfig+0x4d4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x31a>
 80031d0:	4b70      	ldr	r3, [pc, #448]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a6f      	ldr	r2, [pc, #444]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	e02d      	b.n	800323a <HAL_RCC_OscConfig+0x376>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x33c>
 80031e6:	4b6b      	ldr	r3, [pc, #428]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ea:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6713      	str	r3, [r2, #112]	; 0x70
 80031f2:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a67      	ldr	r2, [pc, #412]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80031f8:	f023 0304 	bic.w	r3, r3, #4
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	e01c      	b.n	800323a <HAL_RCC_OscConfig+0x376>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x35e>
 8003208:	4b62      	ldr	r3, [pc, #392]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a61      	ldr	r2, [pc, #388]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	4b5f      	ldr	r3, [pc, #380]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a5e      	ldr	r2, [pc, #376]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0x376>
 8003222:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a5b      	ldr	r2, [pc, #364]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	4b59      	ldr	r3, [pc, #356]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a58      	ldr	r2, [pc, #352]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d015      	beq.n	800326e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fd fed9 	bl	8000ff8 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fd fed5 	bl	8000ff8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0d8      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ee      	beq.n	800324a <HAL_RCC_OscConfig+0x386>
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fd fec3 	bl	8000ff8 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fd febf 	bl	8000ff8 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0c2      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	4b41      	ldr	r3, [pc, #260]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b3d      	ldr	r3, [pc, #244]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80ae 	beq.w	8003410 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b4:	4b37      	ldr	r3, [pc, #220]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d06d      	beq.n	800339c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d14b      	bne.n	8003360 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b32      	ldr	r3, [pc, #200]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a31      	ldr	r2, [pc, #196]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fd fe90 	bl	8000ff8 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fd fe8c 	bl	8000ff8 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e091      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	4b29      	ldr	r3, [pc, #164]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69da      	ldr	r2, [r3, #28]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	019b      	lsls	r3, r3, #6
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	085b      	lsrs	r3, r3, #1
 8003312:	3b01      	subs	r3, #1
 8003314:	041b      	lsls	r3, r3, #16
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	061b      	lsls	r3, r3, #24
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	071b      	lsls	r3, r3, #28
 8003326:	491b      	ldr	r1, [pc, #108]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fe5e 	bl	8000ff8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003340:	f7fd fe5a 	bl	8000ff8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e05f      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b10      	ldr	r3, [pc, #64]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x47c>
 800335e:	e057      	b.n	8003410 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0b      	ldr	r2, [pc, #44]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe44 	bl	8000ff8 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fe40 	bl	8000ff8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e045      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003386:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_RCC_OscConfig+0x4d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x4b0>
 8003392:	e03d      	b.n	8003410 <HAL_RCC_OscConfig+0x54c>
 8003394:	40023800 	.word	0x40023800
 8003398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800339c:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HAL_RCC_OscConfig+0x558>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d030      	beq.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d129      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d122      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033cc:	4013      	ands	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d119      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	3b01      	subs	r3, #1
 80033e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d10f      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003408:	429a      	cmp	r2, r3
 800340a:	d001      	beq.n	8003410 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023800 	.word	0x40023800

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0d0      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 020f 	bic.w	r2, r3, #15
 800344e:	4965      	ldr	r1, [pc, #404]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800348a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4a52      	ldr	r2, [pc, #328]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 800349e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d040      	beq.n	8003544 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e073      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06b      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4936      	ldr	r1, [pc, #216]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	4313      	orrs	r3, r2
 8003512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003514:	f7fd fd70 	bl	8000ff8 <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fd fd6c 	bl	8000ff8 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e053      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 030f 	and.w	r3, r3, #15
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d210      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 020f 	bic.w	r2, r3, #15
 800355a:	4922      	ldr	r1, [pc, #136]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4601      	mov	r1, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_ClockConfig+0x1c8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x1cc>)
 80035c4:	5cd3      	ldrb	r3, [r2, r3]
 80035c6:	fa21 f303 	lsr.w	r3, r1, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1d0>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_ClockConfig+0x1d4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f006 f82a 	bl	800962c <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00
 80035e8:	40023800 	.word	0x40023800
 80035ec:	08015390 	.word	0x08015390
 80035f0:	2000000c 	.word	0x2000000c
 80035f4:	20000000 	.word	0x20000000

080035f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	2300      	movs	r3, #0
 8003608:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800360e:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b04      	cmp	r3, #4
 8003618:	d007      	beq.n	800362a <HAL_RCC_GetSysClockFreq+0x32>
 800361a:	2b08      	cmp	r3, #8
 800361c:	d008      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x38>
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 808d 	bne.w	800373e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003624:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003626:	60bb      	str	r3, [r7, #8]
      break;
 8003628:	e08c      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800362a:	4b4b      	ldr	r3, [pc, #300]	; (8003758 <HAL_RCC_GetSysClockFreq+0x160>)
 800362c:	60bb      	str	r3, [r7, #8]
      break;
 800362e:	e089      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003630:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800363a:	4b45      	ldr	r3, [pc, #276]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d023      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003646:	4b42      	ldr	r3, [pc, #264]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	099b      	lsrs	r3, r3, #6
 800364c:	f04f 0400 	mov.w	r4, #0
 8003650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	ea03 0501 	and.w	r5, r3, r1
 800365c:	ea04 0602 	and.w	r6, r4, r2
 8003660:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <HAL_RCC_GetSysClockFreq+0x160>)
 8003662:	fb02 f106 	mul.w	r1, r2, r6
 8003666:	2200      	movs	r2, #0
 8003668:	fb02 f205 	mul.w	r2, r2, r5
 800366c:	440a      	add	r2, r1
 800366e:	493a      	ldr	r1, [pc, #232]	; (8003758 <HAL_RCC_GetSysClockFreq+0x160>)
 8003670:	fba5 0101 	umull	r0, r1, r5, r1
 8003674:	1853      	adds	r3, r2, r1
 8003676:	4619      	mov	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f04f 0400 	mov.w	r4, #0
 800367e:	461a      	mov	r2, r3
 8003680:	4623      	mov	r3, r4
 8003682:	f7fc fe35 	bl	80002f0 <__aeabi_uldivmod>
 8003686:	4603      	mov	r3, r0
 8003688:	460c      	mov	r4, r1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e049      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	099b      	lsrs	r3, r3, #6
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	ea03 0501 	and.w	r5, r3, r1
 80036a4:	ea04 0602 	and.w	r6, r4, r2
 80036a8:	4629      	mov	r1, r5
 80036aa:	4632      	mov	r2, r6
 80036ac:	f04f 0300 	mov.w	r3, #0
 80036b0:	f04f 0400 	mov.w	r4, #0
 80036b4:	0154      	lsls	r4, r2, #5
 80036b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ba:	014b      	lsls	r3, r1, #5
 80036bc:	4619      	mov	r1, r3
 80036be:	4622      	mov	r2, r4
 80036c0:	1b49      	subs	r1, r1, r5
 80036c2:	eb62 0206 	sbc.w	r2, r2, r6
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	f04f 0400 	mov.w	r4, #0
 80036ce:	0194      	lsls	r4, r2, #6
 80036d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036d4:	018b      	lsls	r3, r1, #6
 80036d6:	1a5b      	subs	r3, r3, r1
 80036d8:	eb64 0402 	sbc.w	r4, r4, r2
 80036dc:	f04f 0100 	mov.w	r1, #0
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	00e2      	lsls	r2, r4, #3
 80036e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036ea:	00d9      	lsls	r1, r3, #3
 80036ec:	460b      	mov	r3, r1
 80036ee:	4614      	mov	r4, r2
 80036f0:	195b      	adds	r3, r3, r5
 80036f2:	eb44 0406 	adc.w	r4, r4, r6
 80036f6:	f04f 0100 	mov.w	r1, #0
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	02a2      	lsls	r2, r4, #10
 8003700:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003704:	0299      	lsls	r1, r3, #10
 8003706:	460b      	mov	r3, r1
 8003708:	4614      	mov	r4, r2
 800370a:	4618      	mov	r0, r3
 800370c:	4621      	mov	r1, r4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f04f 0400 	mov.w	r4, #0
 8003714:	461a      	mov	r2, r3
 8003716:	4623      	mov	r3, r4
 8003718:	f7fc fdea 	bl	80002f0 <__aeabi_uldivmod>
 800371c:	4603      	mov	r3, r0
 800371e:	460c      	mov	r4, r1
 8003720:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003722:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_GetSysClockFreq+0x158>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	0c1b      	lsrs	r3, r3, #16
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	3301      	adds	r3, #1
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	fbb2 f3f3 	udiv	r3, r2, r3
 800373a:	60bb      	str	r3, [r7, #8]
      break;
 800373c:	e002      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003740:	60bb      	str	r3, [r7, #8]
      break;
 8003742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003744:	68bb      	ldr	r3, [r7, #8]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3714      	adds	r7, #20
 800374a:	46bd      	mov	sp, r7
 800374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374e:	bf00      	nop
 8003750:	40023800 	.word	0x40023800
 8003754:	00f42400 	.word	0x00f42400
 8003758:	017d7840 	.word	0x017d7840

0800375c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003760:	4b03      	ldr	r3, [pc, #12]	; (8003770 <HAL_RCC_GetHCLKFreq+0x14>)
 8003762:	681b      	ldr	r3, [r3, #0]
}
 8003764:	4618      	mov	r0, r3
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	2000000c 	.word	0x2000000c

08003774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003778:	f7ff fff0 	bl	800375c <HAL_RCC_GetHCLKFreq>
 800377c:	4601      	mov	r1, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0a9b      	lsrs	r3, r3, #10
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4a03      	ldr	r2, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	080153a0 	.word	0x080153a0

0800379c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037a0:	f7ff ffdc 	bl	800375c <HAL_RCC_GetHCLKFreq>
 80037a4:	4601      	mov	r1, r0
 80037a6:	4b05      	ldr	r3, [pc, #20]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	0b5b      	lsrs	r3, r3, #13
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	4a03      	ldr	r2, [pc, #12]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40023800 	.word	0x40023800
 80037c0:	080153a0 	.word	0x080153a0

080037c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	220f      	movs	r2, #15
 80037d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037e0:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	08db      	lsrs	r3, r3, #3
 80037fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <HAL_RCC_GetClockConfig+0x60>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 020f 	and.w	r2, r3, #15
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800
 8003824:	40023c00 	.word	0x40023c00

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b088      	sub	sp, #32
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d012      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003850:	4b69      	ldr	r3, [pc, #420]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	4a68      	ldr	r2, [pc, #416]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003856:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800385a:	6093      	str	r3, [r2, #8]
 800385c:	4b66      	ldr	r3, [pc, #408]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	4964      	ldr	r1, [pc, #400]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003872:	2301      	movs	r3, #1
 8003874:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d017      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003882:	4b5d      	ldr	r3, [pc, #372]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003888:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003890:	4959      	ldr	r1, [pc, #356]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	4313      	orrs	r3, r2
 8003894:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038a0:	d101      	bne.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038ae:	2301      	movs	r3, #1
 80038b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038be:	4b4e      	ldr	r3, [pc, #312]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	494a      	ldr	r1, [pc, #296]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80038ea:	2301      	movs	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80038fa:	2301      	movs	r3, #1
 80038fc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 808b 	beq.w	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	4a39      	ldr	r2, [pc, #228]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003916:	6413      	str	r3, [r2, #64]	; 0x40
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003924:	4b35      	ldr	r3, [pc, #212]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a34      	ldr	r2, [pc, #208]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003930:	f7fd fb62 	bl	8000ff8 <HAL_GetTick>
 8003934:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003936:	e008      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003938:	f7fd fb5e 	bl	8000ff8 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b64      	cmp	r3, #100	; 0x64
 8003944:	d901      	bls.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e38d      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003956:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d035      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	429a      	cmp	r2, r3
 8003972:	d02e      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003974:	4b20      	ldr	r3, [pc, #128]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800397c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a1d      	ldr	r2, [pc, #116]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800398a:	4b1b      	ldr	r3, [pc, #108]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a1a      	ldr	r2, [pc, #104]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003996:	4a18      	ldr	r2, [pc, #96]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d114      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fd fb26 	bl	8000ff8 <HAL_GetTick>
 80039ac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fb22 	bl	8000ff8 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e34f      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ee      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039de:	d111      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039ec:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039ee:	400b      	ands	r3, r1
 80039f0:	4901      	ldr	r1, [pc, #4]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40007000 	.word	0x40007000
 8003a00:	0ffffcff 	.word	0x0ffffcff
 8003a04:	4bb3      	ldr	r3, [pc, #716]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4ab2      	ldr	r2, [pc, #712]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a0a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a0e:	6093      	str	r3, [r2, #8]
 8003a10:	4bb0      	ldr	r3, [pc, #704]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1c:	49ad      	ldr	r1, [pc, #692]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d010      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a2e:	4ba9      	ldr	r3, [pc, #676]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a34:	4aa7      	ldr	r2, [pc, #668]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a3e:	4ba5      	ldr	r3, [pc, #660]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a40:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	49a2      	ldr	r1, [pc, #648]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a5c:	4b9d      	ldr	r3, [pc, #628]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a62:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a6a:	499a      	ldr	r1, [pc, #616]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a7e:	4b95      	ldr	r3, [pc, #596]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a8c:	4991      	ldr	r1, [pc, #580]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aa0:	4b8c      	ldr	r3, [pc, #560]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aae:	4989      	ldr	r1, [pc, #548]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ac2:	4b84      	ldr	r3, [pc, #528]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad0:	4980      	ldr	r1, [pc, #512]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ae4:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	4978      	ldr	r1, [pc, #480]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b06:	4b73      	ldr	r3, [pc, #460]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f023 020c 	bic.w	r2, r3, #12
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b14:	496f      	ldr	r1, [pc, #444]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b28:	4b6a      	ldr	r3, [pc, #424]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b36:	4967      	ldr	r1, [pc, #412]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b4a:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b50:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b58:	495e      	ldr	r1, [pc, #376]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b6c:	4b59      	ldr	r3, [pc, #356]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	4956      	ldr	r1, [pc, #344]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003b8e:	4b51      	ldr	r3, [pc, #324]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b94:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9c:	494d      	ldr	r1, [pc, #308]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003bb0:	4b48      	ldr	r3, [pc, #288]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	4945      	ldr	r1, [pc, #276]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003bd2:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be0:	493c      	ldr	r1, [pc, #240]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003bf4:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c02:	4934      	ldr	r1, [pc, #208]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d011      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c16:	4b2f      	ldr	r3, [pc, #188]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c24:	492b      	ldr	r1, [pc, #172]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c34:	d101      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00a      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c56:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c64:	491b      	ldr	r1, [pc, #108]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c78:	4b16      	ldr	r3, [pc, #88]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c88:	4912      	ldr	r1, [pc, #72]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cac:	4909      	ldr	r1, [pc, #36]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00f      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cc0:	4b04      	ldr	r3, [pc, #16]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	e002      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	4985      	ldr	r1, [pc, #532]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00b      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003cec:	4b80      	ldr	r3, [pc, #512]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cf2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfc:	497c      	ldr	r1, [pc, #496]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d005      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d12:	f040 80d6 	bne.w	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d16:	4b76      	ldr	r3, [pc, #472]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a75      	ldr	r2, [pc, #468]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d1c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d22:	f7fd f969 	bl	8000ff8 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d2a:	f7fd f965 	bl	8000ff8 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b64      	cmp	r3, #100	; 0x64
 8003d36:	d901      	bls.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e194      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d3c:	4b6c      	ldr	r3, [pc, #432]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1f0      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d021      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d11d      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d5c:	4b64      	ldr	r3, [pc, #400]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d6a:	4b61      	ldr	r3, [pc, #388]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d70:	0e1b      	lsrs	r3, r3, #24
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	019a      	lsls	r2, r3, #6
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	431a      	orrs	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	061b      	lsls	r3, r3, #24
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	071b      	lsls	r3, r3, #28
 8003d90:	4957      	ldr	r1, [pc, #348]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d004      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d02e      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc2:	d129      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003dc4:	4b4a      	ldr	r3, [pc, #296]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	0c1b      	lsrs	r3, r3, #16
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003dd2:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd8:	0f1b      	lsrs	r3, r3, #28
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	019a      	lsls	r2, r3, #6
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	041b      	lsls	r3, r3, #16
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	061b      	lsls	r3, r3, #24
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	071b      	lsls	r3, r3, #28
 8003df8:	493d      	ldr	r1, [pc, #244]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e00:	4b3b      	ldr	r3, [pc, #236]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e06:	f023 021f 	bic.w	r2, r3, #31
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	4937      	ldr	r1, [pc, #220]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e2a:	0e1b      	lsrs	r3, r3, #24
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e38:	0f1b      	lsrs	r3, r3, #28
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	019a      	lsls	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	041b      	lsls	r3, r3, #16
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	061b      	lsls	r3, r3, #24
 8003e52:	431a      	orrs	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	071b      	lsls	r3, r3, #28
 8003e58:	4925      	ldr	r1, [pc, #148]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	019a      	lsls	r2, r3, #6
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	071b      	lsls	r3, r3, #28
 8003e88:	4919      	ldr	r1, [pc, #100]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e90:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e9c:	f7fd f8ac 	bl	8000ff8 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ea4:	f7fd f8a8 	bl	8000ff8 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b64      	cmp	r3, #100	; 0x64
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0d7      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 80cd 	bne.w	8004064 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a08      	ldr	r2, [pc, #32]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed6:	f7fd f88f 	bl	8000ff8 <HAL_GetTick>
 8003eda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ede:	f7fd f88b 	bl	8000ff8 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b64      	cmp	r3, #100	; 0x64
 8003eea:	d903      	bls.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ba      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003ef0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ef4:	4b5e      	ldr	r3, [pc, #376]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f00:	d0ed      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d02e      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d12a      	bne.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f2a:	4b51      	ldr	r3, [pc, #324]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f30:	0c1b      	lsrs	r3, r3, #16
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f38:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	0f1b      	lsrs	r3, r3, #28
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	019a      	lsls	r2, r3, #6
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	041b      	lsls	r3, r3, #16
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	061b      	lsls	r3, r3, #24
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	071b      	lsls	r3, r3, #28
 8003f5e:	4944      	ldr	r1, [pc, #272]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f74:	3b01      	subs	r3, #1
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	493d      	ldr	r1, [pc, #244]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d022      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f94:	d11d      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	0e1b      	lsrs	r3, r3, #24
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fa4:	4b32      	ldr	r3, [pc, #200]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003faa:	0f1b      	lsrs	r3, r3, #28
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	019a      	lsls	r2, r3, #6
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	041b      	lsls	r3, r3, #16
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	061b      	lsls	r3, r3, #24
 8003fc4:	431a      	orrs	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	071b      	lsls	r3, r3, #28
 8003fca:	4929      	ldr	r1, [pc, #164]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d028      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fde:	4b24      	ldr	r3, [pc, #144]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe4:	0e1b      	lsrs	r3, r3, #24
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fec:	4b20      	ldr	r3, [pc, #128]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	0c1b      	lsrs	r3, r3, #16
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	019a      	lsls	r2, r3, #6
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	041b      	lsls	r3, r3, #16
 8004004:	431a      	orrs	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	4917      	ldr	r1, [pc, #92]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800401a:	4b15      	ldr	r3, [pc, #84]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800401c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004020:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004028:	4911      	ldr	r1, [pc, #68]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004030:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a0e      	ldr	r2, [pc, #56]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fc ffdc 	bl	8000ff8 <HAL_GetTick>
 8004040:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004044:	f7fc ffd8 	bl	8000ff8 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	d901      	bls.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e007      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004062:	d1ef      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023800 	.word	0x40023800

08004074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e084      	b.n	8004190 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f005 f80d 	bl	80090c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2202      	movs	r2, #2
 80040aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040bc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040c6:	d902      	bls.n	80040ce <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	e002      	b.n	80040d4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80040dc:	d007      	beq.n	80040ee <HAL_SPI_Init+0x7a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040e6:	d002      	beq.n	80040ee <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10b      	bne.n	800410e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fe:	d903      	bls.n	8004108 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	631a      	str	r2, [r3, #48]	; 0x30
 8004106:	e002      	b.n	800410e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	ea42 0103 	orr.w	r1, r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0204 	and.w	r2, r3, #4
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	ea42 0103 	orr.w	r1, r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	69da      	ldr	r2, [r3, #28]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800417e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	; 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041a6:	2301      	movs	r3, #1
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d101      	bne.n	80041be <HAL_SPI_TransmitReceive+0x26>
 80041ba:	2302      	movs	r3, #2
 80041bc:	e1fb      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x41e>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041c6:	f7fc ff17 	bl	8000ff8 <HAL_GetTick>
 80041ca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80041da:	887b      	ldrh	r3, [r7, #2]
 80041dc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80041e2:	7efb      	ldrb	r3, [r7, #27]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d00e      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x6e>
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ee:	d106      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d102      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x66>
 80041f8:	7efb      	ldrb	r3, [r7, #27]
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d003      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004204:	e1cd      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x80>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d002      	beq.n	8004218 <HAL_SPI_TransmitReceive+0x80>
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800421e:	e1c0      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b04      	cmp	r3, #4
 800422a:	d003      	beq.n	8004234 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2205      	movs	r2, #5
 8004230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	887a      	ldrh	r2, [r7, #2]
 800425a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	887a      	ldrh	r2, [r7, #2]
 8004260:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004276:	d802      	bhi.n	800427e <HAL_SPI_TransmitReceive+0xe6>
 8004278:	8a3b      	ldrh	r3, [r7, #16]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d908      	bls.n	8004290 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800428c:	605a      	str	r2, [r3, #4]
 800428e:	e007      	b.n	80042a0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800429e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042aa:	2b40      	cmp	r3, #64	; 0x40
 80042ac:	d007      	beq.n	80042be <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c6:	d97c      	bls.n	80043c2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <HAL_SPI_TransmitReceive+0x13e>
 80042d0:	8a7b      	ldrh	r3, [r7, #18]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d169      	bne.n	80043aa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042da:	881a      	ldrh	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	1c9a      	adds	r2, r3, #2
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042fa:	e056      	b.n	80043aa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b02      	cmp	r3, #2
 8004308:	d11b      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x1aa>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d016      	beq.n	8004342 <HAL_SPI_TransmitReceive+0x1aa>
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	2b01      	cmp	r3, #1
 8004318:	d113      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	881a      	ldrh	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d11c      	bne.n	800438a <HAL_SPI_TransmitReceive+0x1f2>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d016      	beq.n	800438a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	b292      	uxth	r2, r2
 8004368:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	1c9a      	adds	r2, r3, #2
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004386:	2301      	movs	r3, #1
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800438a:	f7fc fe35 	bl	8000ff8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004396:	429a      	cmp	r2, r3
 8004398:	d807      	bhi.n	80043aa <HAL_SPI_TransmitReceive+0x212>
 800439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d003      	beq.n	80043aa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043a8:	e0fb      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1a3      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x164>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d19d      	bne.n	80042fc <HAL_SPI_TransmitReceive+0x164>
 80043c0:	e0df      	b.n	8004582 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_SPI_TransmitReceive+0x23a>
 80043ca:	8a7b      	ldrh	r3, [r7, #18]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 80cb 	bne.w	8004568 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d912      	bls.n	8004402 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	881a      	ldrh	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b02      	subs	r3, #2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004400:	e0b2      	b.n	8004568 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	7812      	ldrb	r2, [r2, #0]
 800440e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b01      	subs	r3, #1
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004428:	e09e      	b.n	8004568 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d134      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x30a>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800443c:	b29b      	uxth	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d02f      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x30a>
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	2b01      	cmp	r3, #1
 8004446:	d12c      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b01      	cmp	r3, #1
 8004450:	d912      	bls.n	8004478 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	881a      	ldrh	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	1c9a      	adds	r2, r3, #2
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800446c:	b29b      	uxth	r3, r3
 800446e:	3b02      	subs	r3, #2
 8004470:	b29a      	uxth	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004476:	e012      	b.n	800449e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d148      	bne.n	8004542 <HAL_SPI_TransmitReceive+0x3aa>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d042      	beq.n	8004542 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d923      	bls.n	8004510 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	b292      	uxth	r2, r2
 80044d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044da:	1c9a      	adds	r2, r3, #2
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b02      	subs	r3, #2
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d81f      	bhi.n	800453e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	e016      	b.n	800453e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f103 020c 	add.w	r2, r3, #12
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800453e:	2301      	movs	r3, #1
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004542:	f7fc fd59 	bl	8000ff8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800454e:	429a      	cmp	r2, r3
 8004550:	d803      	bhi.n	800455a <HAL_SPI_TransmitReceive+0x3c2>
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d102      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x3c8>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004566:	e01c      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	f47f af5b 	bne.w	800442a <HAL_SPI_TransmitReceive+0x292>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	f47f af54 	bne.w	800442a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fcd0 	bl	8004f2c <SPI_EndRxTxTransaction>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	661a      	str	r2, [r3, #96]	; 0x60
 800459e:	e000      	b.n	80045a2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3728      	adds	r7, #40	; 0x28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_SPI_TransmitReceive_DMA+0x20>
 80045dc:	2302      	movs	r3, #2
 80045de:	e16c      	b.n	80048ba <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80045ee:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80045f6:	7dbb      	ldrb	r3, [r7, #22]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d00d      	beq.n	8004618 <HAL_SPI_TransmitReceive_DMA+0x58>
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004602:	d106      	bne.n	8004612 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <HAL_SPI_TransmitReceive_DMA+0x52>
 800460c:	7dbb      	ldrb	r3, [r7, #22]
 800460e:	2b04      	cmp	r3, #4
 8004610:	d002      	beq.n	8004618 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004612:	2302      	movs	r3, #2
 8004614:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004616:	e14b      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800462e:	e13f      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b04      	cmp	r3, #4
 800463a:	d003      	beq.n	8004644 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2205      	movs	r2, #5
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	887a      	ldrh	r2, [r7, #2]
 8004654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	887a      	ldrh	r2, [r7, #2]
 800465a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	887a      	ldrh	r2, [r7, #2]
 8004666:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	887a      	ldrh	r2, [r7, #2]
 800466e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800468c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004696:	d908      	bls.n	80046aa <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	e06f      	b.n	800478a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046b8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c4:	d126      	bne.n	8004714 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046e0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	085b      	lsrs	r3, r3, #1
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046f0:	e010      	b.n	8004714 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004700:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	b29b      	uxth	r3, r3
 800470c:	3301      	adds	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d134      	bne.n	800478a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800472e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004736:	b29b      	uxth	r3, r3
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d111      	bne.n	8004764 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800474e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004756:	b29b      	uxth	r3, r3
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	b29a      	uxth	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004762:	e012      	b.n	800478a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004772:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800477a:	b29b      	uxth	r3, r3
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	b29b      	uxth	r3, r3
 8004780:	3301      	adds	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b04      	cmp	r3, #4
 8004794:	d108      	bne.n	80047a8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	4a4a      	ldr	r2, [pc, #296]	; (80048c4 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	4a49      	ldr	r2, [pc, #292]	; (80048c8 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80047a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80047a6:	e007      	b.n	80047b8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ac:	4a47      	ldr	r2, [pc, #284]	; (80048cc <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80047ae:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b4:	4a46      	ldr	r2, [pc, #280]	; (80048d0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80047b6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	4a45      	ldr	r2, [pc, #276]	; (80048d4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80047be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	2200      	movs	r2, #0
 80047c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	4619      	mov	r1, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	461a      	mov	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f7fd fcc1 	bl	8002168 <HAL_DMA_Start_IT>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00c      	beq.n	8004806 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047f0:	f043 0210 	orr.w	r2, r3, #16
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004804:	e054      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f042 0201 	orr.w	r2, r2, #1
 8004814:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	2200      	movs	r2, #0
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004822:	2200      	movs	r2, #0
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	2200      	movs	r2, #0
 800482c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	2200      	movs	r2, #0
 8004834:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	4619      	mov	r1, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	330c      	adds	r3, #12
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484c:	b29b      	uxth	r3, r3
 800484e:	f7fd fc8b 	bl	8002168 <HAL_DMA_Start_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00c      	beq.n	8004872 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485c:	f043 0210 	orr.w	r2, r3, #16
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004870:	e01e      	b.n	80048b0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d007      	beq.n	8004890 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0220 	orr.w	r2, r2, #32
 800489e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685a      	ldr	r2, [r3, #4]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f042 0202 	orr.w	r2, r2, #2
 80048ae:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	08004c2d 	.word	0x08004c2d
 80048c8:	08004b15 	.word	0x08004b15
 80048cc:	08004c49 	.word	0x08004c49
 80048d0:	08004b9b 	.word	0x08004b9b
 80048d4:	08004c65 	.word	0x08004c65

080048d8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	099b      	lsrs	r3, r3, #6
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10f      	bne.n	800491c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	099b      	lsrs	r3, r3, #6
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d004      	beq.n	800491c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	4798      	blx	r3
    return;
 800491a:	e0d8      	b.n	8004ace <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	085b      	lsrs	r3, r3, #1
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_SPI_IRQHandler+0x66>
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	09db      	lsrs	r3, r3, #7
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	4798      	blx	r3
    return;
 800493c:	e0c7      	b.n	8004ace <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	095b      	lsrs	r3, r3, #5
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10c      	bne.n	8004964 <HAL_SPI_IRQHandler+0x8c>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	099b      	lsrs	r3, r3, #6
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <HAL_SPI_IRQHandler+0x8c>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	0a1b      	lsrs	r3, r3, #8
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	f000 80b5 	beq.w	8004ace <HAL_SPI_IRQHandler+0x1f6>
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80ae 	beq.w	8004ace <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	099b      	lsrs	r3, r3, #6
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d023      	beq.n	80049c6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b03      	cmp	r3, #3
 8004988:	d011      	beq.n	80049ae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	f043 0204 	orr.w	r2, r3, #4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	e00b      	b.n	80049c6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
        return;
 80049c4:	e083      	b.n	8004ace <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d014      	beq.n	80049fc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	0a1b      	lsrs	r3, r3, #8
 8004a00:	f003 0301 	and.w	r3, r3, #1
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00c      	beq.n	8004a22 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0c:	f043 0208 	orr.w	r2, r3, #8
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d050      	beq.n	8004acc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a38:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <HAL_SPI_IRQHandler+0x17e>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d034      	beq.n	8004ac0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0203 	bic.w	r2, r2, #3
 8004a64:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d011      	beq.n	8004a92 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a72:	4a18      	ldr	r2, [pc, #96]	; (8004ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8004a74:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fd fc44 	bl	8002308 <HAL_DMA_Abort_IT>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d005      	beq.n	8004a92 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d016      	beq.n	8004ac8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9e:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <HAL_SPI_IRQHandler+0x1fc>)
 8004aa0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fd fc2e 	bl	8002308 <HAL_DMA_Abort_IT>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004abe:	e003      	b.n	8004ac8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f004 f99f 	bl	8008e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ac6:	e000      	b.n	8004aca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ac8:	bf00      	nop
    return;
 8004aca:	bf00      	nop
 8004acc:	bf00      	nop
  }
}
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08004ca5 	.word	0x08004ca5

08004ad8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b22:	f7fc fa69 	bl	8000ff8 <HAL_GetTick>
 8004b26:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d02a      	beq.n	8004b8e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0220 	bic.w	r2, r2, #32
 8004b46:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0203 	bic.w	r2, r2, #3
 8004b56:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	2164      	movs	r1, #100	; 0x64
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f98d 	bl	8004e7c <SPI_EndRxTransaction>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f004 f93c 	bl	8008e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004b8c:	e002      	b.n	8004b94 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ffa2 	bl	8004ad8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ba8:	f7fc fa26 	bl	8000ff8 <HAL_GetTick>
 8004bac:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbc:	d030      	beq.n	8004c20 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f022 0220 	bic.w	r2, r2, #32
 8004bcc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	2164      	movs	r1, #100	; 0x64
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f9aa 	bl	8004f2c <SPI_EndRxTxTransaction>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 0203 	bic.w	r2, r2, #3
 8004bf8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f004 f8f3 	bl	8008e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c1e:	e002      	b.n	8004c26 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f004 f8e1 	bl	8008de8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f7ff ff56 	bl	8004aec <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff52 	bl	8004b00 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0203 	bic.w	r2, r2, #3
 8004c80:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0210 	orr.w	r2, r3, #16
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f004 f8b4 	bl	8008e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c9c:	bf00      	nop
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f004 f89f 	bl	8008e04 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	603b      	str	r3, [r7, #0]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cde:	e04c      	b.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d048      	beq.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ce8:	f7fc f986 	bl	8000ff8 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d902      	bls.n	8004cfe <SPI_WaitFlagStateUntilTimeout+0x30>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d13d      	bne.n	8004d7a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d16:	d111      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d20:	d004      	beq.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d2a:	d107      	bne.n	8004d3c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d44:	d10f      	bne.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e00f      	b.n	8004d9a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4013      	ands	r3, r2
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	bf0c      	ite	eq
 8004d8a:	2301      	moveq	r3, #1
 8004d8c:	2300      	movne	r3, #0
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d1a3      	bne.n	8004ce0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	60f8      	str	r0, [r7, #12]
 8004daa:	60b9      	str	r1, [r7, #8]
 8004dac:	607a      	str	r2, [r7, #4]
 8004dae:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004db0:	e057      	b.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004db8:	d106      	bne.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d103      	bne.n	8004dc8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dce:	d048      	beq.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dd0:	f7fc f912 	bl	8000ff8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d902      	bls.n	8004de6 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d13d      	bne.n	8004e62 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dfe:	d111      	bne.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e08:	d004      	beq.n	8004e14 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e12:	d107      	bne.n	8004e24 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e2c:	d10f      	bne.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e008      	b.n	8004e74 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d19f      	bne.n	8004db2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e90:	d111      	bne.n	8004eb6 <SPI_EndRxTransaction+0x3a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d004      	beq.n	8004ea6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d107      	bne.n	8004eb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2180      	movs	r1, #128	; 0x80
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff ff04 	bl	8004cce <SPI_WaitFlagStateUntilTimeout>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e023      	b.n	8004f24 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee4:	d11d      	bne.n	8004f22 <SPI_EndRxTransaction+0xa6>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eee:	d004      	beq.n	8004efa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ef8:	d113      	bne.n	8004f22 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f7ff ff4b 	bl	8004da2 <SPI_WaitFifoStateUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d007      	beq.n	8004f22 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e000      	b.n	8004f24 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff ff2c 	bl	8004da2 <SPI_WaitFifoStateUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	f043 0220 	orr.w	r2, r3, #32
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e027      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2200      	movs	r2, #0
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f7ff feaf 	bl	8004cce <SPI_WaitFlagStateUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7a:	f043 0220 	orr.w	r2, r3, #32
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e014      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f7ff ff05 	bl	8004da2 <SPI_WaitFifoStateUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa2:	f043 0220 	orr.w	r2, r3, #32
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e000      	b.n	8004fb0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e01d      	b.n	8005006 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d106      	bne.n	8004fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f005 f956 	bl	800a290 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f000 fc16 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_TIM_Base_Start_IT+0x50>)
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b06      	cmp	r3, #6
 8005038:	d00b      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x42>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005040:	d007      	beq.n	8005052 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	00010007 	.word	0x00010007

08005064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e01d      	b.n	80050b2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f005 f9b8 	bl	800a400 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f000 fbc0 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
	...

080050bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2201      	movs	r2, #1
 80050cc:	6839      	ldr	r1, [r7, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 ff42 	bl	8005f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a17      	ldr	r2, [pc, #92]	; (8005138 <HAL_TIM_PWM_Start+0x7c>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <HAL_TIM_PWM_Start+0x2c>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_TIM_PWM_Start+0x80>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d101      	bne.n	80050ec <HAL_TIM_PWM_Start+0x30>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <HAL_TIM_PWM_Start+0x32>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d007      	beq.n	8005102 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <HAL_TIM_PWM_Start+0x84>)
 800510a:	4013      	ands	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b06      	cmp	r3, #6
 8005112:	d00b      	beq.n	800512c <HAL_TIM_PWM_Start+0x70>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511a:	d007      	beq.n	800512c <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40010400 	.word	0x40010400
 8005140:	00010007 	.word	0x00010007

08005144 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 fefe 	bl	8005f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a22      	ldr	r2, [pc, #136]	; (80051ec <HAL_TIM_PWM_Stop+0xa8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIM_PWM_Stop+0x2c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a21      	ldr	r2, [pc, #132]	; (80051f0 <HAL_TIM_PWM_Stop+0xac>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_TIM_PWM_Stop+0x30>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_TIM_PWM_Stop+0x32>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d017      	beq.n	80051aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6a1a      	ldr	r2, [r3, #32]
 8005180:	f241 1311 	movw	r3, #4369	; 0x1111
 8005184:	4013      	ands	r3, r2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <HAL_TIM_PWM_Stop+0x66>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6a1a      	ldr	r2, [r3, #32]
 8005190:	f240 4344 	movw	r3, #1092	; 0x444
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d107      	bne.n	80051aa <HAL_TIM_PWM_Stop+0x66>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <HAL_TIM_PWM_Stop+0x96>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a1a      	ldr	r2, [r3, #32]
 80051c0:	f240 4344 	movw	r3, #1092	; 0x444
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <HAL_TIM_PWM_Stop+0x96>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0201 	bic.w	r2, r2, #1
 80051d8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40010000 	.word	0x40010000
 80051f0:	40010400 	.word	0x40010400

080051f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d122      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d11b      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0202 	mvn.w	r2, #2
 8005220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fad8 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 faca 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fadb 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d122      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d11b      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0204 	mvn.w	r2, #4
 8005274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 faae 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 faa0 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fab1 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d122      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d11b      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0208 	mvn.w	r2, #8
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa84 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa76 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa87 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b10      	cmp	r3, #16
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0210 	mvn.w	r2, #16
 800531c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2208      	movs	r2, #8
 8005322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa5a 	bl	80057ec <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa4c 	bl	80057d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa5d 	bl	8005800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0201 	mvn.w	r2, #1
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f003 fd98 	bl	8008ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 ff16 	bl	80061d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053b2:	d10e      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d107      	bne.n	80053d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 ff09 	bl	80061e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d10e      	bne.n	80053fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	d107      	bne.n	80053fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa0b 	bl	8005814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	2b20      	cmp	r3, #32
 800540a:	d10e      	bne.n	800542a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b20      	cmp	r3, #32
 8005418:	d107      	bne.n	800542a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f06f 0220 	mvn.w	r2, #32
 8005422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fec9 	bl	80061bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542a:	bf00      	nop
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
	...

08005434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800544a:	2302      	movs	r3, #2
 800544c:	e105      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x226>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b14      	cmp	r3, #20
 8005462:	f200 80f0 	bhi.w	8005646 <HAL_TIM_PWM_ConfigChannel+0x212>
 8005466:	a201      	add	r2, pc, #4	; (adr r2, 800546c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546c:	080054c1 	.word	0x080054c1
 8005470:	08005647 	.word	0x08005647
 8005474:	08005647 	.word	0x08005647
 8005478:	08005647 	.word	0x08005647
 800547c:	08005501 	.word	0x08005501
 8005480:	08005647 	.word	0x08005647
 8005484:	08005647 	.word	0x08005647
 8005488:	08005647 	.word	0x08005647
 800548c:	08005543 	.word	0x08005543
 8005490:	08005647 	.word	0x08005647
 8005494:	08005647 	.word	0x08005647
 8005498:	08005647 	.word	0x08005647
 800549c:	08005583 	.word	0x08005583
 80054a0:	08005647 	.word	0x08005647
 80054a4:	08005647 	.word	0x08005647
 80054a8:	08005647 	.word	0x08005647
 80054ac:	080055c5 	.word	0x080055c5
 80054b0:	08005647 	.word	0x08005647
 80054b4:	08005647 	.word	0x08005647
 80054b8:	08005647 	.word	0x08005647
 80054bc:	08005605 	.word	0x08005605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa4e 	bl	8005968 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 0204 	bic.w	r2, r2, #4
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691a      	ldr	r2, [r3, #16]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	619a      	str	r2, [r3, #24]
      break;
 80054fe:	e0a3      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 faa0 	bl	8005a4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800551a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699a      	ldr	r2, [r3, #24]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6999      	ldr	r1, [r3, #24]
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	021a      	lsls	r2, r3, #8
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	619a      	str	r2, [r3, #24]
      break;
 8005540:	e082      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 faf7 	bl	8005b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0208 	orr.w	r2, r2, #8
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0204 	bic.w	r2, r2, #4
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691a      	ldr	r2, [r3, #16]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	61da      	str	r2, [r3, #28]
      break;
 8005580:	e062      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68b9      	ldr	r1, [r7, #8]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 fb4d 	bl	8005c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800559c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	69d9      	ldr	r1, [r3, #28]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	61da      	str	r2, [r3, #28]
      break;
 80055c2:	e041      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68b9      	ldr	r1, [r7, #8]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fb84 	bl	8005cd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0208 	orr.w	r2, r2, #8
 80055de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0204 	bic.w	r2, r2, #4
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005602:	e021      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68b9      	ldr	r1, [r7, #8]
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fbb6 	bl	8005d7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800561e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800562e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	021a      	lsls	r2, r3, #8
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8005646:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop

08005664 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_TIM_ConfigClockSource+0x18>
 8005678:	2302      	movs	r3, #2
 800567a:	e0a6      	b.n	80057ca <HAL_TIM_ConfigClockSource+0x166>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	4b4f      	ldr	r3, [pc, #316]	; (80057d4 <HAL_TIM_ConfigClockSource+0x170>)
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b40      	cmp	r3, #64	; 0x40
 80056b2:	d067      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0x120>
 80056b4:	2b40      	cmp	r3, #64	; 0x40
 80056b6:	d80b      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x6c>
 80056b8:	2b10      	cmp	r3, #16
 80056ba:	d073      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
 80056bc:	2b10      	cmp	r3, #16
 80056be:	d802      	bhi.n	80056c6 <HAL_TIM_ConfigClockSource+0x62>
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d06f      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056c4:	e078      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d06c      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
 80056ca:	2b30      	cmp	r3, #48	; 0x30
 80056cc:	d06a      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056ce:	e073      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056d0:	2b70      	cmp	r3, #112	; 0x70
 80056d2:	d00d      	beq.n	80056f0 <HAL_TIM_ConfigClockSource+0x8c>
 80056d4:	2b70      	cmp	r3, #112	; 0x70
 80056d6:	d804      	bhi.n	80056e2 <HAL_TIM_ConfigClockSource+0x7e>
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d033      	beq.n	8005744 <HAL_TIM_ConfigClockSource+0xe0>
 80056dc:	2b60      	cmp	r3, #96	; 0x60
 80056de:	d041      	beq.n	8005764 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056e0:	e06a      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e6:	d066      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x152>
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ec:	d017      	beq.n	800571e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056ee:	e063      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6818      	ldr	r0, [r3, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	6899      	ldr	r1, [r3, #8]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	f000 fc0a 	bl	8005f18 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005712:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	609a      	str	r2, [r3, #8]
      break;
 800571c:	e04c      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	6899      	ldr	r1, [r3, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	68db      	ldr	r3, [r3, #12]
 800572e:	f000 fbf3 	bl	8005f18 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005740:	609a      	str	r2, [r3, #8]
      break;
 8005742:	e039      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	461a      	mov	r2, r3
 8005752:	f000 fb67 	bl	8005e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2150      	movs	r1, #80	; 0x50
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fbc0 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 8005762:	e029      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	461a      	mov	r2, r3
 8005772:	f000 fb86 	bl	8005e82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2160      	movs	r1, #96	; 0x60
 800577c:	4618      	mov	r0, r3
 800577e:	f000 fbb0 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 8005782:	e019      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6859      	ldr	r1, [r3, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	461a      	mov	r2, r3
 8005792:	f000 fb47 	bl	8005e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2140      	movs	r1, #64	; 0x40
 800579c:	4618      	mov	r0, r3
 800579e:	f000 fba0 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 80057a2:	e009      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f000 fb97 	bl	8005ee2 <TIM_ITRx_SetConfig>
      break;
 80057b4:	e000      	b.n	80057b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	fffeff88 	.word	0xfffeff88

080057d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e0:	bf00      	nop
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057f4:	bf00      	nop
 80057f6:	370c      	adds	r7, #12
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a40      	ldr	r2, [pc, #256]	; (800593c <TIM_Base_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005846:	d00f      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <TIM_Base_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3c      	ldr	r2, [pc, #240]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3b      	ldr	r2, [pc, #236]	; (8005948 <TIM_Base_SetConfig+0x120>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3a      	ldr	r2, [pc, #232]	; (800594c <TIM_Base_SetConfig+0x124>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2f      	ldr	r2, [pc, #188]	; (800593c <TIM_Base_SetConfig+0x114>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005888:	d027      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a2c      	ldr	r2, [pc, #176]	; (8005940 <TIM_Base_SetConfig+0x118>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d023      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2b      	ldr	r2, [pc, #172]	; (8005944 <TIM_Base_SetConfig+0x11c>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2a      	ldr	r2, [pc, #168]	; (8005948 <TIM_Base_SetConfig+0x120>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a29      	ldr	r2, [pc, #164]	; (800594c <TIM_Base_SetConfig+0x124>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a28      	ldr	r2, [pc, #160]	; (8005950 <TIM_Base_SetConfig+0x128>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a27      	ldr	r2, [pc, #156]	; (8005954 <TIM_Base_SetConfig+0x12c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a26      	ldr	r2, [pc, #152]	; (8005958 <TIM_Base_SetConfig+0x130>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a25      	ldr	r2, [pc, #148]	; (800595c <TIM_Base_SetConfig+0x134>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a24      	ldr	r2, [pc, #144]	; (8005960 <TIM_Base_SetConfig+0x138>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a23      	ldr	r2, [pc, #140]	; (8005964 <TIM_Base_SetConfig+0x13c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a0a      	ldr	r2, [pc, #40]	; (800593c <TIM_Base_SetConfig+0x114>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0c      	ldr	r2, [pc, #48]	; (800594c <TIM_Base_SetConfig+0x124>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40010000 	.word	0x40010000
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40010400 	.word	0x40010400
 8005950:	40014000 	.word	0x40014000
 8005954:	40014400 	.word	0x40014400
 8005958:	40014800 	.word	0x40014800
 800595c:	40001800 	.word	0x40001800
 8005960:	40001c00 	.word	0x40001c00
 8005964:	40002000 	.word	0x40002000

08005968 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	f023 0201 	bic.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4b2b      	ldr	r3, [pc, #172]	; (8005a40 <TIM_OC1_SetConfig+0xd8>)
 8005994:	4013      	ands	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0303 	bic.w	r3, r3, #3
 800599e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 0302 	bic.w	r3, r3, #2
 80059b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a21      	ldr	r2, [pc, #132]	; (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC1_SetConfig+0x64>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a20      	ldr	r2, [pc, #128]	; (8005a48 <TIM_OC1_SetConfig+0xe0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d10c      	bne.n	80059e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f023 0308 	bic.w	r3, r3, #8
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	f023 0304 	bic.w	r3, r3, #4
 80059e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a16      	ldr	r2, [pc, #88]	; (8005a44 <TIM_OC1_SetConfig+0xdc>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_OC1_SetConfig+0x8e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <TIM_OC1_SetConfig+0xe0>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d111      	bne.n	8005a1a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	695b      	ldr	r3, [r3, #20]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr
 8005a40:	fffeff8f 	.word	0xfffeff8f
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400

08005a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f023 0210 	bic.w	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4b2e      	ldr	r3, [pc, #184]	; (8005b30 <TIM_OC2_SetConfig+0xe4>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0320 	bic.w	r3, r3, #32
 8005a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a23      	ldr	r2, [pc, #140]	; (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x68>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a22      	ldr	r2, [pc, #136]	; (8005b38 <TIM_OC2_SetConfig+0xec>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10d      	bne.n	8005ad0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC2_SetConfig+0x94>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <TIM_OC2_SetConfig+0xec>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d113      	bne.n	8005b08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	feff8fff 	.word	0xfeff8fff
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40010400 	.word	0x40010400

08005b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4b2d      	ldr	r3, [pc, #180]	; (8005c1c <TIM_OC3_SetConfig+0xe0>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <TIM_OC3_SetConfig+0xe4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <TIM_OC3_SetConfig+0x66>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <TIM_OC3_SetConfig+0xe8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d10d      	bne.n	8005bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a17      	ldr	r2, [pc, #92]	; (8005c20 <TIM_OC3_SetConfig+0xe4>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC3_SetConfig+0x92>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <TIM_OC3_SetConfig+0xe8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d113      	bne.n	8005bf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	011b      	lsls	r3, r3, #4
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	693a      	ldr	r2, [r7, #16]
 8005bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr
 8005c1c:	fffeff8f 	.word	0xfffeff8f
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40010400 	.word	0x40010400

08005c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4b1e      	ldr	r3, [pc, #120]	; (8005ccc <TIM_OC4_SetConfig+0xa4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	031b      	lsls	r3, r3, #12
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a13      	ldr	r2, [pc, #76]	; (8005cd0 <TIM_OC4_SetConfig+0xa8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_OC4_SetConfig+0x68>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <TIM_OC4_SetConfig+0xac>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d109      	bne.n	8005ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	019b      	lsls	r3, r3, #6
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	feff8fff 	.word	0xfeff8fff
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	40010400 	.word	0x40010400

08005cd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <TIM_OC5_SetConfig+0x98>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a12      	ldr	r2, [pc, #72]	; (8005d74 <TIM_OC5_SetConfig+0x9c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_OC5_SetConfig+0x5e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a11      	ldr	r2, [pc, #68]	; (8005d78 <TIM_OC5_SetConfig+0xa0>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d109      	bne.n	8005d4a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	fffeff8f 	.word	0xfffeff8f
 8005d74:	40010000 	.word	0x40010000
 8005d78:	40010400 	.word	0x40010400

08005d7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4b1c      	ldr	r3, [pc, #112]	; (8005e18 <TIM_OC6_SetConfig+0x9c>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	051b      	lsls	r3, r3, #20
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <TIM_OC6_SetConfig+0xa0>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_OC6_SetConfig+0x60>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <TIM_OC6_SetConfig+0xa4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d109      	bne.n	8005df0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005de2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	029b      	lsls	r3, r3, #10
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	feff8fff 	.word	0xfeff8fff
 8005e1c:	40010000 	.word	0x40010000
 8005e20:	40010400 	.word	0x40010400

08005e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0201 	bic.w	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f023 030a 	bic.w	r3, r3, #10
 8005e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b087      	sub	sp, #28
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f023 0210 	bic.w	r2, r3, #16
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	031b      	lsls	r3, r3, #12
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ebe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	621a      	str	r2, [r3, #32]
}
 8005ed6:	bf00      	nop
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b085      	sub	sp, #20
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f043 0307 	orr.w	r3, r3, #7
 8005f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	609a      	str	r2, [r3, #8]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	021a      	lsls	r2, r3, #8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	609a      	str	r2, [r3, #8]
}
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
	...

08005fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b085      	sub	sp, #20
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d101      	bne.n	8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb8:	2302      	movs	r3, #2
 8005fba:	e06d      	b.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a30      	ldr	r2, [pc, #192]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d004      	beq.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a2f      	ldr	r2, [pc, #188]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ff6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d022      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800602e:	d01d      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d018      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d013      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d00e      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a15      	ldr	r2, [pc, #84]	; (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d10c      	bne.n	8006086 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006072:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	4313      	orrs	r3, r2
 800607c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40000c00 	.word	0x40000c00
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40001800 	.word	0x40001800

080060c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060d8:	2302      	movs	r3, #2
 80060da:	e065      	b.n	80061a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	041b      	lsls	r3, r3, #16
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a16      	ldr	r2, [pc, #88]	; (80061b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d004      	beq.n	800616a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a14      	ldr	r2, [pc, #80]	; (80061b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d115      	bne.n	8006196 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	051b      	lsls	r3, r3, #20
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	40010000 	.word	0x40010000
 80061b8:	40010400 	.word	0x40010400

080061bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e040      	b.n	800628c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f004 fb56 	bl	800a8cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2224      	movs	r2, #36	; 0x24
 8006224:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 faa4 	bl	8006784 <UART_SetConfig>
 800623c:	4603      	mov	r3, r0
 800623e:	2b01      	cmp	r3, #1
 8006240:	d101      	bne.n	8006246 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e022      	b.n	800628c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fd42 	bl	8006cd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	685a      	ldr	r2, [r3, #4]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fdc9 	bl	8006e1c <UART_CheckIdleState>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d164      	bne.n	8006374 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d002      	beq.n	80062b6 <HAL_UART_Transmit_DMA+0x22>
 80062b0:	88fb      	ldrh	r3, [r7, #6]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e05d      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <HAL_UART_Transmit_DMA+0x34>
 80062c4:	2302      	movs	r3, #2
 80062c6:	e056      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	88fa      	ldrh	r2, [r7, #6]
 80062da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	88fa      	ldrh	r2, [r7, #6]
 80062e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2221      	movs	r2, #33	; 0x21
 80062f0:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d02a      	beq.n	8006350 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062fe:	4a20      	ldr	r2, [pc, #128]	; (8006380 <HAL_UART_Transmit_DMA+0xec>)
 8006300:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006306:	4a1f      	ldr	r2, [pc, #124]	; (8006384 <HAL_UART_Transmit_DMA+0xf0>)
 8006308:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800630e:	4a1e      	ldr	r2, [pc, #120]	; (8006388 <HAL_UART_Transmit_DMA+0xf4>)
 8006310:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006316:	2200      	movs	r2, #0
 8006318:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006322:	4619      	mov	r1, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3328      	adds	r3, #40	; 0x28
 800632a:	461a      	mov	r2, r3
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f7fb ff1b 	bl	8002168 <HAL_DMA_Start_IT>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2210      	movs	r2, #16
 800633c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2220      	movs	r2, #32
 800634a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e012      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2240      	movs	r2, #64	; 0x40
 8006356:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800636e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006370:	2300      	movs	r3, #0
 8006372:	e000      	b.n	8006376 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8006374:	2302      	movs	r3, #2
  }
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	08007007 	.word	0x08007007
 8006384:	08007057 	.word	0x08007057
 8006388:	080070f3 	.word	0x080070f3

0800638c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639e:	2b20      	cmp	r3, #32
 80063a0:	d16c      	bne.n	800647c <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <HAL_UART_Receive_DMA+0x22>
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e065      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_UART_Receive_DMA+0x34>
 80063bc:	2302      	movs	r3, #2
 80063be:	e05e      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2222      	movs	r2, #34	; 0x22
 80063e0:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d02a      	beq.n	8006440 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ee:	4a26      	ldr	r2, [pc, #152]	; (8006488 <HAL_UART_Receive_DMA+0xfc>)
 80063f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f6:	4a25      	ldr	r2, [pc, #148]	; (800648c <HAL_UART_Receive_DMA+0x100>)
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fe:	4a24      	ldr	r2, [pc, #144]	; (8006490 <HAL_UART_Receive_DMA+0x104>)
 8006400:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006406:	2200      	movs	r2, #0
 8006408:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3324      	adds	r3, #36	; 0x24
 8006414:	4619      	mov	r1, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641a:	461a      	mov	r2, r3
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	f7fb fea3 	bl	8002168 <HAL_DMA_Start_IT>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2210      	movs	r2, #16
 800642c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2220      	movs	r2, #32
 800643a:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e01e      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006456:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f042 0201 	orr.w	r2, r2, #1
 8006466:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	689a      	ldr	r2, [r3, #8]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006476:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	e000      	b.n	800647e <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800647c:	2302      	movs	r3, #2
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	08007073 	.word	0x08007073
 800648c:	080070d7 	.word	0x080070d7
 8006490:	080070f3 	.word	0x080070f3

08006494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ba:	4013      	ands	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00e      	beq.n	80064ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d009      	beq.n	80064ec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8114 	beq.w	800670a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
      }
      return;
 80064ea:	e10e      	b.n	800670a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80d6 	beq.w	80066a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 80cb 	beq.w	80066a0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00e      	beq.n	8006532 <HAL_UART_IRQHandler+0x9e>
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d009      	beq.n	8006532 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2201      	movs	r2, #1
 8006524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800652a:	f043 0201 	orr.w	r2, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <HAL_UART_IRQHandler+0xc6>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2202      	movs	r2, #2
 800654c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006552:	f043 0204 	orr.w	r2, r3, #4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00e      	beq.n	8006582 <HAL_UART_IRQHandler+0xee>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2204      	movs	r2, #4
 8006574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800657a:	f043 0202 	orr.w	r2, r3, #2
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d013      	beq.n	80065b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0320 	and.w	r3, r3, #32
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2208      	movs	r2, #8
 80065a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ac:	f043 0208 	orr.w	r2, r3, #8
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00f      	beq.n	80065de <HAL_UART_IRQHandler+0x14a>
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d6:	f043 0220 	orr.w	r2, r3, #32
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8093 	beq.w	800670e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006610:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d004      	beq.n	800662a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006626:	2b00      	cmp	r3, #0
 8006628:	d031      	beq.n	800668e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fccb 	bl	8006fc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	d123      	bne.n	8006686 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689a      	ldr	r2, [r3, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800664c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006652:	2b00      	cmp	r3, #0
 8006654:	d013      	beq.n	800667e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665a:	4a30      	ldr	r2, [pc, #192]	; (800671c <HAL_UART_IRQHandler+0x288>)
 800665c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006662:	4618      	mov	r0, r3
 8006664:	f7fb fe50 	bl	8002308 <HAL_DMA_Abort_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d016      	beq.n	800669c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	e00e      	b.n	800669c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f86c 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006684:	e00a      	b.n	800669c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f868 	bl	800675c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	e006      	b.n	800669c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f864 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800669a:	e038      	b.n	800670e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	bf00      	nop
    return;
 800669e:	e036      	b.n	800670e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00d      	beq.n	80066c6 <HAL_UART_IRQHandler+0x232>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d008      	beq.n	80066c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f856 	bl	8006770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066c4:	e026      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d017      	beq.n	8006712 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
    }
    return;
 80066ea:	e012      	b.n	8006712 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00e      	beq.n	8006714 <HAL_UART_IRQHandler+0x280>
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d009      	beq.n	8006714 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 fd48 	bl	8007196 <UART_EndTransmit_IT>
    return;
 8006706:	bf00      	nop
 8006708:	e004      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
      return;
 800670a:	bf00      	nop
 800670c:	e002      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
    return;
 800670e:	bf00      	nop
 8006710:	e000      	b.n	8006714 <HAL_UART_IRQHandler+0x280>
    return;
 8006712:	bf00      	nop
  }

}
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	0800716b 	.word	0x0800716b

08006720 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800673c:	bf00      	nop
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b088      	sub	sp, #32
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006790:	2300      	movs	r3, #0
 8006792:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4bb1      	ldr	r3, [pc, #708]	; (8006a78 <UART_SetConfig+0x2f4>)
 80067b4:	4013      	ands	r3, r2
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	6939      	ldr	r1, [r7, #16]
 80067bc:	430b      	orrs	r3, r1
 80067be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	430a      	orrs	r2, r1
 80067d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a9f      	ldr	r2, [pc, #636]	; (8006a7c <UART_SetConfig+0x2f8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d121      	bne.n	8006848 <UART_SetConfig+0xc4>
 8006804:	4b9e      	ldr	r3, [pc, #632]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	2b03      	cmp	r3, #3
 8006810:	d816      	bhi.n	8006840 <UART_SetConfig+0xbc>
 8006812:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x94>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	08006829 	.word	0x08006829
 800681c:	08006835 	.word	0x08006835
 8006820:	0800682f 	.word	0x0800682f
 8006824:	0800683b 	.word	0x0800683b
 8006828:	2301      	movs	r3, #1
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e151      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800682e:	2302      	movs	r3, #2
 8006830:	77fb      	strb	r3, [r7, #31]
 8006832:	e14e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006834:	2304      	movs	r3, #4
 8006836:	77fb      	strb	r3, [r7, #31]
 8006838:	e14b      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800683a:	2308      	movs	r3, #8
 800683c:	77fb      	strb	r3, [r7, #31]
 800683e:	e148      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006840:	2310      	movs	r3, #16
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	bf00      	nop
 8006846:	e144      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a8d      	ldr	r2, [pc, #564]	; (8006a84 <UART_SetConfig+0x300>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d134      	bne.n	80068bc <UART_SetConfig+0x138>
 8006852:	4b8b      	ldr	r3, [pc, #556]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006858:	f003 030c 	and.w	r3, r3, #12
 800685c:	2b0c      	cmp	r3, #12
 800685e:	d829      	bhi.n	80068b4 <UART_SetConfig+0x130>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <UART_SetConfig+0xe4>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	0800689d 	.word	0x0800689d
 800686c:	080068b5 	.word	0x080068b5
 8006870:	080068b5 	.word	0x080068b5
 8006874:	080068b5 	.word	0x080068b5
 8006878:	080068a9 	.word	0x080068a9
 800687c:	080068b5 	.word	0x080068b5
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068b5 	.word	0x080068b5
 8006888:	080068a3 	.word	0x080068a3
 800688c:	080068b5 	.word	0x080068b5
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068b5 	.word	0x080068b5
 8006898:	080068af 	.word	0x080068af
 800689c:	2300      	movs	r3, #0
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e117      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068a2:	2302      	movs	r3, #2
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e114      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068a8:	2304      	movs	r3, #4
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e111      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068ae:	2308      	movs	r3, #8
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e10e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068b4:	2310      	movs	r3, #16
 80068b6:	77fb      	strb	r3, [r7, #31]
 80068b8:	bf00      	nop
 80068ba:	e10a      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a71      	ldr	r2, [pc, #452]	; (8006a88 <UART_SetConfig+0x304>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d120      	bne.n	8006908 <UART_SetConfig+0x184>
 80068c6:	4b6e      	ldr	r3, [pc, #440]	; (8006a80 <UART_SetConfig+0x2fc>)
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d00f      	beq.n	80068f4 <UART_SetConfig+0x170>
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d802      	bhi.n	80068de <UART_SetConfig+0x15a>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <UART_SetConfig+0x164>
 80068dc:	e010      	b.n	8006900 <UART_SetConfig+0x17c>
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d005      	beq.n	80068ee <UART_SetConfig+0x16a>
 80068e2:	2b30      	cmp	r3, #48	; 0x30
 80068e4:	d009      	beq.n	80068fa <UART_SetConfig+0x176>
 80068e6:	e00b      	b.n	8006900 <UART_SetConfig+0x17c>
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e0f1      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068ee:	2302      	movs	r3, #2
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e0ee      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068f4:	2304      	movs	r3, #4
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e0eb      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80068fa:	2308      	movs	r3, #8
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e0e8      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	bf00      	nop
 8006906:	e0e4      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a5f      	ldr	r2, [pc, #380]	; (8006a8c <UART_SetConfig+0x308>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d120      	bne.n	8006954 <UART_SetConfig+0x1d0>
 8006912:	4b5b      	ldr	r3, [pc, #364]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006918:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d00f      	beq.n	8006940 <UART_SetConfig+0x1bc>
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	d802      	bhi.n	800692a <UART_SetConfig+0x1a6>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <UART_SetConfig+0x1b0>
 8006928:	e010      	b.n	800694c <UART_SetConfig+0x1c8>
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	d005      	beq.n	800693a <UART_SetConfig+0x1b6>
 800692e:	2bc0      	cmp	r3, #192	; 0xc0
 8006930:	d009      	beq.n	8006946 <UART_SetConfig+0x1c2>
 8006932:	e00b      	b.n	800694c <UART_SetConfig+0x1c8>
 8006934:	2300      	movs	r3, #0
 8006936:	77fb      	strb	r3, [r7, #31]
 8006938:	e0cb      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800693a:	2302      	movs	r3, #2
 800693c:	77fb      	strb	r3, [r7, #31]
 800693e:	e0c8      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006940:	2304      	movs	r3, #4
 8006942:	77fb      	strb	r3, [r7, #31]
 8006944:	e0c5      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006946:	2308      	movs	r3, #8
 8006948:	77fb      	strb	r3, [r7, #31]
 800694a:	e0c2      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800694c:	2310      	movs	r3, #16
 800694e:	77fb      	strb	r3, [r7, #31]
 8006950:	bf00      	nop
 8006952:	e0be      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a4d      	ldr	r2, [pc, #308]	; (8006a90 <UART_SetConfig+0x30c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d124      	bne.n	80069a8 <UART_SetConfig+0x224>
 800695e:	4b48      	ldr	r3, [pc, #288]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696c:	d012      	beq.n	8006994 <UART_SetConfig+0x210>
 800696e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006972:	d802      	bhi.n	800697a <UART_SetConfig+0x1f6>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d007      	beq.n	8006988 <UART_SetConfig+0x204>
 8006978:	e012      	b.n	80069a0 <UART_SetConfig+0x21c>
 800697a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697e:	d006      	beq.n	800698e <UART_SetConfig+0x20a>
 8006980:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006984:	d009      	beq.n	800699a <UART_SetConfig+0x216>
 8006986:	e00b      	b.n	80069a0 <UART_SetConfig+0x21c>
 8006988:	2300      	movs	r3, #0
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e0a1      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800698e:	2302      	movs	r3, #2
 8006990:	77fb      	strb	r3, [r7, #31]
 8006992:	e09e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006994:	2304      	movs	r3, #4
 8006996:	77fb      	strb	r3, [r7, #31]
 8006998:	e09b      	b.n	8006ad2 <UART_SetConfig+0x34e>
 800699a:	2308      	movs	r3, #8
 800699c:	77fb      	strb	r3, [r7, #31]
 800699e:	e098      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069a0:	2310      	movs	r3, #16
 80069a2:	77fb      	strb	r3, [r7, #31]
 80069a4:	bf00      	nop
 80069a6:	e094      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a39      	ldr	r2, [pc, #228]	; (8006a94 <UART_SetConfig+0x310>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d124      	bne.n	80069fc <UART_SetConfig+0x278>
 80069b2:	4b33      	ldr	r3, [pc, #204]	; (8006a80 <UART_SetConfig+0x2fc>)
 80069b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c0:	d012      	beq.n	80069e8 <UART_SetConfig+0x264>
 80069c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069c6:	d802      	bhi.n	80069ce <UART_SetConfig+0x24a>
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <UART_SetConfig+0x258>
 80069cc:	e012      	b.n	80069f4 <UART_SetConfig+0x270>
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069d2:	d006      	beq.n	80069e2 <UART_SetConfig+0x25e>
 80069d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069d8:	d009      	beq.n	80069ee <UART_SetConfig+0x26a>
 80069da:	e00b      	b.n	80069f4 <UART_SetConfig+0x270>
 80069dc:	2301      	movs	r3, #1
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e077      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069e2:	2302      	movs	r3, #2
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e074      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069e8:	2304      	movs	r3, #4
 80069ea:	77fb      	strb	r3, [r7, #31]
 80069ec:	e071      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069ee:	2308      	movs	r3, #8
 80069f0:	77fb      	strb	r3, [r7, #31]
 80069f2:	e06e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069f4:	2310      	movs	r3, #16
 80069f6:	77fb      	strb	r3, [r7, #31]
 80069f8:	bf00      	nop
 80069fa:	e06a      	b.n	8006ad2 <UART_SetConfig+0x34e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a25      	ldr	r2, [pc, #148]	; (8006a98 <UART_SetConfig+0x314>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d124      	bne.n	8006a50 <UART_SetConfig+0x2cc>
 8006a06:	4b1e      	ldr	r3, [pc, #120]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a14:	d012      	beq.n	8006a3c <UART_SetConfig+0x2b8>
 8006a16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1a:	d802      	bhi.n	8006a22 <UART_SetConfig+0x29e>
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <UART_SetConfig+0x2ac>
 8006a20:	e012      	b.n	8006a48 <UART_SetConfig+0x2c4>
 8006a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a26:	d006      	beq.n	8006a36 <UART_SetConfig+0x2b2>
 8006a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a2c:	d009      	beq.n	8006a42 <UART_SetConfig+0x2be>
 8006a2e:	e00b      	b.n	8006a48 <UART_SetConfig+0x2c4>
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
 8006a34:	e04d      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a36:	2302      	movs	r3, #2
 8006a38:	77fb      	strb	r3, [r7, #31]
 8006a3a:	e04a      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	77fb      	strb	r3, [r7, #31]
 8006a40:	e047      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a42:	2308      	movs	r3, #8
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e044      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	bf00      	nop
 8006a4e:	e040      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <UART_SetConfig+0x318>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d139      	bne.n	8006ace <UART_SetConfig+0x34a>
 8006a5a:	4b09      	ldr	r3, [pc, #36]	; (8006a80 <UART_SetConfig+0x2fc>)
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a68:	d027      	beq.n	8006aba <UART_SetConfig+0x336>
 8006a6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a6e:	d817      	bhi.n	8006aa0 <UART_SetConfig+0x31c>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01c      	beq.n	8006aae <UART_SetConfig+0x32a>
 8006a74:	e027      	b.n	8006ac6 <UART_SetConfig+0x342>
 8006a76:	bf00      	nop
 8006a78:	efff69f3 	.word	0xefff69f3
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	40023800 	.word	0x40023800
 8006a84:	40004400 	.word	0x40004400
 8006a88:	40004800 	.word	0x40004800
 8006a8c:	40004c00 	.word	0x40004c00
 8006a90:	40005000 	.word	0x40005000
 8006a94:	40011400 	.word	0x40011400
 8006a98:	40007800 	.word	0x40007800
 8006a9c:	40007c00 	.word	0x40007c00
 8006aa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aa4:	d006      	beq.n	8006ab4 <UART_SetConfig+0x330>
 8006aa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006aaa:	d009      	beq.n	8006ac0 <UART_SetConfig+0x33c>
 8006aac:	e00b      	b.n	8006ac6 <UART_SetConfig+0x342>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e00e      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e00b      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006aba:	2304      	movs	r3, #4
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e008      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e005      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	bf00      	nop
 8006acc:	e001      	b.n	8006ad2 <UART_SetConfig+0x34e>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	69db      	ldr	r3, [r3, #28]
 8006ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ada:	d17f      	bne.n	8006bdc <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006adc:	7ffb      	ldrb	r3, [r7, #31]
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d85c      	bhi.n	8006b9c <UART_SetConfig+0x418>
 8006ae2:	a201      	add	r2, pc, #4	; (adr r2, 8006ae8 <UART_SetConfig+0x364>)
 8006ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae8:	08006b0d 	.word	0x08006b0d
 8006aec:	08006b2d 	.word	0x08006b2d
 8006af0:	08006b4d 	.word	0x08006b4d
 8006af4:	08006b9d 	.word	0x08006b9d
 8006af8:	08006b65 	.word	0x08006b65
 8006afc:	08006b9d 	.word	0x08006b9d
 8006b00:	08006b9d 	.word	0x08006b9d
 8006b04:	08006b9d 	.word	0x08006b9d
 8006b08:	08006b85 	.word	0x08006b85
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0c:	f7fc fe32 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8006b10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	005a      	lsls	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	441a      	add	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	61bb      	str	r3, [r7, #24]
        break;
 8006b2a:	e03a      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b2c:	f7fc fe36 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 8006b30:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	005a      	lsls	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	085b      	lsrs	r3, r3, #1
 8006b3c:	441a      	add	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	61bb      	str	r3, [r7, #24]
        break;
 8006b4a:	e02a      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	085a      	lsrs	r2, r3, #1
 8006b52:	4b5f      	ldr	r3, [pc, #380]	; (8006cd0 <UART_SetConfig+0x54c>)
 8006b54:	4413      	add	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6852      	ldr	r2, [r2, #4]
 8006b5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	61bb      	str	r3, [r7, #24]
        break;
 8006b62:	e01e      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b64:	f7fc fd48 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8006b68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	005a      	lsls	r2, r3, #1
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	441a      	add	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	61bb      	str	r3, [r7, #24]
        break;
 8006b82:	e00e      	b.n	8006ba2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	085b      	lsrs	r3, r3, #1
 8006b8a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	61bb      	str	r3, [r7, #24]
        break;
 8006b9a:	e002      	b.n	8006ba2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
        break;
 8006ba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b0f      	cmp	r3, #15
 8006ba6:	d916      	bls.n	8006bd6 <UART_SetConfig+0x452>
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d212      	bcs.n	8006bd6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f023 030f 	bic.w	r3, r3, #15
 8006bb8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	085b      	lsrs	r3, r3, #1
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f003 0307 	and.w	r3, r3, #7
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	897b      	ldrh	r3, [r7, #10]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	897a      	ldrh	r2, [r7, #10]
 8006bd2:	60da      	str	r2, [r3, #12]
 8006bd4:	e070      	b.n	8006cb8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	75fb      	strb	r3, [r7, #23]
 8006bda:	e06d      	b.n	8006cb8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006bdc:	7ffb      	ldrb	r3, [r7, #31]
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d859      	bhi.n	8006c96 <UART_SetConfig+0x512>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x464>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c2b 	.word	0x08006c2b
 8006bf0:	08006c49 	.word	0x08006c49
 8006bf4:	08006c97 	.word	0x08006c97
 8006bf8:	08006c61 	.word	0x08006c61
 8006bfc:	08006c97 	.word	0x08006c97
 8006c00:	08006c97 	.word	0x08006c97
 8006c04:	08006c97 	.word	0x08006c97
 8006c08:	08006c7f 	.word	0x08006c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fc fdb2 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8006c10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	085a      	lsrs	r2, r3, #1
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	441a      	add	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	61bb      	str	r3, [r7, #24]
        break;
 8006c28:	e038      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c2a:	f7fc fdb7 	bl	800379c <HAL_RCC_GetPCLK2Freq>
 8006c2e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	085a      	lsrs	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	441a      	add	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	61bb      	str	r3, [r7, #24]
        break;
 8006c46:	e029      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	085a      	lsrs	r2, r3, #1
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <UART_SetConfig+0x550>)
 8006c50:	4413      	add	r3, r2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6852      	ldr	r2, [r2, #4]
 8006c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	61bb      	str	r3, [r7, #24]
        break;
 8006c5e:	e01d      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c60:	f7fc fcca 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 8006c64:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085a      	lsrs	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	441a      	add	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	61bb      	str	r3, [r7, #24]
        break;
 8006c7c:	e00e      	b.n	8006c9c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	61bb      	str	r3, [r7, #24]
        break;
 8006c94:	e002      	b.n	8006c9c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	75fb      	strb	r3, [r7, #23]
        break;
 8006c9a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	2b0f      	cmp	r3, #15
 8006ca0:	d908      	bls.n	8006cb4 <UART_SetConfig+0x530>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d204      	bcs.n	8006cb4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	60da      	str	r2, [r3, #12]
 8006cb2:	e001      	b.n	8006cb8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	01e84800 	.word	0x01e84800
 8006cd4:	00f42400 	.word	0x00f42400

08006cd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	f003 0304 	and.w	r3, r3, #4
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00a      	beq.n	8006d46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00a      	beq.n	8006d68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00a      	beq.n	8006d8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00a      	beq.n	8006dac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	430a      	orrs	r2, r1
 8006daa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d01a      	beq.n	8006dee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	430a      	orrs	r2, r1
 8006dcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd6:	d10a      	bne.n	8006dee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	430a      	orrs	r2, r1
 8006dec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00a      	beq.n	8006e10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  }
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af02      	add	r7, sp, #8
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e2a:	f7fa f8e5 	bl	8000ff8 <HAL_GetTick>
 8006e2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b08      	cmp	r3, #8
 8006e3c:	d10e      	bne.n	8006e5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 f82a 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e020      	b.n	8006e9e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0304 	and.w	r3, r3, #4
 8006e66:	2b04      	cmp	r3, #4
 8006e68:	d10e      	bne.n	8006e88 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f814 	bl	8006ea6 <UART_WaitOnFlagUntilTimeout>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e00a      	b.n	8006e9e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb6:	e05d      	b.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d059      	beq.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ec0:	f7fa f89a 	bl	8000ff8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	69ba      	ldr	r2, [r7, #24]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d302      	bcc.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d11b      	bne.n	8006f0e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ee4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0201 	bic.w	r2, r2, #1
 8006ef4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2220      	movs	r2, #32
 8006f00:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e042      	b.n	8006f94 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d02b      	beq.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2a:	d123      	bne.n	8006f74 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f34:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f44:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2220      	movs	r2, #32
 8006f66:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e00f      	b.n	8006f94 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69da      	ldr	r2, [r3, #28]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	bf0c      	ite	eq
 8006f84:	2301      	moveq	r3, #1
 8006f86:	2300      	movne	r3, #0
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d092      	beq.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006fb2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fba:	bf00      	nop
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006fdc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689a      	ldr	r2, [r3, #8]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
}
 8006ffa:	bf00      	nop
 8006ffc:	370c      	adds	r7, #12
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800701c:	d014      	beq.n	8007048 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	689a      	ldr	r2, [r3, #8]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007034:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007044:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007046:	e002      	b.n	800704e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f006 fcfd 	bl	800da48 <HAL_UART_TxCpltCallback>
}
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b084      	sub	sp, #16
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f7ff fb5b 	bl	8006720 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007088:	d01e      	beq.n	80070c8 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689a      	ldr	r2, [r3, #8]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2220      	movs	r2, #32
 80070c6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff fb33 	bl	8006734 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fb2f 	bl	8006748 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b086      	sub	sp, #24
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007104:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800710a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b80      	cmp	r3, #128	; 0x80
 8007118:	d109      	bne.n	800712e <UART_DMAError+0x3c>
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b21      	cmp	r3, #33	; 0x21
 800711e:	d106      	bne.n	800712e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	2200      	movs	r2, #0
 8007124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007128:	6978      	ldr	r0, [r7, #20]
 800712a:	f7ff ff37 	bl	8006f9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007138:	2b40      	cmp	r3, #64	; 0x40
 800713a:	d109      	bne.n	8007150 <UART_DMAError+0x5e>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b22      	cmp	r3, #34	; 0x22
 8007140:	d106      	bne.n	8007150 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800714a:	6978      	ldr	r0, [r7, #20]
 800714c:	f7ff ff3b 	bl	8006fc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007154:	f043 0210 	orr.w	r2, r3, #16
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800715c:	6978      	ldr	r0, [r7, #20]
 800715e:	f7ff fafd 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007162:	bf00      	nop
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b084      	sub	sp, #16
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	f7ff fae7 	bl	800675c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071ac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2220      	movs	r2, #32
 80071b2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f006 fc44 	bl	800da48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	0a5a      	lsrs	r2, r3, #9
 80071d8:	490f      	ldr	r1, [pc, #60]	; (8007218 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80071da:	fba1 1202 	umull	r1, r2, r1, r2
 80071de:	09d2      	lsrs	r2, r2, #7
 80071e0:	490e      	ldr	r1, [pc, #56]	; (800721c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80071e2:	fb01 f202 	mul.w	r2, r1, r2
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	0a5b      	lsrs	r3, r3, #9
 80071f0:	4a09      	ldr	r2, [pc, #36]	; (8007218 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80071f2:	fba2 2303 	umull	r2, r3, r2, r3
 80071f6:	09db      	lsrs	r3, r3, #7
 80071f8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	441a      	add	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	601a      	str	r2, [r3, #0]
}
 800720c:	bf00      	nop
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	00044b83 	.word	0x00044b83
 800721c:	3b9aca00 	.word	0x3b9aca00

08007220 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800722e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007232:	2b84      	cmp	r3, #132	; 0x84
 8007234:	d005      	beq.n	8007242 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007236:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	3303      	adds	r3, #3
 8007240:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007254:	f000 fab6 	bl	80077c4 <vTaskStartScheduler>
  
  return osOK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	bd80      	pop	{r7, pc}

0800725e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800725e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007260:	b089      	sub	sp, #36	; 0x24
 8007262:	af04      	add	r7, sp, #16
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685c      	ldr	r4, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681d      	ldr	r5, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691e      	ldr	r6, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	f7ff ffd0 	bl	8007220 <makeFreeRtosPriority>
 8007280:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800728a:	9202      	str	r2, [sp, #8]
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	9100      	str	r1, [sp, #0]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	4632      	mov	r2, r6
 8007294:	4629      	mov	r1, r5
 8007296:	4620      	mov	r0, r4
 8007298:	f000 f8c5 	bl	8007426 <xTaskCreateStatic>
 800729c:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800729e:	68fb      	ldr	r3, [r7, #12]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072a8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80072ac:	f000 fd6c 	bl	8007d88 <xTaskGetSchedulerState>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d001      	beq.n	80072ba <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80072b6:	f000 ff87 	bl	80081c8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80072ba:	bf00      	nop
 80072bc:	bd80      	pop	{r7, pc}

080072be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072be:	b480      	push	{r7}
 80072c0:	b083      	sub	sp, #12
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f103 0208 	add.w	r2, r3, #8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f04f 32ff 	mov.w	r2, #4294967295
 80072d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f103 0208 	add.w	r2, r3, #8
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f103 0208 	add.w	r2, r3, #8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	1c5a      	adds	r2, r3, #1
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	601a      	str	r2, [r3, #0]
}
 8007354:	bf00      	nop
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d103      	bne.n	8007380 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	e00c      	b.n	800739a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3308      	adds	r3, #8
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	e002      	b.n	800738e <vListInsert+0x2e>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	429a      	cmp	r2, r3
 8007398:	d2f6      	bcs.n	8007388 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	1c5a      	adds	r2, r3, #1
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	601a      	str	r2, [r3, #0]
}
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	6892      	ldr	r2, [r2, #8]
 80073e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6852      	ldr	r2, [r2, #4]
 80073f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d103      	bne.n	8007406 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689a      	ldr	r2, [r3, #8]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	1e5a      	subs	r2, r3, #1
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007426:	b580      	push	{r7, lr}
 8007428:	b08e      	sub	sp, #56	; 0x38
 800742a:	af04      	add	r7, sp, #16
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007436:	2b00      	cmp	r3, #0
 8007438:	d10b      	bne.n	8007452 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	b672      	cpsid	i
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	b662      	cpsie	i
 800744e:	623b      	str	r3, [r7, #32]
 8007450:	e7fe      	b.n	8007450 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007454:	2b00      	cmp	r3, #0
 8007456:	d10b      	bne.n	8007470 <xTaskCreateStatic+0x4a>
 8007458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745c:	b672      	cpsid	i
 800745e:	f383 8811 	msr	BASEPRI, r3
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	f3bf 8f4f 	dsb	sy
 800746a:	b662      	cpsie	i
 800746c:	61fb      	str	r3, [r7, #28]
 800746e:	e7fe      	b.n	800746e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007470:	2354      	movs	r3, #84	; 0x54
 8007472:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b54      	cmp	r3, #84	; 0x54
 8007478:	d00b      	beq.n	8007492 <xTaskCreateStatic+0x6c>
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	b672      	cpsid	i
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	b662      	cpsie	i
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	e7fe      	b.n	8007490 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007492:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007496:	2b00      	cmp	r3, #0
 8007498:	d01a      	beq.n	80074d0 <xTaskCreateStatic+0xaa>
 800749a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749c:	2b00      	cmp	r3, #0
 800749e:	d017      	beq.n	80074d0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074aa:	2300      	movs	r3, #0
 80074ac:	9303      	str	r3, [sp, #12]
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	9302      	str	r3, [sp, #8]
 80074b2:	f107 0314 	add.w	r3, r7, #20
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	68f8      	ldr	r0, [r7, #12]
 80074c4:	f000 f80b 	bl	80074de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074ca:	f000 f891 	bl	80075f0 <prvAddNewTaskToReadyList>
 80074ce:	e001      	b.n	80074d4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074d4:	697b      	ldr	r3, [r7, #20]
	}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3728      	adds	r7, #40	; 0x28
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b088      	sub	sp, #32
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	60b9      	str	r1, [r7, #8]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80074f6:	440b      	add	r3, r1
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	4413      	add	r3, r2
 80074fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f023 0307 	bic.w	r3, r3, #7
 8007504:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <prvInitialiseNewTask+0x4a>
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	b672      	cpsid	i
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	b662      	cpsie	i
 8007524:	617b      	str	r3, [r7, #20]
 8007526:	e7fe      	b.n	8007526 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01f      	beq.n	800756e <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	e012      	b.n	800755a <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	4413      	add	r3, r2
 800753a:	7819      	ldrb	r1, [r3, #0]
 800753c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	3334      	adds	r3, #52	; 0x34
 8007544:	460a      	mov	r2, r1
 8007546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007548:	68ba      	ldr	r2, [r7, #8]
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d006      	beq.n	8007562 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	3301      	adds	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	2b0f      	cmp	r3, #15
 800755e:	d9e9      	bls.n	8007534 <prvInitialiseNewTask+0x56>
 8007560:	e000      	b.n	8007564 <prvInitialiseNewTask+0x86>
			{
				break;
 8007562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	2200      	movs	r2, #0
 8007568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800756c:	e003      	b.n	8007576 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	2200      	movs	r2, #0
 8007572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007578:	2b06      	cmp	r3, #6
 800757a:	d901      	bls.n	8007580 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800757c:	2306      	movs	r3, #6
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800758a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800758e:	2200      	movs	r2, #0
 8007590:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	3304      	adds	r3, #4
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff feb1 	bl	80072fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	3318      	adds	r3, #24
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff feac 	bl	80072fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ae:	f1c3 0207 	rsb	r2, r3, #7
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	2200      	movs	r2, #0
 80075c0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	68f9      	ldr	r1, [r7, #12]
 80075ce:	69b8      	ldr	r0, [r7, #24]
 80075d0:	f000 fc5e 	bl	8007e90 <pxPortInitialiseStack>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075e6:	bf00      	nop
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075f8:	f000 fd56 	bl	80080a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075fc:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <prvAddNewTaskToReadyList+0xb8>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	4a29      	ldr	r2, [pc, #164]	; (80076a8 <prvAddNewTaskToReadyList+0xb8>)
 8007604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007606:	4b29      	ldr	r3, [pc, #164]	; (80076ac <prvAddNewTaskToReadyList+0xbc>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800760e:	4a27      	ldr	r2, [pc, #156]	; (80076ac <prvAddNewTaskToReadyList+0xbc>)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007614:	4b24      	ldr	r3, [pc, #144]	; (80076a8 <prvAddNewTaskToReadyList+0xb8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d110      	bne.n	800763e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800761c:	f000 fb1e 	bl	8007c5c <prvInitialiseTaskLists>
 8007620:	e00d      	b.n	800763e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007622:	4b23      	ldr	r3, [pc, #140]	; (80076b0 <prvAddNewTaskToReadyList+0xc0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d109      	bne.n	800763e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <prvAddNewTaskToReadyList+0xbc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	429a      	cmp	r2, r3
 8007636:	d802      	bhi.n	800763e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007638:	4a1c      	ldr	r2, [pc, #112]	; (80076ac <prvAddNewTaskToReadyList+0xbc>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800763e:	4b1d      	ldr	r3, [pc, #116]	; (80076b4 <prvAddNewTaskToReadyList+0xc4>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	4a1b      	ldr	r2, [pc, #108]	; (80076b4 <prvAddNewTaskToReadyList+0xc4>)
 8007646:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764c:	2201      	movs	r2, #1
 800764e:	409a      	lsls	r2, r3
 8007650:	4b19      	ldr	r3, [pc, #100]	; (80076b8 <prvAddNewTaskToReadyList+0xc8>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4313      	orrs	r3, r2
 8007656:	4a18      	ldr	r2, [pc, #96]	; (80076b8 <prvAddNewTaskToReadyList+0xc8>)
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765e:	4613      	mov	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4a15      	ldr	r2, [pc, #84]	; (80076bc <prvAddNewTaskToReadyList+0xcc>)
 8007668:	441a      	add	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7ff fe51 	bl	8007318 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007676:	f000 fd49 	bl	800810c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800767a:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <prvAddNewTaskToReadyList+0xc0>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00e      	beq.n	80076a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007682:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <prvAddNewTaskToReadyList+0xbc>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	429a      	cmp	r2, r3
 800768e:	d207      	bcs.n	80076a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007690:	4b0b      	ldr	r3, [pc, #44]	; (80076c0 <prvAddNewTaskToReadyList+0xd0>)
 8007692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007696:	601a      	str	r2, [r3, #0]
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a0:	bf00      	nop
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000668 	.word	0x20000668
 80076ac:	20000568 	.word	0x20000568
 80076b0:	20000674 	.word	0x20000674
 80076b4:	20000684 	.word	0x20000684
 80076b8:	20000670 	.word	0x20000670
 80076bc:	2000056c 	.word	0x2000056c
 80076c0:	e000ed04 	.word	0xe000ed04

080076c4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80076ce:	2300      	movs	r3, #0
 80076d0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d10b      	bne.n	80076f0 <vTaskDelayUntil+0x2c>
 80076d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076dc:	b672      	cpsid	i
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	b662      	cpsie	i
 80076ec:	617b      	str	r3, [r7, #20]
 80076ee:	e7fe      	b.n	80076ee <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10b      	bne.n	800770e <vTaskDelayUntil+0x4a>
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	b672      	cpsid	i
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	b662      	cpsie	i
 800770a:	613b      	str	r3, [r7, #16]
 800770c:	e7fe      	b.n	800770c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800770e:	4b2a      	ldr	r3, [pc, #168]	; (80077b8 <vTaskDelayUntil+0xf4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00b      	beq.n	800772e <vTaskDelayUntil+0x6a>
 8007716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800771a:	b672      	cpsid	i
 800771c:	f383 8811 	msr	BASEPRI, r3
 8007720:	f3bf 8f6f 	isb	sy
 8007724:	f3bf 8f4f 	dsb	sy
 8007728:	b662      	cpsie	i
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e7fe      	b.n	800772c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800772e:	f000 f8ab 	bl	8007888 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007732:	4b22      	ldr	r3, [pc, #136]	; (80077bc <vTaskDelayUntil+0xf8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	4413      	add	r3, r2
 8007740:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	6a3a      	ldr	r2, [r7, #32]
 8007748:	429a      	cmp	r2, r3
 800774a:	d20b      	bcs.n	8007764 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	429a      	cmp	r2, r3
 8007754:	d211      	bcs.n	800777a <vTaskDelayUntil+0xb6>
 8007756:	69fa      	ldr	r2, [r7, #28]
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	429a      	cmp	r2, r3
 800775c:	d90d      	bls.n	800777a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800775e:	2301      	movs	r3, #1
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
 8007762:	e00a      	b.n	800777a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	69fa      	ldr	r2, [r7, #28]
 800776a:	429a      	cmp	r2, r3
 800776c:	d303      	bcc.n	8007776 <vTaskDelayUntil+0xb2>
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	6a3b      	ldr	r3, [r7, #32]
 8007772:	429a      	cmp	r2, r3
 8007774:	d901      	bls.n	800777a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8007776:	2301      	movs	r3, #1
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d006      	beq.n	8007794 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	6a3b      	ldr	r3, [r7, #32]
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2100      	movs	r1, #0
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fb18 	bl	8007dc4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007794:	f000 f886 	bl	80078a4 <xTaskResumeAll>
 8007798:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d107      	bne.n	80077b0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <vTaskDelayUntil+0xfc>)
 80077a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077b0:	bf00      	nop
 80077b2:	3728      	adds	r7, #40	; 0x28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20000690 	.word	0x20000690
 80077bc:	2000066c 	.word	0x2000066c
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80077d2:	463a      	mov	r2, r7
 80077d4:	1d39      	adds	r1, r7, #4
 80077d6:	f107 0308 	add.w	r3, r7, #8
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 ff90 	bl	8008700 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	9301      	str	r3, [sp, #4]
 80077ea:	2300      	movs	r3, #0
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	2300      	movs	r3, #0
 80077f0:	460a      	mov	r2, r1
 80077f2:	491f      	ldr	r1, [pc, #124]	; (8007870 <vTaskStartScheduler+0xac>)
 80077f4:	481f      	ldr	r0, [pc, #124]	; (8007874 <vTaskStartScheduler+0xb0>)
 80077f6:	f7ff fe16 	bl	8007426 <xTaskCreateStatic>
 80077fa:	4602      	mov	r2, r0
 80077fc:	4b1e      	ldr	r3, [pc, #120]	; (8007878 <vTaskStartScheduler+0xb4>)
 80077fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007800:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <vTaskStartScheduler+0xb4>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007808:	2301      	movs	r3, #1
 800780a:	617b      	str	r3, [r7, #20]
 800780c:	e001      	b.n	8007812 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d117      	bne.n	8007848 <vTaskStartScheduler+0x84>
 8007818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781c:	b672      	cpsid	i
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	b662      	cpsie	i
 800782c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800782e:	4b13      	ldr	r3, [pc, #76]	; (800787c <vTaskStartScheduler+0xb8>)
 8007830:	f04f 32ff 	mov.w	r2, #4294967295
 8007834:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <vTaskStartScheduler+0xbc>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800783c:	4b11      	ldr	r3, [pc, #68]	; (8007884 <vTaskStartScheduler+0xc0>)
 800783e:	2200      	movs	r2, #0
 8007840:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007842:	f000 fbb5 	bl	8007fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007846:	e00f      	b.n	8007868 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784e:	d10b      	bne.n	8007868 <vTaskStartScheduler+0xa4>
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	b672      	cpsid	i
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	b662      	cpsie	i
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e7fe      	b.n	8007866 <vTaskStartScheduler+0xa2>
}
 8007868:	bf00      	nop
 800786a:	3718      	adds	r7, #24
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	08014fb8 	.word	0x08014fb8
 8007874:	08007c2d 	.word	0x08007c2d
 8007878:	2000068c 	.word	0x2000068c
 800787c:	20000688 	.word	0x20000688
 8007880:	20000674 	.word	0x20000674
 8007884:	2000066c 	.word	0x2000066c

08007888 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007888:	b480      	push	{r7}
 800788a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <vTaskSuspendAll+0x18>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3301      	adds	r3, #1
 8007892:	4a03      	ldr	r2, [pc, #12]	; (80078a0 <vTaskSuspendAll+0x18>)
 8007894:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20000690 	.word	0x20000690

080078a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078b2:	4b42      	ldr	r3, [pc, #264]	; (80079bc <xTaskResumeAll+0x118>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10b      	bne.n	80078d2 <xTaskResumeAll+0x2e>
 80078ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078be:	b672      	cpsid	i
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	b662      	cpsie	i
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	e7fe      	b.n	80078d0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80078d2:	f000 fbe9 	bl	80080a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80078d6:	4b39      	ldr	r3, [pc, #228]	; (80079bc <xTaskResumeAll+0x118>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3b01      	subs	r3, #1
 80078dc:	4a37      	ldr	r2, [pc, #220]	; (80079bc <xTaskResumeAll+0x118>)
 80078de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078e0:	4b36      	ldr	r3, [pc, #216]	; (80079bc <xTaskResumeAll+0x118>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d161      	bne.n	80079ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80078e8:	4b35      	ldr	r3, [pc, #212]	; (80079c0 <xTaskResumeAll+0x11c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d05d      	beq.n	80079ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078f0:	e02e      	b.n	8007950 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078f2:	4b34      	ldr	r3, [pc, #208]	; (80079c4 <xTaskResumeAll+0x120>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3318      	adds	r3, #24
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fd67 	bl	80073d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	3304      	adds	r3, #4
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fd62 	bl	80073d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	2201      	movs	r2, #1
 8007914:	409a      	lsls	r2, r3
 8007916:	4b2c      	ldr	r3, [pc, #176]	; (80079c8 <xTaskResumeAll+0x124>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4313      	orrs	r3, r2
 800791c:	4a2a      	ldr	r2, [pc, #168]	; (80079c8 <xTaskResumeAll+0x124>)
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007924:	4613      	mov	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4a27      	ldr	r2, [pc, #156]	; (80079cc <xTaskResumeAll+0x128>)
 800792e:	441a      	add	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3304      	adds	r3, #4
 8007934:	4619      	mov	r1, r3
 8007936:	4610      	mov	r0, r2
 8007938:	f7ff fcee 	bl	8007318 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007940:	4b23      	ldr	r3, [pc, #140]	; (80079d0 <xTaskResumeAll+0x12c>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007946:	429a      	cmp	r2, r3
 8007948:	d302      	bcc.n	8007950 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800794a:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <xTaskResumeAll+0x130>)
 800794c:	2201      	movs	r2, #1
 800794e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007950:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <xTaskResumeAll+0x120>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1cc      	bne.n	80078f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800795e:	f000 f9f3 	bl	8007d48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007962:	4b1d      	ldr	r3, [pc, #116]	; (80079d8 <xTaskResumeAll+0x134>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d010      	beq.n	8007990 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800796e:	f000 f847 	bl	8007a00 <xTaskIncrementTick>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007978:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <xTaskResumeAll+0x130>)
 800797a:	2201      	movs	r2, #1
 800797c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3b01      	subs	r3, #1
 8007982:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1f1      	bne.n	800796e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <xTaskResumeAll+0x134>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007990:	4b10      	ldr	r3, [pc, #64]	; (80079d4 <xTaskResumeAll+0x130>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007998:	2301      	movs	r3, #1
 800799a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800799c:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <xTaskResumeAll+0x138>)
 800799e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079ac:	f000 fbae 	bl	800810c <vPortExitCritical>

	return xAlreadyYielded;
 80079b0:	68bb      	ldr	r3, [r7, #8]
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	20000690 	.word	0x20000690
 80079c0:	20000668 	.word	0x20000668
 80079c4:	20000628 	.word	0x20000628
 80079c8:	20000670 	.word	0x20000670
 80079cc:	2000056c 	.word	0x2000056c
 80079d0:	20000568 	.word	0x20000568
 80079d4:	2000067c 	.word	0x2000067c
 80079d8:	20000678 	.word	0x20000678
 80079dc:	e000ed04 	.word	0xe000ed04

080079e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80079e0:	b480      	push	{r7}
 80079e2:	b083      	sub	sp, #12
 80079e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80079e6:	4b05      	ldr	r3, [pc, #20]	; (80079fc <xTaskGetTickCount+0x1c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80079ec:	687b      	ldr	r3, [r7, #4]
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	2000066c 	.word	0x2000066c

08007a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a0a:	4b4f      	ldr	r3, [pc, #316]	; (8007b48 <xTaskIncrementTick+0x148>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 8089 	bne.w	8007b26 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a14:	4b4d      	ldr	r3, [pc, #308]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a1c:	4a4b      	ldr	r2, [pc, #300]	; (8007b4c <xTaskIncrementTick+0x14c>)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d121      	bne.n	8007a6c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a28:	4b49      	ldr	r3, [pc, #292]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <xTaskIncrementTick+0x4a>
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	b672      	cpsid	i
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	b662      	cpsie	i
 8007a46:	603b      	str	r3, [r7, #0]
 8007a48:	e7fe      	b.n	8007a48 <xTaskIncrementTick+0x48>
 8007a4a:	4b41      	ldr	r3, [pc, #260]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	4b40      	ldr	r3, [pc, #256]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a3e      	ldr	r2, [pc, #248]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a56:	6013      	str	r3, [r2, #0]
 8007a58:	4a3e      	ldr	r2, [pc, #248]	; (8007b54 <xTaskIncrementTick+0x154>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	4b3e      	ldr	r3, [pc, #248]	; (8007b58 <xTaskIncrementTick+0x158>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3301      	adds	r3, #1
 8007a64:	4a3c      	ldr	r2, [pc, #240]	; (8007b58 <xTaskIncrementTick+0x158>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	f000 f96e 	bl	8007d48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a6c:	4b3b      	ldr	r3, [pc, #236]	; (8007b5c <xTaskIncrementTick+0x15c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d348      	bcc.n	8007b08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a76:	4b36      	ldr	r3, [pc, #216]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d104      	bne.n	8007a8a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a80:	4b36      	ldr	r3, [pc, #216]	; (8007b5c <xTaskIncrementTick+0x15c>)
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295
 8007a86:	601a      	str	r2, [r3, #0]
					break;
 8007a88:	e03e      	b.n	8007b08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a8a:	4b31      	ldr	r3, [pc, #196]	; (8007b50 <xTaskIncrementTick+0x150>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d203      	bcs.n	8007aaa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007aa2:	4a2e      	ldr	r2, [pc, #184]	; (8007b5c <xTaskIncrementTick+0x15c>)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007aa8:	e02e      	b.n	8007b08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	3304      	adds	r3, #4
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fc8f 	bl	80073d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d004      	beq.n	8007ac6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	3318      	adds	r3, #24
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f7ff fc86 	bl	80073d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aca:	2201      	movs	r2, #1
 8007acc:	409a      	lsls	r2, r3
 8007ace:	4b24      	ldr	r3, [pc, #144]	; (8007b60 <xTaskIncrementTick+0x160>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	4a22      	ldr	r2, [pc, #136]	; (8007b60 <xTaskIncrementTick+0x160>)
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4a1f      	ldr	r2, [pc, #124]	; (8007b64 <xTaskIncrementTick+0x164>)
 8007ae6:	441a      	add	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7ff fc12 	bl	8007318 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af8:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <xTaskIncrementTick+0x168>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d3b9      	bcc.n	8007a76 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b02:	2301      	movs	r3, #1
 8007b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b06:	e7b6      	b.n	8007a76 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b08:	4b17      	ldr	r3, [pc, #92]	; (8007b68 <xTaskIncrementTick+0x168>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b0e:	4915      	ldr	r1, [pc, #84]	; (8007b64 <xTaskIncrementTick+0x164>)
 8007b10:	4613      	mov	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	4413      	add	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	440b      	add	r3, r1
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d907      	bls.n	8007b30 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007b20:	2301      	movs	r3, #1
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	e004      	b.n	8007b30 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b26:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <xTaskIncrementTick+0x16c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	4a0f      	ldr	r2, [pc, #60]	; (8007b6c <xTaskIncrementTick+0x16c>)
 8007b2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b30:	4b0f      	ldr	r3, [pc, #60]	; (8007b70 <xTaskIncrementTick+0x170>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007b3c:	697b      	ldr	r3, [r7, #20]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000690 	.word	0x20000690
 8007b4c:	2000066c 	.word	0x2000066c
 8007b50:	20000620 	.word	0x20000620
 8007b54:	20000624 	.word	0x20000624
 8007b58:	20000680 	.word	0x20000680
 8007b5c:	20000688 	.word	0x20000688
 8007b60:	20000670 	.word	0x20000670
 8007b64:	2000056c 	.word	0x2000056c
 8007b68:	20000568 	.word	0x20000568
 8007b6c:	20000678 	.word	0x20000678
 8007b70:	2000067c 	.word	0x2000067c

08007b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b7a:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <vTaskSwitchContext+0xa4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b82:	4b26      	ldr	r3, [pc, #152]	; (8007c1c <vTaskSwitchContext+0xa8>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b88:	e040      	b.n	8007c0c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b8a:	4b24      	ldr	r3, [pc, #144]	; (8007c1c <vTaskSwitchContext+0xa8>)
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b90:	4b23      	ldr	r3, [pc, #140]	; (8007c20 <vTaskSwitchContext+0xac>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	fab3 f383 	clz	r3, r3
 8007b9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	f1c3 031f 	rsb	r3, r3, #31
 8007ba4:	617b      	str	r3, [r7, #20]
 8007ba6:	491f      	ldr	r1, [pc, #124]	; (8007c24 <vTaskSwitchContext+0xb0>)
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	4613      	mov	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	440b      	add	r3, r1
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10b      	bne.n	8007bd2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	b672      	cpsid	i
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	b662      	cpsie	i
 8007bce:	607b      	str	r3, [r7, #4]
 8007bd0:	e7fe      	b.n	8007bd0 <vTaskSwitchContext+0x5c>
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4a11      	ldr	r2, [pc, #68]	; (8007c24 <vTaskSwitchContext+0xb0>)
 8007bde:	4413      	add	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	605a      	str	r2, [r3, #4]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3308      	adds	r3, #8
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d104      	bne.n	8007c02 <vTaskSwitchContext+0x8e>
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	605a      	str	r2, [r3, #4]
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	4a07      	ldr	r2, [pc, #28]	; (8007c28 <vTaskSwitchContext+0xb4>)
 8007c0a:	6013      	str	r3, [r2, #0]
}
 8007c0c:	bf00      	nop
 8007c0e:	371c      	adds	r7, #28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	20000690 	.word	0x20000690
 8007c1c:	2000067c 	.word	0x2000067c
 8007c20:	20000670 	.word	0x20000670
 8007c24:	2000056c 	.word	0x2000056c
 8007c28:	20000568 	.word	0x20000568

08007c2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c34:	f000 f852 	bl	8007cdc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <prvIdleTask+0x28>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d9f9      	bls.n	8007c34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <prvIdleTask+0x2c>)
 8007c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c50:	e7f0      	b.n	8007c34 <prvIdleTask+0x8>
 8007c52:	bf00      	nop
 8007c54:	2000056c 	.word	0x2000056c
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
 8007c66:	e00c      	b.n	8007c82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	4413      	add	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4a12      	ldr	r2, [pc, #72]	; (8007cbc <prvInitialiseTaskLists+0x60>)
 8007c74:	4413      	add	r3, r2
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fb21 	bl	80072be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	607b      	str	r3, [r7, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b06      	cmp	r3, #6
 8007c86:	d9ef      	bls.n	8007c68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c88:	480d      	ldr	r0, [pc, #52]	; (8007cc0 <prvInitialiseTaskLists+0x64>)
 8007c8a:	f7ff fb18 	bl	80072be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c8e:	480d      	ldr	r0, [pc, #52]	; (8007cc4 <prvInitialiseTaskLists+0x68>)
 8007c90:	f7ff fb15 	bl	80072be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c94:	480c      	ldr	r0, [pc, #48]	; (8007cc8 <prvInitialiseTaskLists+0x6c>)
 8007c96:	f7ff fb12 	bl	80072be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c9a:	480c      	ldr	r0, [pc, #48]	; (8007ccc <prvInitialiseTaskLists+0x70>)
 8007c9c:	f7ff fb0f 	bl	80072be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ca0:	480b      	ldr	r0, [pc, #44]	; (8007cd0 <prvInitialiseTaskLists+0x74>)
 8007ca2:	f7ff fb0c 	bl	80072be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ca6:	4b0b      	ldr	r3, [pc, #44]	; (8007cd4 <prvInitialiseTaskLists+0x78>)
 8007ca8:	4a05      	ldr	r2, [pc, #20]	; (8007cc0 <prvInitialiseTaskLists+0x64>)
 8007caa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cac:	4b0a      	ldr	r3, [pc, #40]	; (8007cd8 <prvInitialiseTaskLists+0x7c>)
 8007cae:	4a05      	ldr	r2, [pc, #20]	; (8007cc4 <prvInitialiseTaskLists+0x68>)
 8007cb0:	601a      	str	r2, [r3, #0]
}
 8007cb2:	bf00      	nop
 8007cb4:	3708      	adds	r7, #8
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2000056c 	.word	0x2000056c
 8007cc0:	200005f8 	.word	0x200005f8
 8007cc4:	2000060c 	.word	0x2000060c
 8007cc8:	20000628 	.word	0x20000628
 8007ccc:	2000063c 	.word	0x2000063c
 8007cd0:	20000654 	.word	0x20000654
 8007cd4:	20000620 	.word	0x20000620
 8007cd8:	20000624 	.word	0x20000624

08007cdc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ce2:	e019      	b.n	8007d18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ce4:	f000 f9e0 	bl	80080a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <prvCheckTasksWaitingTermination+0x4c>)
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fb6c 	bl	80073d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <prvCheckTasksWaitingTermination+0x50>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	4a0a      	ldr	r2, [pc, #40]	; (8007d2c <prvCheckTasksWaitingTermination+0x50>)
 8007d02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d04:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <prvCheckTasksWaitingTermination+0x54>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <prvCheckTasksWaitingTermination+0x54>)
 8007d0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d0e:	f000 f9fd 	bl	800810c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f80e 	bl	8007d34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <prvCheckTasksWaitingTermination+0x54>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e1      	bne.n	8007ce4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	2000063c 	.word	0x2000063c
 8007d2c:	20000668 	.word	0x20000668
 8007d30:	20000650 	.word	0x20000650

08007d34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d4e:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <prvResetNextTaskUnblockTime+0x38>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d58:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <prvResetNextTaskUnblockTime+0x3c>)
 8007d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d60:	e008      	b.n	8007d74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d62:	4b07      	ldr	r3, [pc, #28]	; (8007d80 <prvResetNextTaskUnblockTime+0x38>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <prvResetNextTaskUnblockTime+0x3c>)
 8007d72:	6013      	str	r3, [r2, #0]
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	20000620 	.word	0x20000620
 8007d84:	20000688 	.word	0x20000688

08007d88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d8e:	4b0b      	ldr	r3, [pc, #44]	; (8007dbc <xTaskGetSchedulerState+0x34>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d96:	2301      	movs	r3, #1
 8007d98:	607b      	str	r3, [r7, #4]
 8007d9a:	e008      	b.n	8007dae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d9c:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <xTaskGetSchedulerState+0x38>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d102      	bne.n	8007daa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007da4:	2302      	movs	r3, #2
 8007da6:	607b      	str	r3, [r7, #4]
 8007da8:	e001      	b.n	8007dae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007daa:	2300      	movs	r3, #0
 8007dac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dae:	687b      	ldr	r3, [r7, #4]
	}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	20000674 	.word	0x20000674
 8007dc0:	20000690 	.word	0x20000690

08007dc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007dce:	4b29      	ldr	r3, [pc, #164]	; (8007e74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dd4:	4b28      	ldr	r3, [pc, #160]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff faf9 	bl	80073d2 <uxListRemove>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10b      	bne.n	8007dfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007de6:	4b24      	ldr	r3, [pc, #144]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	2201      	movs	r2, #1
 8007dee:	fa02 f303 	lsl.w	r3, r2, r3
 8007df2:	43da      	mvns	r2, r3
 8007df4:	4b21      	ldr	r3, [pc, #132]	; (8007e7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	4a20      	ldr	r2, [pc, #128]	; (8007e7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007dfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e04:	d10a      	bne.n	8007e1c <prvAddCurrentTaskToDelayedList+0x58>
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e0c:	4b1a      	ldr	r3, [pc, #104]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3304      	adds	r3, #4
 8007e12:	4619      	mov	r1, r3
 8007e14:	481a      	ldr	r0, [pc, #104]	; (8007e80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e16:	f7ff fa7f 	bl	8007318 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e1a:	e026      	b.n	8007e6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4413      	add	r3, r2
 8007e22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e24:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d209      	bcs.n	8007e48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e34:	4b13      	ldr	r3, [pc, #76]	; (8007e84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	4b0f      	ldr	r3, [pc, #60]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7ff fa8d 	bl	8007360 <vListInsert>
}
 8007e46:	e010      	b.n	8007e6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e48:	4b0f      	ldr	r3, [pc, #60]	; (8007e88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b0a      	ldr	r3, [pc, #40]	; (8007e78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7ff fa83 	bl	8007360 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d202      	bcs.n	8007e6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e64:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6013      	str	r3, [r2, #0]
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	2000066c 	.word	0x2000066c
 8007e78:	20000568 	.word	0x20000568
 8007e7c:	20000670 	.word	0x20000670
 8007e80:	20000654 	.word	0x20000654
 8007e84:	20000624 	.word	0x20000624
 8007e88:	20000620 	.word	0x20000620
 8007e8c:	20000688 	.word	0x20000688

08007e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 0201 	bic.w	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	; (8007ef4 <pxPortInitialiseStack+0x64>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b14      	subs	r3, #20
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f06f 0202 	mvn.w	r2, #2
 8007ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3b20      	subs	r3, #32
 8007ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	08007ef9 	.word	0x08007ef9

08007ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f02:	4b13      	ldr	r3, [pc, #76]	; (8007f50 <prvTaskExitError+0x58>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0a:	d00b      	beq.n	8007f24 <prvTaskExitError+0x2c>
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e7fe      	b.n	8007f22 <prvTaskExitError+0x2a>
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	b672      	cpsid	i
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	b662      	cpsie	i
 8007f38:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f3a:	bf00      	nop
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0fc      	beq.n	8007f3c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	20000008 	.word	0x20000008
	...

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	4770      	bx	lr
 8007f7c:	f3af 8000 	nop.w

08007f80 <pxCurrentTCBConst2>:
 8007f80:	20000568 	.word	0x20000568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f88:	4808      	ldr	r0, [pc, #32]	; (8007fac <prvPortStartFirstTask+0x24>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8814 	msr	CONTROL, r0
 8007f9a:	b662      	cpsie	i
 8007f9c:	b661      	cpsie	f
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	df00      	svc	0
 8007fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007faa:	bf00      	nop
 8007fac:	e000ed08 	.word	0xe000ed08

08007fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fb6:	4b36      	ldr	r3, [pc, #216]	; (8008090 <xPortStartScheduler+0xe0>)
 8007fb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	22ff      	movs	r2, #255	; 0xff
 8007fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fd0:	78fb      	ldrb	r3, [r7, #3]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	4b2e      	ldr	r3, [pc, #184]	; (8008094 <xPortStartScheduler+0xe4>)
 8007fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fde:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <xPortStartScheduler+0xe8>)
 8007fe0:	2207      	movs	r2, #7
 8007fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fe4:	e009      	b.n	8007ffa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007fe6:	4b2c      	ldr	r3, [pc, #176]	; (8008098 <xPortStartScheduler+0xe8>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	4a2a      	ldr	r2, [pc, #168]	; (8008098 <xPortStartScheduler+0xe8>)
 8007fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ff0:	78fb      	ldrb	r3, [r7, #3]
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	005b      	lsls	r3, r3, #1
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ffa:	78fb      	ldrb	r3, [r7, #3]
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008002:	2b80      	cmp	r3, #128	; 0x80
 8008004:	d0ef      	beq.n	8007fe6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008006:	4b24      	ldr	r3, [pc, #144]	; (8008098 <xPortStartScheduler+0xe8>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f1c3 0307 	rsb	r3, r3, #7
 800800e:	2b04      	cmp	r3, #4
 8008010:	d00b      	beq.n	800802a <xPortStartScheduler+0x7a>
 8008012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008016:	b672      	cpsid	i
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	b662      	cpsie	i
 8008026:	60bb      	str	r3, [r7, #8]
 8008028:	e7fe      	b.n	8008028 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800802a:	4b1b      	ldr	r3, [pc, #108]	; (8008098 <xPortStartScheduler+0xe8>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	021b      	lsls	r3, r3, #8
 8008030:	4a19      	ldr	r2, [pc, #100]	; (8008098 <xPortStartScheduler+0xe8>)
 8008032:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008034:	4b18      	ldr	r3, [pc, #96]	; (8008098 <xPortStartScheduler+0xe8>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800803c:	4a16      	ldr	r2, [pc, #88]	; (8008098 <xPortStartScheduler+0xe8>)
 800803e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	b2da      	uxtb	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008048:	4b14      	ldr	r3, [pc, #80]	; (800809c <xPortStartScheduler+0xec>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a13      	ldr	r2, [pc, #76]	; (800809c <xPortStartScheduler+0xec>)
 800804e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008052:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008054:	4b11      	ldr	r3, [pc, #68]	; (800809c <xPortStartScheduler+0xec>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a10      	ldr	r2, [pc, #64]	; (800809c <xPortStartScheduler+0xec>)
 800805a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800805e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008060:	f000 f8d4 	bl	800820c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008064:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <xPortStartScheduler+0xf0>)
 8008066:	2200      	movs	r2, #0
 8008068:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800806a:	f000 f8f3 	bl	8008254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800806e:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <xPortStartScheduler+0xf4>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a0c      	ldr	r2, [pc, #48]	; (80080a4 <xPortStartScheduler+0xf4>)
 8008074:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008078:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800807a:	f7ff ff85 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800807e:	f7ff fd79 	bl	8007b74 <vTaskSwitchContext>
	prvTaskExitError();
 8008082:	f7ff ff39 	bl	8007ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008086:	2300      	movs	r3, #0
}
 8008088:	4618      	mov	r0, r3
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	e000e400 	.word	0xe000e400
 8008094:	20000694 	.word	0x20000694
 8008098:	20000698 	.word	0x20000698
 800809c:	e000ed20 	.word	0xe000ed20
 80080a0:	20000008 	.word	0x20000008
 80080a4:	e000ef34 	.word	0xe000ef34

080080a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	b672      	cpsid	i
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	b662      	cpsie	i
 80080c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080c4:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <vPortEnterCritical+0x5c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	3301      	adds	r3, #1
 80080ca:	4a0e      	ldr	r2, [pc, #56]	; (8008104 <vPortEnterCritical+0x5c>)
 80080cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <vPortEnterCritical+0x5c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d110      	bne.n	80080f8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080d6:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <vPortEnterCritical+0x60>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00b      	beq.n	80080f8 <vPortEnterCritical+0x50>
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	b672      	cpsid	i
 80080e6:	f383 8811 	msr	BASEPRI, r3
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	b662      	cpsie	i
 80080f4:	603b      	str	r3, [r7, #0]
 80080f6:	e7fe      	b.n	80080f6 <vPortEnterCritical+0x4e>
	}
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr
 8008104:	20000008 	.word	0x20000008
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008112:	4b12      	ldr	r3, [pc, #72]	; (800815c <vPortExitCritical+0x50>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <vPortExitCritical+0x26>
 800811a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811e:	b672      	cpsid	i
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	b662      	cpsie	i
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	e7fe      	b.n	8008130 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008132:	4b0a      	ldr	r3, [pc, #40]	; (800815c <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3b01      	subs	r3, #1
 8008138:	4a08      	ldr	r2, [pc, #32]	; (800815c <vPortExitCritical+0x50>)
 800813a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800813c:	4b07      	ldr	r3, [pc, #28]	; (800815c <vPortExitCritical+0x50>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d104      	bne.n	800814e <vPortExitCritical+0x42>
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800814e:	bf00      	nop
 8008150:	370c      	adds	r7, #12
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	20000008 	.word	0x20000008

08008160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008160:	f3ef 8009 	mrs	r0, PSP
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <pxCurrentTCBConst>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f01e 0f10 	tst.w	lr, #16
 8008170:	bf08      	it	eq
 8008172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	6010      	str	r0, [r2, #0]
 800817c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008184:	b672      	cpsid	i
 8008186:	f380 8811 	msr	BASEPRI, r0
 800818a:	f3bf 8f4f 	dsb	sy
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	b662      	cpsie	i
 8008194:	f7ff fcee 	bl	8007b74 <vTaskSwitchContext>
 8008198:	f04f 0000 	mov.w	r0, #0
 800819c:	f380 8811 	msr	BASEPRI, r0
 80081a0:	bc09      	pop	{r0, r3}
 80081a2:	6819      	ldr	r1, [r3, #0]
 80081a4:	6808      	ldr	r0, [r1, #0]
 80081a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081aa:	f01e 0f10 	tst.w	lr, #16
 80081ae:	bf08      	it	eq
 80081b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081b4:	f380 8809 	msr	PSP, r0
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop

080081c0 <pxCurrentTCBConst>:
 80081c0:	20000568 	.word	0x20000568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	b672      	cpsid	i
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	b662      	cpsie	i
 80081e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081e4:	f7ff fc0c 	bl	8007a00 <xTaskIncrementTick>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d003      	beq.n	80081f6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ee:	4b06      	ldr	r3, [pc, #24]	; (8008208 <xPortSysTickHandler+0x40>)
 80081f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f4:	601a      	str	r2, [r3, #0]
 80081f6:	2300      	movs	r3, #0
 80081f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008210:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <vPortSetupTimerInterrupt+0x38>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800821c:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <vPortSetupTimerInterrupt+0x3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0a      	ldr	r2, [pc, #40]	; (800824c <vPortSetupTimerInterrupt+0x40>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	4a09      	ldr	r2, [pc, #36]	; (8008250 <vPortSetupTimerInterrupt+0x44>)
 800822a:	3b01      	subs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800822e:	4b04      	ldr	r3, [pc, #16]	; (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	e000e010 	.word	0xe000e010
 8008244:	e000e018 	.word	0xe000e018
 8008248:	2000000c 	.word	0x2000000c
 800824c:	10624dd3 	.word	0x10624dd3
 8008250:	e000e014 	.word	0xe000e014

08008254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008264 <vPortEnableVFP+0x10>
 8008258:	6801      	ldr	r1, [r0, #0]
 800825a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800825e:	6001      	str	r1, [r0, #0]
 8008260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008262:	bf00      	nop
 8008264:	e000ed88 	.word	0xe000ed88

08008268 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800826e:	463b      	mov	r3, r7
 8008270:	2200      	movs	r2, #0
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	605a      	str	r2, [r3, #4]
 8008276:	609a      	str	r2, [r3, #8]
 8008278:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800827a:	4b44      	ldr	r3, [pc, #272]	; (800838c <MX_ADC1_Init+0x124>)
 800827c:	4a44      	ldr	r2, [pc, #272]	; (8008390 <MX_ADC1_Init+0x128>)
 800827e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008280:	4b42      	ldr	r3, [pc, #264]	; (800838c <MX_ADC1_Init+0x124>)
 8008282:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008286:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008288:	4b40      	ldr	r3, [pc, #256]	; (800838c <MX_ADC1_Init+0x124>)
 800828a:	2200      	movs	r2, #0
 800828c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800828e:	4b3f      	ldr	r3, [pc, #252]	; (800838c <MX_ADC1_Init+0x124>)
 8008290:	2201      	movs	r2, #1
 8008292:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008294:	4b3d      	ldr	r3, [pc, #244]	; (800838c <MX_ADC1_Init+0x124>)
 8008296:	2201      	movs	r2, #1
 8008298:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800829a:	4b3c      	ldr	r3, [pc, #240]	; (800838c <MX_ADC1_Init+0x124>)
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80082a2:	4b3a      	ldr	r3, [pc, #232]	; (800838c <MX_ADC1_Init+0x124>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80082a8:	4b38      	ldr	r3, [pc, #224]	; (800838c <MX_ADC1_Init+0x124>)
 80082aa:	4a3a      	ldr	r2, [pc, #232]	; (8008394 <MX_ADC1_Init+0x12c>)
 80082ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80082ae:	4b37      	ldr	r3, [pc, #220]	; (800838c <MX_ADC1_Init+0x124>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80082b4:	4b35      	ldr	r3, [pc, #212]	; (800838c <MX_ADC1_Init+0x124>)
 80082b6:	2206      	movs	r2, #6
 80082b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80082ba:	4b34      	ldr	r3, [pc, #208]	; (800838c <MX_ADC1_Init+0x124>)
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80082c2:	4b32      	ldr	r3, [pc, #200]	; (800838c <MX_ADC1_Init+0x124>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80082c8:	4830      	ldr	r0, [pc, #192]	; (800838c <MX_ADC1_Init+0x124>)
 80082ca:	f7f8 fec3 	bl	8001054 <HAL_ADC_Init>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80082d4:	f000 fdfa 	bl	8008ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80082d8:	2303      	movs	r3, #3
 80082da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80082dc:	2301      	movs	r3, #1
 80082de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80082e0:	2307      	movs	r3, #7
 80082e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80082e4:	463b      	mov	r3, r7
 80082e6:	4619      	mov	r1, r3
 80082e8:	4828      	ldr	r0, [pc, #160]	; (800838c <MX_ADC1_Init+0x124>)
 80082ea:	f7f8 fef7 	bl	80010dc <HAL_ADC_ConfigChannel>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80082f4:	f000 fdea 	bl	8008ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80082f8:	2304      	movs	r3, #4
 80082fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80082fc:	2302      	movs	r3, #2
 80082fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008300:	463b      	mov	r3, r7
 8008302:	4619      	mov	r1, r3
 8008304:	4821      	ldr	r0, [pc, #132]	; (800838c <MX_ADC1_Init+0x124>)
 8008306:	f7f8 fee9 	bl	80010dc <HAL_ADC_ConfigChannel>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008310:	f000 fddc 	bl	8008ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008314:	2309      	movs	r3, #9
 8008316:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008318:	2303      	movs	r3, #3
 800831a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800831c:	463b      	mov	r3, r7
 800831e:	4619      	mov	r1, r3
 8008320:	481a      	ldr	r0, [pc, #104]	; (800838c <MX_ADC1_Init+0x124>)
 8008322:	f7f8 fedb 	bl	80010dc <HAL_ADC_ConfigChannel>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800832c:	f000 fdce 	bl	8008ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008330:	230a      	movs	r3, #10
 8008332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008334:	2304      	movs	r3, #4
 8008336:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008338:	463b      	mov	r3, r7
 800833a:	4619      	mov	r1, r3
 800833c:	4813      	ldr	r0, [pc, #76]	; (800838c <MX_ADC1_Init+0x124>)
 800833e:	f7f8 fecd 	bl	80010dc <HAL_ADC_ConfigChannel>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8008348:	f000 fdc0 	bl	8008ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800834c:	230c      	movs	r3, #12
 800834e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008350:	2305      	movs	r3, #5
 8008352:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008354:	463b      	mov	r3, r7
 8008356:	4619      	mov	r1, r3
 8008358:	480c      	ldr	r0, [pc, #48]	; (800838c <MX_ADC1_Init+0x124>)
 800835a:	f7f8 febf 	bl	80010dc <HAL_ADC_ConfigChannel>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8008364:	f000 fdb2 	bl	8008ecc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8008368:	230d      	movs	r3, #13
 800836a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800836c:	2306      	movs	r3, #6
 800836e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008370:	463b      	mov	r3, r7
 8008372:	4619      	mov	r1, r3
 8008374:	4805      	ldr	r0, [pc, #20]	; (800838c <MX_ADC1_Init+0x124>)
 8008376:	f7f8 feb1 	bl	80010dc <HAL_ADC_ConfigChannel>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8008380:	f000 fda4 	bl	8008ecc <Error_Handler>
  }

}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20002608 	.word	0x20002608
 8008390:	40012000 	.word	0x40012000
 8008394:	0f000001 	.word	0x0f000001

08008398 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b08c      	sub	sp, #48	; 0x30
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083a0:	f107 031c 	add.w	r3, r7, #28
 80083a4:	2200      	movs	r2, #0
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	605a      	str	r2, [r3, #4]
 80083aa:	609a      	str	r2, [r3, #8]
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a45      	ldr	r2, [pc, #276]	; (80084cc <HAL_ADC_MspInit+0x134>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	f040 8084 	bne.w	80084c4 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80083bc:	4b44      	ldr	r3, [pc, #272]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c0:	4a43      	ldr	r2, [pc, #268]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c6:	6453      	str	r3, [r2, #68]	; 0x44
 80083c8:	4b41      	ldr	r3, [pc, #260]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d0:	61bb      	str	r3, [r7, #24]
 80083d2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083d4:	4b3e      	ldr	r3, [pc, #248]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d8:	4a3d      	ldr	r2, [pc, #244]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083da:	f043 0304 	orr.w	r3, r3, #4
 80083de:	6313      	str	r3, [r2, #48]	; 0x30
 80083e0:	4b3b      	ldr	r3, [pc, #236]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ec:	4b38      	ldr	r3, [pc, #224]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	4a37      	ldr	r2, [pc, #220]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083f2:	f043 0301 	orr.w	r3, r3, #1
 80083f6:	6313      	str	r3, [r2, #48]	; 0x30
 80083f8:	4b35      	ldr	r3, [pc, #212]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 80083fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	613b      	str	r3, [r7, #16]
 8008402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008404:	4b32      	ldr	r3, [pc, #200]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 8008406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008408:	4a31      	ldr	r2, [pc, #196]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 800840a:	f043 0302 	orr.w	r3, r3, #2
 800840e:	6313      	str	r3, [r2, #48]	; 0x30
 8008410:	4b2f      	ldr	r3, [pc, #188]	; (80084d0 <HAL_ADC_MspInit+0x138>)
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	f003 0302 	and.w	r3, r3, #2
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
 800841c:	230d      	movs	r3, #13
 800841e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008420:	2303      	movs	r3, #3
 8008422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008424:	2300      	movs	r3, #0
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008428:	f107 031c 	add.w	r3, r7, #28
 800842c:	4619      	mov	r1, r3
 800842e:	4829      	ldr	r0, [pc, #164]	; (80084d4 <HAL_ADC_MspInit+0x13c>)
 8008430:	f7fa f9f4 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8008434:	2318      	movs	r3, #24
 8008436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008438:	2303      	movs	r3, #3
 800843a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800843c:	2300      	movs	r3, #0
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008440:	f107 031c 	add.w	r3, r7, #28
 8008444:	4619      	mov	r1, r3
 8008446:	4824      	ldr	r0, [pc, #144]	; (80084d8 <HAL_ADC_MspInit+0x140>)
 8008448:	f7fa f9e8 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
 800844c:	2302      	movs	r3, #2
 800844e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008450:	2303      	movs	r3, #3
 8008452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008454:	2300      	movs	r3, #0
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 8008458:	f107 031c 	add.w	r3, r7, #28
 800845c:	4619      	mov	r1, r3
 800845e:	481f      	ldr	r0, [pc, #124]	; (80084dc <HAL_ADC_MspInit+0x144>)
 8008460:	f7fa f9dc 	bl	800281c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8008464:	4b1e      	ldr	r3, [pc, #120]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 8008466:	4a1f      	ldr	r2, [pc, #124]	; (80084e4 <HAL_ADC_MspInit+0x14c>)
 8008468:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800846a:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 800846c:	2200      	movs	r2, #0
 800846e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008470:	4b1b      	ldr	r3, [pc, #108]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 8008472:	2200      	movs	r2, #0
 8008474:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008476:	4b1a      	ldr	r3, [pc, #104]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 8008478:	2200      	movs	r2, #0
 800847a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800847c:	4b18      	ldr	r3, [pc, #96]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 800847e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008482:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008484:	4b16      	ldr	r3, [pc, #88]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 8008486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800848a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800848c:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 800848e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008492:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008494:	4b12      	ldr	r3, [pc, #72]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 8008496:	f44f 7280 	mov.w	r2, #256	; 0x100
 800849a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800849c:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 800849e:	2200      	movs	r2, #0
 80084a0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80084a2:	4b0f      	ldr	r3, [pc, #60]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80084a8:	480d      	ldr	r0, [pc, #52]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 80084aa:	f7f9 fdaf 	bl	800200c <HAL_DMA_Init>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 80084b4:	f000 fd0a 	bl	8008ecc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a09      	ldr	r2, [pc, #36]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 80084bc:	639a      	str	r2, [r3, #56]	; 0x38
 80084be:	4a08      	ldr	r2, [pc, #32]	; (80084e0 <HAL_ADC_MspInit+0x148>)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80084c4:	bf00      	nop
 80084c6:	3730      	adds	r7, #48	; 0x30
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	40012000 	.word	0x40012000
 80084d0:	40023800 	.word	0x40023800
 80084d4:	40020800 	.word	0x40020800
 80084d8:	40020000 	.word	0x40020000
 80084dc:	40020400 	.word	0x40020400
 80084e0:	20002650 	.word	0x20002650
 80084e4:	40026470 	.word	0x40026470

080084e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80084ec:	4b17      	ldr	r3, [pc, #92]	; (800854c <MX_CAN1_Init+0x64>)
 80084ee:	4a18      	ldr	r2, [pc, #96]	; (8008550 <MX_CAN1_Init+0x68>)
 80084f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80084f2:	4b16      	ldr	r3, [pc, #88]	; (800854c <MX_CAN1_Init+0x64>)
 80084f4:	2206      	movs	r2, #6
 80084f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80084f8:	4b14      	ldr	r3, [pc, #80]	; (800854c <MX_CAN1_Init+0x64>)
 80084fa:	2200      	movs	r2, #0
 80084fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <MX_CAN1_Init+0x64>)
 8008500:	2200      	movs	r2, #0
 8008502:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8008504:	4b11      	ldr	r3, [pc, #68]	; (800854c <MX_CAN1_Init+0x64>)
 8008506:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800850a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <MX_CAN1_Init+0x64>)
 800850e:	2200      	movs	r2, #0
 8008510:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008512:	4b0e      	ldr	r3, [pc, #56]	; (800854c <MX_CAN1_Init+0x64>)
 8008514:	2200      	movs	r2, #0
 8008516:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8008518:	4b0c      	ldr	r3, [pc, #48]	; (800854c <MX_CAN1_Init+0x64>)
 800851a:	2200      	movs	r2, #0
 800851c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800851e:	4b0b      	ldr	r3, [pc, #44]	; (800854c <MX_CAN1_Init+0x64>)
 8008520:	2200      	movs	r2, #0
 8008522:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008524:	4b09      	ldr	r3, [pc, #36]	; (800854c <MX_CAN1_Init+0x64>)
 8008526:	2201      	movs	r2, #1
 8008528:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800852a:	4b08      	ldr	r3, [pc, #32]	; (800854c <MX_CAN1_Init+0x64>)
 800852c:	2200      	movs	r2, #0
 800852e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008530:	4b06      	ldr	r3, [pc, #24]	; (800854c <MX_CAN1_Init+0x64>)
 8008532:	2200      	movs	r2, #0
 8008534:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008536:	4805      	ldr	r0, [pc, #20]	; (800854c <MX_CAN1_Init+0x64>)
 8008538:	f7f9 f814 	bl	8001564 <HAL_CAN_Init>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8008542:	f000 fcc3 	bl	8008ecc <Error_Handler>
  }

}
 8008546:	bf00      	nop
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	200026b0 	.word	0x200026b0
 8008550:	40006400 	.word	0x40006400

08008554 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800855c:	f107 0314 	add.w	r3, r7, #20
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a1f      	ldr	r2, [pc, #124]	; (80085f0 <HAL_CAN_MspInit+0x9c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d137      	bne.n	80085e6 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008576:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <HAL_CAN_MspInit+0xa0>)
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <HAL_CAN_MspInit+0xa0>)
 800857c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008580:	6413      	str	r3, [r2, #64]	; 0x40
 8008582:	4b1c      	ldr	r3, [pc, #112]	; (80085f4 <HAL_CAN_MspInit+0xa0>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858a:	613b      	str	r3, [r7, #16]
 800858c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800858e:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <HAL_CAN_MspInit+0xa0>)
 8008590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008592:	4a18      	ldr	r2, [pc, #96]	; (80085f4 <HAL_CAN_MspInit+0xa0>)
 8008594:	f043 0308 	orr.w	r3, r3, #8
 8008598:	6313      	str	r3, [r2, #48]	; 0x30
 800859a:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <HAL_CAN_MspInit+0xa0>)
 800859c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80085a6:	2303      	movs	r3, #3
 80085a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085aa:	2302      	movs	r3, #2
 80085ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ae:	2300      	movs	r3, #0
 80085b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085b2:	2303      	movs	r3, #3
 80085b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80085b6:	2309      	movs	r3, #9
 80085b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80085ba:	f107 0314 	add.w	r3, r7, #20
 80085be:	4619      	mov	r1, r3
 80085c0:	480d      	ldr	r0, [pc, #52]	; (80085f8 <HAL_CAN_MspInit+0xa4>)
 80085c2:	f7fa f92b 	bl	800281c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80085c6:	2200      	movs	r2, #0
 80085c8:	2105      	movs	r1, #5
 80085ca:	2014      	movs	r0, #20
 80085cc:	f7f9 fcf4 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80085d0:	2014      	movs	r0, #20
 80085d2:	f7f9 fd0d 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80085d6:	2200      	movs	r2, #0
 80085d8:	2105      	movs	r1, #5
 80085da:	2015      	movs	r0, #21
 80085dc:	f7f9 fcec 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80085e0:	2015      	movs	r0, #21
 80085e2:	f7f9 fd05 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80085e6:	bf00      	nop
 80085e8:	3728      	adds	r7, #40	; 0x28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	40006400 	.word	0x40006400
 80085f4:	40023800 	.word	0x40023800
 80085f8:	40020c00 	.word	0x40020c00

080085fc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008602:	4b3e      	ldr	r3, [pc, #248]	; (80086fc <MX_DMA_Init+0x100>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	4a3d      	ldr	r2, [pc, #244]	; (80086fc <MX_DMA_Init+0x100>)
 8008608:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800860c:	6313      	str	r3, [r2, #48]	; 0x30
 800860e:	4b3b      	ldr	r3, [pc, #236]	; (80086fc <MX_DMA_Init+0x100>)
 8008610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008616:	607b      	str	r3, [r7, #4]
 8008618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800861a:	4b38      	ldr	r3, [pc, #224]	; (80086fc <MX_DMA_Init+0x100>)
 800861c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800861e:	4a37      	ldr	r2, [pc, #220]	; (80086fc <MX_DMA_Init+0x100>)
 8008620:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008624:	6313      	str	r3, [r2, #48]	; 0x30
 8008626:	4b35      	ldr	r3, [pc, #212]	; (80086fc <MX_DMA_Init+0x100>)
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800862e:	603b      	str	r3, [r7, #0]
 8008630:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8008632:	2200      	movs	r2, #0
 8008634:	2105      	movs	r1, #5
 8008636:	200b      	movs	r0, #11
 8008638:	f7f9 fcbe 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800863c:	200b      	movs	r0, #11
 800863e:	f7f9 fcd7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8008642:	2200      	movs	r2, #0
 8008644:	2105      	movs	r1, #5
 8008646:	200c      	movs	r0, #12
 8008648:	f7f9 fcb6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800864c:	200c      	movs	r0, #12
 800864e:	f7f9 fccf 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8008652:	2200      	movs	r2, #0
 8008654:	2105      	movs	r1, #5
 8008656:	200f      	movs	r0, #15
 8008658:	f7f9 fcae 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800865c:	200f      	movs	r0, #15
 800865e:	f7f9 fcc7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8008662:	2200      	movs	r2, #0
 8008664:	2105      	movs	r1, #5
 8008666:	2010      	movs	r0, #16
 8008668:	f7f9 fca6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800866c:	2010      	movs	r0, #16
 800866e:	f7f9 fcbf 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8008672:	2200      	movs	r2, #0
 8008674:	2105      	movs	r1, #5
 8008676:	2011      	movs	r0, #17
 8008678:	f7f9 fc9e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800867c:	2011      	movs	r0, #17
 800867e:	f7f9 fcb7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8008682:	2200      	movs	r2, #0
 8008684:	2105      	movs	r1, #5
 8008686:	2038      	movs	r0, #56	; 0x38
 8008688:	f7f9 fc96 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800868c:	2038      	movs	r0, #56	; 0x38
 800868e:	f7f9 fcaf 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008692:	2200      	movs	r2, #0
 8008694:	2105      	movs	r1, #5
 8008696:	2039      	movs	r0, #57	; 0x39
 8008698:	f7f9 fc8e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800869c:	2039      	movs	r0, #57	; 0x39
 800869e:	f7f9 fca7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2105      	movs	r1, #5
 80086a6:	203a      	movs	r0, #58	; 0x3a
 80086a8:	f7f9 fc86 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80086ac:	203a      	movs	r0, #58	; 0x3a
 80086ae:	f7f9 fc9f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80086b2:	2200      	movs	r2, #0
 80086b4:	2105      	movs	r1, #5
 80086b6:	203b      	movs	r0, #59	; 0x3b
 80086b8:	f7f9 fc7e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80086bc:	203b      	movs	r0, #59	; 0x3b
 80086be:	f7f9 fc97 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80086c2:	2200      	movs	r2, #0
 80086c4:	2105      	movs	r1, #5
 80086c6:	203c      	movs	r0, #60	; 0x3c
 80086c8:	f7f9 fc76 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80086cc:	203c      	movs	r0, #60	; 0x3c
 80086ce:	f7f9 fc8f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 80086d2:	2200      	movs	r2, #0
 80086d4:	2105      	movs	r1, #5
 80086d6:	2044      	movs	r0, #68	; 0x44
 80086d8:	f7f9 fc6e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80086dc:	2044      	movs	r0, #68	; 0x44
 80086de:	f7f9 fc87 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80086e2:	2200      	movs	r2, #0
 80086e4:	2105      	movs	r1, #5
 80086e6:	2046      	movs	r0, #70	; 0x46
 80086e8:	f7f9 fc66 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80086ec:	2046      	movs	r0, #70	; 0x46
 80086ee:	f7f9 fc7f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	40023800 	.word	0x40023800

08008700 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	4a07      	ldr	r2, [pc, #28]	; (800872c <vApplicationGetIdleTaskMemory+0x2c>)
 8008710:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4a06      	ldr	r2, [pc, #24]	; (8008730 <vApplicationGetIdleTaskMemory+0x30>)
 8008716:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2280      	movs	r2, #128	; 0x80
 800871c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	2000069c 	.word	0x2000069c
 8008730:	200006f0 	.word	0x200006f0

08008734 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008734:	b5b0      	push	{r4, r5, r7, lr}
 8008736:	b08e      	sub	sp, #56	; 0x38
 8008738:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 800873a:	4b14      	ldr	r3, [pc, #80]	; (800878c <MX_FREERTOS_Init+0x58>)
 800873c:	f107 041c 	add.w	r4, r7, #28
 8008740:	461d      	mov	r5, r3
 8008742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800874a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 800874e:	f107 031c 	add.w	r3, r7, #28
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe fd82 	bl	800725e <osThreadCreate>
 800875a:	4602      	mov	r2, r0
 800875c:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <MX_FREERTOS_Init+0x5c>)
 800875e:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 8008760:	4b0c      	ldr	r3, [pc, #48]	; (8008794 <MX_FREERTOS_Init+0x60>)
 8008762:	463c      	mov	r4, r7
 8008764:	461d      	mov	r5, r3
 8008766:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008768:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800876a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800876e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 8008772:	463b      	mov	r3, r7
 8008774:	2100      	movs	r1, #0
 8008776:	4618      	mov	r0, r3
 8008778:	f7fe fd71 	bl	800725e <osThreadCreate>
 800877c:	4602      	mov	r2, r0
 800877e:	4b06      	ldr	r3, [pc, #24]	; (8008798 <MX_FREERTOS_Init+0x64>)
 8008780:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8008782:	bf00      	nop
 8008784:	3738      	adds	r7, #56	; 0x38
 8008786:	46bd      	mov	sp, r7
 8008788:	bdb0      	pop	{r4, r5, r7, pc}
 800878a:	bf00      	nop
 800878c:	08014fcc 	.word	0x08014fcc
 8008790:	200066d8 	.word	0x200066d8
 8008794:	08014ff4 	.word	0x08014ff4
 8008798:	20006730 	.word	0x20006730

0800879c <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80087a4:	f7ff f91c 	bl	80079e0 <xTaskGetTickCount>
 80087a8:	4603      	mov	r3, r0
 80087aa:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 80087ac:	2301      	movs	r3, #1
 80087ae:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 80087b0:	4b0b      	ldr	r3, [pc, #44]	; (80087e0 <sendTaskFunc+0x44>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	3301      	adds	r3, #1
 80087b6:	4a0a      	ldr	r2, [pc, #40]	; (80087e0 <sendTaskFunc+0x44>)
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <sendTaskFunc+0x44>)
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <sendTaskFunc+0x48>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	429a      	cmp	r2, r3
 80087c4:	db04      	blt.n	80087d0 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 80087c6:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <sendTaskFunc+0x44>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 80087cc:	f007 ff30 	bl	8010630 <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 80087d0:	f107 0308 	add.w	r3, r7, #8
 80087d4:	68f9      	ldr	r1, [r7, #12]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f7fe ff74 	bl	80076c4 <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 80087dc:	e7e8      	b.n	80087b0 <sendTaskFunc+0x14>
 80087de:	bf00      	nop
 80087e0:	200008f0 	.word	0x200008f0
 80087e4:	2000021c 	.word	0x2000021c

080087e8 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80087f0:	f7ff f8f6 	bl	80079e0 <xTaskGetTickCount>
 80087f4:	4603      	mov	r3, r0
 80087f6:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 80087f8:	2301      	movs	r3, #1
 80087fa:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 80087fc:	f002 fb6c 	bl	800aed8 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_ReceivePolling();
 8008800:	f005 fa56 	bl	800dcb0 <Usart_ReceivePolling>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8008804:	4b0c      	ldr	r3, [pc, #48]	; (8008838 <controlTaskFunc+0x50>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	3301      	adds	r3, #1
 800880a:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <controlTaskFunc+0x50>)
 800880c:	6013      	str	r3, [r2, #0]
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <controlTaskFunc+0x50>)
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	4b0a      	ldr	r3, [pc, #40]	; (800883c <controlTaskFunc+0x54>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	429a      	cmp	r2, r3
 8008818:	db04      	blt.n	8008824 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <controlTaskFunc+0x50>)
 800881c:	2200      	movs	r2, #0
 800881e:	601a      	str	r2, [r3, #0]
		loop();
 8008820:	f007 fef0 	bl	8010604 <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
 8008824:	f003 fb18 	bl	800be58 <PWMBoardSPI_flushDutyAll>
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 8008828:	f107 0308 	add.w	r3, r7, #8
 800882c:	68f9      	ldr	r1, [r7, #12]
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe ff48 	bl	80076c4 <vTaskDelayUntil>
			ADBoard_updateVoltage();
 8008834:	e7e2      	b.n	80087fc <controlTaskFunc+0x14>
 8008836:	bf00      	nop
 8008838:	200008f4 	.word	0x200008f4
 800883c:	20000218 	.word	0x20000218

08008840 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	; 0x30
 8008844:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008846:	f107 031c 	add.w	r3, r7, #28
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	605a      	str	r2, [r3, #4]
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	60da      	str	r2, [r3, #12]
 8008854:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008856:	4b65      	ldr	r3, [pc, #404]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a64      	ldr	r2, [pc, #400]	; (80089ec <MX_GPIO_Init+0x1ac>)
 800885c:	f043 0310 	orr.w	r3, r3, #16
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b62      	ldr	r3, [pc, #392]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0310 	and.w	r3, r3, #16
 800886a:	61bb      	str	r3, [r7, #24]
 800886c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800886e:	4b5f      	ldr	r3, [pc, #380]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	4a5e      	ldr	r2, [pc, #376]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008874:	f043 0320 	orr.w	r3, r3, #32
 8008878:	6313      	str	r3, [r2, #48]	; 0x30
 800887a:	4b5c      	ldr	r3, [pc, #368]	; (80089ec <MX_GPIO_Init+0x1ac>)
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	617b      	str	r3, [r7, #20]
 8008884:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008886:	4b59      	ldr	r3, [pc, #356]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	4a58      	ldr	r2, [pc, #352]	; (80089ec <MX_GPIO_Init+0x1ac>)
 800888c:	f043 0304 	orr.w	r3, r3, #4
 8008890:	6313      	str	r3, [r2, #48]	; 0x30
 8008892:	4b56      	ldr	r3, [pc, #344]	; (80089ec <MX_GPIO_Init+0x1ac>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f003 0304 	and.w	r3, r3, #4
 800889a:	613b      	str	r3, [r7, #16]
 800889c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800889e:	4b53      	ldr	r3, [pc, #332]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	4a52      	ldr	r2, [pc, #328]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088a4:	f043 0301 	orr.w	r3, r3, #1
 80088a8:	6313      	str	r3, [r2, #48]	; 0x30
 80088aa:	4b50      	ldr	r3, [pc, #320]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80088b6:	4b4d      	ldr	r3, [pc, #308]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ba:	4a4c      	ldr	r2, [pc, #304]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088bc:	f043 0302 	orr.w	r3, r3, #2
 80088c0:	6313      	str	r3, [r2, #48]	; 0x30
 80088c2:	4b4a      	ldr	r3, [pc, #296]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	f003 0302 	and.w	r3, r3, #2
 80088ca:	60bb      	str	r3, [r7, #8]
 80088cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80088ce:	4b47      	ldr	r3, [pc, #284]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	4a46      	ldr	r2, [pc, #280]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088d8:	6313      	str	r3, [r2, #48]	; 0x30
 80088da:	4b44      	ldr	r3, [pc, #272]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	607b      	str	r3, [r7, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80088e6:	4b41      	ldr	r3, [pc, #260]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ea:	4a40      	ldr	r2, [pc, #256]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088ec:	f043 0308 	orr.w	r3, r3, #8
 80088f0:	6313      	str	r3, [r2, #48]	; 0x30
 80088f2:	4b3e      	ldr	r3, [pc, #248]	; (80089ec <MX_GPIO_Init+0x1ac>)
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 80088fe:	2200      	movs	r2, #0
 8008900:	f240 119b 	movw	r1, #411	; 0x19b
 8008904:	483a      	ldr	r0, [pc, #232]	; (80089f0 <MX_GPIO_Init+0x1b0>)
 8008906:	f7fa f933 	bl	8002b70 <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 800890a:	2200      	movs	r2, #0
 800890c:	f64f 5138 	movw	r1, #64824	; 0xfd38
 8008910:	4838      	ldr	r0, [pc, #224]	; (80089f4 <MX_GPIO_Init+0x1b4>)
 8008912:	f7fa f92d 	bl	8002b70 <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin 
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin 
 8008916:	f240 139b 	movw	r3, #411	; 0x19b
 800891a:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800891c:	2301      	movs	r3, #1
 800891e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008920:	2302      	movs	r3, #2
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008924:	2300      	movs	r3, #0
 8008926:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008928:	f107 031c 	add.w	r3, r7, #28
 800892c:	4619      	mov	r1, r3
 800892e:	4830      	ldr	r0, [pc, #192]	; (80089f0 <MX_GPIO_Init+0x1b0>)
 8008930:	f7f9 ff74 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin 
 8008934:	f64f 5338 	movw	r3, #64824	; 0xfd38
 8008938:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin 
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800893a:	2301      	movs	r3, #1
 800893c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800893e:	2302      	movs	r3, #2
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008942:	2300      	movs	r3, #0
 8008944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008946:	f107 031c 	add.w	r3, r7, #28
 800894a:	4619      	mov	r1, r3
 800894c:	4829      	ldr	r0, [pc, #164]	; (80089f4 <MX_GPIO_Init+0x1b4>)
 800894e:	f7f9 ff65 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin 
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin 
 8008952:	233f      	movs	r3, #63	; 0x3f
 8008954:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008956:	4b28      	ldr	r3, [pc, #160]	; (80089f8 <MX_GPIO_Init+0x1b8>)
 8008958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800895a:	2302      	movs	r3, #2
 800895c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800895e:	f107 031c 	add.w	r3, r7, #28
 8008962:	4619      	mov	r1, r3
 8008964:	4825      	ldr	r0, [pc, #148]	; (80089fc <MX_GPIO_Init+0x1bc>)
 8008966:	f7f9 ff59 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 800896a:	239c      	movs	r3, #156	; 0x9c
 800896c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800896e:	2300      	movs	r3, #0
 8008970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008972:	2300      	movs	r3, #0
 8008974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008976:	f107 031c 	add.w	r3, r7, #28
 800897a:	4619      	mov	r1, r3
 800897c:	4820      	ldr	r0, [pc, #128]	; (8008a00 <MX_GPIO_Init+0x1c0>)
 800897e:	f7f9 ff4d 	bl	800281c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8008982:	2200      	movs	r2, #0
 8008984:	2105      	movs	r1, #5
 8008986:	2006      	movs	r0, #6
 8008988:	f7f9 fb16 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800898c:	2006      	movs	r0, #6
 800898e:	f7f9 fb2f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8008992:	2200      	movs	r2, #0
 8008994:	2105      	movs	r1, #5
 8008996:	2007      	movs	r0, #7
 8008998:	f7f9 fb0e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800899c:	2007      	movs	r0, #7
 800899e:	f7f9 fb27 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2105      	movs	r1, #5
 80089a6:	2008      	movs	r0, #8
 80089a8:	f7f9 fb06 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80089ac:	2008      	movs	r0, #8
 80089ae:	f7f9 fb1f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80089b2:	2200      	movs	r2, #0
 80089b4:	2105      	movs	r1, #5
 80089b6:	2009      	movs	r0, #9
 80089b8:	f7f9 fafe 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80089bc:	2009      	movs	r0, #9
 80089be:	f7f9 fb17 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80089c2:	2200      	movs	r2, #0
 80089c4:	2105      	movs	r1, #5
 80089c6:	200a      	movs	r0, #10
 80089c8:	f7f9 faf6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80089cc:	200a      	movs	r0, #10
 80089ce:	f7f9 fb0f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80089d2:	2200      	movs	r2, #0
 80089d4:	2105      	movs	r1, #5
 80089d6:	2017      	movs	r0, #23
 80089d8:	f7f9 faee 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80089dc:	2017      	movs	r0, #23
 80089de:	f7f9 fb07 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

}
 80089e2:	bf00      	nop
 80089e4:	3730      	adds	r7, #48	; 0x30
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	40023800 	.word	0x40023800
 80089f0:	40021000 	.word	0x40021000
 80089f4:	40021400 	.word	0x40021400
 80089f8:	10210000 	.word	0x10210000
 80089fc:	40021800 	.word	0x40021800
 8008a00:	40020c00 	.word	0x40020c00

08008a04 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008a08:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a0a:	4a1c      	ldr	r2, [pc, #112]	; (8008a7c <MX_I2C1_Init+0x78>)
 8008a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8008a0e:	4b1a      	ldr	r3, [pc, #104]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a10:	4a1b      	ldr	r2, [pc, #108]	; (8008a80 <MX_I2C1_Init+0x7c>)
 8008a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008a14:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a1a:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008a26:	4b14      	ldr	r3, [pc, #80]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008a2c:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a32:	4b11      	ldr	r3, [pc, #68]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a38:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a3e:	480e      	ldr	r0, [pc, #56]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a40:	f7fa f8c8 	bl	8002bd4 <HAL_I2C_Init>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008a4a:	f000 fa3f 	bl	8008ecc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a4e:	2100      	movs	r1, #0
 8008a50:	4809      	ldr	r0, [pc, #36]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a52:	f7fa f94f 	bl	8002cf4 <HAL_I2CEx_ConfigAnalogFilter>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008a5c:	f000 fa36 	bl	8008ecc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008a60:	2100      	movs	r1, #0
 8008a62:	4805      	ldr	r0, [pc, #20]	; (8008a78 <MX_I2C1_Init+0x74>)
 8008a64:	f7fa f991 	bl	8002d8a <HAL_I2CEx_ConfigDigitalFilter>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008a6e:	f000 fa2d 	bl	8008ecc <Error_Handler>
  }

}
 8008a72:	bf00      	nop
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2000a7e8 	.word	0x2000a7e8
 8008a7c:	40005400 	.word	0x40005400
 8008a80:	6000030d 	.word	0x6000030d

08008a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08a      	sub	sp, #40	; 0x28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a8c:	f107 0314 	add.w	r3, r7, #20
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	605a      	str	r2, [r3, #4]
 8008a96:	609a      	str	r2, [r3, #8]
 8008a98:	60da      	str	r2, [r3, #12]
 8008a9a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a2e      	ldr	r2, [pc, #184]	; (8008b5c <HAL_I2C_MspInit+0xd8>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d156      	bne.n	8008b54 <HAL_I2C_MspInit+0xd0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008aa6:	4b2e      	ldr	r3, [pc, #184]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	4a2d      	ldr	r2, [pc, #180]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008aac:	f043 0302 	orr.w	r3, r3, #2
 8008ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ab2:	4b2b      	ldr	r3, [pc, #172]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008ac4:	2312      	movs	r3, #18
 8008ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008acc:	2303      	movs	r3, #3
 8008ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008ad0:	2304      	movs	r3, #4
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ad4:	f107 0314 	add.w	r3, r7, #20
 8008ad8:	4619      	mov	r1, r3
 8008ada:	4822      	ldr	r0, [pc, #136]	; (8008b64 <HAL_I2C_MspInit+0xe0>)
 8008adc:	f7f9 fe9e 	bl	800281c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ae0:	4b1f      	ldr	r3, [pc, #124]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae4:	4a1e      	ldr	r2, [pc, #120]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008ae6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008aea:	6413      	str	r3, [r2, #64]	; 0x40
 8008aec:	4b1c      	ldr	r3, [pc, #112]	; (8008b60 <HAL_I2C_MspInit+0xdc>)
 8008aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	68fb      	ldr	r3, [r7, #12]
  
    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8008af8:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008afa:	4a1c      	ldr	r2, [pc, #112]	; (8008b6c <HAL_I2C_MspInit+0xe8>)
 8008afc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8008afe:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b04:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b06:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b08:	2240      	movs	r2, #64	; 0x40
 8008b0a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b0c:	4b16      	ldr	r3, [pc, #88]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b18:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b1a:	4b13      	ldr	r3, [pc, #76]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008b20:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008b2c:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b2e:	2200      	movs	r2, #0
 8008b30:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b32:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8008b38:	480b      	ldr	r0, [pc, #44]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b3a:	f7f9 fa67 	bl	800200c <HAL_DMA_Init>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d001      	beq.n	8008b48 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 8008b44:	f000 f9c2 	bl	8008ecc <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a07      	ldr	r2, [pc, #28]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b4c:	639a      	str	r2, [r3, #56]	; 0x38
 8008b4e:	4a06      	ldr	r2, [pc, #24]	; (8008b68 <HAL_I2C_MspInit+0xe4>)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008b54:	bf00      	nop
 8008b56:	3728      	adds	r7, #40	; 0x28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	40005400 	.word	0x40005400
 8008b60:	40023800 	.word	0x40023800
 8008b64:	40020400 	.word	0x40020400
 8008b68:	2000a788 	.word	0x2000a788
 8008b6c:	400260a0 	.word	0x400260a0

08008b70 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008b74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b78:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008b7c:	4b0b      	ldr	r3, [pc, #44]	; (8008bac <SCB_EnableICache+0x3c>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008b84:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b88:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008b8c:	4b07      	ldr	r3, [pc, #28]	; (8008bac <SCB_EnableICache+0x3c>)
 8008b8e:	695b      	ldr	r3, [r3, #20]
 8008b90:	4a06      	ldr	r2, [pc, #24]	; (8008bac <SCB_EnableICache+0x3c>)
 8008b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b96:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b98:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b9c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8008ba0:	bf00      	nop
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	e000ed00 	.word	0xe000ed00

08008bb0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008bb6:	4b1d      	ldr	r3, [pc, #116]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008bbe:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008bc2:	4b1a      	ldr	r3, [pc, #104]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008bc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	0b5b      	lsrs	r3, r3, #13
 8008bce:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008bd2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	08db      	lsrs	r3, r3, #3
 8008bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bdc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008be6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008bec:	490f      	ldr	r1, [pc, #60]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	1e5a      	subs	r2, r3, #1
 8008bf8:	60ba      	str	r2, [r7, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1ef      	bne.n	8008bde <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1e5a      	subs	r2, r3, #1
 8008c02:	60fa      	str	r2, [r7, #12]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e5      	bne.n	8008bd4 <SCB_EnableDCache+0x24>
 8008c08:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008c0c:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008c0e:	695b      	ldr	r3, [r3, #20]
 8008c10:	4a06      	ldr	r2, [pc, #24]	; (8008c2c <SCB_EnableDCache+0x7c>)
 8008c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c16:	6153      	str	r3, [r2, #20]
 8008c18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008c1c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008c20:	bf00      	nop
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	e000ed00 	.word	0xe000ed00

08008c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008c34:	f7ff ff9c 	bl	8008b70 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008c38:	f7ff ffba 	bl	8008bb0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c3c:	f7f8 f9ba 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c40:	f000 f83c 	bl	8008cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c44:	f7ff fdfc 	bl	8008840 <MX_GPIO_Init>
  MX_DMA_Init();
 8008c48:	f7ff fcd8 	bl	80085fc <MX_DMA_Init>
  MX_ADC1_Init();
 8008c4c:	f7ff fb0c 	bl	8008268 <MX_ADC1_Init>
  MX_TIM1_Init();
 8008c50:	f000 fe96 	bl	8009980 <MX_TIM1_Init>
  MX_TIM2_Init();
 8008c54:	f000 ff4e 	bl	8009af4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008c58:	f000 ffda 	bl	8009c10 <MX_TIM3_Init>
  MX_TIM4_Init();
 8008c5c:	f001 f854 	bl	8009d08 <MX_TIM4_Init>
  MX_TIM7_Init();
 8008c60:	f001 f8ce 	bl	8009e00 <MX_TIM7_Init>
  MX_TIM8_Init();
 8008c64:	f001 f902 	bl	8009e6c <MX_TIM8_Init>
  MX_TIM9_Init();
 8008c68:	f001 f9ba 	bl	8009fe0 <MX_TIM9_Init>
  MX_TIM10_Init();
 8008c6c:	f001 fa26 	bl	800a0bc <MX_TIM10_Init>
  MX_TIM11_Init();
 8008c70:	f001 fa72 	bl	800a158 <MX_TIM11_Init>
  MX_TIM14_Init();
 8008c74:	f001 fabe 	bl	800a1f4 <MX_TIM14_Init>
  MX_SPI1_Init();
 8008c78:	f000 f930 	bl	8008edc <MX_SPI1_Init>
  MX_SPI3_Init();
 8008c7c:	f000 f966 	bl	8008f4c <MX_SPI3_Init>
  MX_SPI4_Init();
 8008c80:	f000 f9a2 	bl	8008fc8 <MX_SPI4_Init>
  MX_SPI6_Init();
 8008c84:	f000 f9de 	bl	8009044 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8008c88:	f001 fd90 	bl	800a7ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008c8c:	f001 fdee 	bl	800a86c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8008c90:	f7ff feb8 	bl	8008a04 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8008c94:	f001 fdba 	bl	800a80c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8008c98:	f7ff fc26 	bl	80084e8 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 8008c9c:	f004 fd88 	bl	800d7b0 <my_UsartInit>

	/*******************************Analog init***************************/
	//AnaBuiltInStart();

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 8008ca0:	f002 f940 	bl	800af24 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008ca4:	f003 feaa 	bl	800c9fc <PWMBuiltIn_init>

#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
 8008ca8:	f003 f8f8 	bl	800be9c <PWMBoardSPI_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 8008cac:	f007 fc94 	bl	80105d8 <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8008cb0:	f7ff fd40 	bl	8008734 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8008cb4:	f7fe facc 	bl	8007250 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008cb8:	e7fe      	b.n	8008cb8 <main+0x88>
	...

08008cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b0b8      	sub	sp, #224	; 0xe0
 8008cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cc2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008cc6:	2234      	movs	r2, #52	; 0x34
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f007 ff65 	bl	8010b9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cd0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	609a      	str	r2, [r3, #8]
 8008cdc:	60da      	str	r2, [r3, #12]
 8008cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008ce0:	f107 0308 	add.w	r3, r7, #8
 8008ce4:	2290      	movs	r2, #144	; 0x90
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f007 ff56 	bl	8010b9a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cee:	4b3c      	ldr	r3, [pc, #240]	; (8008de0 <SystemClock_Config+0x124>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf2:	4a3b      	ldr	r2, [pc, #236]	; (8008de0 <SystemClock_Config+0x124>)
 8008cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8008cfa:	4b39      	ldr	r3, [pc, #228]	; (8008de0 <SystemClock_Config+0x124>)
 8008cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d02:	607b      	str	r3, [r7, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d06:	4b37      	ldr	r3, [pc, #220]	; (8008de4 <SystemClock_Config+0x128>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a36      	ldr	r2, [pc, #216]	; (8008de4 <SystemClock_Config+0x128>)
 8008d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	4b34      	ldr	r3, [pc, #208]	; (8008de4 <SystemClock_Config+0x128>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d1a:	603b      	str	r3, [r7, #0]
 8008d1c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d24:	2301      	movs	r3, #1
 8008d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d2a:	2310      	movs	r3, #16
 8008d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d30:	2302      	movs	r3, #2
 8008d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008d36:	2300      	movs	r3, #0
 8008d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008d42:	23d8      	movs	r3, #216	; 0xd8
 8008d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d54:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7fa f8b3 	bl	8002ec4 <HAL_RCC_OscConfig>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008d64:	f000 f8b2 	bl	8008ecc <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008d68:	f7fa f85c 	bl	8002e24 <HAL_PWREx_EnableOverDrive>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008d72:	f000 f8ab 	bl	8008ecc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d76:	230f      	movs	r3, #15
 8008d78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d82:	2300      	movs	r3, #0
 8008d84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008d8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008d98:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008d9c:	2107      	movs	r1, #7
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fa fb3e 	bl	8003420 <HAL_RCC_ClockConfig>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d001      	beq.n	8008dae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008daa:	f000 f88f 	bl	8008ecc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008dae:	f244 13c0 	movw	r3, #16832	; 0x41c0
 8008db2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008db4:	2300      	movs	r3, #0
 8008db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008db8:	2300      	movs	r3, #0
 8008dba:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dc4:	f107 0308 	add.w	r3, r7, #8
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fa fd2d 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8008dd4:	f000 f87a 	bl	8008ecc <Error_Handler>
  }
}
 8008dd8:	bf00      	nop
 8008dda:	37e0      	adds	r7, #224	; 0xe0
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	40023800 	.word	0x40023800
 8008de4:	40007000 	.word	0x40007000

08008de8 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]

#if (ADBOARD_NUM>0)
	ADBoard_SPICallback(hspi);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 ffbd 	bl	800ad70 <ADBoard_SPICallback>
#endif
	slaveSPITxRxCpltCallback(hspi);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f007 fd6e 	bl	80108d8 <slaveSPITxRxCpltCallback>

}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	slaveSPIErrorCallback(hspi);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f007 fd8d 	bl	801092c <slaveSPIErrorCallback>

}
 8008e12:	bf00      	nop
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 8008e26:	2301      	movs	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
	static int INTChannel=0;
	if(GPIO_Pin==E0_Pin){
 8008e2a:	88fb      	ldrh	r3, [r7, #6]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d103      	bne.n	8008e38 <HAL_GPIO_EXTI_Callback+0x1c>
		INTChannel=0;
 8008e30:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	601a      	str	r2, [r3, #0]
 8008e36:	e021      	b.n	8008e7c <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E1_Pin){
 8008e38:	88fb      	ldrh	r3, [r7, #6]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d103      	bne.n	8008e46 <HAL_GPIO_EXTI_Callback+0x2a>
		INTChannel=1;
 8008e3e:	4b19      	ldr	r3, [pc, #100]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e40:	2201      	movs	r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e01a      	b.n	8008e7c <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E2_Pin){
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d103      	bne.n	8008e54 <HAL_GPIO_EXTI_Callback+0x38>
		INTChannel=2;
 8008e4c:	4b15      	ldr	r3, [pc, #84]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e4e:	2202      	movs	r2, #2
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	e013      	b.n	8008e7c <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E3_Pin){
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	2b08      	cmp	r3, #8
 8008e58:	d103      	bne.n	8008e62 <HAL_GPIO_EXTI_Callback+0x46>
		INTChannel=3;
 8008e5a:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	601a      	str	r2, [r3, #0]
 8008e60:	e00c      	b.n	8008e7c <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E4_Pin){
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	2b10      	cmp	r3, #16
 8008e66:	d103      	bne.n	8008e70 <HAL_GPIO_EXTI_Callback+0x54>
		INTChannel=4;
 8008e68:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e6a:	2204      	movs	r2, #4
 8008e6c:	601a      	str	r2, [r3, #0]
 8008e6e:	e005      	b.n	8008e7c <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E5_Pin){
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	2b20      	cmp	r3, #32
 8008e74:	d102      	bne.n	8008e7c <HAL_GPIO_EXTI_Callback+0x60>
		INTChannel=5;
 8008e76:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e78:	2205      	movs	r2, #5
 8008e7a:	601a      	str	r2, [r3, #0]
	}
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(INTChannel);
 8008e7c:	4b09      	ldr	r3, [pc, #36]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	4618      	mov	r0, r3
 8008e84:	f001 ff38 	bl	800acf8 <ADBoard_BUSYCallback>
 8008e88:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <HAL_GPIO_EXTI_Callback+0x7e>
		interruptCallback(INTChannel);
 8008e90:	4b04      	ldr	r3, [pc, #16]	; (8008ea4 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f003 f90a 	bl	800c0ae <interruptCallback>
}
 8008e9a:	bf00      	nop
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	200008f8 	.word	0x200008f8

08008ea8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a04      	ldr	r2, [pc, #16]	; (8008ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d101      	bne.n	8008ebe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008eba:	f7f8 f889 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008ebe:	bf00      	nop
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40000c00 	.word	0x40000c00

08008ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ed0:	bf00      	nop
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr
	...

08008edc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008ee0:	4b18      	ldr	r3, [pc, #96]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008ee2:	4a19      	ldr	r2, [pc, #100]	; (8008f48 <MX_SPI1_Init+0x6c>)
 8008ee4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008ee6:	4b17      	ldr	r3, [pc, #92]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008eec:	4b15      	ldr	r3, [pc, #84]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008ef2:	4b14      	ldr	r3, [pc, #80]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008ef4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008ef8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008efa:	4b12      	ldr	r3, [pc, #72]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008f00:	4b10      	ldr	r3, [pc, #64]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008f06:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f0c:	4b0d      	ldr	r3, [pc, #52]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f0e:	2200      	movs	r2, #0
 8008f10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f12:	4b0c      	ldr	r3, [pc, #48]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f18:	4b0a      	ldr	r3, [pc, #40]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008f1e:	4b09      	ldr	r3, [pc, #36]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f20:	2207      	movs	r2, #7
 8008f22:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f24:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f26:	2200      	movs	r2, #0
 8008f28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008f2a:	4b06      	ldr	r3, [pc, #24]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008f30:	4804      	ldr	r0, [pc, #16]	; (8008f44 <MX_SPI1_Init+0x68>)
 8008f32:	f7fb f89f 	bl	8004074 <HAL_SPI_Init>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8008f3c:	f7ff ffc6 	bl	8008ecc <Error_Handler>
  }

}
 8008f40:	bf00      	nop
 8008f42:	bd80      	pop	{r7, pc}
 8008f44:	2000aa80 	.word	0x2000aa80
 8008f48:	40013000 	.word	0x40013000

08008f4c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008f50:	4b1b      	ldr	r3, [pc, #108]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f52:	4a1c      	ldr	r2, [pc, #112]	; (8008fc4 <MX_SPI3_Init+0x78>)
 8008f54:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008f56:	4b1a      	ldr	r3, [pc, #104]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f5c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008f5e:	4b18      	ldr	r3, [pc, #96]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f64:	4b16      	ldr	r3, [pc, #88]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008f6a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f6c:	4b14      	ldr	r3, [pc, #80]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f72:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008f78:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f7e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f80:	4b0f      	ldr	r3, [pc, #60]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f86:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f8c:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008f9a:	2207      	movs	r2, #7
 8008f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f9e:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008fa4:	4b06      	ldr	r3, [pc, #24]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008faa:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <MX_SPI3_Init+0x74>)
 8008fac:	f7fb f862 	bl	8004074 <HAL_SPI_Init>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008fb6:	f7ff ff89 	bl	8008ecc <Error_Handler>
  }

}
 8008fba:	bf00      	nop
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	2000a8f8 	.word	0x2000a8f8
 8008fc4:	40003c00 	.word	0x40003c00

08008fc8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8008fcc:	4b1b      	ldr	r3, [pc, #108]	; (800903c <MX_SPI4_Init+0x74>)
 8008fce:	4a1c      	ldr	r2, [pc, #112]	; (8009040 <MX_SPI4_Init+0x78>)
 8008fd0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008fd2:	4b1a      	ldr	r3, [pc, #104]	; (800903c <MX_SPI4_Init+0x74>)
 8008fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fd8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008fda:	4b18      	ldr	r3, [pc, #96]	; (800903c <MX_SPI4_Init+0x74>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8008fe0:	4b16      	ldr	r3, [pc, #88]	; (800903c <MX_SPI4_Init+0x74>)
 8008fe2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008fe6:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008fe8:	4b14      	ldr	r3, [pc, #80]	; (800903c <MX_SPI4_Init+0x74>)
 8008fea:	2202      	movs	r2, #2
 8008fec:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <MX_SPI4_Init+0x74>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008ff4:	4b11      	ldr	r3, [pc, #68]	; (800903c <MX_SPI4_Init+0x74>)
 8008ff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ffa:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008ffc:	4b0f      	ldr	r3, [pc, #60]	; (800903c <MX_SPI4_Init+0x74>)
 8008ffe:	2210      	movs	r2, #16
 8009000:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009002:	4b0e      	ldr	r3, [pc, #56]	; (800903c <MX_SPI4_Init+0x74>)
 8009004:	2200      	movs	r2, #0
 8009006:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8009008:	4b0c      	ldr	r3, [pc, #48]	; (800903c <MX_SPI4_Init+0x74>)
 800900a:	2200      	movs	r2, #0
 800900c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800900e:	4b0b      	ldr	r3, [pc, #44]	; (800903c <MX_SPI4_Init+0x74>)
 8009010:	2200      	movs	r2, #0
 8009012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8009014:	4b09      	ldr	r3, [pc, #36]	; (800903c <MX_SPI4_Init+0x74>)
 8009016:	2207      	movs	r2, #7
 8009018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800901a:	4b08      	ldr	r3, [pc, #32]	; (800903c <MX_SPI4_Init+0x74>)
 800901c:	2200      	movs	r2, #0
 800901e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <MX_SPI4_Init+0x74>)
 8009022:	2208      	movs	r2, #8
 8009024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8009026:	4805      	ldr	r0, [pc, #20]	; (800903c <MX_SPI4_Init+0x74>)
 8009028:	f7fb f824 	bl	8004074 <HAL_SPI_Init>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8009032:	f7ff ff4b 	bl	8008ecc <Error_Handler>
  }

}
 8009036:	bf00      	nop
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	2000aa1c 	.word	0x2000aa1c
 8009040:	40013400 	.word	0x40013400

08009044 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8009048:	4b1b      	ldr	r3, [pc, #108]	; (80090b8 <MX_SPI6_Init+0x74>)
 800904a:	4a1c      	ldr	r2, [pc, #112]	; (80090bc <MX_SPI6_Init+0x78>)
 800904c:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800904e:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009054:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8009056:	4b18      	ldr	r3, [pc, #96]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009058:	2200      	movs	r2, #0
 800905a:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 800905c:	4b16      	ldr	r3, [pc, #88]	; (80090b8 <MX_SPI6_Init+0x74>)
 800905e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8009062:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009064:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009066:	2200      	movs	r2, #0
 8009068:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 800906a:	4b13      	ldr	r3, [pc, #76]	; (80090b8 <MX_SPI6_Init+0x74>)
 800906c:	2200      	movs	r2, #0
 800906e:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 8009070:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009076:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8009078:	4b0f      	ldr	r3, [pc, #60]	; (80090b8 <MX_SPI6_Init+0x74>)
 800907a:	2230      	movs	r2, #48	; 0x30
 800907c:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800907e:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009080:	2200      	movs	r2, #0
 8009082:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009086:	2200      	movs	r2, #0
 8009088:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800908a:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <MX_SPI6_Init+0x74>)
 800908c:	2200      	movs	r2, #0
 800908e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 8009090:	4b09      	ldr	r3, [pc, #36]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009092:	2207      	movs	r2, #7
 8009094:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009096:	4b08      	ldr	r3, [pc, #32]	; (80090b8 <MX_SPI6_Init+0x74>)
 8009098:	2200      	movs	r2, #0
 800909a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800909c:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <MX_SPI6_Init+0x74>)
 800909e:	2208      	movs	r2, #8
 80090a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 80090a2:	4805      	ldr	r0, [pc, #20]	; (80090b8 <MX_SPI6_Init+0x74>)
 80090a4:	f7fa ffe6 	bl	8004074 <HAL_SPI_Init>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 80090ae:	f7ff ff0d 	bl	8008ecc <Error_Handler>
  }

}
 80090b2:	bf00      	nop
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop
 80090b8:	2000a894 	.word	0x2000a894
 80090bc:	40015400 	.word	0x40015400

080090c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b092      	sub	sp, #72	; 0x48
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
 80090d0:	605a      	str	r2, [r3, #4]
 80090d2:	609a      	str	r2, [r3, #8]
 80090d4:	60da      	str	r2, [r3, #12]
 80090d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a5b      	ldr	r2, [pc, #364]	; (800924c <HAL_SPI_MspInit+0x18c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	f040 80c4 	bne.w	800926c <HAL_SPI_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80090e4:	4b5a      	ldr	r3, [pc, #360]	; (8009250 <HAL_SPI_MspInit+0x190>)
 80090e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e8:	4a59      	ldr	r2, [pc, #356]	; (8009250 <HAL_SPI_MspInit+0x190>)
 80090ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090ee:	6453      	str	r3, [r2, #68]	; 0x44
 80090f0:	4b57      	ldr	r3, [pc, #348]	; (8009250 <HAL_SPI_MspInit+0x190>)
 80090f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f8:	633b      	str	r3, [r7, #48]	; 0x30
 80090fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090fc:	4b54      	ldr	r3, [pc, #336]	; (8009250 <HAL_SPI_MspInit+0x190>)
 80090fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009100:	4a53      	ldr	r2, [pc, #332]	; (8009250 <HAL_SPI_MspInit+0x190>)
 8009102:	f043 0301 	orr.w	r3, r3, #1
 8009106:	6313      	str	r3, [r2, #48]	; 0x30
 8009108:	4b51      	ldr	r3, [pc, #324]	; (8009250 <HAL_SPI_MspInit+0x190>)
 800910a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009114:	4b4e      	ldr	r3, [pc, #312]	; (8009250 <HAL_SPI_MspInit+0x190>)
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	4a4d      	ldr	r2, [pc, #308]	; (8009250 <HAL_SPI_MspInit+0x190>)
 800911a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911e:	6313      	str	r3, [r2, #48]	; 0x30
 8009120:	4b4b      	ldr	r3, [pc, #300]	; (8009250 <HAL_SPI_MspInit+0x190>)
 8009122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009128:	62bb      	str	r3, [r7, #40]	; 0x28
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800912c:	2360      	movs	r3, #96	; 0x60
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009130:	2302      	movs	r3, #2
 8009132:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009134:	2300      	movs	r3, #0
 8009136:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009138:	2303      	movs	r3, #3
 800913a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800913c:	2305      	movs	r3, #5
 800913e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009140:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009144:	4619      	mov	r1, r3
 8009146:	4843      	ldr	r0, [pc, #268]	; (8009254 <HAL_SPI_MspInit+0x194>)
 8009148:	f7f9 fb68 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800914c:	2380      	movs	r3, #128	; 0x80
 800914e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009150:	2302      	movs	r3, #2
 8009152:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009154:	2301      	movs	r3, #1
 8009156:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009158:	2303      	movs	r3, #3
 800915a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800915c:	2305      	movs	r3, #5
 800915e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009160:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009164:	4619      	mov	r1, r3
 8009166:	483b      	ldr	r0, [pc, #236]	; (8009254 <HAL_SPI_MspInit+0x194>)
 8009168:	f7f9 fb58 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800916c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009170:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009172:	2302      	movs	r3, #2
 8009174:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009176:	2300      	movs	r3, #0
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800917a:	2303      	movs	r3, #3
 800917c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800917e:	2305      	movs	r3, #5
 8009180:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009182:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009186:	4619      	mov	r1, r3
 8009188:	4833      	ldr	r0, [pc, #204]	; (8009258 <HAL_SPI_MspInit+0x198>)
 800918a:	f7f9 fb47 	bl	800281c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800918e:	4b33      	ldr	r3, [pc, #204]	; (800925c <HAL_SPI_MspInit+0x19c>)
 8009190:	4a33      	ldr	r2, [pc, #204]	; (8009260 <HAL_SPI_MspInit+0x1a0>)
 8009192:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8009194:	4b31      	ldr	r3, [pc, #196]	; (800925c <HAL_SPI_MspInit+0x19c>)
 8009196:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800919a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800919c:	4b2f      	ldr	r3, [pc, #188]	; (800925c <HAL_SPI_MspInit+0x19c>)
 800919e:	2200      	movs	r2, #0
 80091a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80091a2:	4b2e      	ldr	r3, [pc, #184]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80091a8:	4b2c      	ldr	r3, [pc, #176]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091ae:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80091b0:	4b2a      	ldr	r3, [pc, #168]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80091b6:	4b29      	ldr	r3, [pc, #164]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091be:	2200      	movs	r2, #0
 80091c0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80091c2:	4b26      	ldr	r3, [pc, #152]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80091c8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80091ca:	4b24      	ldr	r3, [pc, #144]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80091d0:	4822      	ldr	r0, [pc, #136]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091d2:	f7f8 ff1b 	bl	800200c <HAL_DMA_Init>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80091dc:	f7ff fe76 	bl	8008ecc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a1e      	ldr	r2, [pc, #120]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091e4:	659a      	str	r2, [r3, #88]	; 0x58
 80091e6:	4a1d      	ldr	r2, [pc, #116]	; (800925c <HAL_SPI_MspInit+0x19c>)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80091ec:	4b1d      	ldr	r3, [pc, #116]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 80091ee:	4a1e      	ldr	r2, [pc, #120]	; (8009268 <HAL_SPI_MspInit+0x1a8>)
 80091f0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 80091f4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80091f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80091fa:	4b1a      	ldr	r3, [pc, #104]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 80091fc:	2240      	movs	r2, #64	; 0x40
 80091fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009200:	4b18      	ldr	r3, [pc, #96]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009202:	2200      	movs	r2, #0
 8009204:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009206:	4b17      	ldr	r3, [pc, #92]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800920c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800920e:	4b15      	ldr	r3, [pc, #84]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009210:	2200      	movs	r2, #0
 8009212:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009214:	4b13      	ldr	r3, [pc, #76]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009216:	2200      	movs	r2, #0
 8009218:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800921a:	4b12      	ldr	r3, [pc, #72]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 800921c:	2200      	movs	r2, #0
 800921e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009220:	4b10      	ldr	r3, [pc, #64]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009222:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009226:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009228:	4b0e      	ldr	r3, [pc, #56]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 800922a:	2200      	movs	r2, #0
 800922c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800922e:	480d      	ldr	r0, [pc, #52]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009230:	f7f8 feec 	bl	800200c <HAL_DMA_Init>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 800923a:	f7ff fe47 	bl	8008ecc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a08      	ldr	r2, [pc, #32]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009242:	655a      	str	r2, [r3, #84]	; 0x54
 8009244:	4a07      	ldr	r2, [pc, #28]	; (8009264 <HAL_SPI_MspInit+0x1a4>)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 800924a:	e1bb      	b.n	80095c4 <HAL_SPI_MspInit+0x504>
 800924c:	40013000 	.word	0x40013000
 8009250:	40023800 	.word	0x40023800
 8009254:	40020000 	.word	0x40020000
 8009258:	40021800 	.word	0x40021800
 800925c:	2000aae4 	.word	0x2000aae4
 8009260:	40026440 	.word	0x40026440
 8009264:	2000ab44 	.word	0x2000ab44
 8009268:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a9d      	ldr	r2, [pc, #628]	; (80094e8 <HAL_SPI_MspInit+0x428>)
 8009272:	4293      	cmp	r3, r2
 8009274:	f040 80a6 	bne.w	80093c4 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009278:	4b9c      	ldr	r3, [pc, #624]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 800927a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927c:	4a9b      	ldr	r2, [pc, #620]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 800927e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009282:	6413      	str	r3, [r2, #64]	; 0x40
 8009284:	4b99      	ldr	r3, [pc, #612]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009290:	4b96      	ldr	r3, [pc, #600]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 8009292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009294:	4a95      	ldr	r2, [pc, #596]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 8009296:	f043 0302 	orr.w	r3, r3, #2
 800929a:	6313      	str	r3, [r2, #48]	; 0x30
 800929c:	4b93      	ldr	r3, [pc, #588]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 800929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a0:	f003 0302 	and.w	r3, r3, #2
 80092a4:	623b      	str	r3, [r7, #32]
 80092a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80092a8:	4b90      	ldr	r3, [pc, #576]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80092aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ac:	4a8f      	ldr	r2, [pc, #572]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80092ae:	f043 0304 	orr.w	r3, r3, #4
 80092b2:	6313      	str	r3, [r2, #48]	; 0x30
 80092b4:	4b8d      	ldr	r3, [pc, #564]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80092b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	61fb      	str	r3, [r7, #28]
 80092be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80092c0:	2304      	movs	r3, #4
 80092c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092c4:	2302      	movs	r3, #2
 80092c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c8:	2300      	movs	r3, #0
 80092ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092cc:	2303      	movs	r3, #3
 80092ce:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80092d0:	2307      	movs	r3, #7
 80092d2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092d8:	4619      	mov	r1, r3
 80092da:	4885      	ldr	r0, [pc, #532]	; (80094f0 <HAL_SPI_MspInit+0x430>)
 80092dc:	f7f9 fa9e 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80092e0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80092e4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092e6:	2302      	movs	r3, #2
 80092e8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ea:	2300      	movs	r3, #0
 80092ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ee:	2303      	movs	r3, #3
 80092f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80092f2:	2306      	movs	r3, #6
 80092f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092fa:	4619      	mov	r1, r3
 80092fc:	487d      	ldr	r0, [pc, #500]	; (80094f4 <HAL_SPI_MspInit+0x434>)
 80092fe:	f7f9 fa8d 	bl	800281c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8009302:	4b7d      	ldr	r3, [pc, #500]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 8009304:	4a7d      	ldr	r2, [pc, #500]	; (80094fc <HAL_SPI_MspInit+0x43c>)
 8009306:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8009308:	4b7b      	ldr	r3, [pc, #492]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 800930a:	2200      	movs	r2, #0
 800930c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800930e:	4b7a      	ldr	r3, [pc, #488]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 8009310:	2200      	movs	r2, #0
 8009312:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009314:	4b78      	ldr	r3, [pc, #480]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 8009316:	2200      	movs	r2, #0
 8009318:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800931a:	4b77      	ldr	r3, [pc, #476]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 800931c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009320:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009322:	4b75      	ldr	r3, [pc, #468]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 8009324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009328:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800932a:	4b73      	ldr	r3, [pc, #460]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 800932c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009330:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8009332:	4b71      	ldr	r3, [pc, #452]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 8009334:	2200      	movs	r2, #0
 8009336:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009338:	4b6f      	ldr	r3, [pc, #444]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 800933a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800933e:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009340:	4b6d      	ldr	r3, [pc, #436]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 8009342:	2200      	movs	r2, #0
 8009344:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8009346:	486c      	ldr	r0, [pc, #432]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 8009348:	f7f8 fe60 	bl	800200c <HAL_DMA_Init>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <HAL_SPI_MspInit+0x296>
      Error_Handler();
 8009352:	f7ff fdbb 	bl	8008ecc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a67      	ldr	r2, [pc, #412]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 800935a:	659a      	str	r2, [r3, #88]	; 0x58
 800935c:	4a66      	ldr	r2, [pc, #408]	; (80094f8 <HAL_SPI_MspInit+0x438>)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8009362:	4b67      	ldr	r3, [pc, #412]	; (8009500 <HAL_SPI_MspInit+0x440>)
 8009364:	4a67      	ldr	r2, [pc, #412]	; (8009504 <HAL_SPI_MspInit+0x444>)
 8009366:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8009368:	4b65      	ldr	r3, [pc, #404]	; (8009500 <HAL_SPI_MspInit+0x440>)
 800936a:	2200      	movs	r2, #0
 800936c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800936e:	4b64      	ldr	r3, [pc, #400]	; (8009500 <HAL_SPI_MspInit+0x440>)
 8009370:	2240      	movs	r2, #64	; 0x40
 8009372:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009374:	4b62      	ldr	r3, [pc, #392]	; (8009500 <HAL_SPI_MspInit+0x440>)
 8009376:	2200      	movs	r2, #0
 8009378:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800937a:	4b61      	ldr	r3, [pc, #388]	; (8009500 <HAL_SPI_MspInit+0x440>)
 800937c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009380:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009382:	4b5f      	ldr	r3, [pc, #380]	; (8009500 <HAL_SPI_MspInit+0x440>)
 8009384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009388:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800938a:	4b5d      	ldr	r3, [pc, #372]	; (8009500 <HAL_SPI_MspInit+0x440>)
 800938c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009390:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8009392:	4b5b      	ldr	r3, [pc, #364]	; (8009500 <HAL_SPI_MspInit+0x440>)
 8009394:	2200      	movs	r2, #0
 8009396:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009398:	4b59      	ldr	r3, [pc, #356]	; (8009500 <HAL_SPI_MspInit+0x440>)
 800939a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800939e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80093a0:	4b57      	ldr	r3, [pc, #348]	; (8009500 <HAL_SPI_MspInit+0x440>)
 80093a2:	2200      	movs	r2, #0
 80093a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80093a6:	4856      	ldr	r0, [pc, #344]	; (8009500 <HAL_SPI_MspInit+0x440>)
 80093a8:	f7f8 fe30 	bl	800200c <HAL_DMA_Init>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
 80093b2:	f7ff fd8b 	bl	8008ecc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a51      	ldr	r2, [pc, #324]	; (8009500 <HAL_SPI_MspInit+0x440>)
 80093ba:	655a      	str	r2, [r3, #84]	; 0x54
 80093bc:	4a50      	ldr	r2, [pc, #320]	; (8009500 <HAL_SPI_MspInit+0x440>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80093c2:	e0ff      	b.n	80095c4 <HAL_SPI_MspInit+0x504>
  else if(spiHandle->Instance==SPI4)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a4f      	ldr	r2, [pc, #316]	; (8009508 <HAL_SPI_MspInit+0x448>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	f040 80a8 	bne.w	8009520 <HAL_SPI_MspInit+0x460>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80093d0:	4b46      	ldr	r3, [pc, #280]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	4a45      	ldr	r2, [pc, #276]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80093d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093da:	6453      	str	r3, [r2, #68]	; 0x44
 80093dc:	4b43      	ldr	r3, [pc, #268]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80093de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093e4:	61bb      	str	r3, [r7, #24]
 80093e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80093e8:	4b40      	ldr	r3, [pc, #256]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80093ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ec:	4a3f      	ldr	r2, [pc, #252]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80093ee:	f043 0310 	orr.w	r3, r3, #16
 80093f2:	6313      	str	r3, [r2, #48]	; 0x30
 80093f4:	4b3d      	ldr	r3, [pc, #244]	; (80094ec <HAL_SPI_MspInit+0x42c>)
 80093f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f8:	f003 0310 	and.w	r3, r3, #16
 80093fc:	617b      	str	r3, [r7, #20]
 80093fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 8009400:	f246 0304 	movw	r3, #24580	; 0x6004
 8009404:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009406:	2302      	movs	r3, #2
 8009408:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800940a:	2300      	movs	r3, #0
 800940c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800940e:	2303      	movs	r3, #3
 8009410:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8009412:	2305      	movs	r3, #5
 8009414:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009416:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800941a:	4619      	mov	r1, r3
 800941c:	483b      	ldr	r0, [pc, #236]	; (800950c <HAL_SPI_MspInit+0x44c>)
 800941e:	f7f9 f9fd 	bl	800281c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8009422:	4b3b      	ldr	r3, [pc, #236]	; (8009510 <HAL_SPI_MspInit+0x450>)
 8009424:	4a3b      	ldr	r2, [pc, #236]	; (8009514 <HAL_SPI_MspInit+0x454>)
 8009426:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8009428:	4b39      	ldr	r3, [pc, #228]	; (8009510 <HAL_SPI_MspInit+0x450>)
 800942a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800942e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009430:	4b37      	ldr	r3, [pc, #220]	; (8009510 <HAL_SPI_MspInit+0x450>)
 8009432:	2200      	movs	r2, #0
 8009434:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009436:	4b36      	ldr	r3, [pc, #216]	; (8009510 <HAL_SPI_MspInit+0x450>)
 8009438:	2200      	movs	r2, #0
 800943a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800943c:	4b34      	ldr	r3, [pc, #208]	; (8009510 <HAL_SPI_MspInit+0x450>)
 800943e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009442:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009444:	4b32      	ldr	r3, [pc, #200]	; (8009510 <HAL_SPI_MspInit+0x450>)
 8009446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800944a:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800944c:	4b30      	ldr	r3, [pc, #192]	; (8009510 <HAL_SPI_MspInit+0x450>)
 800944e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009452:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8009454:	4b2e      	ldr	r3, [pc, #184]	; (8009510 <HAL_SPI_MspInit+0x450>)
 8009456:	2200      	movs	r2, #0
 8009458:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800945a:	4b2d      	ldr	r3, [pc, #180]	; (8009510 <HAL_SPI_MspInit+0x450>)
 800945c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009460:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009462:	4b2b      	ldr	r3, [pc, #172]	; (8009510 <HAL_SPI_MspInit+0x450>)
 8009464:	2200      	movs	r2, #0
 8009466:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8009468:	4829      	ldr	r0, [pc, #164]	; (8009510 <HAL_SPI_MspInit+0x450>)
 800946a:	f7f8 fdcf 	bl	800200c <HAL_DMA_Init>
 800946e:	4603      	mov	r3, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	d001      	beq.n	8009478 <HAL_SPI_MspInit+0x3b8>
      Error_Handler();
 8009474:	f7ff fd2a 	bl	8008ecc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a25      	ldr	r2, [pc, #148]	; (8009510 <HAL_SPI_MspInit+0x450>)
 800947c:	659a      	str	r2, [r3, #88]	; 0x58
 800947e:	4a24      	ldr	r2, [pc, #144]	; (8009510 <HAL_SPI_MspInit+0x450>)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8009484:	4b24      	ldr	r3, [pc, #144]	; (8009518 <HAL_SPI_MspInit+0x458>)
 8009486:	4a25      	ldr	r2, [pc, #148]	; (800951c <HAL_SPI_MspInit+0x45c>)
 8009488:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800948a:	4b23      	ldr	r3, [pc, #140]	; (8009518 <HAL_SPI_MspInit+0x458>)
 800948c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009490:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009492:	4b21      	ldr	r3, [pc, #132]	; (8009518 <HAL_SPI_MspInit+0x458>)
 8009494:	2240      	movs	r2, #64	; 0x40
 8009496:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009498:	4b1f      	ldr	r3, [pc, #124]	; (8009518 <HAL_SPI_MspInit+0x458>)
 800949a:	2200      	movs	r2, #0
 800949c:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800949e:	4b1e      	ldr	r3, [pc, #120]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094a4:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094a6:	4b1c      	ldr	r3, [pc, #112]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ac:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80094ae:	4b1a      	ldr	r3, [pc, #104]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80094b4:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80094b6:	4b18      	ldr	r3, [pc, #96]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80094bc:	4b16      	ldr	r3, [pc, #88]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094c2:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80094c4:	4b14      	ldr	r3, [pc, #80]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80094ca:	4813      	ldr	r0, [pc, #76]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094cc:	f7f8 fd9e 	bl	800200c <HAL_DMA_Init>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <HAL_SPI_MspInit+0x41a>
      Error_Handler();
 80094d6:	f7ff fcf9 	bl	8008ecc <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a0e      	ldr	r2, [pc, #56]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094de:	655a      	str	r2, [r3, #84]	; 0x54
 80094e0:	4a0d      	ldr	r2, [pc, #52]	; (8009518 <HAL_SPI_MspInit+0x458>)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80094e6:	e06d      	b.n	80095c4 <HAL_SPI_MspInit+0x504>
 80094e8:	40003c00 	.word	0x40003c00
 80094ec:	40023800 	.word	0x40023800
 80094f0:	40020400 	.word	0x40020400
 80094f4:	40020800 	.word	0x40020800
 80094f8:	2000aba4 	.word	0x2000aba4
 80094fc:	40026010 	.word	0x40026010
 8009500:	2000a95c 	.word	0x2000a95c
 8009504:	40026088 	.word	0x40026088
 8009508:	40013400 	.word	0x40013400
 800950c:	40021000 	.word	0x40021000
 8009510:	2000a834 	.word	0x2000a834
 8009514:	40026410 	.word	0x40026410
 8009518:	2000a9bc 	.word	0x2000a9bc
 800951c:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a29      	ldr	r2, [pc, #164]	; (80095cc <HAL_SPI_MspInit+0x50c>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d14c      	bne.n	80095c4 <HAL_SPI_MspInit+0x504>
    __HAL_RCC_SPI6_CLK_ENABLE();
 800952a:	4b29      	ldr	r3, [pc, #164]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 800952c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952e:	4a28      	ldr	r2, [pc, #160]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 8009530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009534:	6453      	str	r3, [r2, #68]	; 0x44
 8009536:	4b26      	ldr	r3, [pc, #152]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 8009538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009542:	4b23      	ldr	r3, [pc, #140]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 8009544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009546:	4a22      	ldr	r2, [pc, #136]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 8009548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954c:	6313      	str	r3, [r2, #48]	; 0x30
 800954e:	4b20      	ldr	r3, [pc, #128]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800955a:	4b1d      	ldr	r3, [pc, #116]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	4a1c      	ldr	r2, [pc, #112]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	6313      	str	r3, [r2, #48]	; 0x30
 8009566:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <HAL_SPI_MspInit+0x510>)
 8009568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956a:	f003 0302 	and.w	r3, r3, #2
 800956e:	60bb      	str	r3, [r7, #8]
 8009570:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8009572:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009576:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009578:	2302      	movs	r3, #2
 800957a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957c:	2300      	movs	r3, #0
 800957e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009580:	2303      	movs	r3, #3
 8009582:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8009584:	2305      	movs	r3, #5
 8009586:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009588:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800958c:	4619      	mov	r1, r3
 800958e:	4811      	ldr	r0, [pc, #68]	; (80095d4 <HAL_SPI_MspInit+0x514>)
 8009590:	f7f9 f944 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009594:	2308      	movs	r3, #8
 8009596:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009598:	2302      	movs	r3, #2
 800959a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800959c:	2300      	movs	r3, #0
 800959e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80095a0:	2303      	movs	r3, #3
 80095a2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80095a4:	2308      	movs	r3, #8
 80095a6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095ac:	4619      	mov	r1, r3
 80095ae:	480a      	ldr	r0, [pc, #40]	; (80095d8 <HAL_SPI_MspInit+0x518>)
 80095b0:	f7f9 f934 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 80095b4:	2200      	movs	r2, #0
 80095b6:	2105      	movs	r1, #5
 80095b8:	2056      	movs	r0, #86	; 0x56
 80095ba:	f7f8 fcfd 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 80095be:	2056      	movs	r0, #86	; 0x56
 80095c0:	f7f8 fd16 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 80095c4:	bf00      	nop
 80095c6:	3748      	adds	r7, #72	; 0x48
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40015400 	.word	0x40015400
 80095d0:	40023800 	.word	0x40023800
 80095d4:	40021800 	.word	0x40021800
 80095d8:	40020400 	.word	0x40020400

080095dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80095e2:	4b11      	ldr	r3, [pc, #68]	; (8009628 <HAL_MspInit+0x4c>)
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	4a10      	ldr	r2, [pc, #64]	; (8009628 <HAL_MspInit+0x4c>)
 80095e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095ec:	6413      	str	r3, [r2, #64]	; 0x40
 80095ee:	4b0e      	ldr	r3, [pc, #56]	; (8009628 <HAL_MspInit+0x4c>)
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095f6:	607b      	str	r3, [r7, #4]
 80095f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095fa:	4b0b      	ldr	r3, [pc, #44]	; (8009628 <HAL_MspInit+0x4c>)
 80095fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fe:	4a0a      	ldr	r2, [pc, #40]	; (8009628 <HAL_MspInit+0x4c>)
 8009600:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009604:	6453      	str	r3, [r2, #68]	; 0x44
 8009606:	4b08      	ldr	r3, [pc, #32]	; (8009628 <HAL_MspInit+0x4c>)
 8009608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009612:	2200      	movs	r2, #0
 8009614:	210f      	movs	r1, #15
 8009616:	f06f 0001 	mvn.w	r0, #1
 800961a:	f7f8 fccd 	bl	8001fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	40023800 	.word	0x40023800

0800962c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b08c      	sub	sp, #48	; 0x30
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009638:	2300      	movs	r3, #0
 800963a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0); 
 800963c:	2200      	movs	r2, #0
 800963e:	6879      	ldr	r1, [r7, #4]
 8009640:	2032      	movs	r0, #50	; 0x32
 8009642:	f7f8 fcb9 	bl	8001fb8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn); 
 8009646:	2032      	movs	r0, #50	; 0x32
 8009648:	f7f8 fcd2 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800964c:	4b1f      	ldr	r3, [pc, #124]	; (80096cc <HAL_InitTick+0xa0>)
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	4a1e      	ldr	r2, [pc, #120]	; (80096cc <HAL_InitTick+0xa0>)
 8009652:	f043 0308 	orr.w	r3, r3, #8
 8009656:	6413      	str	r3, [r2, #64]	; 0x40
 8009658:	4b1c      	ldr	r3, [pc, #112]	; (80096cc <HAL_InitTick+0xa0>)
 800965a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965c:	f003 0308 	and.w	r3, r3, #8
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009664:	f107 0210 	add.w	r2, r7, #16
 8009668:	f107 0314 	add.w	r3, r7, #20
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f7fa f8a8 	bl	80037c4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009674:	f7fa f87e 	bl	8003774 <HAL_RCC_GetPCLK1Freq>
 8009678:	4603      	mov	r3, r0
 800967a:	005b      	lsls	r3, r3, #1
 800967c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	4a13      	ldr	r2, [pc, #76]	; (80096d0 <HAL_InitTick+0xa4>)
 8009682:	fba2 2303 	umull	r2, r3, r2, r3
 8009686:	0c9b      	lsrs	r3, r3, #18
 8009688:	3b01      	subs	r3, #1
 800968a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800968c:	4b11      	ldr	r3, [pc, #68]	; (80096d4 <HAL_InitTick+0xa8>)
 800968e:	4a12      	ldr	r2, [pc, #72]	; (80096d8 <HAL_InitTick+0xac>)
 8009690:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 8009692:	4b10      	ldr	r3, [pc, #64]	; (80096d4 <HAL_InitTick+0xa8>)
 8009694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009698:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800969a:	4a0e      	ldr	r2, [pc, #56]	; (80096d4 <HAL_InitTick+0xa8>)
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80096a0:	4b0c      	ldr	r3, [pc, #48]	; (80096d4 <HAL_InitTick+0xa8>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <HAL_InitTick+0xa8>)
 80096a8:	2200      	movs	r2, #0
 80096aa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80096ac:	4809      	ldr	r0, [pc, #36]	; (80096d4 <HAL_InitTick+0xa8>)
 80096ae:	f7fb fc83 	bl	8004fb8 <HAL_TIM_Base_Init>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d104      	bne.n	80096c2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80096b8:	4806      	ldr	r0, [pc, #24]	; (80096d4 <HAL_InitTick+0xa8>)
 80096ba:	f7fb fca9 	bl	8005010 <HAL_TIM_Base_Start_IT>
 80096be:	4603      	mov	r3, r0
 80096c0:	e000      	b.n	80096c4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3730      	adds	r7, #48	; 0x30
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	40023800 	.word	0x40023800
 80096d0:	431bde83 	.word	0x431bde83
 80096d4:	2000ac04 	.word	0x2000ac04
 80096d8:	40000c00 	.word	0x40000c00

080096dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80096dc:	b480      	push	{r7}
 80096de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80096e0:	bf00      	nop
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096ea:	b480      	push	{r7}
 80096ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80096ee:	e7fe      	b.n	80096ee <HardFault_Handler+0x4>

080096f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80096f0:	b480      	push	{r7}
 80096f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80096f4:	e7fe      	b.n	80096f4 <MemManage_Handler+0x4>

080096f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096f6:	b480      	push	{r7}
 80096f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096fa:	e7fe      	b.n	80096fa <BusFault_Handler+0x4>

080096fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096fc:	b480      	push	{r7}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009700:	e7fe      	b.n	8009700 <UsageFault_Handler+0x4>

08009702 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009702:	b480      	push	{r7}
 8009704:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009706:	bf00      	nop
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009714:	2001      	movs	r0, #1
 8009716:	f7f9 fa45 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800971a:	bf00      	nop
 800971c:	bd80      	pop	{r7, pc}

0800971e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8009722:	2002      	movs	r0, #2
 8009724:	f7f9 fa3e 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8009728:	bf00      	nop
 800972a:	bd80      	pop	{r7, pc}

0800972c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8009730:	2004      	movs	r0, #4
 8009732:	f7f9 fa37 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009736:	bf00      	nop
 8009738:	bd80      	pop	{r7, pc}

0800973a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800973e:	2008      	movs	r0, #8
 8009740:	f7f9 fa30 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}

08009748 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800974c:	2010      	movs	r0, #16
 800974e:	f7f9 fa29 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009752:	bf00      	nop
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800975c:	4802      	ldr	r0, [pc, #8]	; (8009768 <DMA1_Stream0_IRQHandler+0x10>)
 800975e:	f7f8 fdf5 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8009762:	bf00      	nop
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	2000aba4 	.word	0x2000aba4

0800976c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009770:	4802      	ldr	r0, [pc, #8]	; (800977c <DMA1_Stream1_IRQHandler+0x10>)
 8009772:	f7f8 fdeb 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009776:	bf00      	nop
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	2000aec4 	.word	0x2000aec4

08009780 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009784:	4802      	ldr	r0, [pc, #8]	; (8009790 <DMA1_Stream4_IRQHandler+0x10>)
 8009786:	f7f8 fde1 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	2000afa4 	.word	0x2000afa4

08009794 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8009798:	4802      	ldr	r0, [pc, #8]	; (80097a4 <DMA1_Stream5_IRQHandler+0x10>)
 800979a:	f7f8 fdd7 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800979e:	bf00      	nop
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	2000a95c 	.word	0x2000a95c

080097a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80097ac:	4802      	ldr	r0, [pc, #8]	; (80097b8 <DMA1_Stream6_IRQHandler+0x10>)
 80097ae:	f7f8 fdcd 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80097b2:	bf00      	nop
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	2000a788 	.word	0x2000a788

080097bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80097c0:	4802      	ldr	r0, [pc, #8]	; (80097cc <CAN1_RX0_IRQHandler+0x10>)
 80097c2:	f7f8 f921 	bl	8001a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80097c6:	bf00      	nop
 80097c8:	bd80      	pop	{r7, pc}
 80097ca:	bf00      	nop
 80097cc:	200026b0 	.word	0x200026b0

080097d0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80097d4:	4802      	ldr	r0, [pc, #8]	; (80097e0 <CAN1_RX1_IRQHandler+0x10>)
 80097d6:	f7f8 f917 	bl	8001a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80097da:	bf00      	nop
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	200026b0 	.word	0x200026b0

080097e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80097e8:	2020      	movs	r0, #32
 80097ea:	f7f9 f9db 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80097ee:	bf00      	nop
 80097f0:	bd80      	pop	{r7, pc}
	...

080097f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80097f8:	4803      	ldr	r0, [pc, #12]	; (8009808 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80097fa:	f7fb fcfb 	bl	80051f4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80097fe:	4803      	ldr	r0, [pc, #12]	; (800980c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8009800:	f7fb fcf8 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009804:	bf00      	nop
 8009806:	bd80      	pop	{r7, pc}
 8009808:	2000ad84 	.word	0x2000ad84
 800980c:	2000acc4 	.word	0x2000acc4

08009810 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009814:	4802      	ldr	r0, [pc, #8]	; (8009820 <USART1_IRQHandler+0x10>)
 8009816:	f7fc fe3d 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800981a:	bf00      	nop
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	2000b0c4 	.word	0x2000b0c4

08009824 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	myUsartIntIRQ(&huart2);
 8009828:	4803      	ldr	r0, [pc, #12]	; (8009838 <USART2_IRQHandler+0x14>)
 800982a:	f004 f9dd 	bl	800dbe8 <myUsartIntIRQ>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800982e:	4802      	ldr	r0, [pc, #8]	; (8009838 <USART2_IRQHandler+0x14>)
 8009830:	f7fc fe30 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009834:	bf00      	nop
 8009836:	bd80      	pop	{r7, pc}
 8009838:	2000b144 	.word	0x2000b144

0800983c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	myUsartDMAIdleIRQ(&huart3);
 8009840:	4803      	ldr	r0, [pc, #12]	; (8009850 <USART3_IRQHandler+0x14>)
 8009842:	f004 f99f 	bl	800db84 <myUsartDMAIdleIRQ>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009846:	4802      	ldr	r0, [pc, #8]	; (8009850 <USART3_IRQHandler+0x14>)
 8009848:	f7fc fe24 	bl	8006494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800984c:	bf00      	nop
 800984e:	bd80      	pop	{r7, pc}
 8009850:	2000af24 	.word	0x2000af24

08009854 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009858:	4802      	ldr	r0, [pc, #8]	; (8009864 <TIM5_IRQHandler+0x10>)
 800985a:	f7fb fccb 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800985e:	bf00      	nop
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	2000ac04 	.word	0x2000ac04

08009868 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800986c:	4802      	ldr	r0, [pc, #8]	; (8009878 <DMA2_Stream0_IRQHandler+0x10>)
 800986e:	f7f8 fd6d 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8009872:	bf00      	nop
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	2000a834 	.word	0x2000a834

0800987c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8009880:	4802      	ldr	r0, [pc, #8]	; (800988c <DMA2_Stream1_IRQHandler+0x10>)
 8009882:	f7f8 fd63 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009886:	bf00      	nop
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	2000a9bc 	.word	0x2000a9bc

08009890 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009894:	4802      	ldr	r0, [pc, #8]	; (80098a0 <DMA2_Stream2_IRQHandler+0x10>)
 8009896:	f7f8 fd59 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800989a:	bf00      	nop
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	2000aae4 	.word	0x2000aae4

080098a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80098a8:	4802      	ldr	r0, [pc, #8]	; (80098b4 <DMA2_Stream3_IRQHandler+0x10>)
 80098aa:	f7f8 fd4f 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80098ae:	bf00      	nop
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	2000ab44 	.word	0x2000ab44

080098b8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80098bc:	4802      	ldr	r0, [pc, #8]	; (80098c8 <DMA2_Stream4_IRQHandler+0x10>)
 80098be:	f7f8 fd45 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80098c2:	bf00      	nop
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20002650 	.word	0x20002650

080098cc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80098d0:	4802      	ldr	r0, [pc, #8]	; (80098dc <DMA2_Stream5_IRQHandler+0x10>)
 80098d2:	f7f8 fd3b 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80098d6:	bf00      	nop
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	2000b064 	.word	0x2000b064

080098e0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80098e4:	4802      	ldr	r0, [pc, #8]	; (80098f0 <DMA2_Stream7_IRQHandler+0x10>)
 80098e6:	f7f8 fd31 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80098ea:	bf00      	nop
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	2000b004 	.word	0x2000b004

080098f4 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 80098f8:	4802      	ldr	r0, [pc, #8]	; (8009904 <SPI6_IRQHandler+0x10>)
 80098fa:	f7fa ffed 	bl	80048d8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 80098fe:	bf00      	nop
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	2000a894 	.word	0x2000a894

08009908 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800990c:	f7fd fccc 	bl	80072a8 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009910:	bf00      	nop
 8009912:	bd80      	pop	{r7, pc}

08009914 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009918:	4b15      	ldr	r3, [pc, #84]	; (8009970 <SystemInit+0x5c>)
 800991a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991e:	4a14      	ldr	r2, [pc, #80]	; (8009970 <SystemInit+0x5c>)
 8009920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009928:	4b12      	ldr	r3, [pc, #72]	; (8009974 <SystemInit+0x60>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a11      	ldr	r2, [pc, #68]	; (8009974 <SystemInit+0x60>)
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009934:	4b0f      	ldr	r3, [pc, #60]	; (8009974 <SystemInit+0x60>)
 8009936:	2200      	movs	r2, #0
 8009938:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800993a:	4b0e      	ldr	r3, [pc, #56]	; (8009974 <SystemInit+0x60>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	490d      	ldr	r1, [pc, #52]	; (8009974 <SystemInit+0x60>)
 8009940:	4b0d      	ldr	r3, [pc, #52]	; (8009978 <SystemInit+0x64>)
 8009942:	4013      	ands	r3, r2
 8009944:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <SystemInit+0x60>)
 8009948:	4a0c      	ldr	r2, [pc, #48]	; (800997c <SystemInit+0x68>)
 800994a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800994c:	4b09      	ldr	r3, [pc, #36]	; (8009974 <SystemInit+0x60>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a08      	ldr	r2, [pc, #32]	; (8009974 <SystemInit+0x60>)
 8009952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009956:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009958:	4b06      	ldr	r3, [pc, #24]	; (8009974 <SystemInit+0x60>)
 800995a:	2200      	movs	r2, #0
 800995c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800995e:	4b04      	ldr	r3, [pc, #16]	; (8009970 <SystemInit+0x5c>)
 8009960:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009964:	609a      	str	r2, [r3, #8]
#endif
}
 8009966:	bf00      	nop
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	e000ed00 	.word	0xe000ed00
 8009974:	40023800 	.word	0x40023800
 8009978:	fef6ffff 	.word	0xfef6ffff
 800997c:	24003010 	.word	0x24003010

08009980 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b09a      	sub	sp, #104	; 0x68
 8009984:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009986:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800998a:	2200      	movs	r2, #0
 800998c:	601a      	str	r2, [r3, #0]
 800998e:	605a      	str	r2, [r3, #4]
 8009990:	609a      	str	r2, [r3, #8]
 8009992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009994:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	605a      	str	r2, [r3, #4]
 800999e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099a4:	2200      	movs	r2, #0
 80099a6:	601a      	str	r2, [r3, #0]
 80099a8:	605a      	str	r2, [r3, #4]
 80099aa:	609a      	str	r2, [r3, #8]
 80099ac:	60da      	str	r2, [r3, #12]
 80099ae:	611a      	str	r2, [r3, #16]
 80099b0:	615a      	str	r2, [r3, #20]
 80099b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80099b4:	1d3b      	adds	r3, r7, #4
 80099b6:	222c      	movs	r2, #44	; 0x2c
 80099b8:	2100      	movs	r1, #0
 80099ba:	4618      	mov	r0, r3
 80099bc:	f007 f8ed 	bl	8010b9a <memset>

  htim1.Instance = TIM1;
 80099c0:	4b4a      	ldr	r3, [pc, #296]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099c2:	4a4b      	ldr	r2, [pc, #300]	; (8009af0 <MX_TIM1_Init+0x170>)
 80099c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80099c6:	4b49      	ldr	r3, [pc, #292]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099c8:	f245 425f 	movw	r2, #21599	; 0x545f
 80099cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099ce:	4b47      	ldr	r3, [pc, #284]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80099d4:	4b45      	ldr	r3, [pc, #276]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099dc:	4b43      	ldr	r3, [pc, #268]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099de:	2200      	movs	r2, #0
 80099e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80099e2:	4b42      	ldr	r3, [pc, #264]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099e8:	4b40      	ldr	r3, [pc, #256]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099ea:	2200      	movs	r2, #0
 80099ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80099ee:	483f      	ldr	r0, [pc, #252]	; (8009aec <MX_TIM1_Init+0x16c>)
 80099f0:	f7fb fae2 	bl	8004fb8 <HAL_TIM_Base_Init>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80099fa:	f7ff fa67 	bl	8008ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a02:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009a04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4838      	ldr	r0, [pc, #224]	; (8009aec <MX_TIM1_Init+0x16c>)
 8009a0c:	f7fb fe2a 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8009a10:	4603      	mov	r3, r0
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d001      	beq.n	8009a1a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8009a16:	f7ff fa59 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009a1a:	4834      	ldr	r0, [pc, #208]	; (8009aec <MX_TIM1_Init+0x16c>)
 8009a1c:	f7fb fb22 	bl	8005064 <HAL_TIM_PWM_Init>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8009a26:	f7ff fa51 	bl	8008ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a32:	2300      	movs	r3, #0
 8009a34:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009a36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	482b      	ldr	r0, [pc, #172]	; (8009aec <MX_TIM1_Init+0x16c>)
 8009a3e:	f7fc fab1 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8009a48:	f7ff fa40 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a4c:	2360      	movs	r3, #96	; 0x60
 8009a4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009a50:	2300      	movs	r3, #0
 8009a52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a54:	2300      	movs	r3, #0
 8009a56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009a60:	2300      	movs	r3, #0
 8009a62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009a64:	2300      	movs	r3, #0
 8009a66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4619      	mov	r1, r3
 8009a70:	481e      	ldr	r0, [pc, #120]	; (8009aec <MX_TIM1_Init+0x16c>)
 8009a72:	f7fb fcdf 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d001      	beq.n	8009a80 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8009a7c:	f7ff fa26 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a84:	2204      	movs	r2, #4
 8009a86:	4619      	mov	r1, r3
 8009a88:	4818      	ldr	r0, [pc, #96]	; (8009aec <MX_TIM1_Init+0x16c>)
 8009a8a:	f7fb fcd3 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8009a94:	f7ff fa1a 	bl	8008ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009aba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009ac8:	1d3b      	adds	r3, r7, #4
 8009aca:	4619      	mov	r1, r3
 8009acc:	4807      	ldr	r0, [pc, #28]	; (8009aec <MX_TIM1_Init+0x16c>)
 8009ace:	f7fc faf7 	bl	80060c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d001      	beq.n	8009adc <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8009ad8:	f7ff f9f8 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009adc:	4803      	ldr	r0, [pc, #12]	; (8009aec <MX_TIM1_Init+0x16c>)
 8009ade:	f000 fcc3 	bl	800a468 <HAL_TIM_MspPostInit>

}
 8009ae2:	bf00      	nop
 8009ae4:	3768      	adds	r7, #104	; 0x68
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	2000ad84 	.word	0x2000ad84
 8009af0:	40010000 	.word	0x40010000

08009af4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b08e      	sub	sp, #56	; 0x38
 8009af8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	605a      	str	r2, [r3, #4]
 8009b04:	609a      	str	r2, [r3, #8]
 8009b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b08:	f107 031c 	add.w	r3, r7, #28
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	605a      	str	r2, [r3, #4]
 8009b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b14:	463b      	mov	r3, r7
 8009b16:	2200      	movs	r2, #0
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	605a      	str	r2, [r3, #4]
 8009b1c:	609a      	str	r2, [r3, #8]
 8009b1e:	60da      	str	r2, [r3, #12]
 8009b20:	611a      	str	r2, [r3, #16]
 8009b22:	615a      	str	r2, [r3, #20]
 8009b24:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8009b26:	4b39      	ldr	r3, [pc, #228]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8009b2e:	4b37      	ldr	r3, [pc, #220]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b30:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009b34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b36:	4b35      	ldr	r3, [pc, #212]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8009b3c:	4b33      	ldr	r3, [pc, #204]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b44:	4b31      	ldr	r3, [pc, #196]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b4a:	4b30      	ldr	r3, [pc, #192]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009b50:	482e      	ldr	r0, [pc, #184]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b52:	f7fb fa31 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009b56:	4603      	mov	r3, r0
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d001      	beq.n	8009b60 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009b5c:	f7ff f9b6 	bl	8008ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009b66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4827      	ldr	r0, [pc, #156]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b6e:	f7fb fd79 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009b78:	f7ff f9a8 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009b7c:	4823      	ldr	r0, [pc, #140]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b7e:	f7fb fa71 	bl	8005064 <HAL_TIM_PWM_Init>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d001      	beq.n	8009b8c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009b88:	f7ff f9a0 	bl	8008ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b90:	2300      	movs	r3, #0
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009b94:	f107 031c 	add.w	r3, r7, #28
 8009b98:	4619      	mov	r1, r3
 8009b9a:	481c      	ldr	r0, [pc, #112]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009b9c:	f7fc fa02 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d001      	beq.n	8009baa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009ba6:	f7ff f991 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009baa:	2360      	movs	r3, #96	; 0x60
 8009bac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009bba:	463b      	mov	r3, r7
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4812      	ldr	r0, [pc, #72]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009bc2:	f7fb fc37 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d001      	beq.n	8009bd0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009bcc:	f7ff f97e 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009bd0:	463b      	mov	r3, r7
 8009bd2:	2208      	movs	r2, #8
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	480d      	ldr	r0, [pc, #52]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009bd8:	f7fb fc2c 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d001      	beq.n	8009be6 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8009be2:	f7ff f973 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009be6:	463b      	mov	r3, r7
 8009be8:	220c      	movs	r2, #12
 8009bea:	4619      	mov	r1, r3
 8009bec:	4807      	ldr	r0, [pc, #28]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009bee:	f7fb fc21 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8009bf8:	f7ff f968 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8009bfc:	4803      	ldr	r0, [pc, #12]	; (8009c0c <MX_TIM2_Init+0x118>)
 8009bfe:	f000 fc33 	bl	800a468 <HAL_TIM_MspPostInit>

}
 8009c02:	bf00      	nop
 8009c04:	3738      	adds	r7, #56	; 0x38
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	2000ae04 	.word	0x2000ae04

08009c10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b08a      	sub	sp, #40	; 0x28
 8009c14:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c16:	f107 031c 	add.w	r3, r7, #28
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
 8009c1e:	605a      	str	r2, [r3, #4]
 8009c20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c22:	463b      	mov	r3, r7
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	605a      	str	r2, [r3, #4]
 8009c2a:	609a      	str	r2, [r3, #8]
 8009c2c:	60da      	str	r2, [r3, #12]
 8009c2e:	611a      	str	r2, [r3, #16]
 8009c30:	615a      	str	r2, [r3, #20]
 8009c32:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009c34:	4b32      	ldr	r3, [pc, #200]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c36:	4a33      	ldr	r2, [pc, #204]	; (8009d04 <MX_TIM3_Init+0xf4>)
 8009c38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8009c3a:	4b31      	ldr	r3, [pc, #196]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c3c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009c40:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c42:	4b2f      	ldr	r3, [pc, #188]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8009c48:	4b2d      	ldr	r3, [pc, #180]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c4a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009c4e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c50:	4b2b      	ldr	r3, [pc, #172]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c56:	4b2a      	ldr	r3, [pc, #168]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009c5c:	4828      	ldr	r0, [pc, #160]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c5e:	f7fb fa01 	bl	8005064 <HAL_TIM_PWM_Init>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d001      	beq.n	8009c6c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009c68:	f7ff f930 	bl	8008ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c70:	2300      	movs	r3, #0
 8009c72:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009c74:	f107 031c 	add.w	r3, r7, #28
 8009c78:	4619      	mov	r1, r3
 8009c7a:	4821      	ldr	r0, [pc, #132]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009c7c:	f7fc f992 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009c86:	f7ff f921 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c8a:	2360      	movs	r3, #96	; 0x60
 8009c8c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c96:	2300      	movs	r3, #0
 8009c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	4817      	ldr	r0, [pc, #92]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009ca2:	f7fb fbc7 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8009cac:	f7ff f90e 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009cb0:	463b      	mov	r3, r7
 8009cb2:	2204      	movs	r2, #4
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4812      	ldr	r0, [pc, #72]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009cb8:	f7fb fbbc 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8009cc2:	f7ff f903 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	2208      	movs	r2, #8
 8009cca:	4619      	mov	r1, r3
 8009ccc:	480c      	ldr	r0, [pc, #48]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009cce:	f7fb fbb1 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d001      	beq.n	8009cdc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009cd8:	f7ff f8f8 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009cdc:	463b      	mov	r3, r7
 8009cde:	220c      	movs	r2, #12
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4807      	ldr	r0, [pc, #28]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009ce4:	f7fb fba6 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8009cee:	f7ff f8ed 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009cf2:	4803      	ldr	r0, [pc, #12]	; (8009d00 <MX_TIM3_Init+0xf0>)
 8009cf4:	f000 fbb8 	bl	800a468 <HAL_TIM_MspPostInit>

}
 8009cf8:	bf00      	nop
 8009cfa:	3728      	adds	r7, #40	; 0x28
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	2000ad04 	.word	0x2000ad04
 8009d04:	40000400 	.word	0x40000400

08009d08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d0e:	f107 031c 	add.w	r3, r7, #28
 8009d12:	2200      	movs	r2, #0
 8009d14:	601a      	str	r2, [r3, #0]
 8009d16:	605a      	str	r2, [r3, #4]
 8009d18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	605a      	str	r2, [r3, #4]
 8009d22:	609a      	str	r2, [r3, #8]
 8009d24:	60da      	str	r2, [r3, #12]
 8009d26:	611a      	str	r2, [r3, #16]
 8009d28:	615a      	str	r2, [r3, #20]
 8009d2a:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8009d2c:	4b32      	ldr	r3, [pc, #200]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d2e:	4a33      	ldr	r2, [pc, #204]	; (8009dfc <MX_TIM4_Init+0xf4>)
 8009d30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8009d32:	4b31      	ldr	r3, [pc, #196]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d34:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009d38:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d3a:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8009d40:	4b2d      	ldr	r3, [pc, #180]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009d46:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d48:	4b2b      	ldr	r3, [pc, #172]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d4e:	4b2a      	ldr	r3, [pc, #168]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009d54:	4828      	ldr	r0, [pc, #160]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d56:	f7fb f985 	bl	8005064 <HAL_TIM_PWM_Init>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d001      	beq.n	8009d64 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009d60:	f7ff f8b4 	bl	8008ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009d6c:	f107 031c 	add.w	r3, r7, #28
 8009d70:	4619      	mov	r1, r3
 8009d72:	4821      	ldr	r0, [pc, #132]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d74:	f7fc f916 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8009d7e:	f7ff f8a5 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d82:	2360      	movs	r3, #96	; 0x60
 8009d84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009d86:	2300      	movs	r3, #0
 8009d88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d92:	463b      	mov	r3, r7
 8009d94:	2200      	movs	r2, #0
 8009d96:	4619      	mov	r1, r3
 8009d98:	4817      	ldr	r0, [pc, #92]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009d9a:	f7fb fb4b 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009da4:	f7ff f892 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009da8:	463b      	mov	r3, r7
 8009daa:	2204      	movs	r2, #4
 8009dac:	4619      	mov	r1, r3
 8009dae:	4812      	ldr	r0, [pc, #72]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009db0:	f7fb fb40 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d001      	beq.n	8009dbe <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8009dba:	f7ff f887 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	2208      	movs	r2, #8
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	480c      	ldr	r0, [pc, #48]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009dc6:	f7fb fb35 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d001      	beq.n	8009dd4 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009dd0:	f7ff f87c 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	220c      	movs	r2, #12
 8009dd8:	4619      	mov	r1, r3
 8009dda:	4807      	ldr	r0, [pc, #28]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009ddc:	f7fb fb2a 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d001      	beq.n	8009dea <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009de6:	f7ff f871 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8009dea:	4803      	ldr	r0, [pc, #12]	; (8009df8 <MX_TIM4_Init+0xf0>)
 8009dec:	f000 fb3c 	bl	800a468 <HAL_TIM_MspPostInit>

}
 8009df0:	bf00      	nop
 8009df2:	3728      	adds	r7, #40	; 0x28
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}
 8009df8:	2000ac84 	.word	0x2000ac84
 8009dfc:	40000800 	.word	0x40000800

08009e00 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e06:	1d3b      	adds	r3, r7, #4
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	605a      	str	r2, [r3, #4]
 8009e0e:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009e10:	4b14      	ldr	r3, [pc, #80]	; (8009e64 <MX_TIM7_Init+0x64>)
 8009e12:	4a15      	ldr	r2, [pc, #84]	; (8009e68 <MX_TIM7_Init+0x68>)
 8009e14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009e16:	4b13      	ldr	r3, [pc, #76]	; (8009e64 <MX_TIM7_Init+0x64>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e1c:	4b11      	ldr	r3, [pc, #68]	; (8009e64 <MX_TIM7_Init+0x64>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009e22:	4b10      	ldr	r3, [pc, #64]	; (8009e64 <MX_TIM7_Init+0x64>)
 8009e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e2a:	4b0e      	ldr	r3, [pc, #56]	; (8009e64 <MX_TIM7_Init+0x64>)
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009e30:	480c      	ldr	r0, [pc, #48]	; (8009e64 <MX_TIM7_Init+0x64>)
 8009e32:	f7fb f8c1 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d001      	beq.n	8009e40 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009e3c:	f7ff f846 	bl	8008ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e40:	2300      	movs	r3, #0
 8009e42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e44:	2300      	movs	r3, #0
 8009e46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009e48:	1d3b      	adds	r3, r7, #4
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4805      	ldr	r0, [pc, #20]	; (8009e64 <MX_TIM7_Init+0x64>)
 8009e4e:	f7fc f8a9 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009e58:	f7ff f838 	bl	8008ecc <Error_Handler>
  }

}
 8009e5c:	bf00      	nop
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	2000ae84 	.word	0x2000ae84
 8009e68:	40001400 	.word	0x40001400

08009e6c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b09a      	sub	sp, #104	; 0x68
 8009e70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e76:	2200      	movs	r2, #0
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	605a      	str	r2, [r3, #4]
 8009e7c:	609a      	str	r2, [r3, #8]
 8009e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
 8009e88:	605a      	str	r2, [r3, #4]
 8009e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	605a      	str	r2, [r3, #4]
 8009e96:	609a      	str	r2, [r3, #8]
 8009e98:	60da      	str	r2, [r3, #12]
 8009e9a:	611a      	str	r2, [r3, #16]
 8009e9c:	615a      	str	r2, [r3, #20]
 8009e9e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009ea0:	1d3b      	adds	r3, r7, #4
 8009ea2:	222c      	movs	r2, #44	; 0x2c
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f006 fe77 	bl	8010b9a <memset>

  htim8.Instance = TIM8;
 8009eac:	4b4a      	ldr	r3, [pc, #296]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009eae:	4a4b      	ldr	r2, [pc, #300]	; (8009fdc <MX_TIM8_Init+0x170>)
 8009eb0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009eb2:	4b49      	ldr	r3, [pc, #292]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009eb4:	f245 425f 	movw	r2, #21599	; 0x545f
 8009eb8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009eba:	4b47      	ldr	r3, [pc, #284]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009ec0:	4b45      	ldr	r3, [pc, #276]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009ec2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ec6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ec8:	4b43      	ldr	r3, [pc, #268]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009ece:	4b42      	ldr	r3, [pc, #264]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ed4:	4b40      	ldr	r3, [pc, #256]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009eda:	483f      	ldr	r0, [pc, #252]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009edc:	f7fb f86c 	bl	8004fb8 <HAL_TIM_Base_Init>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009ee6:	f7fe fff1 	bl	8008ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eee:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	4838      	ldr	r0, [pc, #224]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009ef8:	f7fb fbb4 	bl	8005664 <HAL_TIM_ConfigClockSource>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009f02:	f7fe ffe3 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009f06:	4834      	ldr	r0, [pc, #208]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009f08:	f7fb f8ac 	bl	8005064 <HAL_TIM_PWM_Init>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009f12:	f7fe ffdb 	bl	8008ecc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f16:	2300      	movs	r3, #0
 8009f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009f22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009f26:	4619      	mov	r1, r3
 8009f28:	482b      	ldr	r0, [pc, #172]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009f2a:	f7fc f83b 	bl	8005fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009f34:	f7fe ffca 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f38:	2360      	movs	r3, #96	; 0x60
 8009f3a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f40:	2300      	movs	r3, #0
 8009f42:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009f44:	2300      	movs	r3, #0
 8009f46:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009f50:	2300      	movs	r3, #0
 8009f52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f58:	2200      	movs	r2, #0
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	481e      	ldr	r0, [pc, #120]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009f5e:	f7fb fa69 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009f68:	f7fe ffb0 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f70:	2204      	movs	r2, #4
 8009f72:	4619      	mov	r1, r3
 8009f74:	4818      	ldr	r0, [pc, #96]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009f76:	f7fb fa5d 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009f80:	f7fe ffa4 	bl	8008ecc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009f90:	2300      	movs	r3, #0
 8009f92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009faa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009fb4:	1d3b      	adds	r3, r7, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4807      	ldr	r0, [pc, #28]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009fba:	f7fc f881 	bl	80060c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d001      	beq.n	8009fc8 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009fc4:	f7fe ff82 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009fc8:	4803      	ldr	r0, [pc, #12]	; (8009fd8 <MX_TIM8_Init+0x16c>)
 8009fca:	f000 fa4d 	bl	800a468 <HAL_TIM_MspPostInit>

}
 8009fce:	bf00      	nop
 8009fd0:	3768      	adds	r7, #104	; 0x68
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	2000ac44 	.word	0x2000ac44
 8009fdc:	40010400 	.word	0x40010400

08009fe0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08c      	sub	sp, #48	; 0x30
 8009fe4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fe6:	f107 0320 	add.w	r3, r7, #32
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]
 8009fee:	605a      	str	r2, [r3, #4]
 8009ff0:	609a      	str	r2, [r3, #8]
 8009ff2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ff4:	1d3b      	adds	r3, r7, #4
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	605a      	str	r2, [r3, #4]
 8009ffc:	609a      	str	r2, [r3, #8]
 8009ffe:	60da      	str	r2, [r3, #12]
 800a000:	611a      	str	r2, [r3, #16]
 800a002:	615a      	str	r2, [r3, #20]
 800a004:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 800a006:	4b2b      	ldr	r3, [pc, #172]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a008:	4a2b      	ldr	r2, [pc, #172]	; (800a0b8 <MX_TIM9_Init+0xd8>)
 800a00a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 800a00c:	4b29      	ldr	r3, [pc, #164]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a00e:	f245 425f 	movw	r2, #21599	; 0x545f
 800a012:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a014:	4b27      	ldr	r3, [pc, #156]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a016:	2200      	movs	r2, #0
 800a018:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800a01a:	4b26      	ldr	r3, [pc, #152]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a01c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a020:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a022:	4b24      	ldr	r3, [pc, #144]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a024:	2200      	movs	r2, #0
 800a026:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a028:	4b22      	ldr	r3, [pc, #136]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a02a:	2200      	movs	r2, #0
 800a02c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800a02e:	4821      	ldr	r0, [pc, #132]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a030:	f7fa ffc2 	bl	8004fb8 <HAL_TIM_Base_Init>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d001      	beq.n	800a03e <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800a03a:	f7fe ff47 	bl	8008ecc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a03e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a042:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800a044:	f107 0320 	add.w	r3, r7, #32
 800a048:	4619      	mov	r1, r3
 800a04a:	481a      	ldr	r0, [pc, #104]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a04c:	f7fb fb0a 	bl	8005664 <HAL_TIM_ConfigClockSource>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d001      	beq.n	800a05a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 800a056:	f7fe ff39 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800a05a:	4816      	ldr	r0, [pc, #88]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a05c:	f7fb f802 	bl	8005064 <HAL_TIM_PWM_Init>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800a066:	f7fe ff31 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a06a:	2360      	movs	r3, #96	; 0x60
 800a06c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a07a:	1d3b      	adds	r3, r7, #4
 800a07c:	2200      	movs	r2, #0
 800a07e:	4619      	mov	r1, r3
 800a080:	480c      	ldr	r0, [pc, #48]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a082:	f7fb f9d7 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d001      	beq.n	800a090 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800a08c:	f7fe ff1e 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a090:	1d3b      	adds	r3, r7, #4
 800a092:	2204      	movs	r2, #4
 800a094:	4619      	mov	r1, r3
 800a096:	4807      	ldr	r0, [pc, #28]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a098:	f7fb f9cc 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 800a0a2:	f7fe ff13 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800a0a6:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <MX_TIM9_Init+0xd4>)
 800a0a8:	f000 f9de 	bl	800a468 <HAL_TIM_MspPostInit>

}
 800a0ac:	bf00      	nop
 800a0ae:	3730      	adds	r7, #48	; 0x30
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	2000adc4 	.word	0x2000adc4
 800a0b8:	40014000 	.word	0x40014000

0800a0bc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b088      	sub	sp, #32
 800a0c0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0c2:	1d3b      	adds	r3, r7, #4
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	605a      	str	r2, [r3, #4]
 800a0ca:	609a      	str	r2, [r3, #8]
 800a0cc:	60da      	str	r2, [r3, #12]
 800a0ce:	611a      	str	r2, [r3, #16]
 800a0d0:	615a      	str	r2, [r3, #20]
 800a0d2:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 800a0d4:	4b1e      	ldr	r3, [pc, #120]	; (800a150 <MX_TIM10_Init+0x94>)
 800a0d6:	4a1f      	ldr	r2, [pc, #124]	; (800a154 <MX_TIM10_Init+0x98>)
 800a0d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 800a0da:	4b1d      	ldr	r3, [pc, #116]	; (800a150 <MX_TIM10_Init+0x94>)
 800a0dc:	f245 425f 	movw	r2, #21599	; 0x545f
 800a0e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0e2:	4b1b      	ldr	r3, [pc, #108]	; (800a150 <MX_TIM10_Init+0x94>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800a0e8:	4b19      	ldr	r3, [pc, #100]	; (800a150 <MX_TIM10_Init+0x94>)
 800a0ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a0ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0f0:	4b17      	ldr	r3, [pc, #92]	; (800a150 <MX_TIM10_Init+0x94>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0f6:	4b16      	ldr	r3, [pc, #88]	; (800a150 <MX_TIM10_Init+0x94>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a0fc:	4814      	ldr	r0, [pc, #80]	; (800a150 <MX_TIM10_Init+0x94>)
 800a0fe:	f7fa ff5b 	bl	8004fb8 <HAL_TIM_Base_Init>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 800a108:	f7fe fee0 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800a10c:	4810      	ldr	r0, [pc, #64]	; (800a150 <MX_TIM10_Init+0x94>)
 800a10e:	f7fa ffa9 	bl	8005064 <HAL_TIM_PWM_Init>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 800a118:	f7fe fed8 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a11c:	2360      	movs	r3, #96	; 0x60
 800a11e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a12c:	1d3b      	adds	r3, r7, #4
 800a12e:	2200      	movs	r2, #0
 800a130:	4619      	mov	r1, r3
 800a132:	4807      	ldr	r0, [pc, #28]	; (800a150 <MX_TIM10_Init+0x94>)
 800a134:	f7fb f97e 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800a13e:	f7fe fec5 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 800a142:	4803      	ldr	r0, [pc, #12]	; (800a150 <MX_TIM10_Init+0x94>)
 800a144:	f000 f990 	bl	800a468 <HAL_TIM_MspPostInit>

}
 800a148:	bf00      	nop
 800a14a:	3720      	adds	r7, #32
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	2000acc4 	.word	0x2000acc4
 800a154:	40014400 	.word	0x40014400

0800a158 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a15e:	1d3b      	adds	r3, r7, #4
 800a160:	2200      	movs	r2, #0
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	605a      	str	r2, [r3, #4]
 800a166:	609a      	str	r2, [r3, #8]
 800a168:	60da      	str	r2, [r3, #12]
 800a16a:	611a      	str	r2, [r3, #16]
 800a16c:	615a      	str	r2, [r3, #20]
 800a16e:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 800a170:	4b1e      	ldr	r3, [pc, #120]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a172:	4a1f      	ldr	r2, [pc, #124]	; (800a1f0 <MX_TIM11_Init+0x98>)
 800a174:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 800a176:	4b1d      	ldr	r3, [pc, #116]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a178:	f245 425f 	movw	r2, #21599	; 0x545f
 800a17c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a17e:	4b1b      	ldr	r3, [pc, #108]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a180:	2200      	movs	r2, #0
 800a182:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800a184:	4b19      	ldr	r3, [pc, #100]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a186:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a18a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a18c:	4b17      	ldr	r3, [pc, #92]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a18e:	2200      	movs	r2, #0
 800a190:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a192:	4b16      	ldr	r3, [pc, #88]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a194:	2200      	movs	r2, #0
 800a196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a198:	4814      	ldr	r0, [pc, #80]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a19a:	f7fa ff0d 	bl	8004fb8 <HAL_TIM_Base_Init>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d001      	beq.n	800a1a8 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 800a1a4:	f7fe fe92 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800a1a8:	4810      	ldr	r0, [pc, #64]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a1aa:	f7fa ff5b 	bl	8005064 <HAL_TIM_PWM_Init>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d001      	beq.n	800a1b8 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 800a1b4:	f7fe fe8a 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a1b8:	2360      	movs	r3, #96	; 0x60
 800a1ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a1c8:	1d3b      	adds	r3, r7, #4
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	4807      	ldr	r0, [pc, #28]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a1d0:	f7fb f930 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800a1da:	f7fe fe77 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800a1de:	4803      	ldr	r0, [pc, #12]	; (800a1ec <MX_TIM11_Init+0x94>)
 800a1e0:	f000 f942 	bl	800a468 <HAL_TIM_MspPostInit>

}
 800a1e4:	bf00      	nop
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	2000ad44 	.word	0x2000ad44
 800a1f0:	40014800 	.word	0x40014800

0800a1f4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1fa:	1d3b      	adds	r3, r7, #4
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	605a      	str	r2, [r3, #4]
 800a202:	609a      	str	r2, [r3, #8]
 800a204:	60da      	str	r2, [r3, #12]
 800a206:	611a      	str	r2, [r3, #16]
 800a208:	615a      	str	r2, [r3, #20]
 800a20a:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 800a20c:	4b1e      	ldr	r3, [pc, #120]	; (800a288 <MX_TIM14_Init+0x94>)
 800a20e:	4a1f      	ldr	r2, [pc, #124]	; (800a28c <MX_TIM14_Init+0x98>)
 800a210:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 800a212:	4b1d      	ldr	r3, [pc, #116]	; (800a288 <MX_TIM14_Init+0x94>)
 800a214:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800a218:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a21a:	4b1b      	ldr	r3, [pc, #108]	; (800a288 <MX_TIM14_Init+0x94>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800a220:	4b19      	ldr	r3, [pc, #100]	; (800a288 <MX_TIM14_Init+0x94>)
 800a222:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a226:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a228:	4b17      	ldr	r3, [pc, #92]	; (800a288 <MX_TIM14_Init+0x94>)
 800a22a:	2200      	movs	r2, #0
 800a22c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a22e:	4b16      	ldr	r3, [pc, #88]	; (800a288 <MX_TIM14_Init+0x94>)
 800a230:	2200      	movs	r2, #0
 800a232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800a234:	4814      	ldr	r0, [pc, #80]	; (800a288 <MX_TIM14_Init+0x94>)
 800a236:	f7fa febf 	bl	8004fb8 <HAL_TIM_Base_Init>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d001      	beq.n	800a244 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800a240:	f7fe fe44 	bl	8008ecc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800a244:	4810      	ldr	r0, [pc, #64]	; (800a288 <MX_TIM14_Init+0x94>)
 800a246:	f7fa ff0d 	bl	8005064 <HAL_TIM_PWM_Init>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800a250:	f7fe fe3c 	bl	8008ecc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a254:	2360      	movs	r3, #96	; 0x60
 800a256:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a25c:	2300      	movs	r3, #0
 800a25e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a264:	1d3b      	adds	r3, r7, #4
 800a266:	2200      	movs	r2, #0
 800a268:	4619      	mov	r1, r3
 800a26a:	4807      	ldr	r0, [pc, #28]	; (800a288 <MX_TIM14_Init+0x94>)
 800a26c:	f7fb f8e2 	bl	8005434 <HAL_TIM_PWM_ConfigChannel>
 800a270:	4603      	mov	r3, r0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d001      	beq.n	800a27a <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800a276:	f7fe fe29 	bl	8008ecc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800a27a:	4803      	ldr	r0, [pc, #12]	; (800a288 <MX_TIM14_Init+0x94>)
 800a27c:	f000 f8f4 	bl	800a468 <HAL_TIM_MspPostInit>

}
 800a280:	bf00      	nop
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	2000ae44 	.word	0x2000ae44
 800a28c:	40002000 	.word	0x40002000

0800a290 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08a      	sub	sp, #40	; 0x28
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a50      	ldr	r2, [pc, #320]	; (800a3e0 <HAL_TIM_Base_MspInit+0x150>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d114      	bne.n	800a2cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a2a2:	4b50      	ldr	r3, [pc, #320]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	4a4f      	ldr	r2, [pc, #316]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a2a8:	f043 0301 	orr.w	r3, r3, #1
 800a2ac:	6453      	str	r3, [r2, #68]	; 0x44
 800a2ae:	4b4d      	ldr	r3, [pc, #308]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b2:	f003 0301 	and.w	r3, r3, #1
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	2105      	movs	r1, #5
 800a2be:	2019      	movs	r0, #25
 800a2c0:	f7f7 fe7a 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a2c4:	2019      	movs	r0, #25
 800a2c6:	f7f7 fe93 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800a2ca:	e084      	b.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d4:	d10c      	bne.n	800a2f0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a2d6:	4b43      	ldr	r3, [pc, #268]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	4a42      	ldr	r2, [pc, #264]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a2dc:	f043 0301 	orr.w	r3, r3, #1
 800a2e0:	6413      	str	r3, [r2, #64]	; 0x40
 800a2e2:	4b40      	ldr	r3, [pc, #256]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	623b      	str	r3, [r7, #32]
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
}
 800a2ee:	e072      	b.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a3c      	ldr	r2, [pc, #240]	; (800a3e8 <HAL_TIM_Base_MspInit+0x158>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d10c      	bne.n	800a314 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a2fa:	4b3a      	ldr	r3, [pc, #232]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fe:	4a39      	ldr	r2, [pc, #228]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a300:	f043 0320 	orr.w	r3, r3, #32
 800a304:	6413      	str	r3, [r2, #64]	; 0x40
 800a306:	4b37      	ldr	r3, [pc, #220]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	f003 0320 	and.w	r3, r3, #32
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	69fb      	ldr	r3, [r7, #28]
}
 800a312:	e060      	b.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a34      	ldr	r2, [pc, #208]	; (800a3ec <HAL_TIM_Base_MspInit+0x15c>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d10c      	bne.n	800a338 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a31e:	4b31      	ldr	r3, [pc, #196]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a322:	4a30      	ldr	r2, [pc, #192]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a324:	f043 0302 	orr.w	r3, r3, #2
 800a328:	6453      	str	r3, [r2, #68]	; 0x44
 800a32a:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a32c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32e:	f003 0302 	and.w	r3, r3, #2
 800a332:	61bb      	str	r3, [r7, #24]
 800a334:	69bb      	ldr	r3, [r7, #24]
}
 800a336:	e04e      	b.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a2c      	ldr	r2, [pc, #176]	; (800a3f0 <HAL_TIM_Base_MspInit+0x160>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d10c      	bne.n	800a35c <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800a342:	4b28      	ldr	r3, [pc, #160]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a346:	4a27      	ldr	r2, [pc, #156]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a34c:	6453      	str	r3, [r2, #68]	; 0x44
 800a34e:	4b25      	ldr	r3, [pc, #148]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a356:	617b      	str	r3, [r7, #20]
 800a358:	697b      	ldr	r3, [r7, #20]
}
 800a35a:	e03c      	b.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a24      	ldr	r2, [pc, #144]	; (800a3f4 <HAL_TIM_Base_MspInit+0x164>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d114      	bne.n	800a390 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a366:	4b1f      	ldr	r3, [pc, #124]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36a:	4a1e      	ldr	r2, [pc, #120]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a36c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a370:	6453      	str	r3, [r2, #68]	; 0x44
 800a372:	4b1c      	ldr	r3, [pc, #112]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a37a:	613b      	str	r3, [r7, #16]
 800a37c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a37e:	2200      	movs	r2, #0
 800a380:	2105      	movs	r1, #5
 800a382:	2019      	movs	r0, #25
 800a384:	f7f7 fe18 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a388:	2019      	movs	r0, #25
 800a38a:	f7f7 fe31 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800a38e:	e022      	b.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a18      	ldr	r2, [pc, #96]	; (800a3f8 <HAL_TIM_Base_MspInit+0x168>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d10c      	bne.n	800a3b4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a39a:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a39c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39e:	4a11      	ldr	r2, [pc, #68]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a3a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3a4:	6453      	str	r3, [r2, #68]	; 0x44
 800a3a6:	4b0f      	ldr	r3, [pc, #60]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3ae:	60fb      	str	r3, [r7, #12]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
}
 800a3b2:	e010      	b.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a10      	ldr	r2, [pc, #64]	; (800a3fc <HAL_TIM_Base_MspInit+0x16c>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d10b      	bne.n	800a3d6 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800a3be:	4b09      	ldr	r3, [pc, #36]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a3c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c2:	4a08      	ldr	r2, [pc, #32]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a3c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3c8:	6413      	str	r3, [r2, #64]	; 0x40
 800a3ca:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <HAL_TIM_Base_MspInit+0x154>)
 800a3cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3d2:	60bb      	str	r3, [r7, #8]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
}
 800a3d6:	bf00      	nop
 800a3d8:	3728      	adds	r7, #40	; 0x28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	40010000 	.word	0x40010000
 800a3e4:	40023800 	.word	0x40023800
 800a3e8:	40001400 	.word	0x40001400
 800a3ec:	40010400 	.word	0x40010400
 800a3f0:	40014000 	.word	0x40014000
 800a3f4:	40014400 	.word	0x40014400
 800a3f8:	40014800 	.word	0x40014800
 800a3fc:	40002000 	.word	0x40002000

0800a400 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a13      	ldr	r2, [pc, #76]	; (800a45c <HAL_TIM_PWM_MspInit+0x5c>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d10c      	bne.n	800a42c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a412:	4b13      	ldr	r3, [pc, #76]	; (800a460 <HAL_TIM_PWM_MspInit+0x60>)
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	4a12      	ldr	r2, [pc, #72]	; (800a460 <HAL_TIM_PWM_MspInit+0x60>)
 800a418:	f043 0302 	orr.w	r3, r3, #2
 800a41c:	6413      	str	r3, [r2, #64]	; 0x40
 800a41e:	4b10      	ldr	r3, [pc, #64]	; (800a460 <HAL_TIM_PWM_MspInit+0x60>)
 800a420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a42a:	e010      	b.n	800a44e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a0c      	ldr	r2, [pc, #48]	; (800a464 <HAL_TIM_PWM_MspInit+0x64>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d10b      	bne.n	800a44e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a436:	4b0a      	ldr	r3, [pc, #40]	; (800a460 <HAL_TIM_PWM_MspInit+0x60>)
 800a438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43a:	4a09      	ldr	r2, [pc, #36]	; (800a460 <HAL_TIM_PWM_MspInit+0x60>)
 800a43c:	f043 0304 	orr.w	r3, r3, #4
 800a440:	6413      	str	r3, [r2, #64]	; 0x40
 800a442:	4b07      	ldr	r3, [pc, #28]	; (800a460 <HAL_TIM_PWM_MspInit+0x60>)
 800a444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	60bb      	str	r3, [r7, #8]
 800a44c:	68bb      	ldr	r3, [r7, #8]
}
 800a44e:	bf00      	nop
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40000400 	.word	0x40000400
 800a460:	40023800 	.word	0x40023800
 800a464:	40000800 	.word	0x40000800

0800a468 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b092      	sub	sp, #72	; 0x48
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a470:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]
 800a478:	605a      	str	r2, [r3, #4]
 800a47a:	609a      	str	r2, [r3, #8]
 800a47c:	60da      	str	r2, [r3, #12]
 800a47e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4aa5      	ldr	r2, [pc, #660]	; (800a71c <HAL_TIM_MspPostInit+0x2b4>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d11d      	bne.n	800a4c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a48a:	4ba5      	ldr	r3, [pc, #660]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	4aa4      	ldr	r2, [pc, #656]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a490:	f043 0310 	orr.w	r3, r3, #16
 800a494:	6313      	str	r3, [r2, #48]	; 0x30
 800a496:	4ba2      	ldr	r3, [pc, #648]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	f003 0310 	and.w	r3, r3, #16
 800a49e:	633b      	str	r3, [r7, #48]	; 0x30
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 800a4a2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a4a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a4b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4bc:	4619      	mov	r1, r3
 800a4be:	4899      	ldr	r0, [pc, #612]	; (800a724 <HAL_TIM_MspPostInit+0x2bc>)
 800a4c0:	f7f8 f9ac 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800a4c4:	e168      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ce:	d13a      	bne.n	800a546 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4d0:	4b93      	ldr	r3, [pc, #588]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d4:	4a92      	ldr	r2, [pc, #584]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a4d6:	f043 0302 	orr.w	r3, r3, #2
 800a4da:	6313      	str	r3, [r2, #48]	; 0x30
 800a4dc:	4b90      	ldr	r3, [pc, #576]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e0:	f003 0302 	and.w	r3, r3, #2
 800a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4e8:	4b8d      	ldr	r3, [pc, #564]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ec:	4a8c      	ldr	r2, [pc, #560]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a4ee:	f043 0301 	orr.w	r3, r3, #1
 800a4f2:	6313      	str	r3, [r2, #48]	; 0x30
 800a4f4:	4b8a      	ldr	r3, [pc, #552]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 800a500:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a506:	2302      	movs	r3, #2
 800a508:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a50e:	2300      	movs	r3, #0
 800a510:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a512:	2301      	movs	r3, #1
 800a514:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a516:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a51a:	4619      	mov	r1, r3
 800a51c:	4882      	ldr	r0, [pc, #520]	; (800a728 <HAL_TIM_MspPostInit+0x2c0>)
 800a51e:	f7f8 f97d 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
 800a522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a526:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a528:	2302      	movs	r3, #2
 800a52a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a52c:	2300      	movs	r3, #0
 800a52e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a530:	2300      	movs	r3, #0
 800a532:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a534:	2301      	movs	r3, #1
 800a536:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 800a538:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a53c:	4619      	mov	r1, r3
 800a53e:	487b      	ldr	r0, [pc, #492]	; (800a72c <HAL_TIM_MspPostInit+0x2c4>)
 800a540:	f7f8 f96c 	bl	800281c <HAL_GPIO_Init>
}
 800a544:	e128      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a79      	ldr	r2, [pc, #484]	; (800a730 <HAL_TIM_MspPostInit+0x2c8>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d139      	bne.n	800a5c4 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a550:	4b73      	ldr	r3, [pc, #460]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a554:	4a72      	ldr	r2, [pc, #456]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a556:	f043 0304 	orr.w	r3, r3, #4
 800a55a:	6313      	str	r3, [r2, #48]	; 0x30
 800a55c:	4b70      	ldr	r3, [pc, #448]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	627b      	str	r3, [r7, #36]	; 0x24
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a568:	4b6d      	ldr	r3, [pc, #436]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a56c:	4a6c      	ldr	r2, [pc, #432]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a56e:	f043 0302 	orr.w	r3, r3, #2
 800a572:	6313      	str	r3, [r2, #48]	; 0x30
 800a574:	4b6a      	ldr	r3, [pc, #424]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	623b      	str	r3, [r7, #32]
 800a57e:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
 800a580:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a584:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a586:	2302      	movs	r3, #2
 800a588:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a58e:	2300      	movs	r3, #0
 800a590:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a592:	2302      	movs	r3, #2
 800a594:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a596:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a59a:	4619      	mov	r1, r3
 800a59c:	4865      	ldr	r0, [pc, #404]	; (800a734 <HAL_TIM_MspPostInit+0x2cc>)
 800a59e:	f7f8 f93d 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
 800a5a2:	2330      	movs	r3, #48	; 0x30
 800a5a4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a5b2:	2302      	movs	r3, #2
 800a5b4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	485a      	ldr	r0, [pc, #360]	; (800a728 <HAL_TIM_MspPostInit+0x2c0>)
 800a5be:	f7f8 f92d 	bl	800281c <HAL_GPIO_Init>
}
 800a5c2:	e0e9      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a5b      	ldr	r2, [pc, #364]	; (800a738 <HAL_TIM_MspPostInit+0x2d0>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d11d      	bne.n	800a60a <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5ce:	4b54      	ldr	r3, [pc, #336]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	4a53      	ldr	r2, [pc, #332]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a5d4:	f043 0308 	orr.w	r3, r3, #8
 800a5d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5da:	4b51      	ldr	r3, [pc, #324]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5de:	f003 0308 	and.w	r3, r3, #8
 800a5e2:	61fb      	str	r3, [r7, #28]
 800a5e4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
 800a5e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a5ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ec:	2302      	movs	r3, #2
 800a5ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a5fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a600:	4619      	mov	r1, r3
 800a602:	484e      	ldr	r0, [pc, #312]	; (800a73c <HAL_TIM_MspPostInit+0x2d4>)
 800a604:	f7f8 f90a 	bl	800281c <HAL_GPIO_Init>
}
 800a608:	e0c6      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a4c      	ldr	r2, [pc, #304]	; (800a740 <HAL_TIM_MspPostInit+0x2d8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d11c      	bne.n	800a64e <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a614:	4b42      	ldr	r3, [pc, #264]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a618:	4a41      	ldr	r2, [pc, #260]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a61a:	f043 0304 	orr.w	r3, r3, #4
 800a61e:	6313      	str	r3, [r2, #48]	; 0x30
 800a620:	4b3f      	ldr	r3, [pc, #252]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a624:	f003 0304 	and.w	r3, r3, #4
 800a628:	61bb      	str	r3, [r7, #24]
 800a62a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
 800a62c:	23c0      	movs	r3, #192	; 0xc0
 800a62e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a630:	2302      	movs	r3, #2
 800a632:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a634:	2300      	movs	r3, #0
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a638:	2300      	movs	r3, #0
 800a63a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a63c:	2303      	movs	r3, #3
 800a63e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a640:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a644:	4619      	mov	r1, r3
 800a646:	483b      	ldr	r0, [pc, #236]	; (800a734 <HAL_TIM_MspPostInit+0x2cc>)
 800a648:	f7f8 f8e8 	bl	800281c <HAL_GPIO_Init>
}
 800a64c:	e0a4      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a3c      	ldr	r2, [pc, #240]	; (800a744 <HAL_TIM_MspPostInit+0x2dc>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d11c      	bne.n	800a692 <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a658:	4b31      	ldr	r3, [pc, #196]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65c:	4a30      	ldr	r2, [pc, #192]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a65e:	f043 0310 	orr.w	r3, r3, #16
 800a662:	6313      	str	r3, [r2, #48]	; 0x30
 800a664:	4b2e      	ldr	r3, [pc, #184]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a668:	f003 0310 	and.w	r3, r3, #16
 800a66c:	617b      	str	r3, [r7, #20]
 800a66e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
 800a670:	2360      	movs	r3, #96	; 0x60
 800a672:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a674:	2302      	movs	r3, #2
 800a676:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a67c:	2300      	movs	r3, #0
 800a67e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a680:	2303      	movs	r3, #3
 800a682:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a684:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a688:	4619      	mov	r1, r3
 800a68a:	4826      	ldr	r0, [pc, #152]	; (800a724 <HAL_TIM_MspPostInit+0x2bc>)
 800a68c:	f7f8 f8c6 	bl	800281c <HAL_GPIO_Init>
}
 800a690:	e082      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4a2c      	ldr	r2, [pc, #176]	; (800a748 <HAL_TIM_MspPostInit+0x2e0>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d11c      	bne.n	800a6d6 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a69c:	4b20      	ldr	r3, [pc, #128]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a0:	4a1f      	ldr	r2, [pc, #124]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a6a2:	f043 0320 	orr.w	r3, r3, #32
 800a6a6:	6313      	str	r3, [r2, #48]	; 0x30
 800a6a8:	4b1d      	ldr	r3, [pc, #116]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a6aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ac:	f003 0320 	and.w	r3, r3, #32
 800a6b0:	613b      	str	r3, [r7, #16]
 800a6b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
 800a6b4:	2340      	movs	r3, #64	; 0x40
 800a6b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
 800a6c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	481f      	ldr	r0, [pc, #124]	; (800a74c <HAL_TIM_MspPostInit+0x2e4>)
 800a6d0:	f7f8 f8a4 	bl	800281c <HAL_GPIO_Init>
}
 800a6d4:	e060      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a1d      	ldr	r2, [pc, #116]	; (800a750 <HAL_TIM_MspPostInit+0x2e8>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d139      	bne.n	800a754 <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6e0:	4b0f      	ldr	r3, [pc, #60]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e4:	4a0e      	ldr	r2, [pc, #56]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a6e6:	f043 0320 	orr.w	r3, r3, #32
 800a6ea:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ec:	4b0c      	ldr	r3, [pc, #48]	; (800a720 <HAL_TIM_MspPostInit+0x2b8>)
 800a6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f0:	f003 0320 	and.w	r3, r3, #32
 800a6f4:	60fb      	str	r3, [r7, #12]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
 800a6f8:	2380      	movs	r3, #128	; 0x80
 800a6fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a704:	2300      	movs	r3, #0
 800a706:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a708:	2303      	movs	r3, #3
 800a70a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
 800a70c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a710:	4619      	mov	r1, r3
 800a712:	480e      	ldr	r0, [pc, #56]	; (800a74c <HAL_TIM_MspPostInit+0x2e4>)
 800a714:	f7f8 f882 	bl	800281c <HAL_GPIO_Init>
}
 800a718:	e03e      	b.n	800a798 <HAL_TIM_MspPostInit+0x330>
 800a71a:	bf00      	nop
 800a71c:	40010000 	.word	0x40010000
 800a720:	40023800 	.word	0x40023800
 800a724:	40021000 	.word	0x40021000
 800a728:	40020400 	.word	0x40020400
 800a72c:	40020000 	.word	0x40020000
 800a730:	40000400 	.word	0x40000400
 800a734:	40020800 	.word	0x40020800
 800a738:	40000800 	.word	0x40000800
 800a73c:	40020c00 	.word	0x40020c00
 800a740:	40010400 	.word	0x40010400
 800a744:	40014000 	.word	0x40014000
 800a748:	40014400 	.word	0x40014400
 800a74c:	40021400 	.word	0x40021400
 800a750:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a11      	ldr	r2, [pc, #68]	; (800a7a0 <HAL_TIM_MspPostInit+0x338>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d11c      	bne.n	800a798 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a75e:	4b11      	ldr	r3, [pc, #68]	; (800a7a4 <HAL_TIM_MspPostInit+0x33c>)
 800a760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a762:	4a10      	ldr	r2, [pc, #64]	; (800a7a4 <HAL_TIM_MspPostInit+0x33c>)
 800a764:	f043 0320 	orr.w	r3, r3, #32
 800a768:	6313      	str	r3, [r2, #48]	; 0x30
 800a76a:	4b0e      	ldr	r3, [pc, #56]	; (800a7a4 <HAL_TIM_MspPostInit+0x33c>)
 800a76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	60bb      	str	r3, [r7, #8]
 800a774:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
 800a776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a77a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a77c:	2302      	movs	r3, #2
 800a77e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a780:	2300      	movs	r3, #0
 800a782:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a784:	2300      	movs	r3, #0
 800a786:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a788:	2309      	movs	r3, #9
 800a78a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
 800a78c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a790:	4619      	mov	r1, r3
 800a792:	4805      	ldr	r0, [pc, #20]	; (800a7a8 <HAL_TIM_MspPostInit+0x340>)
 800a794:	f7f8 f842 	bl	800281c <HAL_GPIO_Init>
}
 800a798:	bf00      	nop
 800a79a:	3748      	adds	r7, #72	; 0x48
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	40002000 	.word	0x40002000
 800a7a4:	40023800 	.word	0x40023800
 800a7a8:	40021400 	.word	0x40021400

0800a7ac <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a7b0:	4b14      	ldr	r3, [pc, #80]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7b2:	4a15      	ldr	r2, [pc, #84]	; (800a808 <MX_USART1_UART_Init+0x5c>)
 800a7b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800a7b6:	4b13      	ldr	r3, [pc, #76]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7b8:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a7bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a7be:	4b11      	ldr	r3, [pc, #68]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a7c4:	4b0f      	ldr	r3, [pc, #60]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a7ca:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7d2:	220c      	movs	r2, #12
 800a7d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a7dc:	4b09      	ldr	r3, [pc, #36]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a7e2:	4b08      	ldr	r3, [pc, #32]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a7e8:	4b06      	ldr	r3, [pc, #24]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a7ee:	4805      	ldr	r0, [pc, #20]	; (800a804 <MX_USART1_UART_Init+0x58>)
 800a7f0:	f7fb fd02 	bl	80061f8 <HAL_UART_Init>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a7fa:	f7fe fb67 	bl	8008ecc <Error_Handler>
  }

}
 800a7fe:	bf00      	nop
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	2000b0c4 	.word	0x2000b0c4
 800a808:	40011000 	.word	0x40011000

0800a80c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a810:	4b14      	ldr	r3, [pc, #80]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a812:	4a15      	ldr	r2, [pc, #84]	; (800a868 <MX_USART2_UART_Init+0x5c>)
 800a814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a816:	4b13      	ldr	r3, [pc, #76]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a81c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a81e:	4b11      	ldr	r3, [pc, #68]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a820:	2200      	movs	r2, #0
 800a822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a824:	4b0f      	ldr	r3, [pc, #60]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a826:	2200      	movs	r2, #0
 800a828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a82a:	4b0e      	ldr	r3, [pc, #56]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a830:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a832:	220c      	movs	r2, #12
 800a834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a838:	2200      	movs	r2, #0
 800a83a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a83c:	4b09      	ldr	r3, [pc, #36]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a83e:	2200      	movs	r2, #0
 800a840:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a842:	4b08      	ldr	r3, [pc, #32]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a844:	2200      	movs	r2, #0
 800a846:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a848:	4b06      	ldr	r3, [pc, #24]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a84a:	2200      	movs	r2, #0
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a84e:	4805      	ldr	r0, [pc, #20]	; (800a864 <MX_USART2_UART_Init+0x58>)
 800a850:	f7fb fcd2 	bl	80061f8 <HAL_UART_Init>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a85a:	f7fe fb37 	bl	8008ecc <Error_Handler>
  }

}
 800a85e:	bf00      	nop
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	2000b144 	.word	0x2000b144
 800a868:	40004400 	.word	0x40004400

0800a86c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a870:	4b14      	ldr	r3, [pc, #80]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a872:	4a15      	ldr	r2, [pc, #84]	; (800a8c8 <MX_USART3_UART_Init+0x5c>)
 800a874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a876:	4b13      	ldr	r3, [pc, #76]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a878:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a87c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a87e:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a880:	2200      	movs	r2, #0
 800a882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a884:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a886:	2200      	movs	r2, #0
 800a888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a88a:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a88c:	2200      	movs	r2, #0
 800a88e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a890:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a892:	220c      	movs	r2, #12
 800a894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a896:	4b0b      	ldr	r3, [pc, #44]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a898:	2200      	movs	r2, #0
 800a89a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a89c:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a8a2:	4b08      	ldr	r3, [pc, #32]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a8a8:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a8ae:	4805      	ldr	r0, [pc, #20]	; (800a8c4 <MX_USART3_UART_Init+0x58>)
 800a8b0:	f7fb fca2 	bl	80061f8 <HAL_UART_Init>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a8ba:	f7fe fb07 	bl	8008ecc <Error_Handler>
  }

}
 800a8be:	bf00      	nop
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	2000af24 	.word	0x2000af24
 800a8c8:	40004800 	.word	0x40004800

0800a8cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08e      	sub	sp, #56	; 0x38
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	605a      	str	r2, [r3, #4]
 800a8de:	609a      	str	r2, [r3, #8]
 800a8e0:	60da      	str	r2, [r3, #12]
 800a8e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a6c      	ldr	r2, [pc, #432]	; (800aa9c <HAL_UART_MspInit+0x1d0>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	f040 809f 	bne.w	800aa2e <HAL_UART_MspInit+0x162>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a8f0:	4b6b      	ldr	r3, [pc, #428]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800a8f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f4:	4a6a      	ldr	r2, [pc, #424]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800a8f6:	f043 0310 	orr.w	r3, r3, #16
 800a8fa:	6453      	str	r3, [r2, #68]	; 0x44
 800a8fc:	4b68      	ldr	r3, [pc, #416]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800a8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a900:	f003 0310 	and.w	r3, r3, #16
 800a904:	623b      	str	r3, [r7, #32]
 800a906:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a908:	4b65      	ldr	r3, [pc, #404]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800a90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a90c:	4a64      	ldr	r2, [pc, #400]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800a90e:	f043 0302 	orr.w	r3, r3, #2
 800a912:	6313      	str	r3, [r2, #48]	; 0x30
 800a914:	4b62      	ldr	r3, [pc, #392]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800a916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a918:	f003 0302 	and.w	r3, r3, #2
 800a91c:	61fb      	str	r3, [r7, #28]
 800a91e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a926:	2302      	movs	r3, #2
 800a928:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a92a:	2302      	movs	r3, #2
 800a92c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a92e:	2303      	movs	r3, #3
 800a930:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800a932:	2304      	movs	r3, #4
 800a934:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a93a:	4619      	mov	r1, r3
 800a93c:	4859      	ldr	r0, [pc, #356]	; (800aaa4 <HAL_UART_MspInit+0x1d8>)
 800a93e:	f7f7 ff6d 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a942:	2340      	movs	r3, #64	; 0x40
 800a944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a946:	2302      	movs	r3, #2
 800a948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a94a:	2302      	movs	r3, #2
 800a94c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a94e:	2303      	movs	r3, #3
 800a950:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a952:	2307      	movs	r3, #7
 800a954:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a95a:	4619      	mov	r1, r3
 800a95c:	4851      	ldr	r0, [pc, #324]	; (800aaa4 <HAL_UART_MspInit+0x1d8>)
 800a95e:	f7f7 ff5d 	bl	800281c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800a962:	4b51      	ldr	r3, [pc, #324]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a964:	4a51      	ldr	r2, [pc, #324]	; (800aaac <HAL_UART_MspInit+0x1e0>)
 800a966:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a968:	4b4f      	ldr	r3, [pc, #316]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a96a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a96e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a970:	4b4d      	ldr	r3, [pc, #308]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a972:	2200      	movs	r2, #0
 800a974:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a976:	4b4c      	ldr	r3, [pc, #304]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a978:	2200      	movs	r2, #0
 800a97a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a97c:	4b4a      	ldr	r3, [pc, #296]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a97e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a982:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a984:	4b48      	ldr	r3, [pc, #288]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a986:	2200      	movs	r2, #0
 800a988:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a98a:	4b47      	ldr	r3, [pc, #284]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a990:	4b45      	ldr	r3, [pc, #276]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a992:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a996:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a998:	4b43      	ldr	r3, [pc, #268]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a99a:	2200      	movs	r2, #0
 800a99c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a99e:	4b42      	ldr	r3, [pc, #264]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a9a4:	4840      	ldr	r0, [pc, #256]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a9a6:	f7f7 fb31 	bl	800200c <HAL_DMA_Init>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800a9b0:	f7fe fa8c 	bl	8008ecc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a3c      	ldr	r2, [pc, #240]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a9b8:	66da      	str	r2, [r3, #108]	; 0x6c
 800a9ba:	4a3b      	ldr	r2, [pc, #236]	; (800aaa8 <HAL_UART_MspInit+0x1dc>)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a9c0:	4b3b      	ldr	r3, [pc, #236]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9c2:	4a3c      	ldr	r2, [pc, #240]	; (800aab4 <HAL_UART_MspInit+0x1e8>)
 800a9c4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a9c6:	4b3a      	ldr	r3, [pc, #232]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a9cc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9ce:	4b38      	ldr	r3, [pc, #224]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9d0:	2240      	movs	r2, #64	; 0x40
 800a9d2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9d4:	4b36      	ldr	r3, [pc, #216]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a9da:	4b35      	ldr	r3, [pc, #212]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9e0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9e2:	4b33      	ldr	r3, [pc, #204]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9e8:	4b31      	ldr	r3, [pc, #196]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a9ee:	4b30      	ldr	r3, [pc, #192]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a9f4:	4b2e      	ldr	r3, [pc, #184]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9fa:	4b2d      	ldr	r3, [pc, #180]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800aa00:	482b      	ldr	r0, [pc, #172]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800aa02:	f7f7 fb03 	bl	800200c <HAL_DMA_Init>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 800aa0c:	f7fe fa5e 	bl	8008ecc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a27      	ldr	r2, [pc, #156]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800aa14:	669a      	str	r2, [r3, #104]	; 0x68
 800aa16:	4a26      	ldr	r2, [pc, #152]	; (800aab0 <HAL_UART_MspInit+0x1e4>)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	2105      	movs	r1, #5
 800aa20:	2025      	movs	r0, #37	; 0x25
 800aa22:	f7f7 fac9 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aa26:	2025      	movs	r0, #37	; 0x25
 800aa28:	f7f7 fae2 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800aa2c:	e0dd      	b.n	800abea <HAL_UART_MspInit+0x31e>
  else if(uartHandle->Instance==USART2)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a21      	ldr	r2, [pc, #132]	; (800aab8 <HAL_UART_MspInit+0x1ec>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d143      	bne.n	800aac0 <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800aa38:	4b19      	ldr	r3, [pc, #100]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800aa3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa3c:	4a18      	ldr	r2, [pc, #96]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800aa3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa42:	6413      	str	r3, [r2, #64]	; 0x40
 800aa44:	4b16      	ldr	r3, [pc, #88]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800aa46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa4c:	61bb      	str	r3, [r7, #24]
 800aa4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa50:	4b13      	ldr	r3, [pc, #76]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800aa52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa54:	4a12      	ldr	r2, [pc, #72]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800aa56:	f043 0308 	orr.w	r3, r3, #8
 800aa5a:	6313      	str	r3, [r2, #48]	; 0x30
 800aa5c:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <HAL_UART_MspInit+0x1d4>)
 800aa5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa60:	f003 0308 	and.w	r3, r3, #8
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800aa68:	2360      	movs	r3, #96	; 0x60
 800aa6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800aa70:	2302      	movs	r3, #2
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa74:	2303      	movs	r3, #3
 800aa76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aa78:	2307      	movs	r3, #7
 800aa7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aa7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa80:	4619      	mov	r1, r3
 800aa82:	480e      	ldr	r0, [pc, #56]	; (800aabc <HAL_UART_MspInit+0x1f0>)
 800aa84:	f7f7 feca 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2105      	movs	r1, #5
 800aa8c:	2026      	movs	r0, #38	; 0x26
 800aa8e:	f7f7 fa93 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800aa92:	2026      	movs	r0, #38	; 0x26
 800aa94:	f7f7 faac 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800aa98:	e0a7      	b.n	800abea <HAL_UART_MspInit+0x31e>
 800aa9a:	bf00      	nop
 800aa9c:	40011000 	.word	0x40011000
 800aaa0:	40023800 	.word	0x40023800
 800aaa4:	40020400 	.word	0x40020400
 800aaa8:	2000b064 	.word	0x2000b064
 800aaac:	40026488 	.word	0x40026488
 800aab0:	2000b004 	.word	0x2000b004
 800aab4:	400264b8 	.word	0x400264b8
 800aab8:	40004400 	.word	0x40004400
 800aabc:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a4b      	ldr	r2, [pc, #300]	; (800abf4 <HAL_UART_MspInit+0x328>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	f040 808f 	bne.w	800abea <HAL_UART_MspInit+0x31e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800aacc:	4b4a      	ldr	r3, [pc, #296]	; (800abf8 <HAL_UART_MspInit+0x32c>)
 800aace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad0:	4a49      	ldr	r2, [pc, #292]	; (800abf8 <HAL_UART_MspInit+0x32c>)
 800aad2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aad6:	6413      	str	r3, [r2, #64]	; 0x40
 800aad8:	4b47      	ldr	r3, [pc, #284]	; (800abf8 <HAL_UART_MspInit+0x32c>)
 800aada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aadc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aae4:	4b44      	ldr	r3, [pc, #272]	; (800abf8 <HAL_UART_MspInit+0x32c>)
 800aae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae8:	4a43      	ldr	r2, [pc, #268]	; (800abf8 <HAL_UART_MspInit+0x32c>)
 800aaea:	f043 0308 	orr.w	r3, r3, #8
 800aaee:	6313      	str	r3, [r2, #48]	; 0x30
 800aaf0:	4b41      	ldr	r3, [pc, #260]	; (800abf8 <HAL_UART_MspInit+0x32c>)
 800aaf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf4:	f003 0308 	and.w	r3, r3, #8
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800aafc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ab00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab02:	2302      	movs	r3, #2
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ab06:	2302      	movs	r3, #2
 800ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab0a:	2303      	movs	r3, #3
 800ab0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ab0e:	2307      	movs	r3, #7
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab16:	4619      	mov	r1, r3
 800ab18:	4838      	ldr	r0, [pc, #224]	; (800abfc <HAL_UART_MspInit+0x330>)
 800ab1a:	f7f7 fe7f 	bl	800281c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800ab1e:	4b38      	ldr	r3, [pc, #224]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab20:	4a38      	ldr	r2, [pc, #224]	; (800ac04 <HAL_UART_MspInit+0x338>)
 800ab22:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800ab24:	4b36      	ldr	r3, [pc, #216]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab2c:	4b34      	ldr	r3, [pc, #208]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab32:	4b33      	ldr	r3, [pc, #204]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab38:	4b31      	ldr	r3, [pc, #196]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab40:	4b2f      	ldr	r3, [pc, #188]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab46:	4b2e      	ldr	r3, [pc, #184]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800ab4c:	4b2c      	ldr	r3, [pc, #176]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab4e:	2200      	movs	r2, #0
 800ab50:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800ab52:	4b2b      	ldr	r3, [pc, #172]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab54:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab58:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ab5a:	4b29      	ldr	r3, [pc, #164]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800ab60:	4827      	ldr	r0, [pc, #156]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab62:	f7f7 fa53 	bl	800200c <HAL_DMA_Init>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d001      	beq.n	800ab70 <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 800ab6c:	f7fe f9ae 	bl	8008ecc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a23      	ldr	r2, [pc, #140]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab74:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab76:	4a22      	ldr	r2, [pc, #136]	; (800ac00 <HAL_UART_MspInit+0x334>)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800ab7c:	4b22      	ldr	r3, [pc, #136]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800ab7e:	4a23      	ldr	r2, [pc, #140]	; (800ac0c <HAL_UART_MspInit+0x340>)
 800ab80:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800ab82:	4b21      	ldr	r3, [pc, #132]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800ab84:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ab88:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab8a:	4b1f      	ldr	r3, [pc, #124]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800ab8c:	2240      	movs	r2, #64	; 0x40
 800ab8e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab90:	4b1d      	ldr	r3, [pc, #116]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ab96:	4b1c      	ldr	r3, [pc, #112]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800ab98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab9c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aba4:	4b18      	ldr	r3, [pc, #96]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800abaa:	4b17      	ldr	r3, [pc, #92]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800abac:	2200      	movs	r2, #0
 800abae:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800abb0:	4b15      	ldr	r3, [pc, #84]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800abb2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800abb6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800abb8:	4b13      	ldr	r3, [pc, #76]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800abba:	2200      	movs	r2, #0
 800abbc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800abbe:	4812      	ldr	r0, [pc, #72]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800abc0:	f7f7 fa24 	bl	800200c <HAL_DMA_Init>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d001      	beq.n	800abce <HAL_UART_MspInit+0x302>
      Error_Handler();
 800abca:	f7fe f97f 	bl	8008ecc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a0d      	ldr	r2, [pc, #52]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800abd2:	669a      	str	r2, [r3, #104]	; 0x68
 800abd4:	4a0c      	ldr	r2, [pc, #48]	; (800ac08 <HAL_UART_MspInit+0x33c>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800abda:	2200      	movs	r2, #0
 800abdc:	2105      	movs	r1, #5
 800abde:	2027      	movs	r0, #39	; 0x27
 800abe0:	f7f7 f9ea 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800abe4:	2027      	movs	r0, #39	; 0x27
 800abe6:	f7f7 fa03 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800abea:	bf00      	nop
 800abec:	3738      	adds	r7, #56	; 0x38
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	40004800 	.word	0x40004800
 800abf8:	40023800 	.word	0x40023800
 800abfc:	40020c00 	.word	0x40020c00
 800ac00:	2000aec4 	.word	0x2000aec4
 800ac04:	40026028 	.word	0x40026028
 800ac08:	2000afa4 	.word	0x2000afa4
 800ac0c:	40026070 	.word	0x40026070

0800ac10 <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac1e:	2100      	movs	r1, #0
 800ac20:	4618      	mov	r0, r3
 800ac22:	f001 fa0f 	bl	800c044 <DigitalWrite>
}
 800ac26:	bf00      	nop
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b082      	sub	sp, #8
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f001 fa00 	bl	800c044 <DigitalWrite>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f001 f9f1 	bl	800c044 <DigitalWrite>
}
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b082      	sub	sp, #8
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac78:	2101      	movs	r1, #1
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f001 f9e2 	bl	800c044 <DigitalWrite>
}
 800ac80:	bf00      	nop
 800ac82:	3708      	adds	r7, #8
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ac96:	2100      	movs	r1, #0
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f001 f9d3 	bl	800c044 <DigitalWrite>
}
 800ac9e:	bf00      	nop
 800aca0:	3708      	adds	r7, #8
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b082      	sub	sp, #8
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800acb4:	2101      	movs	r1, #1
 800acb6:	4618      	mov	r0, r3
 800acb8:	f001 f9c4 	bl	800c044 <DigitalWrite>
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2201      	movs	r2, #1
 800acd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
	delay_ns(200);
	AD_CONV_LOW(ptADDev);}
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f7ff ffb9 	bl	800ac4c <AD_CONV_LOW>
	delay_ns(200);
 800acda:	20c8      	movs	r0, #200	; 0xc8
 800acdc:	f001 fa38 	bl	800c150 <delay_ns>
	AD_CONV_HIGH(ptADDev);}
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff ffc2 	bl	800ac6a <AD_CONV_HIGH>
	ptADDev->ucDataFlag = 0;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t Int_x)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800ad02:	2301      	movs	r3, #1
 800ad04:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	e024      	b.n	800ad56 <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ad0c:	4b16      	ldr	r3, [pc, #88]	; (800ad68 <ADBoard_BUSYCallback+0x70>)
 800ad0e:	6819      	ldr	r1, [r3, #0]
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	4613      	mov	r3, r2
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	4413      	add	r3, r2
 800ad18:	011b      	lsls	r3, r3, #4
 800ad1a:	440b      	add	r3, r1
 800ad1c:	60fb      	str	r3, [r7, #12]
		if (Int_x == ptADDev->BUSY_INT_x)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ad24:	88fa      	ldrh	r2, [r7, #6]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d112      	bne.n	800ad50 <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <ADBoard_BUSYCallback+0x70>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	693a      	ldr	r2, [r7, #16]
 800ad30:	b292      	uxth	r2, r2
 800ad32:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				AD_CS_LOW(ptADDev);
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7ff ff6a 	bl	800ac10 <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD76x6_CHANNELNUM);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	2308      	movs	r3, #8
 800ad44:	4909      	ldr	r1, [pc, #36]	; (800ad6c <ADBoard_BUSYCallback+0x74>)
 800ad46:	f7f9 fc3b 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	617b      	str	r3, [r7, #20]
				break;
 800ad4e:	e005      	b.n	800ad5c <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	3301      	adds	r3, #1
 800ad54:	613b      	str	r3, [r7, #16]
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	ddd7      	ble.n	800ad0c <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800ad5c:	697b      	ldr	r3, [r7, #20]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3718      	adds	r7, #24
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20000010 	.word	0x20000010
 800ad6c:	20000014 	.word	0x20000014

0800ad70 <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	int ret=1;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
 800ad80:	e081      	b.n	800ae86 <ADBoard_SPICallback+0x116>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ad82:	4b45      	ldr	r3, [pc, #276]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ad84:	6819      	ldr	r1, [r3, #0]
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	4413      	add	r3, r2
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	440b      	add	r3, r1
 800ad92:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d170      	bne.n	800ae80 <ADBoard_SPICallback+0x110>
				{
					ptADBoardDevices->curADBoardNum=i;
 800ad9e:	4b3e      	ldr	r3, [pc, #248]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	693a      	ldr	r2, [r7, #16]
 800ada4:	b292      	uxth	r2, r2
 800ada6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					AD_CS_HIGH(ptADDev);
 800adaa:	68b8      	ldr	r0, [r7, #8]
 800adac:	f7ff ff3f 	bl	800ac2e <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					ptADDev->chosen = 0;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800adc0:	2300      	movs	r3, #0
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	e01a      	b.n	800adfc <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add6:	eddf 6a31 	vldr	s13, [pc, #196]	; 800ae9c <ADBoard_SPICallback+0x12c>
 800adda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ade4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade8:	68ba      	ldr	r2, [r7, #8]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	3304      	adds	r3, #4
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3301      	adds	r3, #1
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b07      	cmp	r3, #7
 800ae00:	dde1      	ble.n	800adc6 <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800ae02:	4b25      	ldr	r3, [pc, #148]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dc19      	bgt.n	800ae44 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800ae10:	4b21      	ldr	r3, [pc, #132]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ae18:	4b1f      	ldr	r3, [pc, #124]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3201      	adds	r2, #1
 800ae1e:	b292      	uxth	r2, r2
 800ae20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800ae24:	4b1c      	ldr	r3, [pc, #112]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	4b1b      	ldr	r3, [pc, #108]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae30:	4619      	mov	r1, r3
 800ae32:	460b      	mov	r3, r1
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	440b      	add	r3, r1
 800ae38:	011b      	lsls	r3, r3, #4
 800ae3a:	4413      	add	r3, r2
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff ff41 	bl	800acc4 <AD7616_getVoltage>
 800ae42:	e01a      	b.n	800ae7a <ADBoard_SPICallback+0x10a>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800ae44:	4b14      	ldr	r3, [pc, #80]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						ptADBoardDevices->ucDataFlag = 1;
 800ae50:	4b11      	ldr	r3, [pc, #68]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	2201      	movs	r2, #1
 800ae56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						ptADBoardDevices->ADTimeEnd=micros();
 800ae5a:	f001 f949 	bl	800c0f0 <micros>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	4b0d      	ldr	r3, [pc, #52]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	65da      	str	r2, [r3, #92]	; 0x5c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800ae66:	4b0c      	ldr	r3, [pc, #48]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ae6c:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae72:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <ADBoard_SPICallback+0x128>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	1a8a      	subs	r2, r1, r2
 800ae78:	655a      	str	r2, [r3, #84]	; 0x54
					}
					ret=0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	617b      	str	r3, [r7, #20]
					break;
 800ae7e:	e006      	b.n	800ae8e <ADBoard_SPICallback+0x11e>
		for(int i=0;i<ADBOARD_NUM;i++)
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	3301      	adds	r3, #1
 800ae84:	613b      	str	r3, [r7, #16]
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	f77f af7a 	ble.w	800ad82 <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800ae8e:	697b      	ldr	r3, [r7, #20]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20000010 	.word	0x20000010
 800ae9c:	47800000 	.word	0x47800000

0800aea0 <ADBoard_Reset>:

void ADBoard_Reset()
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
	delay_us(5);
	AD_RESET_LOW(ptADDev);
	delay_us(5);
	AD_RESET_HIGH(ptADDev);}
 else if (ADBOARD_TYPE==AD7606){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
 800aea6:	4b0b      	ldr	r3, [pc, #44]	; (800aed4 <ADBoard_Reset+0x34>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	607b      	str	r3, [r7, #4]
	AD_RESET_LOW(ptADDev);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff feeb 	bl	800ac88 <AD_RESET_LOW>
	delay_us(5);
 800aeb2:	2005      	movs	r0, #5
 800aeb4:	f001 f932 	bl	800c11c <delay_us>
	AD_RESET_HIGH(ptADDev);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff fef4 	bl	800aca6 <AD_RESET_HIGH>
	delay_us(5);
 800aebe:	2005      	movs	r0, #5
 800aec0:	f001 f92c 	bl	800c11c <delay_us>
	AD_RESET_LOW(ptADDev);}
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7ff fedf 	bl	800ac88 <AD_RESET_LOW>

}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	20000010 	.word	0x20000010

0800aed8 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800aedc:	4b10      	ldr	r3, [pc, #64]	; (800af20 <ADBoard_updateVoltage+0x48>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->curADBoardNum = 0;
 800aee6:	4b0e      	ldr	r3, [pc, #56]	; (800af20 <ADBoard_updateVoltage+0x48>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ADTimeStart=micros();
 800aef0:	f001 f8fe 	bl	800c0f0 <micros>
 800aef4:	4602      	mov	r2, r0
 800aef6:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <ADBoard_updateVoltage+0x48>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	659a      	str	r2, [r3, #88]	; 0x58
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800aefc:	4b08      	ldr	r3, [pc, #32]	; (800af20 <ADBoard_updateVoltage+0x48>)
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	4b07      	ldr	r3, [pc, #28]	; (800af20 <ADBoard_updateVoltage+0x48>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af08:	4619      	mov	r1, r3
 800af0a:	460b      	mov	r3, r1
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	440b      	add	r3, r1
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	4413      	add	r3, r2
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff fed5 	bl	800acc4 <AD7616_getVoltage>
}
 800af1a:	bf00      	nop
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	20000010 	.word	0x20000010

0800af24 <ADBoard_Init>:
	else
		return 0;
}

void ADBoard_Init()
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
 800af2a:	230b      	movs	r3, #11
 800af2c:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
 800af2e:	230c      	movs	r3, #12
 800af30:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
 800af32:	230d      	movs	r3, #13
 800af34:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
 800af36:	2303      	movs	r3, #3
 800af38:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
 800af3a:	4b28      	ldr	r3, [pc, #160]	; (800afdc <ADBoard_Init+0xb8>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ucDataFlag = 0;
 800af46:	4b25      	ldr	r3, [pc, #148]	; (800afdc <ADBoard_Init+0xb8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->ADTime=0;
 800af50:	4b22      	ldr	r3, [pc, #136]	; (800afdc <ADBoard_Init+0xb8>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2200      	movs	r2, #0
 800af56:	655a      	str	r2, [r3, #84]	; 0x54
	ptADBoardDevices->ADTimeStart=0;
 800af58:	4b20      	ldr	r3, [pc, #128]	; (800afdc <ADBoard_Init+0xb8>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	2200      	movs	r2, #0
 800af5e:	659a      	str	r2, [r3, #88]	; 0x58
	ptADBoardDevices->ADTimeEnd=0;
 800af60:	4b1e      	ldr	r3, [pc, #120]	; (800afdc <ADBoard_Init+0xb8>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2200      	movs	r2, #0
 800af66:	65da      	str	r2, [r3, #92]	; 0x5c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -10;
 800af68:	4b1c      	ldr	r3, [pc, #112]	; (800afdc <ADBoard_Init+0xb8>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a1c      	ldr	r2, [pc, #112]	; (800afe0 <ADBoard_Init+0xbc>)
 800af6e:	631a      	str	r2, [r3, #48]	; 0x30
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 10;
 800af70:	4b1a      	ldr	r3, [pc, #104]	; (800afdc <ADBoard_Init+0xb8>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a1b      	ldr	r2, [pc, #108]	; (800afe4 <ADBoard_Init+0xc0>)
 800af76:	635a      	str	r2, [r3, #52]	; 0x34
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
 800af78:	4b18      	ldr	r3, [pc, #96]	; (800afdc <ADBoard_Init+0xb8>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800af80:	4b16      	ldr	r3, [pc, #88]	; (800afdc <ADBoard_Init+0xb8>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800af88:	4b14      	ldr	r3, [pc, #80]	; (800afdc <ADBoard_Init+0xb8>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af90:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
 800af94:	4b11      	ldr	r3, [pc, #68]	; (800afdc <ADBoard_Init+0xb8>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a13      	ldr	r2, [pc, #76]	; (800afe8 <ADBoard_Init+0xc4>)
 800af9a:	641a      	str	r2, [r3, #64]	; 0x40
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
 800af9c:	4b0f      	ldr	r3, [pc, #60]	; (800afdc <ADBoard_Init+0xb8>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	79fa      	ldrb	r2, [r7, #7]
 800afa2:	b292      	uxth	r2, r2
 800afa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
 800afa8:	4b0c      	ldr	r3, [pc, #48]	; (800afdc <ADBoard_Init+0xb8>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	797a      	ldrb	r2, [r7, #5]
 800afae:	b292      	uxth	r2, r2
 800afb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
 800afb4:	4b09      	ldr	r3, [pc, #36]	; (800afdc <ADBoard_Init+0xb8>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	79ba      	ldrb	r2, [r7, #6]
 800afba:	b292      	uxth	r2, r2
 800afbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
 800afc0:	4b06      	ldr	r3, [pc, #24]	; (800afdc <ADBoard_Init+0xb8>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	793a      	ldrb	r2, [r7, #4]
 800afc6:	b292      	uxth	r2, r2
 800afc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	ADBoard_Reset();
 800afcc:	f7ff ff68 	bl	800aea0 <ADBoard_Reset>

	ADBoard_updateVoltage();
 800afd0:	f7ff ff82 	bl	800aed8 <ADBoard_updateVoltage>
}
 800afd4:	bf00      	nop
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	20000010 	.word	0x20000010
 800afe0:	c1200000 	.word	0xc1200000
 800afe4:	41200000 	.word	0x41200000
 800afe8:	2000aa1c 	.word	0x2000aa1c

0800afec <_ZN7CHAMBERC1Eiii>:





CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800afec:	b5b0      	push	{r4, r5, r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	3304      	adds	r3, #4
 800affe:	68b9      	ldr	r1, [r7, #8]
 800b000:	4618      	mov	r0, r3
 800b002:	f001 f90d 	bl	800c220 <_ZN14SOLENOID_VALVEC1Ei>
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	331c      	adds	r3, #28
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f001 f907 	bl	800c220 <_ZN14SOLENOID_VALVEC1Ei>
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3334      	adds	r3, #52	; 0x34
 800b016:	6839      	ldr	r1, [r7, #0]
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 fbbd 	bl	800b798 <_ZN15PRESSURE_SENSORC1Ei>
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3350      	adds	r3, #80	; 0x50
 800b022:	4618      	mov	r0, r3
 800b024:	f003 f80c 	bl	800e040 <_ZN18PRESSURE_SENSORSPIC1Ev>
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	f241 036c 	movw	r3, #4204	; 0x106c
 800b02e:	4413      	add	r3, r2
 800b030:	4a64      	ldr	r2, [pc, #400]	; (800b1c4 <_ZN7CHAMBERC1Eiii+0x1d8>)
 800b032:	461c      	mov	r4, r3
 800b034:	4615      	mov	r5, r2
 800b036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b03a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b03c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b03e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	6023      	str	r3, [r4, #0]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800b04c:	4a5e      	ldr	r2, [pc, #376]	; (800b1c8 <_ZN7CHAMBERC1Eiii+0x1dc>)
 800b04e:	461c      	mov	r4, r3
 800b050:	4615      	mov	r5, r2
 800b052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b05a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b05c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b05e:	682b      	ldr	r3, [r5, #0]
 800b060:	6023      	str	r3, [r4, #0]
{

	length=0.3;
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800b068:	4413      	add	r3, r2
 800b06a:	4a58      	ldr	r2, [pc, #352]	; (800b1cc <_ZN7CHAMBERC1Eiii+0x1e0>)
 800b06c:	601a      	str	r2, [r3, #0]
	lengthCommand = length;
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	f241 03d4 	movw	r3, #4308	; 0x10d4
 800b074:	4413      	add	r3, r2
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68f9      	ldr	r1, [r7, #12]
 800b07a:	f241 03d8 	movw	r3, #4312	; 0x10d8
 800b07e:	440b      	add	r3, r1
 800b080:	601a      	str	r2, [r3, #0]
	filterBeta=0.01;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	4a52      	ldr	r2, [pc, #328]	; (800b1d0 <_ZN7CHAMBERC1Eiii+0x1e4>)
 800b086:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pressure=0;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f04f 0200 	mov.w	r2, #0
 800b090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f04f 0200 	mov.w	r2, #0
 800b09a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressuredot=0;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f04f 0200 	mov.w	r2, #0
 800b0a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	pressureDeadZone = 2000;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4a47      	ldr	r2, [pc, #284]	; (800b1d4 <_ZN7CHAMBERC1Eiii+0x1e8>)
 800b0b8:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=30000;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	4a46      	ldr	r2, [pc, #280]	; (800b1d8 <_ZN7CHAMBERC1Eiii+0x1ec>)
 800b0be:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-30000;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	4a46      	ldr	r2, [pc, #280]	; (800b1dc <_ZN7CHAMBERC1Eiii+0x1f0>)
 800b0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	f241 035c 	movw	r3, #4188	; 0x105c
 800b0ce:	4413      	add	r3, r2
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	601a      	str	r2, [r3, #0]
	opening = 0;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	f04f 0200 	mov.w	r2, #0
 800b0da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


	inflatingFlag=1;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	da00      	bge.n	800b0ee <_ZN7CHAMBERC1Eiii+0x102>
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	105b      	asrs	r3, r3, #1
 800b0f0:	4a3b      	ldr	r2, [pc, #236]	; (800b1e0 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800b0f2:	011b      	lsls	r3, r3, #4
 800b0f4:	4413      	add	r3, r2
 800b0f6:	681a      	ldr	r2, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	da00      	bge.n	800b106 <_ZN7CHAMBERC1Eiii+0x11a>
 800b104:	3301      	adds	r3, #1
 800b106:	105b      	asrs	r3, r3, #1
 800b108:	4a35      	ldr	r2, [pc, #212]	; (800b1e0 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800b10a:	011b      	lsls	r3, r3, #4
 800b10c:	4413      	add	r3, r2
 800b10e:	3304      	adds	r3, #4
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	da00      	bge.n	800b120 <_ZN7CHAMBERC1Eiii+0x134>
 800b11e:	3301      	adds	r3, #1
 800b120:	105b      	asrs	r3, r3, #1
 800b122:	4a2f      	ldr	r2, [pc, #188]	; (800b1e0 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800b124:	011b      	lsls	r3, r3, #4
 800b126:	4413      	add	r3, r2
 800b128:	3308      	adds	r3, #8
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	da00      	bge.n	800b13a <_ZN7CHAMBERC1Eiii+0x14e>
 800b138:	3301      	adds	r3, #1
 800b13a:	105b      	asrs	r3, r3, #1
 800b13c:	4a28      	ldr	r2, [pc, #160]	; (800b1e0 <_ZN7CHAMBERC1Eiii+0x1f4>)
 800b13e:	011b      	lsls	r3, r3, #4
 800b140:	4413      	add	r3, r2
 800b142:	330c      	adds	r3, #12
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b152:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800b156:	eddf 4a23 	vldr	s9, [pc, #140]	; 800b1e4 <_ZN7CHAMBERC1Eiii+0x1f8>
 800b15a:	ed9f 4a23 	vldr	s8, [pc, #140]	; 800b1e8 <_ZN7CHAMBERC1Eiii+0x1fc>
 800b15e:	eddf 3a23 	vldr	s7, [pc, #140]	; 800b1ec <_ZN7CHAMBERC1Eiii+0x200>
 800b162:	ed9f 3a22 	vldr	s6, [pc, #136]	; 800b1ec <_ZN7CHAMBERC1Eiii+0x200>
 800b166:	eddf 2a22 	vldr	s5, [pc, #136]	; 800b1f0 <_ZN7CHAMBERC1Eiii+0x204>
 800b16a:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800b1f4 <_ZN7CHAMBERC1Eiii+0x208>
 800b16e:	eddf 1a22 	vldr	s3, [pc, #136]	; 800b1f8 <_ZN7CHAMBERC1Eiii+0x20c>
 800b172:	ed9f 1a22 	vldr	s2, [pc, #136]	; 800b1fc <_ZN7CHAMBERC1Eiii+0x210>
 800b176:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800b1ec <_ZN7CHAMBERC1Eiii+0x200>
 800b17a:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b200 <_ZN7CHAMBERC1Eiii+0x214>
 800b17e:	f000 faa9 	bl	800b6d4 <NewPressureController>
 800b182:	4602      	mov	r2, r0
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800b188:	68fa      	ldr	r2, [r7, #12]
 800b18a:	f241 0364 	movw	r3, #4196	; 0x1064
 800b18e:	4413      	add	r3, r2
 800b190:	2200      	movs	r2, #0
 800b192:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f503 5383 	add.w	r3, r3, #4192	; 0x1060
 800b19a:	2200      	movs	r2, #0
 800b19c:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	f241 0368 	movw	r3, #4200	; 0x1068
 800b1a4:	4413      	add	r3, r2
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	33bc      	adds	r3, #188	; 0xbc
 800b1ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f005 fcf0 	bl	8010b9a <memset>

}
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bdb0      	pop	{r4, r5, r7, pc}
 800b1c4:	08015010 	.word	0x08015010
 800b1c8:	08015044 	.word	0x08015044
 800b1cc:	3e99999a 	.word	0x3e99999a
 800b1d0:	3c23d70a 	.word	0x3c23d70a
 800b1d4:	44fa0000 	.word	0x44fa0000
 800b1d8:	46ea6000 	.word	0x46ea6000
 800b1dc:	c6ea6000 	.word	0xc6ea6000
 800b1e0:	20000034 	.word	0x20000034
 800b1e4:	3e99999a 	.word	0x3e99999a
 800b1e8:	387ba882 	.word	0x387ba882
 800b1ec:	00000000 	.word	0x00000000
 800b1f0:	37a7c5ac 	.word	0x37a7c5ac
 800b1f4:	471c4000 	.word	0x471c4000
 800b1f8:	501502f9 	.word	0x501502f9
 800b1fc:	3a83126f 	.word	0x3a83126f
 800b200:	48435000 	.word	0x48435000

0800b204 <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	60f8      	str	r0, [r7, #12]
 800b20c:	60b9      	str	r1, [r7, #8]
 800b20e:	607a      	str	r2, [r7, #4]
 800b210:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	3304      	adds	r3, #4
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	4618      	mov	r0, r3
 800b21a:	f001 f82b 	bl	800c274 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	331c      	adds	r3, #28
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	4618      	mov	r0, r3
 800b226:	f001 f825 	bl	800c274 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	3334      	adds	r3, #52	; 0x34
 800b22e:	6839      	ldr	r1, [r7, #0]
 800b230:	4618      	mov	r0, r3
 800b232:	f000 fad7 	bl	800b7e4 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b236:	bf00      	nop
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <_ZN7CHAMBER12zeroPressureEv>:
}
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}
void CHAMBER::zeroPressure(){
 800b23e:	b480      	push	{r7}
 800b240:	b083      	sub	sp, #12
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr

0800b25e <_ZN7CHAMBER15readPressureExtEf>:
	pressure=pressureRaw-pressureOffset;

	return pressure;
}

float CHAMBER::readPressureExt(float pressureExt){
 800b25e:	b480      	push	{r7}
 800b260:	b083      	sub	sp, #12
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
 800b266:	ed87 0a00 	vstr	s0, [r7]

	/************************read from external pressure source**********/
	pressureRaw=pressureExt;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressure=pressureRaw-pressureOffset;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800b27e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c

	return pressure;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b28e:	ee07 3a90 	vmov	s15, r3
}
 800b292:	eeb0 0a67 	vmov.f32	s0, s15
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,-100000,180000);
 800b2ac:	edd7 7a00 	vldr	s15, [r7]
 800b2b0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b494 <_ZN7CHAMBER13writePressureEf+0x1f4>
 800b2b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2bc:	d501      	bpl.n	800b2c2 <_ZN7CHAMBER13writePressureEf+0x22>
 800b2be:	4b76      	ldr	r3, [pc, #472]	; (800b498 <_ZN7CHAMBER13writePressureEf+0x1f8>)
 800b2c0:	e00b      	b.n	800b2da <_ZN7CHAMBER13writePressureEf+0x3a>
 800b2c2:	edd7 7a00 	vldr	s15, [r7]
 800b2c6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800b49c <_ZN7CHAMBER13writePressureEf+0x1fc>
 800b2ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d2:	dd01      	ble.n	800b2d8 <_ZN7CHAMBER13writePressureEf+0x38>
 800b2d4:	4b72      	ldr	r3, [pc, #456]	; (800b4a0 <_ZN7CHAMBER13writePressureEf+0x200>)
 800b2d6:	e000      	b.n	800b2da <_ZN7CHAMBER13writePressureEf+0x3a>
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

	float pErr = pressureCommand-pressure;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2f0:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800b2fa:	edd7 7a03 	vldr	s15, [r7, #12]
 800b2fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b306:	d54e      	bpl.n	800b3a6 <_ZN7CHAMBER13writePressureEf+0x106>
	{
		opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b314:	edd7 7a03 	vldr	s15, [r7, #12]
 800b318:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b31c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b320:	dd03      	ble.n	800b32a <_ZN7CHAMBER13writePressureEf+0x8a>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b328:	e019      	b.n	800b35e <_ZN7CHAMBER13writePressureEf+0xbe>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b336:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b33a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b33e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b346:	d508      	bpl.n	800b35a <_ZN7CHAMBER13writePressureEf+0xba>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b358:	e001      	b.n	800b35e <_ZN7CHAMBER13writePressureEf+0xbe>
 800b35a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b364:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b374:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b378:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b388:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b392:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b396:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b3a4:	e06a      	b.n	800b47c <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b3ac:	eeb1 7a67 	vneg.f32	s14, s15
 800b3b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3bc:	dd59      	ble.n	800b472 <_ZN7CHAMBER13writePressureEf+0x1d2>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);

		opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b3d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b3d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b3dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3e0:	dd08      	ble.n	800b3f4 <_ZN7CHAMBER13writePressureEf+0x154>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b3ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3f2:	e013      	b.n	800b41c <_ZN7CHAMBER13writePressureEf+0x17c>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b3fa:	eef1 6a67 	vneg.f32	s13, s15
 800b3fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800b402:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40a:	d505      	bpl.n	800b418 <_ZN7CHAMBER13writePressureEf+0x178>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b412:	eef1 7a67 	vneg.f32	s15, s15
 800b416:	e001      	b.n	800b41c <_ZN7CHAMBER13writePressureEf+0x17c>
 800b418:	edd7 7a03 	vldr	s15, [r7, #12]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b428:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b42c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b43c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b440:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b44a:	eef1 6a67 	vneg.f32	s13, s15
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b45a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800b45e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b462:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b470:	e004      	b.n	800b47c <_ZN7CHAMBER13writePressureEf+0x1dc>
		//opening=-1;
	}
	else
	{
		opening=0;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f04f 0200 	mov.w	r2, #0
 800b478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b482:	eeb0 0a67 	vmov.f32	s0, s15
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f80c 	bl	800b4a4 <_ZN7CHAMBER12writeOpeningEf>
}
 800b48c:	bf00      	nop
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}
 800b494:	c7c35000 	.word	0xc7c35000
 800b498:	c7c35000 	.word	0xc7c35000
 800b49c:	482fc800 	.word	0x482fc800
 800b4a0:	482fc800 	.word	0x482fc800

0800b4a4 <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800b4b0:	edd7 7a00 	vldr	s15, [r7]
 800b4b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4bc:	dd2b      	ble.n	800b516 <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800b4be:	edd7 7a00 	vldr	s15, [r7]
 800b4c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ca:	d502      	bpl.n	800b4d2 <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800b4cc:	f04f 0300 	mov.w	r3, #0
 800b4d0:	e00c      	b.n	800b4ec <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b4d2:	edd7 7a00 	vldr	s15, [r7]
 800b4d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e2:	dd02      	ble.n	800b4ea <_ZN7CHAMBER12writeOpeningEf+0x46>
 800b4e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b4e8:	e000      	b.n	800b4ec <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	1d1a      	adds	r2, r3, #4
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b4fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b500:	4610      	mov	r0, r2
 800b502:	f000 fec5 	bl	800c290 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	331c      	adds	r3, #28
 800b50a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b578 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 febe 	bl	800c290 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800b514:	e02c      	b.n	800b570 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800b516:	edd7 7a00 	vldr	s15, [r7]
 800b51a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b51e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b526:	d501      	bpl.n	800b52c <_ZN7CHAMBER12writeOpeningEf+0x88>
 800b528:	4b14      	ldr	r3, [pc, #80]	; (800b57c <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800b52a:	e00a      	b.n	800b542 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b52c:	edd7 7a00 	vldr	s15, [r7]
 800b530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b538:	dd02      	ble.n	800b540 <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800b53a:	f04f 0300 	mov.w	r3, #0
 800b53e:	e000      	b.n	800b542 <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	3304      	adds	r3, #4
 800b54c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b578 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b550:	4618      	mov	r0, r3
 800b552:	f000 fe9d 	bl	800c290 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f103 021c 	add.w	r2, r3, #28
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b562:	eef1 7a67 	vneg.f32	s15, s15
 800b566:	eeb0 0a67 	vmov.f32	s0, s15
 800b56a:	4610      	mov	r0, r2
 800b56c:	f000 fe90 	bl	800c290 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	00000000 	.word	0x00000000
 800b57c:	bf800000 	.word	0xbf800000

0800b580 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800b580:	b480      	push	{r7}
 800b582:	b083      	sub	sp, #12
 800b584:	af00      	add	r7, sp, #0
 800b586:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800b58a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b58e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b592:	edd7 7a01 	vldr	s15, [r7, #4]
 800b596:	eef0 7ae7 	vabs.f32	s15, s15
 800b59a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b59e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b5c0 <mySAT+0x40>
 800b5a2:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b5a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b5aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b5ae:	eeb0 0a67 	vmov.f32	s0, s15
 800b5b2:	370c      	adds	r7, #12
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	f3af 8000 	nop.w
 800b5c0:	47ae147b 	.word	0x47ae147b
 800b5c4:	3f847ae1 	.word	0x3f847ae1

0800b5c8 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08a      	sub	sp, #40	; 0x28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	ed87 0a02 	vstr	s0, [r7, #8]
 800b5d4:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	68ba      	ldr	r2, [r7, #8]
 800b5dc:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	687a      	ldr	r2, [r7, #4]
 800b5e2:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	ed93 7a08 	vldr	s14, [r3, #32]
 800b5ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	edd3 6a07 	vldr	s13, [r3, #28]
 800b5f8:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b600:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b604:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b69c <superTwisting2rdSMCUpdate+0xd4>
 800b608:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	edd3 7a02 	vldr	s15, [r3, #8]
 800b618:	eeb0 0a67 	vmov.f32	s0, s15
 800b61c:	f7ff ffb0 	bl	800b580 <mySAT>
 800b620:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	edd3 7a02 	vldr	s15, [r3, #8]
 800b62a:	eeb0 7ae7 	vabs.f32	s14, s15
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	edd3 7a04 	vldr	s15, [r3, #16]
 800b634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b638:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b63c:	f04f 0300 	mov.w	r3, #0
 800b640:	617b      	str	r3, [r7, #20]
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	61fb      	str	r3, [r7, #28]
 800b646:	f107 0314 	add.w	r3, r7, #20
 800b64a:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b64c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b650:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b658:	db09      	blt.n	800b66e <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b65a:	ed97 0a07 	vldr	s0, [r7, #28]
 800b65e:	f005 f9fb 	bl	8010a58 <sqrtf>
 800b662:	eef0 7a40 	vmov.f32	s15, s0
 800b666:	69bb      	ldr	r3, [r7, #24]
 800b668:	edc3 7a00 	vstr	s15, [r3]
 800b66c:	e003      	b.n	800b676 <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	f04f 0200 	mov.w	r2, #0
 800b674:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b676:	ed97 7a05 	vldr	s14, [r7, #20]
 800b67a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b67e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	ee07 3a90 	vmov	s15, r3
}
 800b690:	eeb0 0a67 	vmov.f32	s0, s15
 800b694:	3728      	adds	r7, #40	; 0x28
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	447a0000 	.word	0x447a0000

0800b6a0 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b6ac:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	3324      	adds	r3, #36	; 0x24
 800b6b4:	edd7 0a01 	vldr	s1, [r7, #4]
 800b6b8:	ed97 0a02 	vldr	s0, [r7, #8]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff ff83 	bl	800b5c8 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	ee07 3a90 	vmov	s15, r3
}
 800b6ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08c      	sub	sp, #48	; 0x30
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b6de:	edc7 0a08 	vstr	s1, [r7, #32]
 800b6e2:	ed87 1a07 	vstr	s2, [r7, #28]
 800b6e6:	edc7 1a06 	vstr	s3, [r7, #24]
 800b6ea:	ed87 2a05 	vstr	s4, [r7, #20]
 800b6ee:	edc7 2a04 	vstr	s5, [r7, #16]
 800b6f2:	ed87 3a03 	vstr	s6, [r7, #12]
 800b6f6:	edc7 3a02 	vstr	s7, [r7, #8]
 800b6fa:	ed87 4a01 	vstr	s8, [r7, #4]
 800b6fe:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b702:	204c      	movs	r0, #76	; 0x4c
 800b704:	f005 fa36 	bl	8010b74 <malloc>
 800b708:	4603      	mov	r3, r0
 800b70a:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b70c:	224c      	movs	r2, #76	; 0x4c
 800b70e:	2100      	movs	r1, #0
 800b710:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b712:	f005 fa42 	bl	8010b9a <memset>
	pController->psource = psource;
 800b716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b71a:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800b71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b71e:	6a3a      	ldr	r2, [r7, #32]
 800b720:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800b722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b724:	69fa      	ldr	r2, [r7, #28]
 800b726:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800b728:	ed97 1a07 	vldr	s2, [r7, #28]
 800b72c:	edd7 0a05 	vldr	s1, [r7, #20]
 800b730:	ed97 0a06 	vldr	s0, [r7, #24]
 800b734:	f001 fbca 	bl	800cecc <newSimpleKalmanFilter>
 800b738:	4602      	mov	r2, r0
 800b73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b73c:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800b73e:	edd7 2a00 	vldr	s5, [r7]
 800b742:	ed97 2a01 	vldr	s4, [r7, #4]
 800b746:	edd7 1a07 	vldr	s3, [r7, #28]
 800b74a:	ed97 1a02 	vldr	s2, [r7, #8]
 800b74e:	edd7 0a03 	vldr	s1, [r7, #12]
 800b752:	ed97 0a04 	vldr	s0, [r7, #16]
 800b756:	f001 fff9 	bl	800d74c <newPID>
 800b75a:	4602      	mov	r2, r0
 800b75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75e:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800b760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800b766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b768:	4a08      	ldr	r2, [pc, #32]	; (800b78c <NewPressureController+0xb8>)
 800b76a:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800b76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b772:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800b774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b776:	4a06      	ldr	r2, [pc, #24]	; (800b790 <NewPressureController+0xbc>)
 800b778:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800b77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b77c:	4a05      	ldr	r2, [pc, #20]	; (800b794 <NewPressureController+0xc0>)
 800b77e:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800b780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b782:	4618      	mov	r0, r3
 800b784:	3730      	adds	r7, #48	; 0x30
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	3627c5ac 	.word	0x3627c5ac
 800b790:	41a00000 	.word	0x41a00000
 800b794:	0800b6a1 	.word	0x0800b6a1

0800b798 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f04f 0200 	mov.w	r2, #0
 800b7a8:	605a      	str	r2, [r3, #4]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f04f 0200 	mov.w	r2, #0
 800b7b0:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f815 	bl	800b7e4 <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800b7ba:	eddf 1a08 	vldr	s3, [pc, #32]	; 800b7dc <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800b7be:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800b7e0 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800b7c2:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800b7c6:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f818 	bl	800b800 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	48927c00 	.word	0x48927c00
 800b7e0:	00000000 	.word	0x00000000

0800b7e4 <_ZN15PRESSURE_SENSOR6attachEi>:
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
	return pressure;
}

void PRESSURE_SENSOR::attach(int num)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	601a      	str	r2, [r3, #0]

}
 800b7f4:	bf00      	nop
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800b800:	b480      	push	{r7}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
 800b806:	6178      	str	r0, [r7, #20]
 800b808:	ed87 0a04 	vstr	s0, [r7, #16]
 800b80c:	edc7 0a03 	vstr	s1, [r7, #12]
 800b810:	ed87 1a02 	vstr	s2, [r7, #8]
 800b814:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	619a      	str	r2, [r3, #24]
}
 800b830:	bf00      	nop
 800b832:	371c      	adds	r7, #28
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr

0800b83c <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	60f8      	str	r0, [r7, #12]
 800b844:	60b9      	str	r1, [r7, #8]
 800b846:	607a      	str	r2, [r7, #4]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	3304      	adds	r3, #4
 800b84c:	2100      	movs	r1, #0
 800b84e:	4618      	mov	r0, r3
 800b850:	f000 f852 	bl	800b8f8 <_ZN4PUMPC1Ei>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	330c      	adds	r3, #12
 800b858:	2100      	movs	r1, #0
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff ff9c 	bl	800b798 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	68b9      	ldr	r1, [r7, #8]
 800b864:	68f8      	ldr	r0, [r7, #12]
 800b866:	f000 f817 	bl	800b898 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	601a      	str	r2, [r3, #0]
	direction=0;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f04f 0200 	mov.w	r2, #0
 800b87c:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f04f 0200 	mov.w	r2, #0
 800b884:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f04f 0200 	mov.w	r2, #0
 800b88c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4618      	mov	r0, r3
 800b892:	3710      	adds	r7, #16
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	60f8      	str	r0, [r7, #12]
 800b8a0:	60b9      	str	r1, [r7, #8]
 800b8a2:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800b8a4:	68b9      	ldr	r1, [r7, #8]
 800b8a6:	68f8      	ldr	r0, [r7, #12]
 800b8a8:	f000 f808 	bl	800b8bc <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800b8ac:	6879      	ldr	r1, [r7, #4]
 800b8ae:	68f8      	ldr	r0, [r7, #12]
 800b8b0:	f000 f813 	bl	800b8da <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800b8b4:	bf00      	nop
 800b8b6:	3710      	adds	r7, #16
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f824 	bl	800b91a <_ZN4PUMP6attachEi>
}
 800b8d2:	bf00      	nop
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b082      	sub	sp, #8
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	330c      	adds	r3, #12
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7ff ff7a 	bl	800b7e4 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b8f0:	bf00      	nop
 800b8f2:	3708      	adds	r7, #8
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}

0800b8f8 <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
	status=0;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	605a      	str	r2, [r3, #4]
	attach(num);
 800b908:	6839      	ldr	r1, [r7, #0]
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f805 	bl	800b91a <_ZN4PUMP6attachEi>
}
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	4618      	mov	r0, r3
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b083      	sub	sp, #12
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	601a      	str	r2, [r3, #0]
}
 800b92a:	bf00      	nop
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
	...

0800b938 <PWM_CS_LOW>:
static void PWMBoardSPI_setCorrectionEnable(uint8_t flag);
static void PWMBoardSPI_startPWMCK(float fre);


static void PWM_CS_LOW()
{
 800b938:	b480      	push	{r7}
 800b93a:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin<<16U;
 800b93c:	4b07      	ldr	r3, [pc, #28]	; (800b95c <PWM_CS_LOW+0x24>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 800b944:	461a      	mov	r2, r3
 800b946:	4b05      	ldr	r3, [pc, #20]	; (800b95c <PWM_CS_LOW+0x24>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b94e:	0412      	lsls	r2, r2, #16
 800b950:	619a      	str	r2, [r3, #24]
}
 800b952:	bf00      	nop
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	20000214 	.word	0x20000214

0800b960 <PWM_CS_HIGH>:

static void PWM_CS_HIGH()
{
 800b960:	b480      	push	{r7}
 800b962:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin;
 800b964:	4b06      	ldr	r3, [pc, #24]	; (800b980 <PWM_CS_HIGH+0x20>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
 800b96c:	4b04      	ldr	r3, [pc, #16]	; (800b980 <PWM_CS_HIGH+0x20>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800b974:	619a      	str	r2, [r3, #24]
}
 800b976:	bf00      	nop
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20000214 	.word	0x20000214

0800b984 <PWMBoardSPI_Callback>:

static void PWMBoardSPI_Callback()
{
 800b984:	b580      	push	{r7, lr}
 800b986:	af00      	add	r7, sp, #0
	//the high pulse duration should be less than 5us to maintain the LDI functionality
	PWM_CS_HIGH();
 800b988:	f7ff ffea 	bl	800b960 <PWM_CS_HIGH>
	delay_us(2);
 800b98c:	2002      	movs	r0, #2
 800b98e:	f000 fbc5 	bl	800c11c <delay_us>
	PWM_CS_LOW();
 800b992:	f7ff ffd1 	bl	800b938 <PWM_CS_LOW>
}
 800b996:	bf00      	nop
 800b998:	bd80      	pop	{r7, pc}
	...

0800b99c <PWMBoardSPI_sendFrame>:

static void PWMBoardSPI_sendFrame()
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af02      	add	r7, sp, #8
	HAL_SPI_TransmitReceive(ptPWMBoardSPI->PWM_spi,(uint8_t *)(ptPWMBoardSPI->CMDBuffer),(uint8_t *)(ptPWMBoardSPI->StatusBuffer),PWMBoardSPI_FrameLength,2);
 800b9a2:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <PWMBoardSPI_sendFrame+0x30>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 800b9aa:	4b08      	ldr	r3, [pc, #32]	; (800b9cc <PWMBoardSPI_sendFrame+0x30>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4b06      	ldr	r3, [pc, #24]	; (800b9cc <PWMBoardSPI_sendFrame+0x30>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f103 02db 	add.w	r2, r3, #219	; 0xdb
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	23db      	movs	r3, #219	; 0xdb
 800b9be:	f7f8 fbeb 	bl	8004198 <HAL_SPI_TransmitReceive>
	PWMBoardSPI_Callback();
 800b9c2:	f7ff ffdf 	bl	800b984 <PWMBoardSPI_Callback>
}
 800b9c6:	bf00      	nop
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	20000214 	.word	0x20000214

0800b9d0 <PWMBoardSPI_bufferCMD>:

static void PWMBoardSPI_bufferCMD(uint8_t cmd)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	e00e      	b.n	800b9fe <PWMBoardSPI_bufferCMD+0x2e>
		ptPWMBoardSPI->CMDBuffer[i][LT8500_FrameLength-1]=cmd;
 800b9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ba10 <PWMBoardSPI_bufferCMD+0x40>)
 800b9e2:	6819      	ldr	r1, [r3, #0]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	4413      	add	r3, r2
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	4413      	add	r3, r2
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3348      	adds	r3, #72	; 0x48
 800b9f4:	79fa      	ldrb	r2, [r7, #7]
 800b9f6:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	60fb      	str	r3, [r7, #12]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	dded      	ble.n	800b9e0 <PWMBoardSPI_bufferCMD+0x10>
}
 800ba04:	bf00      	nop
 800ba06:	3714      	adds	r7, #20
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr
 800ba10:	20000214 	.word	0x20000214

0800ba14 <PWMBoardSPI_bufferDutyChannel>:

static void PWMBoardSPI_bufferDutyChannel(uint16_t num, float fduty)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	ed87 0a00 	vstr	s0, [r7]
 800ba20:	80fb      	strh	r3, [r7, #6]

	uint16_t on;

	on = round(4096 * fduty);
 800ba22:	edd7 7a00 	vldr	s15, [r7]
 800ba26:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bb58 <PWMBoardSPI_bufferDutyChannel+0x144>
 800ba2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800ba32:	eeb0 0b47 	vmov.f64	d0, d7
 800ba36:	f004 ffc9 	bl	80109cc <round>
 800ba3a:	eeb0 7b40 	vmov.f64	d7, d0
 800ba3e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ba42:	ee17 3a90 	vmov	r3, s15
 800ba46:	83fb      	strh	r3, [r7, #30]
	on=CONSTRAIN(on,0,4095);
 800ba48:	8bfb      	ldrh	r3, [r7, #30]
 800ba4a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	bf28      	it	cs
 800ba52:	4613      	movcs	r3, r2
 800ba54:	83fb      	strh	r3, [r7, #30]
	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800ba56:	88fb      	ldrh	r3, [r7, #6]
 800ba58:	2b8f      	cmp	r3, #143	; 0x8f
 800ba5a:	bf28      	it	cs
 800ba5c:	238f      	movcs	r3, #143	; 0x8f
 800ba5e:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800ba60:	88fb      	ldrh	r3, [r7, #6]
 800ba62:	4a3e      	ldr	r2, [pc, #248]	; (800bb5c <PWMBoardSPI_bufferDutyChannel+0x148>)
 800ba64:	fba2 2303 	umull	r2, r3, r2, r3
 800ba68:	095b      	lsrs	r3, r3, #5
 800ba6a:	83bb      	strh	r3, [r7, #28]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800ba6c:	88fa      	ldrh	r2, [r7, #6]
 800ba6e:	4b3b      	ldr	r3, [pc, #236]	; (800bb5c <PWMBoardSPI_bufferDutyChannel+0x148>)
 800ba70:	fba3 1302 	umull	r1, r3, r3, r2
 800ba74:	0959      	lsrs	r1, r3, #5
 800ba76:	460b      	mov	r3, r1
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	440b      	add	r3, r1
 800ba7c:	011b      	lsls	r3, r3, #4
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	837b      	strh	r3, [r7, #26]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800ba82:	8b7b      	ldrh	r3, [r7, #26]
 800ba84:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800ba88:	837b      	strh	r3, [r7, #26]

	uint16_t quo=(boardNum/2);
 800ba8a:	8b7b      	ldrh	r3, [r7, #26]
 800ba8c:	085b      	lsrs	r3, r3, #1
 800ba8e:	833b      	strh	r3, [r7, #24]
	uint16_t rem=(boardNum%2);
 800ba90:	8b7b      	ldrh	r3, [r7, #26]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	82fb      	strh	r3, [r7, #22]
	uint16_t startingBytesNum=quo*3;
 800ba98:	8b3b      	ldrh	r3, [r7, #24]
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	0052      	lsls	r2, r2, #1
 800ba9e:	4413      	add	r3, r2
 800baa0:	82bb      	strh	r3, [r7, #20]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800baa2:	4b2f      	ldr	r3, [pc, #188]	; (800bb60 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800baa4:	6819      	ldr	r1, [r3, #0]
 800baa6:	8bba      	ldrh	r2, [r7, #28]
 800baa8:	8ab8      	ldrh	r0, [r7, #20]
 800baaa:	4613      	mov	r3, r2
 800baac:	00db      	lsls	r3, r3, #3
 800baae:	4413      	add	r3, r2
 800bab0:	00db      	lsls	r3, r3, #3
 800bab2:	4413      	add	r3, r2
 800bab4:	4403      	add	r3, r0
 800bab6:	440b      	add	r3, r1
 800bab8:	613b      	str	r3, [r7, #16]

	if(rem==0){
 800baba:	8afb      	ldrh	r3, [r7, #22]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d11c      	bne.n	800bafa <PWMBoardSPI_bufferDutyChannel+0xe6>
			*pt++=(uint8_t)((on>>4)&0xFF);
 800bac0:	8bfb      	ldrh	r3, [r7, #30]
 800bac2:	091b      	lsrs	r3, r3, #4
 800bac4:	b299      	uxth	r1, r3
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	1c5a      	adds	r2, r3, #1
 800baca:	613a      	str	r2, [r7, #16]
 800bacc:	b2ca      	uxtb	r2, r1
 800bace:	701a      	strb	r2, [r3, #0]
			uint8_t ori=*pt;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	73bb      	strb	r3, [r7, #14]
			ori&=0x0F;
 800bad6:	7bbb      	ldrb	r3, [r7, #14]
 800bad8:	f003 030f 	and.w	r3, r3, #15
 800badc:	73bb      	strb	r3, [r7, #14]
			ori|= ((uint8_t)(on<<4) & 0xF0);
 800bade:	8bfb      	ldrh	r3, [r7, #30]
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	011b      	lsls	r3, r3, #4
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	b25a      	sxtb	r2, r3
 800bae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800baec:	4313      	orrs	r3, r2
 800baee:	b25b      	sxtb	r3, r3
 800baf0:	73bb      	strb	r3, [r7, #14]
			*pt=ori;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	7bba      	ldrb	r2, [r7, #14]
 800baf6:	701a      	strb	r2, [r3, #0]
 800baf8:	e01e      	b.n	800bb38 <PWMBoardSPI_bufferDutyChannel+0x124>
		//	*pt=(uint8_t)(((*pt)&0x0F)|((uint8_t)(on&0x0F)<<4));
	}
	else
	{
		pt++;
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	3301      	adds	r3, #1
 800bafe:	613b      	str	r3, [r7, #16]
		uint8_t ori=*pt;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	73fb      	strb	r3, [r7, #15]
		ori&=0xF0;
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	f023 030f 	bic.w	r3, r3, #15
 800bb0c:	73fb      	strb	r3, [r7, #15]
		ori|= ((uint8_t)(on>>8) & 0x0F);
 800bb0e:	8bfb      	ldrh	r3, [r7, #30]
 800bb10:	0a1b      	lsrs	r3, r3, #8
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	b25b      	sxtb	r3, r3
 800bb16:	f003 030f 	and.w	r3, r3, #15
 800bb1a:	b25a      	sxtb	r2, r3
 800bb1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	b25b      	sxtb	r3, r3
 800bb24:	73fb      	strb	r3, [r7, #15]
		*pt++=ori;
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	1c5a      	adds	r2, r3, #1
 800bb2a:	613a      	str	r2, [r7, #16]
 800bb2c:	7bfa      	ldrb	r2, [r7, #15]
 800bb2e:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(on);
 800bb30:	8bfb      	ldrh	r3, [r7, #30]
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	701a      	strb	r2, [r3, #0]
//		*pt=(uint8_t)(((*pt)&0xF0)|((uint8_t)(on>>8)));
//		pt++;
//		*pt=(uint8_t)(on&0xFF);

	}
	ptPWMBoardSPI->dirtyDuty=1;
 800bb38:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	PWMBoardSPI_bufferCMD(ptPWMBoardSPI->syncMode);
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7ff ff40 	bl	800b9d0 <PWMBoardSPI_bufferCMD>
}
 800bb50:	bf00      	nop
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	45800000 	.word	0x45800000
 800bb5c:	aaaaaaab 	.word	0xaaaaaaab
 800bb60:	20000214 	.word	0x20000214

0800bb64 <PWMBoardSPI_bufferCorrection>:

static void PWMBoardSPI_bufferCorrection(uint16_t num,uint8_t value)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b086      	sub	sp, #24
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	460a      	mov	r2, r1
 800bb6e:	80fb      	strh	r3, [r7, #6]
 800bb70:	4613      	mov	r3, r2
 800bb72:	717b      	strb	r3, [r7, #5]

	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800bb74:	88fb      	ldrh	r3, [r7, #6]
 800bb76:	2b8f      	cmp	r3, #143	; 0x8f
 800bb78:	bf28      	it	cs
 800bb7a:	238f      	movcs	r3, #143	; 0x8f
 800bb7c:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800bb7e:	88fb      	ldrh	r3, [r7, #6]
 800bb80:	4a27      	ldr	r2, [pc, #156]	; (800bc20 <PWMBoardSPI_bufferCorrection+0xbc>)
 800bb82:	fba2 2303 	umull	r2, r3, r2, r3
 800bb86:	095b      	lsrs	r3, r3, #5
 800bb88:	82fb      	strh	r3, [r7, #22]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800bb8a:	88fa      	ldrh	r2, [r7, #6]
 800bb8c:	4b24      	ldr	r3, [pc, #144]	; (800bc20 <PWMBoardSPI_bufferCorrection+0xbc>)
 800bb8e:	fba3 1302 	umull	r1, r3, r3, r2
 800bb92:	0959      	lsrs	r1, r3, #5
 800bb94:	460b      	mov	r3, r1
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	440b      	add	r3, r1
 800bb9a:	011b      	lsls	r3, r3, #4
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	82bb      	strh	r3, [r7, #20]
	uint16_t quo=(boardNum/2);
 800bba0:	8abb      	ldrh	r3, [r7, #20]
 800bba2:	085b      	lsrs	r3, r3, #1
 800bba4:	827b      	strh	r3, [r7, #18]
	uint16_t rem=(boardNum%2);
 800bba6:	8abb      	ldrh	r3, [r7, #20]
 800bba8:	f003 0301 	and.w	r3, r3, #1
 800bbac:	823b      	strh	r3, [r7, #16]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800bbae:	8abb      	ldrh	r3, [r7, #20]
 800bbb0:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800bbb4:	82bb      	strh	r3, [r7, #20]

	uint16_t startingBytesNum=quo*3;
 800bbb6:	8a7b      	ldrh	r3, [r7, #18]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	0052      	lsls	r2, r2, #1
 800bbbc:	4413      	add	r3, r2
 800bbbe:	81fb      	strh	r3, [r7, #14]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800bbc0:	4b18      	ldr	r3, [pc, #96]	; (800bc24 <PWMBoardSPI_bufferCorrection+0xc0>)
 800bbc2:	6819      	ldr	r1, [r3, #0]
 800bbc4:	8afa      	ldrh	r2, [r7, #22]
 800bbc6:	89f8      	ldrh	r0, [r7, #14]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	00db      	lsls	r3, r3, #3
 800bbcc:	4413      	add	r3, r2
 800bbce:	00db      	lsls	r3, r3, #3
 800bbd0:	4413      	add	r3, r2
 800bbd2:	4403      	add	r3, r0
 800bbd4:	440b      	add	r3, r1
 800bbd6:	60bb      	str	r3, [r7, #8]
	if(rem==0){
 800bbd8:	8a3b      	ldrh	r3, [r7, #16]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d105      	bne.n	800bbea <PWMBoardSPI_bufferCorrection+0x86>
		*pt=(uint8_t)(value<<2);
 800bbde:	797b      	ldrb	r3, [r7, #5]
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	b2da      	uxtb	r2, r3
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	701a      	strb	r2, [r3, #0]
 800bbe8:	e00e      	b.n	800bc08 <PWMBoardSPI_bufferCorrection+0xa4>
	}
	else
	{
		pt++;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	3301      	adds	r3, #1
 800bbee:	60bb      	str	r3, [r7, #8]
		*pt++=(uint8_t)(value>>2);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	60ba      	str	r2, [r7, #8]
 800bbf6:	797a      	ldrb	r2, [r7, #5]
 800bbf8:	0892      	lsrs	r2, r2, #2
 800bbfa:	b2d2      	uxtb	r2, r2
 800bbfc:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(value<<6);
 800bbfe:	797b      	ldrb	r3, [r7, #5]
 800bc00:	019b      	lsls	r3, r3, #6
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyCOR=1;
 800bc08:	4b06      	ldr	r3, [pc, #24]	; (800bc24 <PWMBoardSPI_bufferCorrection+0xc0>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	PWMBoardSPI_bufferCMD(LT8500_CMD_Correction);
 800bc12:	2020      	movs	r0, #32
 800bc14:	f7ff fedc 	bl	800b9d0 <PWMBoardSPI_bufferCMD>
}
 800bc18:	bf00      	nop
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}
 800bc20:	aaaaaaab 	.word	0xaaaaaaab
 800bc24:	20000214 	.word	0x20000214

0800bc28 <PWMBoardSPI_setOutputEnable>:



static void PWMBoardSPI_setOutputEnable(uint8_t flag)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b082      	sub	sp, #8
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	4603      	mov	r3, r0
 800bc30:	71fb      	strb	r3, [r7, #7]
	PWMBoardSPI_bufferCMD((flag?LT8500_CMD_OutputEnable:LT8500_CMD_OutputDisable));
 800bc32:	79fb      	ldrb	r3, [r7, #7]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d001      	beq.n	800bc3c <PWMBoardSPI_setOutputEnable+0x14>
 800bc38:	2330      	movs	r3, #48	; 0x30
 800bc3a:	e000      	b.n	800bc3e <PWMBoardSPI_setOutputEnable+0x16>
 800bc3c:	2340      	movs	r3, #64	; 0x40
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7ff fec6 	bl	800b9d0 <PWMBoardSPI_bufferCMD>
	PWMBoardSPI_sendFrame();
 800bc44:	f7ff feaa 	bl	800b99c <PWMBoardSPI_sendFrame>
	HAL_Delay(500);//THis delay is important, otherwise the enabling funciton may not take effective. I don't know why...
 800bc48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bc4c:	f7f5 f9e0 	bl	8001010 <HAL_Delay>
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <PWMBoardSPI_setCorrectionEnable>:

static void PWMBoardSPI_setCorrectionEnable(uint8_t flag)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	71fb      	strb	r3, [r7, #7]
	if((ptPWMBoardSPI->StatusBuffer[0][LT8500_FrameLength-1]&0x01)!=(1-flag))
 800bc62:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <PWMBoardSPI_setCorrectionEnable+0x34>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f893 3123 	ldrb.w	r3, [r3, #291]	; 0x123
 800bc6a:	f003 0201 	and.w	r2, r3, #1
 800bc6e:	79fb      	ldrb	r3, [r7, #7]
 800bc70:	f1c3 0301 	rsb	r3, r3, #1
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d004      	beq.n	800bc82 <PWMBoardSPI_setCorrectionEnable+0x2a>
		{
		PWMBoardSPI_bufferCMD(LT8500_CMD_CorrentionToggle);
 800bc78:	2070      	movs	r0, #112	; 0x70
 800bc7a:	f7ff fea9 	bl	800b9d0 <PWMBoardSPI_bufferCMD>
		PWMBoardSPI_sendFrame();
 800bc7e:	f7ff fe8d 	bl	800b99c <PWMBoardSPI_sendFrame>
		}
}
 800bc82:	bf00      	nop
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20000214 	.word	0x20000214

0800bc90 <PWMBoardSPI_startPWMCK>:

static void PWMBoardSPI_startPWMCK(float fre)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	ed87 0a01 	vstr	s0, [r7, #4]
	PWMBuiltIn_writeDuty(ptPWMBoardSPI->Frequency_PWMPortNum,0.5);
 800bc9a:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <PWMBoardSPI_startPWMCK+0x3c>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bca2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800bca6:	4618      	mov	r0, r3
 800bca8:	f000 fbe6 	bl	800c478 <PWMBuiltIn_writeDuty>
	PWMBoardSPI_writeFrequency(fre);
 800bcac:	ed97 0a01 	vldr	s0, [r7, #4]
 800bcb0:	f000 f80e 	bl	800bcd0 <PWMBoardSPI_writeFrequency>
	PWMBuiltInStartChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800bcb4:	4b05      	ldr	r3, [pc, #20]	; (800bccc <PWMBoardSPI_startPWMCK+0x3c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	f000 fe59 	bl	800c974 <PWMBuiltInStartChannel>
}
 800bcc2:	bf00      	nop
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	20000214 	.word	0x20000214

0800bcd0 <PWMBoardSPI_writeFrequency>:


void PWMBoardSPI_writeFrequency(float fre)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	ed87 0a01 	vstr	s0, [r7, #4]
	fre = CONSTRAIN(fre,EXTERNAL_PWMBOARDSPI_FREMIN,EXTERNAL_PWMBOARDSPI_FREMAX);
 800bcda:	edd7 7a01 	vldr	s15, [r7, #4]
 800bcde:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bce2:	ed9f 6b39 	vldr	d6, [pc, #228]	; 800bdc8 <PWMBoardSPI_writeFrequency+0xf8>
 800bce6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcee:	d501      	bpl.n	800bcf4 <PWMBoardSPI_writeFrequency+0x24>
 800bcf0:	4b3b      	ldr	r3, [pc, #236]	; (800bde0 <PWMBoardSPI_writeFrequency+0x110>)
 800bcf2:	e00b      	b.n	800bd0c <PWMBoardSPI_writeFrequency+0x3c>
 800bcf4:	edd7 7a01 	vldr	s15, [r7, #4]
 800bcf8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800bde4 <PWMBoardSPI_writeFrequency+0x114>
 800bcfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd04:	dd01      	ble.n	800bd0a <PWMBoardSPI_writeFrequency+0x3a>
 800bd06:	4b38      	ldr	r3, [pc, #224]	; (800bde8 <PWMBoardSPI_writeFrequency+0x118>)
 800bd08:	e000      	b.n	800bd0c <PWMBoardSPI_writeFrequency+0x3c>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	607b      	str	r3, [r7, #4]
	float newClkFrequency=fre*4096;
 800bd0e:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd12:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800bdec <PWMBoardSPI_writeFrequency+0x11c>
 800bd16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd1a:	edc7 7a03 	vstr	s15, [r7, #12]
	if(fabs(newClkFrequency-ptPWMBoardSPI->clkFrequency)>1e-6)
 800bd1e:	4b34      	ldr	r3, [pc, #208]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bd26:	ed97 7a03 	vldr	s14, [r7, #12]
 800bd2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd2e:	eef0 7ae7 	vabs.f32	s15, s15
 800bd32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd36:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800bdd0 <PWMBoardSPI_writeFrequency+0x100>
 800bd3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	dc00      	bgt.n	800bd46 <PWMBoardSPI_writeFrequency+0x76>
		ptPWMBoardSPI->frequency=fre;
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
	}
}
 800bd44:	e03a      	b.n	800bdbc <PWMBoardSPI_writeFrequency+0xec>
		ptPWMBoardSPI->frequency=fre;
 800bd46:	4b2a      	ldr	r3, [pc, #168]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
 800bd50:	4b27      	ldr	r3, [pc, #156]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800bd5a:	4b25      	ldr	r3, [pc, #148]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bd62:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800bd66:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800bdd8 <PWMBoardSPI_writeFrequency+0x108>
 800bd6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd72:	d501      	bpl.n	800bd78 <PWMBoardSPI_writeFrequency+0xa8>
 800bd74:	4b1f      	ldr	r3, [pc, #124]	; (800bdf4 <PWMBoardSPI_writeFrequency+0x124>)
 800bd76:	e010      	b.n	800bd9a <PWMBoardSPI_writeFrequency+0xca>
 800bd78:	4b1d      	ldr	r3, [pc, #116]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bd80:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bdf8 <PWMBoardSPI_writeFrequency+0x128>
 800bd84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8c:	dd01      	ble.n	800bd92 <PWMBoardSPI_writeFrequency+0xc2>
 800bd8e:	4b1b      	ldr	r3, [pc, #108]	; (800bdfc <PWMBoardSPI_writeFrequency+0x12c>)
 800bd90:	e003      	b.n	800bd9a <PWMBoardSPI_writeFrequency+0xca>
 800bd92:	4b17      	ldr	r3, [pc, #92]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800bd9a:	4a15      	ldr	r2, [pc, #84]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bd9c:	6812      	ldr	r2, [r2, #0]
 800bd9e:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
 800bda2:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f8b3 21c6 	ldrh.w	r2, [r3, #454]	; 0x1c6
 800bdaa:	4b11      	ldr	r3, [pc, #68]	; (800bdf0 <PWMBoardSPI_writeFrequency+0x120>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800bdb2:	eeb0 0a67 	vmov.f32	s0, s15
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f000 fbfe 	bl	800c5b8 <PWMBuiltIn_writeFrequency>
}
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	f3af 8000 	nop.w
 800bdc8:	88e368f1 	.word	0x88e368f1
 800bdcc:	3ee4f8b5 	.word	0x3ee4f8b5
 800bdd0:	a0b5ed8d 	.word	0xa0b5ed8d
 800bdd4:	3eb0c6f7 	.word	0x3eb0c6f7
 800bdd8:	eb851eb8 	.word	0xeb851eb8
 800bddc:	3f9eb851 	.word	0x3f9eb851
 800bde0:	3727c5ac 	.word	0x3727c5ac
 800bde4:	459c4000 	.word	0x459c4000
 800bde8:	459c4000 	.word	0x459c4000
 800bdec:	45800000 	.word	0x45800000
 800bdf0:	20000214 	.word	0x20000214
 800bdf4:	3cf5c28f 	.word	0x3cf5c28f
 800bdf8:	4bcdfe60 	.word	0x4bcdfe60
 800bdfc:	4bcdfe60 	.word	0x4bcdfe60

0800be00 <PWMBoardSPI_writeDuty>:
void PWMBoardSPI_writeDuty(uint16_t num, float fduty)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	ed87 0a00 	vstr	s0, [r7]
 800be0c:	80fb      	strh	r3, [r7, #6]
	PWMBoardSPI_bufferDutyChannel(num,fduty);
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	ed97 0a00 	vldr	s0, [r7]
 800be14:	4618      	mov	r0, r3
 800be16:	f7ff fdfd 	bl	800ba14 <PWMBoardSPI_bufferDutyChannel>
}
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <PWMBoardSPI_writeCorrectionAll>:
void PWMBoardSPI_writeCorrectionAll(uint8_t value)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b084      	sub	sp, #16
 800be26:	af00      	add	r7, sp, #0
 800be28:	4603      	mov	r3, r0
 800be2a:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800be2c:	2300      	movs	r3, #0
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	e009      	b.n	800be46 <PWMBoardSPI_writeCorrectionAll+0x24>
		{
			PWMBoardSPI_bufferCorrection(i,value);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	b29b      	uxth	r3, r3
 800be36:	79fa      	ldrb	r2, [r7, #7]
 800be38:	4611      	mov	r1, r2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7ff fe92 	bl	800bb64 <PWMBoardSPI_bufferCorrection>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3301      	adds	r3, #1
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2b8f      	cmp	r3, #143	; 0x8f
 800be4a:	ddf2      	ble.n	800be32 <PWMBoardSPI_writeCorrectionAll+0x10>
		}
	PWMBoardSPI_sendFrame();
 800be4c:	f7ff fda6 	bl	800b99c <PWMBoardSPI_sendFrame>
}
 800be50:	bf00      	nop
 800be52:	3710      	adds	r7, #16
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <PWMBoardSPI_flushDutyAll>:

void PWMBoardSPI_flushDutyAll()
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
	uint32_t c1=micros();
 800be5e:	f000 f947 	bl	800c0f0 <micros>
 800be62:	6078      	str	r0, [r7, #4]
	if(ptPWMBoardSPI->dirtyDuty==1)
 800be64:	4b0c      	ldr	r3, [pc, #48]	; (800be98 <PWMBoardSPI_flushDutyAll+0x40>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800be6c:	2b01      	cmp	r3, #1
 800be6e:	d106      	bne.n	800be7e <PWMBoardSPI_flushDutyAll+0x26>
	{
		ptPWMBoardSPI->dirtyDuty=0;
 800be70:	4b09      	ldr	r3, [pc, #36]	; (800be98 <PWMBoardSPI_flushDutyAll+0x40>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2200      	movs	r2, #0
 800be76:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
		PWMBoardSPI_sendFrame();
 800be7a:	f7ff fd8f 	bl	800b99c <PWMBoardSPI_sendFrame>
	}
	ptPWMBoardSPI->lastUpdateTime=micros()-c1;
 800be7e:	f000 f937 	bl	800c0f0 <micros>
 800be82:	4601      	mov	r1, r0
 800be84:	4b04      	ldr	r3, [pc, #16]	; (800be98 <PWMBoardSPI_flushDutyAll+0x40>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	1a8a      	subs	r2, r1, r2
 800be8c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
}
 800be90:	bf00      	nop
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20000214 	.word	0x20000214

0800be9c <PWMBoardSPI_init>:

void PWMBoardSPI_init()
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
	memset(ptPWMBoardSPI,0,sizeof(PWM_BOARDSPI));
 800bea2:	4b36      	ldr	r3, [pc, #216]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800beaa:	2100      	movs	r1, #0
 800beac:	4618      	mov	r0, r3
 800beae:	f004 fe74 	bl	8010b9a <memset>

	ptPWMBoardSPI->PWM_spi=&hspi_PWM;
 800beb2:	4b32      	ldr	r3, [pc, #200]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a32      	ldr	r2, [pc, #200]	; (800bf80 <PWMBoardSPI_init+0xe4>)
 800beb8:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ptPWMBoardSPI->CS_Port=DO_15_GPIO_Port;
 800bebc:	4b2f      	ldr	r3, [pc, #188]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a30      	ldr	r2, [pc, #192]	; (800bf84 <PWMBoardSPI_init+0xe8>)
 800bec2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	ptPWMBoardSPI->CS_Pin=DO_15_Pin;
 800bec6:	4b2d      	ldr	r3, [pc, #180]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bece:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

	ptPWMBoardSPI->Frequency_PWMPortNum=BUILTIN_PWM_NUM-1;
 800bed2:	4b2a      	ldr	r3, [pc, #168]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2213      	movs	r2, #19
 800bed8:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	ptPWMBoardSPI->syncMode=LT8500_CMD_AsyUpdate;
 800bedc:	4b27      	ldr	r3, [pc, #156]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2210      	movs	r2, #16
 800bee2:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
	ptPWMBoardSPI->dirtyCOR=0;
 800bee6:	4b25      	ldr	r3, [pc, #148]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	ptPWMBoardSPI->dirtyDuty=0;
 800bef0:	4b22      	ldr	r3, [pc, #136]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2200      	movs	r2, #0
 800bef6:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	ptPWMBoardSPI->lastUpdateTime=0;
 800befa:	4b20      	ldr	r3, [pc, #128]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	ptPWMBoardSPI->PWMTime=0;
 800bf04:	4b1d      	ldr	r3, [pc, #116]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	ptPWMBoardSPI->PWMTimeEnd=0;
 800bf0e:	4b1b      	ldr	r3, [pc, #108]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	ptPWMBoardSPI->PWMTimeStart=0;
 800bf18:	4b18      	ldr	r3, [pc, #96]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	PWMBuiltInStopChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800bf22:	4b16      	ldr	r3, [pc, #88]	; (800bf7c <PWMBoardSPI_init+0xe0>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 fd3a 	bl	800c9a4 <PWMBuiltInStopChannel>

	//initialization
	//1. Apply power and drive LDIBLANK low. SDO will go low when the on-chip power-on-reset (POR) de-asserts.
	PWM_CS_LOW();
 800bf30:	f7ff fd02 	bl	800b938 <PWM_CS_LOW>

	//2.Send a correction register frame (CMD = 0x20) on the serial interface. This sets the correction factor on each channel.
	PWMBoardSPI_writeCorrectionAll(63);
 800bf34:	203f      	movs	r0, #63	; 0x3f
 800bf36:	f7ff ff74 	bl	800be22 <PWMBoardSPI_writeCorrectionAll>

	//3. Send an update frame (CMD = 0x00 or CMD = 0x10) on the serial interface. This sets the pulse width of each channel.
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	607b      	str	r3, [r7, #4]
 800bf3e:	e009      	b.n	800bf54 <PWMBoardSPI_init+0xb8>
	{
		PWMBoardSPI_bufferDutyChannel(i,0);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800bf88 <PWMBoardSPI_init+0xec>
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7ff fd63 	bl	800ba14 <PWMBoardSPI_bufferDutyChannel>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	3301      	adds	r3, #1
 800bf52:	607b      	str	r3, [r7, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2b8f      	cmp	r3, #143	; 0x8f
 800bf58:	ddf2      	ble.n	800bf40 <PWMBoardSPI_init+0xa4>
	}
	PWMBoardSPI_sendFrame();
 800bf5a:	f7ff fd1f 	bl	800b99c <PWMBoardSPI_sendFrame>

	//4. start PWM clock (PWMCK)
	PWMBoardSPI_startPWMCK(40);
 800bf5e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800bf8c <PWMBoardSPI_init+0xf0>
 800bf62:	f7ff fe95 	bl	800bc90 <PWMBoardSPI_startPWMCK>

	PWMBoardSPI_setCorrectionEnable(0);
 800bf66:	2000      	movs	r0, #0
 800bf68:	f7ff fe76 	bl	800bc58 <PWMBoardSPI_setCorrectionEnable>

	//5. Send an output enable frame (CMD = 0x30) on the serial interface. This enables the modulated pulses on the PWM[48:1] outputs
	PWMBoardSPI_setOutputEnable(1);
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	f7ff fe5b 	bl	800bc28 <PWMBoardSPI_setOutputEnable>

}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000214 	.word	0x20000214
 800bf80:	2000a8f8 	.word	0x2000a8f8
 800bf84:	40021000 	.word	0x40021000
 800bf88:	00000000 	.word	0x00000000
 800bf8c:	42200000 	.word	0x42200000

0800bf90 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800bf90:	b590      	push	{r4, r7, lr}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	330c      	adds	r3, #12
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff fc4a 	bl	800b83c <_ZN15PRESSURE_SOURCEC1Eii>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	3344      	adds	r3, #68	; 0x44
 800bfac:	2200      	movs	r2, #0
 800bfae:	2100      	movs	r1, #0
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f7ff fc43 	bl	800b83c <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	2104      	movs	r1, #4
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f004 fda4 	bl	8010b10 <calloc>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	461a      	mov	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	2104      	movs	r1, #4
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f004 fd9b 	bl	8010b10 <calloc>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	461a      	mov	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	889b      	ldrh	r3, [r3, #4]
 800bfea:	461a      	mov	r2, r3
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	4293      	cmp	r3, r2
 800bff0:	da18      	bge.n	800c024 <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800bff2:	f241 00dc 	movw	r0, #4316	; 0x10dc
 800bff6:	f004 fcbe 	bl	8010976 <_Znwj>
 800bffa:	4603      	mov	r3, r0
 800bffc:	461c      	mov	r4, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	0059      	lsls	r1, r3, #1
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	1c5a      	adds	r2, r3, #1
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7fe ffee 	bl	800afec <_ZN7CHAMBERC1Eiii>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	3301      	adds	r3, #1
 800c020:	60fb      	str	r3, [r7, #12]
 800c022:	e7e0      	b.n	800bfe6 <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	4a05      	ldr	r2, [pc, #20]	; (800c03c <_ZN9PNEUDRIVEC1Ei+0xac>)
 800c028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 40;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a04      	ldr	r2, [pc, #16]	; (800c040 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800c030:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4618      	mov	r0, r3
 800c036:	3714      	adds	r7, #20
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd90      	pop	{r4, r7, pc}
 800c03c:	44fa0000 	.word	0x44fa0000
 800c040:	42200000 	.word	0x42200000

0800c044 <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	4603      	mov	r3, r0
 800c04c:	460a      	mov	r2, r1
 800c04e:	80fb      	strh	r3, [r7, #6]
 800c050:	4613      	mov	r3, r2
 800c052:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800c054:	88ba      	ldrh	r2, [r7, #4]
 800c056:	88fb      	ldrh	r3, [r7, #6]
 800c058:	4611      	mov	r1, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 f970 	bl	800c340 <DigitalBuiltIn_Write>
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	4603      	mov	r3, r0
 800c070:	ed87 0a00 	vstr	s0, [r7]
 800c074:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800c076:	88fb      	ldrh	r3, [r7, #6]
 800c078:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800c07a:	88fb      	ldrh	r3, [r7, #6]
 800c07c:	2b13      	cmp	r3, #19
 800c07e:	d806      	bhi.n	800c08e <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
 800c080:	88fb      	ldrh	r3, [r7, #6]
 800c082:	ed97 0a00 	vldr	s0, [r7]
 800c086:	4618      	mov	r0, r3
 800c088:	f000 f9f6 	bl	800c478 <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800c08c:	e00b      	b.n	800c0a6 <PWMWriteDuty+0x3e>
		num= numori - BUILTIN_PWM_NUM;
 800c08e:	89fb      	ldrh	r3, [r7, #14]
 800c090:	3b14      	subs	r3, #20
 800c092:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDSPI_CHANNELNUM){
 800c094:	88fb      	ldrh	r3, [r7, #6]
 800c096:	2b8f      	cmp	r3, #143	; 0x8f
 800c098:	d805      	bhi.n	800c0a6 <PWMWriteDuty+0x3e>
			PWMBoardSPI_writeDuty(num,fduty);
 800c09a:	88fb      	ldrh	r3, [r7, #6]
 800c09c:	ed97 0a00 	vldr	s0, [r7]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff fead 	bl	800be00 <PWMBoardSPI_writeDuty>
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b083      	sub	sp, #12
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
};
 800c0b6:	bf00      	nop
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr
	...

0800c0c4 <serial2Callback>:
	printf("Running default serial1Callback()\r\n");
}
;

__weak  void serial2Callback(char *pSerialPort4Buffer)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
	printf("Running default serial2Callback()\r\n");
 800c0cc:	4803      	ldr	r0, [pc, #12]	; (800c0dc <serial2Callback+0x18>)
 800c0ce:	f005 fcab 	bl	8011a28 <puts>
};
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	08015118 	.word	0x08015118

0800c0e0 <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800c0e4:	f7f4 ff88 	bl	8000ff8 <HAL_GetTick>
 800c0e8:	4603      	mov	r3, r0
}
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <micros>:

uint32_t micros()
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800c0f6:	f7ff fff3 	bl	800c0e0 <millis>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c100:	fb03 f202 	mul.w	r2, r3, r2
 800c104:	4b04      	ldr	r3, [pc, #16]	; (800c118 <micros+0x28>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10a:	4413      	add	r3, r2
 800c10c:	607b      	str	r3, [r7, #4]
	return t;
 800c10e:	687b      	ldr	r3, [r7, #4]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	2000ac04 	.word	0x2000ac04

0800c11c <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800c124:	f7ff ffe4 	bl	800c0f0 <micros>
 800c128:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800c12a:	f7ff ffe1 	bl	800c0f0 <micros>
 800c12e:	4602      	mov	r2, r0
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	461a      	mov	r2, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4293      	cmp	r3, r2
 800c13a:	bfcc      	ite	gt
 800c13c:	2301      	movgt	r3, #1
 800c13e:	2300      	movle	r3, #0
 800c140:	b2db      	uxtb	r3, r3
 800c142:	2b00      	cmp	r3, #0
 800c144:	d000      	beq.n	800c148 <delay_us+0x2c>
 800c146:	e7f0      	b.n	800c12a <delay_us+0xe>
}
 800c148:	bf00      	nop
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800c158:	4b20      	ldr	r3, [pc, #128]	; (800c1dc <delay_ns+0x8c>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	4b1f      	ldr	r3, [pc, #124]	; (800c1dc <delay_ns+0x8c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f042 0201 	orr.w	r2, r2, #1
 800c166:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800c168:	4b1c      	ldr	r3, [pc, #112]	; (800c1dc <delay_ns+0x8c>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c16e:	461a      	mov	r2, r3
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4293      	cmp	r3, r2
 800c174:	bfcc      	ite	gt
 800c176:	2301      	movgt	r3, #1
 800c178:	2300      	movle	r3, #0
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d000      	beq.n	800c182 <delay_ns+0x32>
 800c180:	e7f2      	b.n	800c168 <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800c182:	4b16      	ldr	r3, [pc, #88]	; (800c1dc <delay_ns+0x8c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	6a1a      	ldr	r2, [r3, #32]
 800c188:	f241 1311 	movw	r3, #4369	; 0x1111
 800c18c:	4013      	ands	r3, r2
 800c18e:	2b00      	cmp	r3, #0
 800c190:	bf0c      	ite	eq
 800c192:	2301      	moveq	r3, #1
 800c194:	2300      	movne	r3, #0
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d014      	beq.n	800c1c6 <delay_ns+0x76>
 800c19c:	4b0f      	ldr	r3, [pc, #60]	; (800c1dc <delay_ns+0x8c>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6a1a      	ldr	r2, [r3, #32]
 800c1a2:	f240 4344 	movw	r3, #1092	; 0x444
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	bf0c      	ite	eq
 800c1ac:	2301      	moveq	r3, #1
 800c1ae:	2300      	movne	r3, #0
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d007      	beq.n	800c1c6 <delay_ns+0x76>
 800c1b6:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <delay_ns+0x8c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	681a      	ldr	r2, [r3, #0]
 800c1bc:	4b07      	ldr	r3, [pc, #28]	; (800c1dc <delay_ns+0x8c>)
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f022 0201 	bic.w	r2, r2, #1
 800c1c4:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800c1c6:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <delay_ns+0x8c>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	625a      	str	r2, [r3, #36]	; 0x24

}
 800c1ce:	bf00      	nop
 800c1d0:	370c      	adds	r7, #12
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	2000ae84 	.word	0x2000ae84

0800c1e0 <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800c1e8:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <setPeriodControlLoop+0x1c>)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6013      	str	r3, [r2, #0]
}
 800c1ee:	bf00      	nop
 800c1f0:	370c      	adds	r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	20000218 	.word	0x20000218

0800c200 <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800c200:	b480      	push	{r7}
 800c202:	b083      	sub	sp, #12
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800c208:	4a04      	ldr	r2, [pc, #16]	; (800c21c <setPeriodSendLoop+0x1c>)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6013      	str	r3, [r2, #0]
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	2000021c 	.word	0x2000021c

0800c220 <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]

	_duty=0;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f04f 0200 	mov.w	r2, #0
 800c230:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	edd3 7a02 	vldr	s15, [r3, #8]
 800c238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c23c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a09      	ldr	r2, [pc, #36]	; (800c270 <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800c24a:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f04f 0200 	mov.w	r2, #0
 800c252:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c25a:	615a      	str	r2, [r3, #20]
	attach(num);
 800c25c:	6839      	ldr	r1, [r7, #0]
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f808 	bl	800c274 <_ZN14SOLENOID_VALVE6attachEi>
}
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4618      	mov	r0, r3
 800c268:	3708      	adds	r7, #8
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	41200000 	.word	0x41200000

0800c274 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800c274:	b480      	push	{r7}
 800c276:	b083      	sub	sp, #12
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	683a      	ldr	r2, [r7, #0]
 800c282:	601a      	str	r2, [r3, #0]
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	ed93 7a04 	vldr	s14, [r3, #16]
 800c2a2:	edd7 7a00 	vldr	s15, [r7]
 800c2a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ae:	dd02      	ble.n	800c2b6 <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	e00d      	b.n	800c2d2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	ed93 7a05 	vldr	s14, [r3, #20]
 800c2bc:	edd7 7a00 	vldr	s15, [r7]
 800c2c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c8:	d502      	bpl.n	800c2d0 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	695b      	ldr	r3, [r3, #20]
 800c2ce:	e000      	b.n	800c2d2 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	603b      	str	r3, [r7, #0]
	if(fabsf(dut-duty)>1e-6)
 800c2d4:	ed97 7a00 	vldr	s14, [r7]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	edd3 7a01 	vldr	s15, [r3, #4]
 800c2de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2e2:	eef0 7ae7 	vabs.f32	s15, s15
 800c2e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c2ea:	ed9f 6b13 	vldr	d6, [pc, #76]	; 800c338 <_ZN14SOLENOID_VALVE9writeDutyEf+0xa8>
 800c2ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2f6:	dc00      	bgt.n	800c2fa <_ZN14SOLENOID_VALVE9writeDutyEf+0x6a>
		 duty = dut;
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
		PWMWriteDuty(PWMPort,_duty);
	}

}
 800c2f8:	e017      	b.n	800c32a <_ZN14SOLENOID_VALVE9writeDutyEf+0x9a>
		 duty = dut;
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	605a      	str	r2, [r3, #4]
		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	edd3 7a01 	vldr	s15, [r3, #4]
 800c306:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c30a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	edc3 7a02 	vstr	s15, [r3, #8]
		PWMWriteDuty(PWMPort,_duty);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c320:	eeb0 0a67 	vmov.f32	s0, s15
 800c324:	4610      	mov	r0, r2
 800c326:	f7ff fe9f 	bl	800c068 <PWMWriteDuty>
}
 800c32a:	bf00      	nop
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	f3af 8000 	nop.w
 800c338:	a0b5ed8d 	.word	0xa0b5ed8d
 800c33c:	3eb0c6f7 	.word	0x3eb0c6f7

0800c340 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	460a      	mov	r2, r1
 800c34a:	80fb      	strh	r3, [r7, #6]
 800c34c:	4613      	mov	r3, r2
 800c34e:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800c350:	88bb      	ldrh	r3, [r7, #4]
 800c352:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800c354:	88fb      	ldrh	r3, [r7, #6]
 800c356:	2b0f      	cmp	r3, #15
 800c358:	d80b      	bhi.n	800c372 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800c35a:	88fb      	ldrh	r3, [r7, #6]
 800c35c:	4a07      	ldr	r2, [pc, #28]	; (800c37c <DigitalBuiltIn_Write+0x3c>)
 800c35e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c362:	88fb      	ldrh	r3, [r7, #6]
 800c364:	4a06      	ldr	r2, [pc, #24]	; (800c380 <DigitalBuiltIn_Write+0x40>)
 800c366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c36a:	7bfa      	ldrb	r2, [r7, #15]
 800c36c:	4619      	mov	r1, r3
 800c36e:	f7f6 fbff 	bl	8002b70 <HAL_GPIO_WritePin>
	}
}
 800c372:	bf00      	nop
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20000220 	.word	0x20000220
 800c380:	20000260 	.word	0x20000260

0800c384 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	3301      	adds	r3, #1
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c39c:	edd7 7a00 	vldr	s15, [r7]
 800c3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c3a8:	eeb0 0b47 	vmov.f64	d0, d7
 800c3ac:	f004 fb0e 	bl	80109cc <round>
 800c3b0:	eeb0 7b40 	vmov.f64	d7, d0
 800c3b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c3b8:	ee17 3a90 	vmov	r3, s15
 800c3bc:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	bf28      	it	cs
 800c3c8:	4613      	movcs	r3, r2
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800c3d2:	b480      	push	{r7}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	ee07 3a90 	vmov	s15, r3
 800c3e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e6:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3f6:	ed97 7a03 	vldr	s14, [r7, #12]
 800c3fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c3fe:	eef0 7a66 	vmov.f32	s15, s13
}
 800c402:	eeb0 0a67 	vmov.f32	s0, s15
 800c406:	3714      	adds	r7, #20
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a0f      	ldr	r2, [pc, #60]	; (800c45c <getTIM_SOURCECLK+0x4c>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d013      	beq.n	800c44a <getTIM_SOURCECLK+0x3a>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a0e      	ldr	r2, [pc, #56]	; (800c460 <getTIM_SOURCECLK+0x50>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d00e      	beq.n	800c44a <getTIM_SOURCECLK+0x3a>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a0c      	ldr	r2, [pc, #48]	; (800c464 <getTIM_SOURCECLK+0x54>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d009      	beq.n	800c44a <getTIM_SOURCECLK+0x3a>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a0b      	ldr	r2, [pc, #44]	; (800c468 <getTIM_SOURCECLK+0x58>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d004      	beq.n	800c44a <getTIM_SOURCECLK+0x3a>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a09      	ldr	r2, [pc, #36]	; (800c46c <getTIM_SOURCECLK+0x5c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d101      	bne.n	800c44e <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800c44a:	4b09      	ldr	r3, [pc, #36]	; (800c470 <getTIM_SOURCECLK+0x60>)
 800c44c:	e000      	b.n	800c450 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800c44e:	4b09      	ldr	r3, [pc, #36]	; (800c474 <getTIM_SOURCECLK+0x64>)
}
 800c450:	4618      	mov	r0, r3
 800c452:	370c      	adds	r7, #12
 800c454:	46bd      	mov	sp, r7
 800c456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45a:	4770      	bx	lr
 800c45c:	40010000 	.word	0x40010000
 800c460:	40010400 	.word	0x40010400
 800c464:	40014000 	.word	0x40014000
 800c468:	40014400 	.word	0x40014400
 800c46c:	40014800 	.word	0x40014800
 800c470:	0cdfe600 	.word	0x0cdfe600
 800c474:	066ff300 	.word	0x066ff300

0800c478 <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800c478:	b590      	push	{r4, r7, lr}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	4603      	mov	r3, r0
 800c480:	ed87 0a00 	vstr	s0, [r7]
 800c484:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c486:	88fb      	ldrh	r3, [r7, #6]
 800c488:	4a48      	ldr	r2, [pc, #288]	; (800c5ac <PWMBuiltIn_writeDuty+0x134>)
 800c48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d112      	bne.n	800c4b8 <PWMBuiltIn_writeDuty+0x40>
 800c492:	88fb      	ldrh	r3, [r7, #6]
 800c494:	4a46      	ldr	r2, [pc, #280]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c49e:	88fb      	ldrh	r3, [r7, #6]
 800c4a0:	4a43      	ldr	r2, [pc, #268]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c4a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4a6:	681c      	ldr	r4, [r3, #0]
 800c4a8:	ed97 0a00 	vldr	s0, [r7]
 800c4ac:	4608      	mov	r0, r1
 800c4ae:	f7ff ff69 	bl	800c384 <duty2CCR>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	6363      	str	r3, [r4, #52]	; 0x34

}
 800c4b6:	e075      	b.n	800c5a4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c4b8:	88fb      	ldrh	r3, [r7, #6]
 800c4ba:	4a3c      	ldr	r2, [pc, #240]	; (800c5ac <PWMBuiltIn_writeDuty+0x134>)
 800c4bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4c0:	2b04      	cmp	r3, #4
 800c4c2:	d112      	bne.n	800c4ea <PWMBuiltIn_writeDuty+0x72>
 800c4c4:	88fb      	ldrh	r3, [r7, #6]
 800c4c6:	4a3a      	ldr	r2, [pc, #232]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c4c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c4d0:	88fb      	ldrh	r3, [r7, #6]
 800c4d2:	4a37      	ldr	r2, [pc, #220]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c4d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d8:	681c      	ldr	r4, [r3, #0]
 800c4da:	ed97 0a00 	vldr	s0, [r7]
 800c4de:	4608      	mov	r0, r1
 800c4e0:	f7ff ff50 	bl	800c384 <duty2CCR>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800c4e8:	e05c      	b.n	800c5a4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c4ea:	88fb      	ldrh	r3, [r7, #6]
 800c4ec:	4a2f      	ldr	r2, [pc, #188]	; (800c5ac <PWMBuiltIn_writeDuty+0x134>)
 800c4ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4f2:	2b08      	cmp	r3, #8
 800c4f4:	d112      	bne.n	800c51c <PWMBuiltIn_writeDuty+0xa4>
 800c4f6:	88fb      	ldrh	r3, [r7, #6]
 800c4f8:	4a2d      	ldr	r2, [pc, #180]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c4fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c502:	88fb      	ldrh	r3, [r7, #6]
 800c504:	4a2a      	ldr	r2, [pc, #168]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c50a:	681c      	ldr	r4, [r3, #0]
 800c50c:	ed97 0a00 	vldr	s0, [r7]
 800c510:	4608      	mov	r0, r1
 800c512:	f7ff ff37 	bl	800c384 <duty2CCR>
 800c516:	4603      	mov	r3, r0
 800c518:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800c51a:	e043      	b.n	800c5a4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c51c:	88fb      	ldrh	r3, [r7, #6]
 800c51e:	4a23      	ldr	r2, [pc, #140]	; (800c5ac <PWMBuiltIn_writeDuty+0x134>)
 800c520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c524:	2b0c      	cmp	r3, #12
 800c526:	d112      	bne.n	800c54e <PWMBuiltIn_writeDuty+0xd6>
 800c528:	88fb      	ldrh	r3, [r7, #6]
 800c52a:	4a21      	ldr	r2, [pc, #132]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c52c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c534:	88fb      	ldrh	r3, [r7, #6]
 800c536:	4a1e      	ldr	r2, [pc, #120]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c53c:	681c      	ldr	r4, [r3, #0]
 800c53e:	ed97 0a00 	vldr	s0, [r7]
 800c542:	4608      	mov	r0, r1
 800c544:	f7ff ff1e 	bl	800c384 <duty2CCR>
 800c548:	4603      	mov	r3, r0
 800c54a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800c54c:	e02a      	b.n	800c5a4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c54e:	88fb      	ldrh	r3, [r7, #6]
 800c550:	4a16      	ldr	r2, [pc, #88]	; (800c5ac <PWMBuiltIn_writeDuty+0x134>)
 800c552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c556:	2b10      	cmp	r3, #16
 800c558:	d112      	bne.n	800c580 <PWMBuiltIn_writeDuty+0x108>
 800c55a:	88fb      	ldrh	r3, [r7, #6]
 800c55c:	4a14      	ldr	r2, [pc, #80]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c566:	88fb      	ldrh	r3, [r7, #6]
 800c568:	4a11      	ldr	r2, [pc, #68]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c56a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c56e:	681c      	ldr	r4, [r3, #0]
 800c570:	ed97 0a00 	vldr	s0, [r7]
 800c574:	4608      	mov	r0, r1
 800c576:	f7ff ff05 	bl	800c384 <duty2CCR>
 800c57a:	4603      	mov	r3, r0
 800c57c:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800c57e:	e011      	b.n	800c5a4 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c580:	88fb      	ldrh	r3, [r7, #6]
 800c582:	4a0b      	ldr	r2, [pc, #44]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c58c:	88fb      	ldrh	r3, [r7, #6]
 800c58e:	4a08      	ldr	r2, [pc, #32]	; (800c5b0 <PWMBuiltIn_writeDuty+0x138>)
 800c590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c594:	681c      	ldr	r4, [r3, #0]
 800c596:	ed97 0a00 	vldr	s0, [r7]
 800c59a:	4608      	mov	r0, r1
 800c59c:	f7ff fef2 	bl	800c384 <duty2CCR>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd90      	pop	{r4, r7, pc}
 800c5ac:	200002d0 	.word	0x200002d0
 800c5b0:	20000280 	.word	0x20000280
 800c5b4:	00000000 	.word	0x00000000

0800c5b8 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800c5b8:	b590      	push	{r4, r7, lr}
 800c5ba:	b087      	sub	sp, #28
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	ed87 0a00 	vstr	s0, [r7]
 800c5c4:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800c5c6:	edd7 7a00 	vldr	s15, [r7]
 800c5ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c5ce:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800c888 <PWMBuiltIn_writeFrequency+0x2d0>
 800c5d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5da:	d501      	bpl.n	800c5e0 <PWMBuiltIn_writeFrequency+0x28>
 800c5dc:	4bac      	ldr	r3, [pc, #688]	; (800c890 <PWMBuiltIn_writeFrequency+0x2d8>)
 800c5de:	e00b      	b.n	800c5f8 <PWMBuiltIn_writeFrequency+0x40>
 800c5e0:	edd7 7a00 	vldr	s15, [r7]
 800c5e4:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c894 <PWMBuiltIn_writeFrequency+0x2dc>
 800c5e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f0:	dd01      	ble.n	800c5f6 <PWMBuiltIn_writeFrequency+0x3e>
 800c5f2:	4ba9      	ldr	r3, [pc, #676]	; (800c898 <PWMBuiltIn_writeFrequency+0x2e0>)
 800c5f4:	e000      	b.n	800c5f8 <PWMBuiltIn_writeFrequency+0x40>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c5fe:	2301      	movs	r3, #1
 800c600:	613b      	str	r3, [r7, #16]
 800c602:	e06f      	b.n	800c6e4 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800c604:	88fa      	ldrh	r2, [r7, #6]
 800c606:	49a5      	ldr	r1, [pc, #660]	; (800c89c <PWMBuiltIn_writeFrequency+0x2e4>)
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	005b      	lsls	r3, r3, #1
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	4413      	add	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	440b      	add	r3, r1
 800c618:	edd3 7a00 	vldr	s15, [r3]
 800c61c:	ed97 7a00 	vldr	s14, [r7]
 800c620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c628:	d859      	bhi.n	800c6de <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800c62a:	4a9d      	ldr	r2, [pc, #628]	; (800c8a0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	3b01      	subs	r3, #1
 800c636:	499a      	ldr	r1, [pc, #616]	; (800c8a0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c638:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d124      	bne.n	800c68a <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800c640:	4a97      	ldr	r2, [pc, #604]	; (800c8a0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800c642:	693b      	ldr	r3, [r7, #16]
 800c644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c648:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800c64a:	88fb      	ldrh	r3, [r7, #6]
 800c64c:	4a95      	ldr	r2, [pc, #596]	; (800c8a4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c64e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c652:	ee07 3a90 	vmov	s15, r3
 800c656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c65a:	edd7 7a00 	vldr	s15, [r7]
 800c65e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	3301      	adds	r3, #1
 800c666:	ee07 3a90 	vmov	s15, r3
 800c66a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c66e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c676:	ee17 1a90 	vmov	r1, s15
 800c67a:	88fb      	ldrh	r3, [r7, #6]
 800c67c:	4a8a      	ldr	r2, [pc, #552]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c67e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	1e4a      	subs	r2, r1, #1
 800c686:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800c688:	e02f      	b.n	800c6ea <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800c68a:	88fb      	ldrh	r3, [r7, #6]
 800c68c:	4a86      	ldr	r2, [pc, #536]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4985      	ldr	r1, [pc, #532]	; (800c8ac <PWMBuiltIn_writeFrequency+0x2f4>)
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c69c:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800c69e:	88fb      	ldrh	r3, [r7, #6]
 800c6a0:	4a80      	ldr	r2, [pc, #512]	; (800c8a4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800c6a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6ae:	edd7 7a00 	vldr	s15, [r7]
 800c6b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c6b6:	88fb      	ldrh	r3, [r7, #6]
 800c6b8:	4a7b      	ldr	r2, [pc, #492]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c6ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	ee07 3a90 	vmov	s15, r3
 800c6c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c6cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6d4:	ee17 3a90 	vmov	r3, s15
 800c6d8:	3b01      	subs	r3, #1
 800c6da:	617b      	str	r3, [r7, #20]
			break;
 800c6dc:	e005      	b.n	800c6ea <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	613b      	str	r3, [r7, #16]
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	2b09      	cmp	r3, #9
 800c6e8:	dd8c      	ble.n	800c604 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800c6ea:	88fb      	ldrh	r3, [r7, #6]
 800c6ec:	4a6e      	ldr	r2, [pc, #440]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c6ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f6:	697a      	ldr	r2, [r7, #20]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	f000 80be 	beq.w	800c87a <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
 800c702:	e0a9      	b.n	800c858 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800c704:	4a68      	ldr	r2, [pc, #416]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c70c:	88fb      	ldrh	r3, [r7, #6]
 800c70e:	4966      	ldr	r1, [pc, #408]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c710:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c714:	429a      	cmp	r2, r3
 800c716:	f040 809c 	bne.w	800c852 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800c71a:	4a65      	ldr	r2, [pc, #404]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d113      	bne.n	800c74e <PWMBuiltIn_writeFrequency+0x196>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 f8c2 	bl	800c8b4 <PWMBuiltIn_readDuty>
 800c730:	eef0 7a40 	vmov.f32	s15, s0
 800c734:	4a5c      	ldr	r2, [pc, #368]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c73c:	681c      	ldr	r4, [r3, #0]
 800c73e:	eeb0 0a67 	vmov.f32	s0, s15
 800c742:	6978      	ldr	r0, [r7, #20]
 800c744:	f7ff fe1e 	bl	800c384 <duty2CCR>
 800c748:	4603      	mov	r3, r0
 800c74a:	6363      	str	r3, [r4, #52]	; 0x34
 800c74c:	e07a      	b.n	800c844 <PWMBuiltIn_writeFrequency+0x28c>
 800c74e:	4a58      	ldr	r2, [pc, #352]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c756:	2b04      	cmp	r3, #4
 800c758:	d113      	bne.n	800c782 <PWMBuiltIn_writeFrequency+0x1ca>
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 f8a8 	bl	800c8b4 <PWMBuiltIn_readDuty>
 800c764:	eef0 7a40 	vmov.f32	s15, s0
 800c768:	4a4f      	ldr	r2, [pc, #316]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c770:	681c      	ldr	r4, [r3, #0]
 800c772:	eeb0 0a67 	vmov.f32	s0, s15
 800c776:	6978      	ldr	r0, [r7, #20]
 800c778:	f7ff fe04 	bl	800c384 <duty2CCR>
 800c77c:	4603      	mov	r3, r0
 800c77e:	63a3      	str	r3, [r4, #56]	; 0x38
 800c780:	e060      	b.n	800c844 <PWMBuiltIn_writeFrequency+0x28c>
 800c782:	4a4b      	ldr	r2, [pc, #300]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c78a:	2b08      	cmp	r3, #8
 800c78c:	d113      	bne.n	800c7b6 <PWMBuiltIn_writeFrequency+0x1fe>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	b29b      	uxth	r3, r3
 800c792:	4618      	mov	r0, r3
 800c794:	f000 f88e 	bl	800c8b4 <PWMBuiltIn_readDuty>
 800c798:	eef0 7a40 	vmov.f32	s15, s0
 800c79c:	4a42      	ldr	r2, [pc, #264]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7a4:	681c      	ldr	r4, [r3, #0]
 800c7a6:	eeb0 0a67 	vmov.f32	s0, s15
 800c7aa:	6978      	ldr	r0, [r7, #20]
 800c7ac:	f7ff fdea 	bl	800c384 <duty2CCR>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c7b4:	e046      	b.n	800c844 <PWMBuiltIn_writeFrequency+0x28c>
 800c7b6:	4a3e      	ldr	r2, [pc, #248]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7be:	2b0c      	cmp	r3, #12
 800c7c0:	d113      	bne.n	800c7ea <PWMBuiltIn_writeFrequency+0x232>
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 f874 	bl	800c8b4 <PWMBuiltIn_readDuty>
 800c7cc:	eef0 7a40 	vmov.f32	s15, s0
 800c7d0:	4a35      	ldr	r2, [pc, #212]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7d8:	681c      	ldr	r4, [r3, #0]
 800c7da:	eeb0 0a67 	vmov.f32	s0, s15
 800c7de:	6978      	ldr	r0, [r7, #20]
 800c7e0:	f7ff fdd0 	bl	800c384 <duty2CCR>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	6423      	str	r3, [r4, #64]	; 0x40
 800c7e8:	e02c      	b.n	800c844 <PWMBuiltIn_writeFrequency+0x28c>
 800c7ea:	4a31      	ldr	r2, [pc, #196]	; (800c8b0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7f2:	2b10      	cmp	r3, #16
 800c7f4:	d113      	bne.n	800c81e <PWMBuiltIn_writeFrequency+0x266>
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f000 f85a 	bl	800c8b4 <PWMBuiltIn_readDuty>
 800c800:	eef0 7a40 	vmov.f32	s15, s0
 800c804:	4a28      	ldr	r2, [pc, #160]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c80c:	681c      	ldr	r4, [r3, #0]
 800c80e:	eeb0 0a67 	vmov.f32	s0, s15
 800c812:	6978      	ldr	r0, [r7, #20]
 800c814:	f7ff fdb6 	bl	800c384 <duty2CCR>
 800c818:	4603      	mov	r3, r0
 800c81a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c81c:	e012      	b.n	800c844 <PWMBuiltIn_writeFrequency+0x28c>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	b29b      	uxth	r3, r3
 800c822:	4618      	mov	r0, r3
 800c824:	f000 f846 	bl	800c8b4 <PWMBuiltIn_readDuty>
 800c828:	eef0 7a40 	vmov.f32	s15, s0
 800c82c:	4a1e      	ldr	r2, [pc, #120]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c834:	681c      	ldr	r4, [r3, #0]
 800c836:	eeb0 0a67 	vmov.f32	s0, s15
 800c83a:	6978      	ldr	r0, [r7, #20]
 800c83c:	f7ff fda2 	bl	800c384 <duty2CCR>
 800c840:	4603      	mov	r3, r0
 800c842:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800c844:	4a18      	ldr	r2, [pc, #96]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2200      	movs	r2, #0
 800c850:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	3301      	adds	r3, #1
 800c856:	60fb      	str	r3, [r7, #12]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b13      	cmp	r3, #19
 800c85c:	f77f af52 	ble.w	800c704 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800c860:	88fb      	ldrh	r3, [r7, #6]
 800c862:	4a11      	ldr	r2, [pc, #68]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c86e:	88fb      	ldrh	r3, [r7, #6]
 800c870:	4a0d      	ldr	r2, [pc, #52]	; (800c8a8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800c872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	60da      	str	r2, [r3, #12]
	}
}
 800c87a:	bf00      	nop
 800c87c:	371c      	adds	r7, #28
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd90      	pop	{r4, r7, pc}
 800c882:	bf00      	nop
 800c884:	f3af 8000 	nop.w
 800c888:	eb851eb8 	.word	0xeb851eb8
 800c88c:	3f9eb851 	.word	0x3f9eb851
 800c890:	3cf5c28f 	.word	0x3cf5c28f
 800c894:	4bcdfe60 	.word	0x4bcdfe60
 800c898:	4bcdfe60 	.word	0x4bcdfe60
 800c89c:	2000099c 	.word	0x2000099c
 800c8a0:	2000094c 	.word	0x2000094c
 800c8a4:	200008fc 	.word	0x200008fc
 800c8a8:	20000280 	.word	0x20000280
 800c8ac:	20000974 	.word	0x20000974
 800c8b0:	200002d0 	.word	0x200002d0

0800c8b4 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800c8be:	88fb      	ldrh	r3, [r7, #6]
 800c8c0:	4a2a      	ldr	r2, [pc, #168]	; (800c96c <PWMBuiltIn_readDuty+0xb8>)
 800c8c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800c8ca:	88fb      	ldrh	r3, [r7, #6]
 800c8cc:	4a28      	ldr	r2, [pc, #160]	; (800c970 <PWMBuiltIn_readDuty+0xbc>)
 800c8ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d106      	bne.n	800c8e4 <PWMBuiltIn_readDuty+0x30>
 800c8d6:	88fb      	ldrh	r3, [r7, #6]
 800c8d8:	4a24      	ldr	r2, [pc, #144]	; (800c96c <PWMBuiltIn_readDuty+0xb8>)
 800c8da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e2:	e039      	b.n	800c958 <PWMBuiltIn_readDuty+0xa4>
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	4a22      	ldr	r2, [pc, #136]	; (800c970 <PWMBuiltIn_readDuty+0xbc>)
 800c8e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ec:	2b04      	cmp	r3, #4
 800c8ee:	d106      	bne.n	800c8fe <PWMBuiltIn_readDuty+0x4a>
 800c8f0:	88fb      	ldrh	r3, [r7, #6]
 800c8f2:	4a1e      	ldr	r2, [pc, #120]	; (800c96c <PWMBuiltIn_readDuty+0xb8>)
 800c8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8fc:	e02c      	b.n	800c958 <PWMBuiltIn_readDuty+0xa4>
 800c8fe:	88fb      	ldrh	r3, [r7, #6]
 800c900:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <PWMBuiltIn_readDuty+0xbc>)
 800c902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c906:	2b08      	cmp	r3, #8
 800c908:	d106      	bne.n	800c918 <PWMBuiltIn_readDuty+0x64>
 800c90a:	88fb      	ldrh	r3, [r7, #6]
 800c90c:	4a17      	ldr	r2, [pc, #92]	; (800c96c <PWMBuiltIn_readDuty+0xb8>)
 800c90e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c916:	e01f      	b.n	800c958 <PWMBuiltIn_readDuty+0xa4>
 800c918:	88fb      	ldrh	r3, [r7, #6]
 800c91a:	4a15      	ldr	r2, [pc, #84]	; (800c970 <PWMBuiltIn_readDuty+0xbc>)
 800c91c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c920:	2b0c      	cmp	r3, #12
 800c922:	d106      	bne.n	800c932 <PWMBuiltIn_readDuty+0x7e>
 800c924:	88fb      	ldrh	r3, [r7, #6]
 800c926:	4a11      	ldr	r2, [pc, #68]	; (800c96c <PWMBuiltIn_readDuty+0xb8>)
 800c928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c930:	e012      	b.n	800c958 <PWMBuiltIn_readDuty+0xa4>
 800c932:	88fb      	ldrh	r3, [r7, #6]
 800c934:	4a0e      	ldr	r2, [pc, #56]	; (800c970 <PWMBuiltIn_readDuty+0xbc>)
 800c936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c93a:	2b10      	cmp	r3, #16
 800c93c:	d106      	bne.n	800c94c <PWMBuiltIn_readDuty+0x98>
 800c93e:	88fb      	ldrh	r3, [r7, #6]
 800c940:	4a0a      	ldr	r2, [pc, #40]	; (800c96c <PWMBuiltIn_readDuty+0xb8>)
 800c942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c94a:	e005      	b.n	800c958 <PWMBuiltIn_readDuty+0xa4>
 800c94c:	88fb      	ldrh	r3, [r7, #6]
 800c94e:	4a07      	ldr	r2, [pc, #28]	; (800c96c <PWMBuiltIn_readDuty+0xb8>)
 800c950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c958:	4619      	mov	r1, r3
 800c95a:	f7ff fd3a 	bl	800c3d2 <CCR2duty>
 800c95e:	eef0 7a40 	vmov.f32	s15, s0
}
 800c962:	eeb0 0a67 	vmov.f32	s0, s15
 800c966:	3708      	adds	r7, #8
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	20000280 	.word	0x20000280
 800c970:	200002d0 	.word	0x200002d0

0800c974 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c97c:	4a07      	ldr	r2, [pc, #28]	; (800c99c <PWMBuiltInStartChannel+0x28>)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c984:	4a06      	ldr	r2, [pc, #24]	; (800c9a0 <PWMBuiltInStartChannel+0x2c>)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c98c:	4619      	mov	r1, r3
 800c98e:	f7f8 fb95 	bl	80050bc <HAL_TIM_PWM_Start>
}
 800c992:	bf00      	nop
 800c994:	3708      	adds	r7, #8
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20000280 	.word	0x20000280
 800c9a0:	200002d0 	.word	0x200002d0

0800c9a4 <PWMBuiltInStopChannel>:

void PWMBuiltInStopChannel(int i)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800c9ac:	4a07      	ldr	r2, [pc, #28]	; (800c9cc <PWMBuiltInStopChannel+0x28>)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c9b4:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <PWMBuiltInStopChannel+0x2c>)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9bc:	4619      	mov	r1, r3
 800c9be:	f7f8 fbc1 	bl	8005144 <HAL_TIM_PWM_Stop>
}
 800c9c2:	bf00      	nop
 800c9c4:	3708      	adds	r7, #8
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	bf00      	nop
 800c9cc:	20000280 	.word	0x20000280
 800c9d0:	200002d0 	.word	0x200002d0

0800c9d4 <PWMBuiltInStart>:

void PWMBuiltInStart()
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c9da:	2300      	movs	r3, #0
 800c9dc:	607b      	str	r3, [r7, #4]
 800c9de:	e005      	b.n	800c9ec <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff ffc7 	bl	800c974 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	607b      	str	r3, [r7, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b13      	cmp	r3, #19
 800c9f0:	ddf6      	ble.n	800c9e0 <PWMBuiltInStart+0xc>
}
 800c9f2:	bf00      	nop
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
	...

0800c9fc <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800ca02:	2300      	movs	r3, #0
 800ca04:	60fb      	str	r3, [r7, #12]
 800ca06:	e06f      	b.n	800cae8 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800ca08:	4a3c      	ldr	r2, [pc, #240]	; (800cafc <PWMBuiltIn_init+0x100>)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7ff fcfd 	bl	800c410 <getTIM_SOURCECLK>
 800ca16:	4601      	mov	r1, r0
 800ca18:	4a39      	ldr	r2, [pc, #228]	; (800cb00 <PWMBuiltIn_init+0x104>)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800ca20:	2300      	movs	r3, #0
 800ca22:	60bb      	str	r3, [r7, #8]
 800ca24:	e04c      	b.n	800cac0 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800ca26:	4a37      	ldr	r2, [pc, #220]	; (800cb04 <PWMBuiltIn_init+0x108>)
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	fa02 f303 	lsl.w	r3, r2, r3
 800ca34:	1e5a      	subs	r2, r3, #1
 800ca36:	4934      	ldr	r1, [pc, #208]	; (800cb08 <PWMBuiltIn_init+0x10c>)
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800ca3e:	4a33      	ldr	r2, [pc, #204]	; (800cb0c <PWMBuiltIn_init+0x110>)
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca46:	2201      	movs	r2, #1
 800ca48:	fa02 f303 	lsl.w	r3, r2, r3
 800ca4c:	1e5a      	subs	r2, r3, #1
 800ca4e:	4930      	ldr	r1, [pc, #192]	; (800cb10 <PWMBuiltIn_init+0x114>)
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800ca56:	4a2c      	ldr	r2, [pc, #176]	; (800cb08 <PWMBuiltIn_init+0x10c>)
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca5e:	3301      	adds	r3, #1
 800ca60:	ee07 3a90 	vmov	s15, r3
 800ca64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca68:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800ca6c:	4a28      	ldr	r2, [pc, #160]	; (800cb10 <PWMBuiltIn_init+0x114>)
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca74:	3301      	adds	r3, #1
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7e:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800ca82:	4a1f      	ldr	r2, [pc, #124]	; (800cb00 <PWMBuiltIn_init+0x104>)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca8a:	ee07 3a90 	vmov	s15, r3
 800ca8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ca92:	edd7 7a01 	vldr	s15, [r7, #4]
 800ca96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ca9a:	ed97 7a00 	vldr	s14, [r7]
 800ca9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800caa2:	491c      	ldr	r1, [pc, #112]	; (800cb14 <PWMBuiltIn_init+0x118>)
 800caa4:	68fa      	ldr	r2, [r7, #12]
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	005b      	lsls	r3, r3, #1
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	4413      	add	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	440b      	add	r3, r1
 800cab6:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	3301      	adds	r3, #1
 800cabe:	60bb      	str	r3, [r7, #8]
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	2b09      	cmp	r3, #9
 800cac4:	ddaf      	ble.n	800ca26 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	b29b      	uxth	r3, r3
 800caca:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800cb18 <PWMBuiltIn_init+0x11c>
 800cace:	4618      	mov	r0, r3
 800cad0:	f7ff fcd2 	bl	800c478 <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800cb1c <PWMBuiltIn_init+0x120>
 800cadc:	4618      	mov	r0, r3
 800cade:	f7ff fd6b 	bl	800c5b8 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3301      	adds	r3, #1
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2b13      	cmp	r3, #19
 800caec:	dd8c      	ble.n	800ca08 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800caee:	f7ff ff71 	bl	800c9d4 <PWMBuiltInStart>
}
 800caf2:	bf00      	nop
 800caf4:	3710      	adds	r7, #16
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	20000280 	.word	0x20000280
 800cb00:	200008fc 	.word	0x200008fc
 800cb04:	20000320 	.word	0x20000320
 800cb08:	2000094c 	.word	0x2000094c
 800cb0c:	20000348 	.word	0x20000348
 800cb10:	20000974 	.word	0x20000974
 800cb14:	2000099c 	.word	0x2000099c
 800cb18:	00000000 	.word	0x00000000
 800cb1c:	42200000 	.word	0x42200000

0800cb20 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	460b      	mov	r3, r1
 800cb2a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb2e:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb34:	7afb      	ldrb	r3, [r7, #11]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	4413      	add	r3, r2
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	601a      	str	r2, [r3, #0]
}
 800cb3e:	bf00      	nop
 800cb40:	3714      	adds	r7, #20
 800cb42:	46bd      	mov	sp, r7
 800cb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb48:	4770      	bx	lr
	...

0800cb4c <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cb5c:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d15b      	bne.n	800cc20 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	ed93 7a00 	vldr	s14, [r3]
 800cb6e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb76:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb7e:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb86:	edd7 7a03 	vldr	s15, [r7, #12]
 800cb8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb92:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800cb96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cb9a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	ed93 7a00 	vldr	s14, [r3]
 800cba4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbac:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbb4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cbc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbca:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	ed93 7a00 	vldr	s14, [r3]
 800cbd4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbdc:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbe0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbe4:	edd7 7a03 	vldr	s15, [r7, #12]
 800cbe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cbf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cbfa:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	ed93 7a00 	vldr	s14, [r3]
 800cc04:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc10:	330c      	adds	r3, #12
 800cc12:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc1a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800cc1e:	e0fc      	b.n	800ce1a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	f040 80f7 	bne.w	800ce1a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	ed93 7a00 	vldr	s14, [r3]
 800cc32:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc36:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc3a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc42:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc4a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc52:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc5a:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc66:	eddf 6a70 	vldr	s13, [pc, #448]	; 800ce28 <kalman_setQ+0x2dc>
 800cc6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cc6e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	ed93 7a00 	vldr	s14, [r3]
 800cc78:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc80:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc88:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc90:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc98:	edd7 7a03 	vldr	s15, [r7, #12]
 800cc9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca4:	3304      	adds	r3, #4
 800cca6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800ccaa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ccae:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	ed93 7a00 	vldr	s14, [r3]
 800ccb8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccc0:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccc8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd0:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccdc:	3308      	adds	r3, #8
 800ccde:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cce2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cce6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	ed93 7a00 	vldr	s14, [r3]
 800ccf0:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccf8:	edd7 7a03 	vldr	s15, [r7, #12]
 800ccfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd00:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd08:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd10:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd1c:	330c      	adds	r3, #12
 800cd1e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800cd22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd26:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	ed93 7a00 	vldr	s14, [r3]
 800cd30:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd38:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd40:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd48:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd54:	3310      	adds	r3, #16
 800cd56:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800cd5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd5e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	ed93 7a00 	vldr	s14, [r3]
 800cd68:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd70:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd78:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd84:	3314      	adds	r3, #20
 800cd86:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cd8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cd8e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	ed93 7a00 	vldr	s14, [r3]
 800cd98:	edd7 7a03 	vldr	s15, [r7, #12]
 800cd9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cda0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cda4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cda8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdb0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdbc:	3318      	adds	r3, #24
 800cdbe:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800cdc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdc6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	ed93 7a00 	vldr	s14, [r3]
 800cdd0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cdd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800cddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cde0:	edd7 7a03 	vldr	s15, [r7, #12]
 800cde4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdec:	331c      	adds	r3, #28
 800cdee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cdf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdf6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	ed93 7a00 	vldr	s14, [r3]
 800ce00:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce0c:	3320      	adds	r3, #32
 800ce0e:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce16:	edc3 7a00 	vstr	s15, [r3]
}
 800ce1a:	bf00      	nop
 800ce1c:	3714      	adds	r7, #20
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
 800ce26:	bf00      	nop
 800ce28:	42100000 	.word	0x42100000

0800ce2c <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	b083      	sub	sp, #12
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d105      	bne.n	800ce4c <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce44:	683a      	ldr	r2, [r7, #0]
 800ce46:	6812      	ldr	r2, [r2, #0]
 800ce48:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800ce4a:	e039      	b.n	800cec0 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	d134      	bne.n	800cec0 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	6812      	ldr	r2, [r2, #0]
 800ce5e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce64:	3304      	adds	r3, #4
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce70:	3308      	adds	r3, #8
 800ce72:	f04f 0200 	mov.w	r2, #0
 800ce76:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce7c:	330c      	adds	r3, #12
 800ce7e:	f04f 0200 	mov.w	r2, #0
 800ce82:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce88:	3310      	adds	r3, #16
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	6852      	ldr	r2, [r2, #4]
 800ce8e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce94:	3314      	adds	r3, #20
 800ce96:	f04f 0200 	mov.w	r2, #0
 800ce9a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cea0:	3318      	adds	r3, #24
 800cea2:	f04f 0200 	mov.w	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceac:	331c      	adds	r3, #28
 800ceae:	f04f 0200 	mov.w	r2, #0
 800ceb2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb8:	3320      	adds	r3, #32
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	6892      	ldr	r2, [r2, #8]
 800cebe:	601a      	str	r2, [r3, #0]
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b086      	sub	sp, #24
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	ed87 0a03 	vstr	s0, [r7, #12]
 800ced6:	edc7 0a02 	vstr	s1, [r7, #8]
 800ceda:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800cede:	f107 0108 	add.w	r1, r7, #8
 800cee2:	f107 030c 	add.w	r3, r7, #12
 800cee6:	2200      	movs	r2, #0
 800cee8:	ed97 0a01 	vldr	s0, [r7, #4]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 f807 	bl	800cf00 <KALMANFILTER>
 800cef2:	6178      	str	r0, [r7, #20]
	return pk;
 800cef4:	697b      	ldr	r3, [r7, #20]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}
	...

0800cf00 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b086      	sub	sp, #24
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	ed87 0a01 	vstr	s0, [r7, #4]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800cf12:	20c4      	movs	r0, #196	; 0xc4
 800cf14:	f003 fe2e 	bl	8010b74 <malloc>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d101      	bne.n	800cf26 <KALMANFILTER+0x26>
		return NULL;
 800cf22:	2300      	movs	r3, #0
 800cf24:	e10e      	b.n	800d144 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800cf26:	22c4      	movs	r2, #196	; 0xc4
 800cf28:	2100      	movs	r1, #0
 800cf2a:	6978      	ldr	r0, [r7, #20]
 800cf2c:	f003 fe35 	bl	8010b9a <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	887a      	ldrh	r2, [r7, #2]
 800cf34:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800cf38:	6978      	ldr	r0, [r7, #20]
 800cf3a:	f000 f90f 	bl	800d15c <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800cf3e:	697b      	ldr	r3, [r7, #20]
 800cf40:	4a82      	ldr	r2, [pc, #520]	; (800d14c <KALMANFILTER+0x24c>)
 800cf42:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	4a81      	ldr	r2, [pc, #516]	; (800d150 <KALMANFILTER+0x250>)
 800cf4a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	4a80      	ldr	r2, [pc, #512]	; (800d154 <KALMANFILTER+0x254>)
 800cf52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	4a7f      	ldr	r2, [pc, #508]	; (800d158 <KALMANFILTER+0x258>)
 800cf5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	687a      	ldr	r2, [r7, #4]
 800cf62:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800cf66:	887b      	ldrh	r3, [r7, #2]
 800cf68:	2b01      	cmp	r3, #1
 800cf6a:	f040 8095 	bne.w	800d098 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	695b      	ldr	r3, [r3, #20]
 800cf72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cf76:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800cf82:	ed97 7a01 	vldr	s14, [r7, #4]
 800cf86:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	695b      	ldr	r3, [r3, #20]
 800cf92:	3308      	adds	r3, #8
 800cf94:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cf98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cf9c:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	695b      	ldr	r3, [r3, #20]
 800cfa4:	330c      	adds	r3, #12
 800cfa6:	f04f 0200 	mov.w	r2, #0
 800cfaa:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	3310      	adds	r3, #16
 800cfb2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cfb6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	695b      	ldr	r3, [r3, #20]
 800cfbc:	3314      	adds	r3, #20
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	695b      	ldr	r3, [r3, #20]
 800cfc6:	3318      	adds	r3, #24
 800cfc8:	f04f 0200 	mov.w	r2, #0
 800cfcc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	695b      	ldr	r3, [r3, #20]
 800cfd2:	331c      	adds	r3, #28
 800cfd4:	f04f 0200 	mov.w	r2, #0
 800cfd8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	695b      	ldr	r3, [r3, #20]
 800cfde:	3320      	adds	r3, #32
 800cfe0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800cfe4:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	69db      	ldr	r3, [r3, #28]
 800cfea:	f04f 0200 	mov.w	r2, #0
 800cfee:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800cff0:	697b      	ldr	r3, [r7, #20]
 800cff2:	69db      	ldr	r3, [r3, #28]
 800cff4:	3304      	adds	r3, #4
 800cff6:	f04f 0200 	mov.w	r2, #0
 800cffa:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	69db      	ldr	r3, [r3, #28]
 800d000:	3308      	adds	r3, #8
 800d002:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d006:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d00c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d010:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	3304      	adds	r3, #4
 800d018:	f04f 0200 	mov.w	r2, #0
 800d01c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d022:	3308      	adds	r3, #8
 800d024:	f04f 0200 	mov.w	r2, #0
 800d028:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d02e:	330c      	adds	r3, #12
 800d030:	f04f 0200 	mov.w	r2, #0
 800d034:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03a:	3310      	adds	r3, #16
 800d03c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d040:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d046:	3314      	adds	r3, #20
 800d048:	f04f 0200 	mov.w	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d052:	3318      	adds	r3, #24
 800d054:	f04f 0200 	mov.w	r2, #0
 800d058:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05e:	331c      	adds	r3, #28
 800d060:	f04f 0200 	mov.w	r2, #0
 800d064:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d06a:	3320      	adds	r3, #32
 800d06c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d070:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f103 0210 	add.w	r2, r3, #16
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	3350      	adds	r3, #80	; 0x50
 800d07c:	4619      	mov	r1, r3
 800d07e:	4610      	mov	r0, r2
 800d080:	f7f3 ff1f 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f103 0220 	add.w	r2, r3, #32
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	3358      	adds	r3, #88	; 0x58
 800d08e:	4619      	mov	r1, r3
 800d090:	4610      	mov	r0, r2
 800d092:	f7f3 ff16 	bl	8000ec2 <arm_mat_trans_f32>
 800d096:	e048      	b.n	800d12a <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800d098:	887b      	ldrh	r3, [r7, #2]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d145      	bne.n	800d12a <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	695b      	ldr	r3, [r3, #20]
 800d0a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d0a6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	695b      	ldr	r3, [r3, #20]
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	687a      	ldr	r2, [r7, #4]
 800d0b0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	695b      	ldr	r3, [r3, #20]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	f04f 0200 	mov.w	r2, #0
 800d0bc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	695b      	ldr	r3, [r3, #20]
 800d0c2:	330c      	adds	r3, #12
 800d0c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d0c8:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800d0ca:	ed97 7a01 	vldr	s14, [r7, #4]
 800d0ce:	edd7 7a01 	vldr	s15, [r7, #4]
 800d0d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	69db      	ldr	r3, [r3, #28]
 800d0da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d0de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d0e2:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	69db      	ldr	r3, [r3, #28]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	687a      	ldr	r2, [r7, #4]
 800d0ee:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d0f8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fe:	3304      	adds	r3, #4
 800d100:	f04f 0200 	mov.w	r2, #0
 800d104:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	f103 0210 	add.w	r2, r3, #16
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	3350      	adds	r3, #80	; 0x50
 800d110:	4619      	mov	r1, r3
 800d112:	4610      	mov	r0, r2
 800d114:	f7f3 fed5 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	f103 0220 	add.w	r2, r3, #32
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3358      	adds	r3, #88	; 0x58
 800d122:	4619      	mov	r1, r3
 800d124:	4610      	mov	r0, r2
 800d126:	f7f3 fecc 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d130:	68f9      	ldr	r1, [r7, #12]
 800d132:	6978      	ldr	r0, [r7, #20]
 800d134:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d13c:	68b9      	ldr	r1, [r7, #8]
 800d13e:	6978      	ldr	r0, [r7, #20]
 800d140:	4798      	blx	r3

	return ptKalmanFilter;
 800d142:	697b      	ldr	r3, [r7, #20]
	
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	0800d4cd 	.word	0x0800d4cd
 800d150:	0800cb4d 	.word	0x0800cb4d
 800d154:	0800ce2d 	.word	0x0800ce2d
 800d158:	0800cb21 	.word	0x0800cb21

0800d15c <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	f040 80d9 	bne.w	800d322 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800d170:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800d174:	f003 fcfe 	bl	8010b74 <malloc>
 800d178:	4603      	mov	r3, r0
 800d17a:	461a      	mov	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d188:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800d18a:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d18e:	2100      	movs	r1, #0
 800d190:	68b8      	ldr	r0, [r7, #8]
 800d192:	f003 fd02 	bl	8010b9a <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2201      	movs	r2, #1
 800d19c:	2103      	movs	r1, #3
 800d19e:	f7f3 fabf 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	f103 0010 	add.w	r0, r3, #16
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	330c      	adds	r3, #12
 800d1ac:	2203      	movs	r2, #3
 800d1ae:	2103      	movs	r1, #3
 800d1b0:	f7f3 fab6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f103 0018 	add.w	r0, r3, #24
 800d1ba:	68bb      	ldr	r3, [r7, #8]
 800d1bc:	3330      	adds	r3, #48	; 0x30
 800d1be:	2201      	movs	r2, #1
 800d1c0:	2103      	movs	r1, #3
 800d1c2:	f7f3 faad 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	f103 0008 	add.w	r0, r3, #8
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	333c      	adds	r3, #60	; 0x3c
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	f7f3 faa4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f103 0020 	add.w	r0, r3, #32
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	3340      	adds	r3, #64	; 0x40
 800d1e2:	2203      	movs	r2, #3
 800d1e4:	2103      	movs	r1, #3
 800d1e6:	f7f3 fa9b 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	33f4      	adds	r3, #244	; 0xf4
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	2103      	movs	r1, #3
 800d1f8:	f7f3 fa92 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	3364      	adds	r3, #100	; 0x64
 800d206:	2203      	movs	r2, #3
 800d208:	2103      	movs	r1, #3
 800d20a:	f7f3 fa89 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	3388      	adds	r3, #136	; 0x88
 800d218:	2203      	movs	r2, #3
 800d21a:	2103      	movs	r1, #3
 800d21c:	f7f3 fa80 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	33ac      	adds	r3, #172	; 0xac
 800d22a:	2203      	movs	r2, #3
 800d22c:	2103      	movs	r1, #3
 800d22e:	f7f3 fa77 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	33d0      	adds	r3, #208	; 0xd0
 800d23c:	2203      	movs	r2, #3
 800d23e:	2103      	movs	r1, #3
 800d240:	f7f3 fa6e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d250:	2203      	movs	r2, #3
 800d252:	2103      	movs	r1, #3
 800d254:	f7f3 fa64 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d264:	2203      	movs	r2, #3
 800d266:	2103      	movs	r1, #3
 800d268:	f7f3 fa5a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d278:	2203      	movs	r2, #3
 800d27a:	2103      	movs	r1, #3
 800d27c:	f7f3 fa50 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800d28c:	2203      	movs	r2, #3
 800d28e:	2103      	movs	r1, #3
 800d290:	f7f3 fa46 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d2a0:	2203      	movs	r2, #3
 800d2a2:	2103      	movs	r1, #3
 800d2a4:	f7f3 fa3c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d2b4:	2203      	movs	r2, #3
 800d2b6:	2103      	movs	r1, #3
 800d2b8:	f7f3 fa32 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d2c8:	2203      	movs	r2, #3
 800d2ca:	2103      	movs	r1, #3
 800d2cc:	f7f3 fa28 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d2dc:	2201      	movs	r2, #1
 800d2de:	2103      	movs	r1, #3
 800d2e0:	f7f3 fa1e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	2103      	movs	r1, #3
 800d2f4:	f7f3 fa14 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d304:	2201      	movs	r2, #1
 800d306:	2103      	movs	r1, #3
 800d308:	f7f3 fa0a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800d318:	2201      	movs	r2, #1
 800d31a:	2103      	movs	r1, #3
 800d31c:	f7f3 fa00 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800d320:	e0d0      	b.n	800d4c4 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f040 80cb 	bne.w	800d4c4 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800d32e:	20bc      	movs	r0, #188	; 0xbc
 800d330:	f003 fc20 	bl	8010b74 <malloc>
 800d334:	4603      	mov	r3, r0
 800d336:	461a      	mov	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d344:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800d346:	22bc      	movs	r2, #188	; 0xbc
 800d348:	2100      	movs	r1, #0
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f003 fc25 	bl	8010b9a <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800d350:	6878      	ldr	r0, [r7, #4]
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2201      	movs	r2, #1
 800d356:	2102      	movs	r1, #2
 800d358:	f7f3 f9e2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f103 0010 	add.w	r0, r3, #16
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3308      	adds	r3, #8
 800d366:	2202      	movs	r2, #2
 800d368:	2102      	movs	r1, #2
 800d36a:	f7f3 f9d9 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f103 0018 	add.w	r0, r3, #24
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	3318      	adds	r3, #24
 800d378:	2201      	movs	r2, #1
 800d37a:	2102      	movs	r1, #2
 800d37c:	f7f3 f9d0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f103 0008 	add.w	r0, r3, #8
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	3320      	adds	r3, #32
 800d38a:	2201      	movs	r2, #1
 800d38c:	2101      	movs	r1, #1
 800d38e:	f7f3 f9c7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f103 0020 	add.w	r0, r3, #32
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	3324      	adds	r3, #36	; 0x24
 800d39c:	2202      	movs	r2, #2
 800d39e:	2101      	movs	r1, #1
 800d3a0:	f7f3 f9be 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	3358      	adds	r3, #88	; 0x58
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	2101      	movs	r1, #1
 800d3b2:	f7f3 f9b5 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	332c      	adds	r3, #44	; 0x2c
 800d3c0:	2202      	movs	r2, #2
 800d3c2:	2102      	movs	r1, #2
 800d3c4:	f7f3 f9ac 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	333c      	adds	r3, #60	; 0x3c
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	2102      	movs	r1, #2
 800d3d6:	f7f3 f9a3 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	334c      	adds	r3, #76	; 0x4c
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	2101      	movs	r1, #1
 800d3e8:	f7f3 f99a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	3350      	adds	r3, #80	; 0x50
 800d3f6:	2201      	movs	r2, #1
 800d3f8:	2102      	movs	r1, #2
 800d3fa:	f7f3 f991 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	335c      	adds	r3, #92	; 0x5c
 800d408:	2202      	movs	r2, #2
 800d40a:	2102      	movs	r1, #2
 800d40c:	f7f3 f988 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	336c      	adds	r3, #108	; 0x6c
 800d41a:	2201      	movs	r2, #1
 800d41c:	2102      	movs	r1, #2
 800d41e:	f7f3 f97f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	3374      	adds	r3, #116	; 0x74
 800d42c:	2201      	movs	r2, #1
 800d42e:	2102      	movs	r1, #2
 800d430:	f7f3 f976 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	337c      	adds	r3, #124	; 0x7c
 800d43e:	2202      	movs	r2, #2
 800d440:	2102      	movs	r1, #2
 800d442:	f7f3 f96d 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	338c      	adds	r3, #140	; 0x8c
 800d450:	2202      	movs	r2, #2
 800d452:	2102      	movs	r1, #2
 800d454:	f7f3 f964 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	339c      	adds	r3, #156	; 0x9c
 800d462:	2201      	movs	r2, #1
 800d464:	2101      	movs	r1, #1
 800d466:	f7f3 f95b 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	33a0      	adds	r3, #160	; 0xa0
 800d474:	2201      	movs	r2, #1
 800d476:	2101      	movs	r1, #1
 800d478:	f7f3 f952 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	33a4      	adds	r3, #164	; 0xa4
 800d486:	2201      	movs	r2, #1
 800d488:	2101      	movs	r1, #1
 800d48a:	f7f3 f949 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	33a8      	adds	r3, #168	; 0xa8
 800d498:	2201      	movs	r2, #1
 800d49a:	2101      	movs	r1, #1
 800d49c:	f7f3 f940 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	33ac      	adds	r3, #172	; 0xac
 800d4aa:	2201      	movs	r2, #1
 800d4ac:	2102      	movs	r1, #2
 800d4ae:	f7f3 f937 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	33b4      	adds	r3, #180	; 0xb4
 800d4bc:	2201      	movs	r2, #1
 800d4be:	2102      	movs	r1, #2
 800d4c0:	f7f3 f92e 	bl	8000720 <arm_mat_init_f32>
}
 800d4c4:	bf00      	nop
 800d4c6:	3710      	adds	r7, #16
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b082      	sub	sp, #8
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f103 0010 	add.w	r0, r3, #16
 800d4da:	6879      	ldr	r1, [r7, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	3398      	adds	r3, #152	; 0x98
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	f7f3 fb6d 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f103 0010 	add.w	r0, r3, #16
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3368      	adds	r3, #104	; 0x68
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	f7f3 fb62 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	3370      	adds	r3, #112	; 0x70
 800d50c:	461a      	mov	r2, r3
 800d50e:	f7f3 fb57 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	3368      	adds	r3, #104	; 0x68
 800d522:	461a      	mov	r2, r3
 800d524:	f7f3 f864 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3360      	adds	r3, #96	; 0x60
 800d538:	461a      	mov	r2, r3
 800d53a:	f7f3 fb41 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f103 0020 	add.w	r0, r3, #32
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	3378      	adds	r3, #120	; 0x78
 800d54e:	461a      	mov	r2, r3
 800d550:	f7f3 fb36 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3380      	adds	r3, #128	; 0x80
 800d564:	461a      	mov	r2, r3
 800d566:	f7f3 f843 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3378      	adds	r3, #120	; 0x78
 800d574:	4619      	mov	r1, r3
 800d576:	4610      	mov	r0, r2
 800d578:	f7f3 f8ea 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	3348      	adds	r3, #72	; 0x48
 800d58c:	461a      	mov	r2, r3
 800d58e:	f7f3 fb17 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f103 0020 	add.w	r0, r3, #32
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3388      	adds	r3, #136	; 0x88
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	f7f3 fb0c 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3390      	adds	r3, #144	; 0x90
 800d5b8:	461a      	mov	r2, r3
 800d5ba:	f7f3 fbea 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	33a0      	adds	r3, #160	; 0xa0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f7f3 faf6 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	33a0      	adds	r3, #160	; 0xa0
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4619      	mov	r1, r3
 800d5e2:	f7f3 f805 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f103 0120 	add.w	r1, r3, #32
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	3330      	adds	r3, #48	; 0x30
 800d5f6:	461a      	mov	r2, r3
 800d5f8:	f7f3 fae2 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	3370      	adds	r3, #112	; 0x70
 800d60c:	461a      	mov	r2, r3
 800d60e:	f7f3 fad7 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	3330      	adds	r3, #48	; 0x30
 800d622:	461a      	mov	r2, r3
 800d624:	f7f3 fbb5 	bl	8000d92 <arm_mat_sub_f32>

}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d630:	b480      	push	{r7}
 800d632:	b089      	sub	sp, #36	; 0x24
 800d634:	af00      	add	r7, sp, #0
 800d636:	61f8      	str	r0, [r7, #28]
 800d638:	ed87 0a06 	vstr	s0, [r7, #24]
 800d63c:	edc7 0a05 	vstr	s1, [r7, #20]
 800d640:	ed87 1a04 	vstr	s2, [r7, #16]
 800d644:	edc7 1a03 	vstr	s3, [r7, #12]
 800d648:	ed87 2a02 	vstr	s4, [r7, #8]
 800d64c:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	697a      	ldr	r2, [r7, #20]
 800d65a:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800d65c:	69fb      	ldr	r3, [r7, #28]
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d668:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	f04f 0200 	mov.w	r2, #0
 800d670:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800d672:	69fb      	ldr	r3, [r7, #28]
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d67e:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800d680:	69fb      	ldr	r3, [r7, #28]
 800d682:	f04f 0200 	mov.w	r2, #0
 800d686:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	4a2f      	ldr	r2, [pc, #188]	; (800d748 <initPID+0x118>)
 800d68c:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	edd3 6a02 	vldr	s13, [r3, #8]
 800d694:	69fb      	ldr	r3, [r7, #28]
 800d696:	ed93 7a00 	vldr	s14, [r3]
 800d69a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	edd3 6a08 	vldr	s13, [r3, #32]
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	ed93 7a08 	vldr	s14, [r3, #32]
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	ed93 6a07 	vldr	s12, [r3, #28]
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	edd3 7a05 	vldr	s15, [r3, #20]
 800d6bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d6c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c8:	69fb      	ldr	r3, [r7, #28]
 800d6ca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	edd3 7a00 	vldr	s15, [r3]
 800d6d4:	eeb1 7a67 	vneg.f32	s14, s15
 800d6d8:	69fb      	ldr	r3, [r7, #28]
 800d6da:	edd3 7a07 	vldr	s15, [r3, #28]
 800d6de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800d6e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ec:	69fb      	ldr	r3, [r7, #28]
 800d6ee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	f04f 0200 	mov.w	r2, #0
 800d6f8:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	f04f 0200 	mov.w	r2, #0
 800d700:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800d702:	69fb      	ldr	r3, [r7, #28]
 800d704:	f04f 0200 	mov.w	r2, #0
 800d708:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	f04f 0200 	mov.w	r2, #0
 800d710:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800d712:	69fb      	ldr	r3, [r7, #28]
 800d714:	68ba      	ldr	r2, [r7, #8]
 800d716:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800d718:	edd7 7a02 	vldr	s15, [r7, #8]
 800d71c:	eef1 7a67 	vneg.f32	s15, s15
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800d72c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d730:	eef1 7a67 	vneg.f32	s15, s15
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800d73a:	bf00      	nop
 800d73c:	3724      	adds	r7, #36	; 0x24
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	41700000 	.word	0x41700000

0800d74c <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b088      	sub	sp, #32
 800d750:	af00      	add	r7, sp, #0
 800d752:	ed87 0a05 	vstr	s0, [r7, #20]
 800d756:	edc7 0a04 	vstr	s1, [r7, #16]
 800d75a:	ed87 1a03 	vstr	s2, [r7, #12]
 800d75e:	edc7 1a02 	vstr	s3, [r7, #8]
 800d762:	ed87 2a01 	vstr	s4, [r7, #4]
 800d766:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800d76a:	2054      	movs	r0, #84	; 0x54
 800d76c:	f003 fa02 	bl	8010b74 <malloc>
 800d770:	4603      	mov	r3, r0
 800d772:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d101      	bne.n	800d77e <newPID+0x32>
		return NULL;
 800d77a:	2300      	movs	r3, #0
 800d77c:	e014      	b.n	800d7a8 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800d77e:	2254      	movs	r2, #84	; 0x54
 800d780:	2100      	movs	r1, #0
 800d782:	69f8      	ldr	r0, [r7, #28]
 800d784:	f003 fa09 	bl	8010b9a <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800d788:	edd7 2a00 	vldr	s5, [r7]
 800d78c:	ed97 2a01 	vldr	s4, [r7, #4]
 800d790:	edd7 1a02 	vldr	s3, [r7, #8]
 800d794:	ed97 1a03 	vldr	s2, [r7, #12]
 800d798:	edd7 0a04 	vldr	s1, [r7, #16]
 800d79c:	ed97 0a05 	vldr	s0, [r7, #20]
 800d7a0:	69f8      	ldr	r0, [r7, #28]
 800d7a2:	f7ff ff45 	bl	800d630 <initPID>
	return pp;
 800d7a6:	69fb      	ldr	r3, [r7, #28]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3720      	adds	r7, #32
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <my_UsartInit>:
 *
 */

/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0

	 //Usart 1 is connected to raspberry pi, we handle Tx, rosserial handles Rx
	 myInitUsartMode(&huart1,usartDMACircularMode);
 800d7b4:	2102      	movs	r1, #2
 800d7b6:	4807      	ldr	r0, [pc, #28]	; (800d7d4 <my_UsartInit+0x24>)
 800d7b8:	f000 f812 	bl	800d7e0 <myInitUsartMode>

	 //for application use
	 myInitUsartMode(&huart2,usartIntMode);
 800d7bc:	2100      	movs	r1, #0
 800d7be:	4806      	ldr	r0, [pc, #24]	; (800d7d8 <my_UsartInit+0x28>)
 800d7c0:	f000 f80e 	bl	800d7e0 <myInitUsartMode>

	 //Usart 3 is connecting through usb by defaut, configured to DMA mode
	 myInitUsartMode(&huart3,usartDMAIdleMode);
 800d7c4:	2101      	movs	r1, #1
 800d7c6:	4805      	ldr	r0, [pc, #20]	; (800d7dc <my_UsartInit+0x2c>)
 800d7c8:	f000 f80a 	bl	800d7e0 <myInitUsartMode>

	 //Enable printf Binany
	 printfBin_init();
 800d7cc:	f000 fc1a 	bl	800e004 <printfBin_init>
}
 800d7d0:	bf00      	nop
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	2000b0c4 	.word	0x2000b0c4
 800d7d8:	2000b144 	.word	0x2000b144
 800d7dc:	2000af24 	.word	0x2000af24

0800d7e0 <myInitUsartMode>:

static void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode){
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f85b 	bl	800d8a8 <getUsartDevice>
 800d7f2:	60f8      	str	r0, [r7, #12]
	memset(uartDev,0,sizeof(UART_DEVICE));
 800d7f4:	f242 32f4 	movw	r2, #9204	; 0x23f4
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f003 f9cd 	bl	8010b9a <memset>
	uartDev->huart = huart;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	601a      	str	r2, [r3, #0]
	uartDev->pRxBuf = uartDev->RxBuf;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800d80c:	68f9      	ldr	r1, [r7, #12]
 800d80e:	f242 1354 	movw	r3, #8532	; 0x2154
 800d812:	440b      	add	r3, r1
 800d814:	601a      	str	r2, [r3, #0]
	uartDev->pRxLineBuf=uartDev->RxLineBuf;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	f242 1258 	movw	r2, #8536	; 0x2158
 800d81c:	441a      	add	r2, r3
 800d81e:	68f9      	ldr	r1, [r7, #12]
 800d820:	f242 334c 	movw	r3, #9036	; 0x234c
 800d824:	440b      	add	r3, r1
 800d826:	601a      	str	r2, [r3, #0]
	uartDev->receveBinPtr = (RECEIVEBINSTRUCT *)uartDev->RxBuf;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800d82e:	68f9      	ldr	r1, [r7, #12]
 800d830:	f242 33e0 	movw	r3, #9184	; 0x23e0
 800d834:	440b      	add	r3, r1
 800d836:	601a      	str	r2, [r3, #0]
	uartDev->usartmode=usartMode;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	78fa      	ldrb	r2, [r7, #3]
 800d83c:	711a      	strb	r2, [r3, #4]
	if(usartMode==usartIntMode){
 800d83e:	78fb      	ldrb	r3, [r7, #3]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d108      	bne.n	800d856 <myInitUsartMode+0x76>
		 __HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f042 0220 	orr.w	r2, r2, #32
 800d852:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);

		 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
	}
}
 800d854:	e024      	b.n	800d8a0 <myInitUsartMode+0xc0>
	else if(usartMode==usartDMACircularMode){
 800d856:	78fb      	ldrb	r3, [r7, #3]
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d10a      	bne.n	800d872 <myInitUsartMode+0x92>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	6818      	ldr	r0, [r3, #0]
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d866:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d86a:	4619      	mov	r1, r3
 800d86c:	f7f8 fd8e 	bl	800638c <HAL_UART_Receive_DMA>
}
 800d870:	e016      	b.n	800d8a0 <myInitUsartMode+0xc0>
	else if(usartMode==usartDMAIdleMode){
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d113      	bne.n	800d8a0 <myInitUsartMode+0xc0>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6818      	ldr	r0, [r3, #0]
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800d882:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d886:	4619      	mov	r1, r3
 800d888:	f7f8 fd80 	bl	800638c <HAL_UART_Receive_DMA>
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f042 0210 	orr.w	r2, r2, #16
 800d89e:	601a      	str	r2, [r3, #0]
}
 800d8a0:	bf00      	nop
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <getUsartDevice>:

static UART_DEVICE *getUsartDevice(UART_HandleTypeDef *huart){
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a0c      	ldr	r2, [pc, #48]	; (800d8e4 <getUsartDevice+0x3c>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d101      	bne.n	800d8bc <getUsartDevice+0x14>
		return &Usart1Device;
 800d8b8:	4b0b      	ldr	r3, [pc, #44]	; (800d8e8 <getUsartDevice+0x40>)
 800d8ba:	e00c      	b.n	800d8d6 <getUsartDevice+0x2e>
	if(huart==&huart2)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a0b      	ldr	r2, [pc, #44]	; (800d8ec <getUsartDevice+0x44>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d101      	bne.n	800d8c8 <getUsartDevice+0x20>
		return &Usart2Device;
 800d8c4:	4b0a      	ldr	r3, [pc, #40]	; (800d8f0 <getUsartDevice+0x48>)
 800d8c6:	e006      	b.n	800d8d6 <getUsartDevice+0x2e>
	if(huart==&huart3)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	4a0a      	ldr	r2, [pc, #40]	; (800d8f4 <getUsartDevice+0x4c>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d101      	bne.n	800d8d4 <getUsartDevice+0x2c>
		return &Usart3Device;
 800d8d0:	4b09      	ldr	r3, [pc, #36]	; (800d8f8 <getUsartDevice+0x50>)
 800d8d2:	e000      	b.n	800d8d6 <getUsartDevice+0x2e>
	return &Usart3Device;
 800d8d4:	4b08      	ldr	r3, [pc, #32]	; (800d8f8 <getUsartDevice+0x50>)
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	370c      	adds	r7, #12
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	2000b0c4 	.word	0x2000b0c4
 800d8e8:	2000d7f8 	.word	0x2000d7f8
 800d8ec:	2000b144 	.word	0x2000b144
 800d8f0:	2000b404 	.word	0x2000b404
 800d8f4:	2000af24 	.word	0x2000af24
 800d8f8:	2000fbec 	.word	0x2000fbec

0800d8fc <_write>:
/************************************			*************************************/
/************************************	Transfer*************************************/
/************************************			************************************/
/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len){
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
	return my_write_DMA(&huart3,(uint8_t *)pSrc,len);
 800d908:	687a      	ldr	r2, [r7, #4]
 800d90a:	68b9      	ldr	r1, [r7, #8]
 800d90c:	4803      	ldr	r0, [pc, #12]	; (800d91c <_write+0x20>)
 800d90e:	f000 f807 	bl	800d920 <my_write_DMA>
 800d912:	4603      	mov	r3, r0
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	2000af24 	.word	0x2000af24

0800d920 <my_write_DMA>:
int my_write_DMA(UART_HandleTypeDef *huart, uint8_t *pSrc, int len)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b086      	sub	sp, #24
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	60b9      	str	r1, [r7, #8]
 800d92a:	607a      	str	r2, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800d92c:	68f8      	ldr	r0, [r7, #12]
 800d92e:	f7ff ffbb 	bl	800d8a8 <getUsartDevice>
 800d932:	6178      	str	r0, [r7, #20]
	uint8_t *pDes=uartDev->TxBuf[uartDev->producerTxBufNum];
 800d934:	697a      	ldr	r2, [r7, #20]
 800d936:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d93a:	4413      	add	r3, r2
 800d93c:	881b      	ldrh	r3, [r3, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d944:	fb03 f302 	mul.w	r3, r3, r2
 800d948:	697a      	ldr	r2, [r7, #20]
 800d94a:	4413      	add	r3, r2
 800d94c:	3305      	adds	r3, #5
 800d94e:	613b      	str	r3, [r7, #16]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	461a      	mov	r2, r3
 800d954:	68b9      	ldr	r1, [r7, #8]
 800d956:	6938      	ldr	r0, [r7, #16]
 800d958:	f003 f914 	bl	8010b84 <memcpy>
	*(pDes+len)='\0';
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	693a      	ldr	r2, [r7, #16]
 800d960:	4413      	add	r3, r2
 800d962:	2200      	movs	r2, #0
 800d964:	701a      	strb	r2, [r3, #0]
	uartDev->countTxBuf[uartDev->producerTxBufNum] = len;
 800d966:	697a      	ldr	r2, [r7, #20]
 800d968:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d96c:	4413      	add	r3, r2
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	b291      	uxth	r1, r2
 800d974:	697a      	ldr	r2, [r7, #20]
 800d976:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	4413      	add	r3, r2
 800d97e:	460a      	mov	r2, r1
 800d980:	809a      	strh	r2, [r3, #4]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	uartDev->bufferedTxNum++;
 800d982:	697a      	ldr	r2, [r7, #20]
 800d984:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d988:	4413      	add	r3, r2
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	3301      	adds	r3, #1
 800d98e:	b299      	uxth	r1, r3
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d996:	4413      	add	r3, r2
 800d998:	460a      	mov	r2, r1
 800d99a:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(uartDev->bufferedTxNum == 1){
 800d99c:	697a      	ldr	r2, [r7, #20]
 800d99e:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d9a2:	4413      	add	r3, r2
 800d9a4:	881b      	ldrh	r3, [r3, #0]
 800d9a6:	2b01      	cmp	r3, #1
 800d9a8:	d119      	bne.n	800d9de <my_write_DMA+0xbe>
		HAL_UART_Transmit_DMA(uartDev->huart,pDes,uartDev->countTxBuf[uartDev->producerTxBufNum]);
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	6818      	ldr	r0, [r3, #0]
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d9b4:	4413      	add	r3, r2
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	697a      	ldr	r2, [r7, #20]
 800d9ba:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	4413      	add	r3, r2
 800d9c2:	889b      	ldrh	r3, [r3, #4]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	6939      	ldr	r1, [r7, #16]
 800d9c8:	f7f8 fc64 	bl	8006294 <HAL_UART_Transmit_DMA>
		uartDev->TxStart = micros();
 800d9cc:	f7fe fb90 	bl	800c0f0 <micros>
 800d9d0:	4601      	mov	r1, r0
 800d9d2:	697a      	ldr	r2, [r7, #20]
 800d9d4:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800d9d8:	4413      	add	r3, r2
 800d9da:	6019      	str	r1, [r3, #0]
 800d9dc:	e00a      	b.n	800d9f4 <my_write_DMA+0xd4>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the uartDevs would somehow suddenly lost the configurations
		uartDev->bufferedTxNum=uartDev->bufferedTxNum-1+1;
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d9e4:	4413      	add	r3, r2
 800d9e6:	8819      	ldrh	r1, [r3, #0]
 800d9e8:	697a      	ldr	r2, [r7, #20]
 800d9ea:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800d9ee:	4413      	add	r3, r2
 800d9f0:	460a      	mov	r2, r1
 800d9f2:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	uartDev->producerTxBufNum++;
 800d9f4:	697a      	ldr	r2, [r7, #20]
 800d9f6:	f641 7348 	movw	r3, #8008	; 0x1f48
 800d9fa:	4413      	add	r3, r2
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	3301      	adds	r3, #1
 800da00:	b299      	uxth	r1, r3
 800da02:	697a      	ldr	r2, [r7, #20]
 800da04:	f641 7348 	movw	r3, #8008	; 0x1f48
 800da08:	4413      	add	r3, r2
 800da0a:	460a      	mov	r2, r1
 800da0c:	801a      	strh	r2, [r3, #0]
	uartDev->producerTxBufNum%=UART_TX_BUF_NUM;
 800da0e:	697a      	ldr	r2, [r7, #20]
 800da10:	f641 7348 	movw	r3, #8008	; 0x1f48
 800da14:	4413      	add	r3, r2
 800da16:	881a      	ldrh	r2, [r3, #0]
 800da18:	4b0a      	ldr	r3, [pc, #40]	; (800da44 <my_write_DMA+0x124>)
 800da1a:	fba3 1302 	umull	r1, r3, r3, r2
 800da1e:	08d9      	lsrs	r1, r3, #3
 800da20:	460b      	mov	r3, r1
 800da22:	009b      	lsls	r3, r3, #2
 800da24:	440b      	add	r3, r1
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	1ad3      	subs	r3, r2, r3
 800da2a:	b299      	uxth	r1, r3
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	f641 7348 	movw	r3, #8008	; 0x1f48
 800da32:	4413      	add	r3, r2
 800da34:	460a      	mov	r2, r1
 800da36:	801a      	strh	r2, [r3, #0]
//	while(uartDev->bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800da38:	687b      	ldr	r3, [r7, #4]
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	cccccccd 	.word	0xcccccccd

0800da48 <HAL_UART_TxCpltCallback>:
/************************************							*************************************/
/************************************Transfer Complete Callback*************************************/
/************************************							************************************/
/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback for all usart*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ff29 	bl	800d8a8 <getUsartDevice>
 800da56:	6178      	str	r0, [r7, #20]
	if(uartDev->usartmode==usartDMAIdleMode){
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	f040 808a 	bne.w	800db76 <HAL_UART_TxCpltCallback+0x12e>
		UART_DEVICE *uartDev=getUsartDevice(huart);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff ff20 	bl	800d8a8 <getUsartDevice>
 800da68:	6138      	str	r0, [r7, #16]
		 /*update information*/
		 uartDev->TxEnd = micros();
 800da6a:	f7fe fb41 	bl	800c0f0 <micros>
 800da6e:	4601      	mov	r1, r0
 800da70:	693a      	ldr	r2, [r7, #16]
 800da72:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800da76:	4413      	add	r3, r2
 800da78:	6019      	str	r1, [r3, #0]
		 uartDev->lastTxTime = uartDev->TxEnd - uartDev->TxStart;
 800da7a:	693a      	ldr	r2, [r7, #16]
 800da7c:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800da80:	4413      	add	r3, r2
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	6939      	ldr	r1, [r7, #16]
 800da86:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800da8a:	440b      	add	r3, r1
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	1ad2      	subs	r2, r2, r3
 800da90:	6939      	ldr	r1, [r7, #16]
 800da92:	f242 33ec 	movw	r3, #9196	; 0x23ec
 800da96:	440b      	add	r3, r1
 800da98:	601a      	str	r2, [r3, #0]
		 uartDev->lastTxCount = uartDev->countTxBuf[uartDev->consumerTxBufNum];
 800da9a:	693a      	ldr	r2, [r7, #16]
 800da9c:	f641 7346 	movw	r3, #8006	; 0x1f46
 800daa0:	4413      	add	r3, r2
 800daa2:	881b      	ldrh	r3, [r3, #0]
 800daa4:	693a      	ldr	r2, [r7, #16]
 800daa6:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800daaa:	005b      	lsls	r3, r3, #1
 800daac:	4413      	add	r3, r2
 800daae:	889b      	ldrh	r3, [r3, #4]
 800dab0:	4619      	mov	r1, r3
 800dab2:	693a      	ldr	r2, [r7, #16]
 800dab4:	f242 33f0 	movw	r3, #9200	; 0x23f0
 800dab8:	4413      	add	r3, r2
 800daba:	6019      	str	r1, [r3, #0]

		/*One consumption done. move consumer forward*/
		uartDev->consumerTxBufNum++;
 800dabc:	693a      	ldr	r2, [r7, #16]
 800dabe:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dac2:	4413      	add	r3, r2
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	3301      	adds	r3, #1
 800dac8:	b299      	uxth	r1, r3
 800daca:	693a      	ldr	r2, [r7, #16]
 800dacc:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dad0:	4413      	add	r3, r2
 800dad2:	460a      	mov	r2, r1
 800dad4:	801a      	strh	r2, [r3, #0]
		uartDev->consumerTxBufNum%=UART_TX_BUF_NUM;
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dadc:	4413      	add	r3, r2
 800dade:	881a      	ldrh	r2, [r3, #0]
 800dae0:	4b27      	ldr	r3, [pc, #156]	; (800db80 <HAL_UART_TxCpltCallback+0x138>)
 800dae2:	fba3 1302 	umull	r1, r3, r3, r2
 800dae6:	08d9      	lsrs	r1, r3, #3
 800dae8:	460b      	mov	r3, r1
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	440b      	add	r3, r1
 800daee:	005b      	lsls	r3, r3, #1
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	b299      	uxth	r1, r3
 800daf4:	693a      	ldr	r2, [r7, #16]
 800daf6:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dafa:	4413      	add	r3, r2
 800dafc:	460a      	mov	r2, r1
 800dafe:	801a      	strh	r2, [r3, #0]

		/*reduce one bufferedTxNum*/
		 uartDev->bufferedTxNum--;
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800db06:	4413      	add	r3, r2
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	3b01      	subs	r3, #1
 800db0c:	b299      	uxth	r1, r3
 800db0e:	693a      	ldr	r2, [r7, #16]
 800db10:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800db14:	4413      	add	r3, r2
 800db16:	460a      	mov	r2, r1
 800db18:	801a      	strh	r2, [r3, #0]

		/*If it is still positive, go on consume next*/
		if(uartDev->bufferedTxNum>0){
 800db1a:	693a      	ldr	r2, [r7, #16]
 800db1c:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800db20:	4413      	add	r3, r2
 800db22:	881b      	ldrh	r3, [r3, #0]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d026      	beq.n	800db76 <HAL_UART_TxCpltCallback+0x12e>
			uartDev->TxStart = micros();
 800db28:	f7fe fae2 	bl	800c0f0 <micros>
 800db2c:	4601      	mov	r1, r0
 800db2e:	693a      	ldr	r2, [r7, #16]
 800db30:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800db34:	4413      	add	r3, r2
 800db36:	6019      	str	r1, [r3, #0]
			uint8_t *px = &uartDev->TxBuf[uartDev->consumerTxBufNum][0];
 800db38:	693a      	ldr	r2, [r7, #16]
 800db3a:	f641 7346 	movw	r3, #8006	; 0x1f46
 800db3e:	4413      	add	r3, r2
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	461a      	mov	r2, r3
 800db44:	f44f 7348 	mov.w	r3, #800	; 0x320
 800db48:	fb03 f302 	mul.w	r3, r3, r2
 800db4c:	693a      	ldr	r2, [r7, #16]
 800db4e:	4413      	add	r3, r2
 800db50:	3305      	adds	r3, #5
 800db52:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit_DMA(uartDev->huart,px,uartDev->countTxBuf[uartDev->consumerTxBufNum]);
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	6818      	ldr	r0, [r3, #0]
 800db58:	693a      	ldr	r2, [r7, #16]
 800db5a:	f641 7346 	movw	r3, #8006	; 0x1f46
 800db5e:	4413      	add	r3, r2
 800db60:	881b      	ldrh	r3, [r3, #0]
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800db68:	005b      	lsls	r3, r3, #1
 800db6a:	4413      	add	r3, r2
 800db6c:	889b      	ldrh	r3, [r3, #4]
 800db6e:	461a      	mov	r2, r3
 800db70:	68f9      	ldr	r1, [r7, #12]
 800db72:	f7f8 fb8f 	bl	8006294 <HAL_UART_Transmit_DMA>
		}
	}

}
 800db76:	bf00      	nop
 800db78:	3718      	adds	r7, #24
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}
 800db7e:	bf00      	nop
 800db80:	cccccccd 	.word	0xcccccccd

0800db84 <myUsartDMAIdleIRQ>:
		myUsartDMAIRQ(&huart3) ;
		HAL_UART_IRQHandler(&huart3);
	}
*/
void myUsartDMAIdleIRQ(UART_HandleTypeDef *huart)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff fe8b 	bl	800d8a8 <getUsartDevice>
 800db92:	6178      	str	r0, [r7, #20]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	69db      	ldr	r3, [r3, #28]
 800db9a:	f003 0310 	and.w	r3, r3, #16
 800db9e:	2b10      	cmp	r3, #16
 800dba0:	bf0c      	ite	eq
 800dba2:	2301      	moveq	r3, #1
 800dba4:	2300      	movne	r3, #0
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	613b      	str	r3, [r7, #16]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f003 0310 	and.w	r3, r3, #16
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	bf14      	ite	ne
 800dbb8:	2301      	movne	r3, #1
 800dbba:	2300      	moveq	r3, #0
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	60fb      	str	r3, [r7, #12]
	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d00c      	beq.n	800dbe0 <myUsartDMAIdleIRQ+0x5c>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d009      	beq.n	800dbe0 <myUsartDMAIdleIRQ+0x5c>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2210      	movs	r2, #16
 800dbd2:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		uartDev->Received = 1;
 800dbd4:	697a      	ldr	r2, [r7, #20]
 800dbd6:	f242 33de 	movw	r3, #9182	; 0x23de
 800dbda:	4413      	add	r3, r2
 800dbdc:	2201      	movs	r2, #1
 800dbde:	801a      	strh	r2, [r3, #0]
		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/
	}
}
 800dbe0:	bf00      	nop
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <myUsartIntIRQ>:
	  myUsartIntIRQ(&huart2);
	  HAL_UART_IRQHandler(&huart2);
	}
*/
void myUsartIntIRQ(UART_HandleTypeDef *huart)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f7ff fe59 	bl	800d8a8 <getUsartDevice>
 800dbf6:	60f8      	str	r0, [r7, #12]
	if(uartDev->usartmode==usartIntMode){
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	791b      	ldrb	r3, [r3, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d153      	bne.n	800dca8 <myUsartIntIRQ+0xc0>
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7ff fe51 	bl	800d8a8 <getUsartDevice>
 800dc06:	60b8      	str	r0, [r7, #8]
 	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	69db      	ldr	r3, [r3, #28]
 800dc0e:	f003 0320 	and.w	r3, r3, #32
 800dc12:	2b20      	cmp	r3, #32
 800dc14:	d148      	bne.n	800dca8 <myUsartIntIRQ+0xc0>
	{
		*(uartDev->pRxBuf)=(uint8_t)(huart->Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800dc1c:	68ba      	ldr	r2, [r7, #8]
 800dc1e:	f242 1354 	movw	r3, #8532	; 0x2154
 800dc22:	4413      	add	r3, r2
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	b2ca      	uxtb	r2, r1
 800dc28:	701a      	strb	r2, [r3, #0]
		if(*(uartDev->pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800dc2a:	68ba      	ldr	r2, [r7, #8]
 800dc2c:	f242 1354 	movw	r3, #8532	; 0x2154
 800dc30:	4413      	add	r3, r2
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	2b0a      	cmp	r3, #10
 800dc38:	d12b      	bne.n	800dc92 <myUsartIntIRQ+0xaa>
		{
			if((uartDev->pRxBuf)!=(uartDev->RxBuf)) // if '0x0a' is not in the beginning
 800dc3a:	68ba      	ldr	r2, [r7, #8]
 800dc3c:	f242 1354 	movw	r3, #8532	; 0x2154
 800dc40:	4413      	add	r3, r2
 800dc42:	681a      	ldr	r2, [r3, #0]
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d02c      	beq.n	800dca8 <myUsartIntIRQ+0xc0>
			{
				if(*(uartDev->pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800dc4e:	68ba      	ldr	r2, [r7, #8]
 800dc50:	f242 1354 	movw	r3, #8532	; 0x2154
 800dc54:	4413      	add	r3, r2
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	2b0d      	cmp	r3, #13
 800dc5e:	d106      	bne.n	800dc6e <myUsartIntIRQ+0x86>
			    {
					uartDev->Received = 1;
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	f242 33de 	movw	r3, #9182	; 0x23de
 800dc66:	4413      	add	r3, r2
 800dc68:	2201      	movs	r2, #1
 800dc6a:	801a      	strh	r2, [r3, #0]
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else uartDev->pRxBuf++;
	}
	}
}
 800dc6c:	e01c      	b.n	800dca8 <myUsartIntIRQ+0xc0>
					memset(uartDev->RxBuf,0,UART_RX_BUF_SIZE);
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800dc74:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f002 ff8d 	bl	8010b9a <memset>
					uartDev->pRxBuf=uartDev->RxBuf;
 800dc80:	68bb      	ldr	r3, [r7, #8]
 800dc82:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800dc86:	68b9      	ldr	r1, [r7, #8]
 800dc88:	f242 1354 	movw	r3, #8532	; 0x2154
 800dc8c:	440b      	add	r3, r1
 800dc8e:	601a      	str	r2, [r3, #0]
}
 800dc90:	e00a      	b.n	800dca8 <myUsartIntIRQ+0xc0>
		else uartDev->pRxBuf++;
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	f242 1354 	movw	r3, #8532	; 0x2154
 800dc98:	4413      	add	r3, r2
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	68b9      	ldr	r1, [r7, #8]
 800dca0:	f242 1354 	movw	r3, #8532	; 0x2154
 800dca4:	440b      	add	r3, r1
 800dca6:	601a      	str	r2, [r3, #0]
}
 800dca8:	bf00      	nop
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <Usart_ReceivePolling>:

/*This function is put in the control loop in freeRTOS.c for polling*/
void Usart_ReceivePolling()
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	af00      	add	r7, sp, #0
	/********************************Usart 1 DMA reception is circular****************************/

	/********************************Usart 2 Int reception****************************/
	UsartRxIntReceivedPolling(&Usart2Device);
 800dcb4:	4803      	ldr	r0, [pc, #12]	; (800dcc4 <Usart_ReceivePolling+0x14>)
 800dcb6:	f000 f831 	bl	800dd1c <UsartRxIntReceivedPolling>

	/********************************Usart 3 DMA reception****************************/
	UsartRxDMAIdleReceivedPolling(&Usart3Device);
 800dcba:	4803      	ldr	r0, [pc, #12]	; (800dcc8 <Usart_ReceivePolling+0x18>)
 800dcbc:	f000 f857 	bl	800dd6e <UsartRxDMAIdleReceivedPolling>
}
 800dcc0:	bf00      	nop
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	2000b404 	.word	0x2000b404
 800dcc8:	2000fbec 	.word	0x2000fbec

0800dccc <_serialCallback>:


inline static void _serialCallback(UART_DEVICE *usartDevice){
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b084      	sub	sp, #16
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
	char *pSerialBuf=(usartDevice->usartmode==usartDMACircularMode)?((char *)usartDevice->RxLineBuf):((char *)usartDevice->RxBuf);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	791b      	ldrb	r3, [r3, #4]
 800dcd8:	2b02      	cmp	r3, #2
 800dcda:	d104      	bne.n	800dce6 <_serialCallback+0x1a>
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	f242 1358 	movw	r3, #8536	; 0x2158
 800dce2:	4413      	add	r3, r2
 800dce4:	e002      	b.n	800dcec <_serialCallback+0x20>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800dcec:	60fb      	str	r3, [r7, #12]

	if(usartDevice==&Usart2Device){
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	4a08      	ldr	r2, [pc, #32]	; (800dd14 <_serialCallback+0x48>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d103      	bne.n	800dcfe <_serialCallback+0x32>
		serial2Callback(pSerialBuf);
 800dcf6:	68f8      	ldr	r0, [r7, #12]
 800dcf8:	f7fe f9e4 	bl	800c0c4 <serial2Callback>
	}
	else if(usartDevice==&Usart3Device){
		serial3Callback(pSerialBuf);
	}
}
 800dcfc:	e006      	b.n	800dd0c <_serialCallback+0x40>
	else if(usartDevice==&Usart3Device){
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	4a05      	ldr	r2, [pc, #20]	; (800dd18 <_serialCallback+0x4c>)
 800dd02:	4293      	cmp	r3, r2
 800dd04:	d102      	bne.n	800dd0c <_serialCallback+0x40>
		serial3Callback(pSerialBuf);
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f002 fdac 	bl	8010864 <serial3Callback>
}
 800dd0c:	bf00      	nop
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	2000b404 	.word	0x2000b404
 800dd18:	2000fbec 	.word	0x2000fbec

0800dd1c <UsartRxIntReceivedPolling>:

static void UsartRxIntReceivedPolling(UART_DEVICE *UsartDevice){
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
	if (UsartDevice->Received == 1) {
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	f242 33de 	movw	r3, #9182	; 0x23de
 800dd2a:	4413      	add	r3, r2
 800dd2c:	881b      	ldrh	r3, [r3, #0]
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d119      	bne.n	800dd66 <UsartRxIntReceivedPolling+0x4a>
		_serialCallback(UsartDevice);
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7ff ffca 	bl	800dccc <_serialCallback>
		memset(UsartDevice->RxBuf,0,UART_RX_BUF_SIZE);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800dd3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800dd42:	2100      	movs	r1, #0
 800dd44:	4618      	mov	r0, r3
 800dd46:	f002 ff28 	bl	8010b9a <memset>
		UsartDevice->pRxBuf=UsartDevice->RxBuf;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800dd50:	6879      	ldr	r1, [r7, #4]
 800dd52:	f242 1354 	movw	r3, #8532	; 0x2154
 800dd56:	440b      	add	r3, r1
 800dd58:	601a      	str	r2, [r3, #0]
		UsartDevice->Received = 0;
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	f242 33de 	movw	r3, #9182	; 0x23de
 800dd60:	4413      	add	r3, r2
 800dd62:	2200      	movs	r2, #0
 800dd64:	801a      	strh	r2, [r3, #0]
	}
}
 800dd66:	bf00      	nop
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <UsartRxDMAIdleReceivedPolling>:

static void UsartRxDMAIdleReceivedPolling(UART_DEVICE *UsartDevice)
{
 800dd6e:	b580      	push	{r7, lr}
 800dd70:	b084      	sub	sp, #16
 800dd72:	af00      	add	r7, sp, #0
 800dd74:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	f242 33de 	movw	r3, #9182	; 0x23de
 800dd7c:	4413      	add	r3, r2
 800dd7e:	881b      	ldrh	r3, [r3, #0]
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	f040 80f1 	bne.w	800df68 <UsartRxDMAIdleReceivedPolling+0x1fa>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd8c:	2b22      	cmp	r3, #34	; 0x22
 800dd8e:	d14b      	bne.n	800de28 <UsartRxDMAIdleReceivedPolling+0xba>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	689b      	ldr	r3, [r3, #8]
 800dd98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9c:	2b40      	cmp	r3, #64	; 0x40
 800dd9e:	d143      	bne.n	800de28 <UsartRxDMAIdleReceivedPolling+0xba>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	689a      	ldr	r2, [r3, #8]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddb2:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d01c      	beq.n	800ddf8 <UsartRxDMAIdleReceivedPolling+0x8a>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	1ad3      	subs	r3, r2, r3
 800ddd4:	b299      	uxth	r1, r3
 800ddd6:	687a      	ldr	r2, [r7, #4]
 800ddd8:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800dddc:	4413      	add	r3, r2
 800ddde:	460a      	mov	r2, r1
 800dde0:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	f7f4 fa18 	bl	8002228 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800de0a:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	689a      	ldr	r2, [r3, #8]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	f022 0201 	bic.w	r2, r2, #1
 800de1e:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	2220      	movs	r2, #32
 800de26:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands buffer*/
			//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
			int len=UsartDevice->countRxLineBuf+UsartDevice->countRxBuf;
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	f242 3350 	movw	r3, #9040	; 0x2350
 800de2e:	4413      	add	r3, r2
 800de30:	881b      	ldrh	r3, [r3, #0]
 800de32:	4619      	mov	r1, r3
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800de3a:	4413      	add	r3, r2
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	440b      	add	r3, r1
 800de40:	60fb      	str	r3, [r7, #12]

			//If overflow Clear
			if(len>UART_RX_BUF_SIZE)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800de48:	dd19      	ble.n	800de7e <UsartRxDMAIdleReceivedPolling+0x110>
			{
				memset(UsartDevice->RxLineBuf,0,UART_RX_BUF_SIZE);
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	f242 1358 	movw	r3, #8536	; 0x2158
 800de50:	4413      	add	r3, r2
 800de52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800de56:	2100      	movs	r1, #0
 800de58:	4618      	mov	r0, r3
 800de5a:	f002 fe9e 	bl	8010b9a <memset>
				UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f242 1258 	movw	r2, #8536	; 0x2158
 800de64:	441a      	add	r2, r3
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	f242 334c 	movw	r3, #9036	; 0x234c
 800de6c:	440b      	add	r3, r1
 800de6e:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=0;
 800de70:	687a      	ldr	r2, [r7, #4]
 800de72:	f242 3350 	movw	r3, #9040	; 0x2350
 800de76:	4413      	add	r3, r2
 800de78:	2200      	movs	r2, #0
 800de7a:	801a      	strh	r2, [r3, #0]
 800de7c:	e056      	b.n	800df2c <UsartRxDMAIdleReceivedPolling+0x1be>
			}
			else{
				//buffer to line
				memcpy(&(UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf]),UsartDevice->RxBuf,UsartDevice->countRxBuf);
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	f242 3350 	movw	r3, #9040	; 0x2350
 800de84:	4413      	add	r3, r2
 800de86:	881b      	ldrh	r3, [r3, #0]
 800de88:	461a      	mov	r2, r3
 800de8a:	f242 1358 	movw	r3, #8536	; 0x2158
 800de8e:	4413      	add	r3, r2
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	18d0      	adds	r0, r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f503 51fb 	add.w	r1, r3, #8032	; 0x1f60
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800dea0:	4413      	add	r3, r2
 800dea2:	881b      	ldrh	r3, [r3, #0]
 800dea4:	461a      	mov	r2, r3
 800dea6:	f002 fe6d 	bl	8010b84 <memcpy>
				UsartDevice->pRxLineBuf+=UsartDevice->countRxBuf;
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	f242 334c 	movw	r3, #9036	; 0x234c
 800deb0:	4413      	add	r3, r2
 800deb2:	681a      	ldr	r2, [r3, #0]
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800deba:	440b      	add	r3, r1
 800debc:	881b      	ldrh	r3, [r3, #0]
 800debe:	441a      	add	r2, r3
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	f242 334c 	movw	r3, #9036	; 0x234c
 800dec6:	440b      	add	r3, r1
 800dec8:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=len;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	b299      	uxth	r1, r3
 800dece:	687a      	ldr	r2, [r7, #4]
 800ded0:	f242 3350 	movw	r3, #9040	; 0x2350
 800ded4:	4413      	add	r3, r2
 800ded6:	460a      	mov	r2, r1
 800ded8:	801a      	strh	r2, [r3, #0]

				//if end of line
				if (UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf-1]=='\n')
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	f242 3350 	movw	r3, #9040	; 0x2350
 800dee0:	4413      	add	r3, r2
 800dee2:	881b      	ldrh	r3, [r3, #0]
 800dee4:	3b01      	subs	r3, #1
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	441a      	add	r2, r3
 800deea:	f242 1358 	movw	r3, #8536	; 0x2158
 800deee:	4413      	add	r3, r2
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	2b0a      	cmp	r3, #10
 800def4:	d11a      	bne.n	800df2c <UsartRxDMAIdleReceivedPolling+0x1be>
				{
					_serialCallback(UsartDevice);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7ff fee8 	bl	800dccc <_serialCallback>
					memset(UsartDevice->RxLineBuf,0,len);
 800defc:	687a      	ldr	r2, [r7, #4]
 800defe:	f242 1358 	movw	r3, #8536	; 0x2158
 800df02:	4413      	add	r3, r2
 800df04:	68fa      	ldr	r2, [r7, #12]
 800df06:	2100      	movs	r1, #0
 800df08:	4618      	mov	r0, r3
 800df0a:	f002 fe46 	bl	8010b9a <memset>
					UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f242 1258 	movw	r2, #8536	; 0x2158
 800df14:	441a      	add	r2, r3
 800df16:	6879      	ldr	r1, [r7, #4]
 800df18:	f242 334c 	movw	r3, #9036	; 0x234c
 800df1c:	440b      	add	r3, r1
 800df1e:	601a      	str	r2, [r3, #0]
					UsartDevice->countRxLineBuf=0;
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	f242 3350 	movw	r3, #9040	; 0x2350
 800df26:	4413      	add	r3, r2
 800df28:	2200      	movs	r2, #0
 800df2a:	801a      	strh	r2, [r3, #0]
				}
			}

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800df2c:	687a      	ldr	r2, [r7, #4]
 800df2e:	f242 33de 	movw	r3, #9182	; 0x23de
 800df32:	4413      	add	r3, r2
 800df34:	2200      	movs	r2, #0
 800df36:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	f242 3358 	movw	r3, #9048	; 0x2358
 800df3e:	4413      	add	r3, r2
 800df40:	2264      	movs	r2, #100	; 0x64
 800df42:	2100      	movs	r1, #0
 800df44:	4618      	mov	r0, r3
 800df46:	f002 fe28 	bl	8010b9a <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800df50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800df54:	2100      	movs	r1, #0
 800df56:	4618      	mov	r0, r3
 800df58:	f002 fe1f 	bl	8010b9a <memset>
			UsartDevice->countRxBuf = 0;
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800df62:	4413      	add	r3, r2
 800df64:	2200      	movs	r2, #0
 800df66:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6818      	ldr	r0, [r3, #0]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800df72:	f240 12f3 	movw	r2, #499	; 0x1f3
 800df76:	4619      	mov	r1, r3
 800df78:	f7f8 fa08 	bl	800638c <HAL_UART_Receive_DMA>
}
 800df7c:	bf00      	nop
 800df7e:	3710      	adds	r7, #16
 800df80:	46bd      	mov	sp, r7
 800df82:	bd80      	pop	{r7, pc}

0800df84 <my_read_DMA_byte>:


int my_read_DMA_byte(UART_HandleTypeDef *huart){
 800df84:	b580      	push	{r7, lr}
 800df86:	b086      	sub	sp, #24
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
	int c=-1;
 800df8c:	f04f 33ff 	mov.w	r3, #4294967295
 800df90:	617b      	str	r3, [r7, #20]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff fc88 	bl	800d8a8 <getUsartDevice>
 800df98:	6138      	str	r0, [r7, #16]
	uint32_t RdmaInd=(UART_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (UART_RX_BUF_SIZE - 1);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800dfa6:	f240 13f3 	movw	r3, #499	; 0x1f3
 800dfaa:	4013      	ands	r3, r2
 800dfac:	60fb      	str	r3, [r7, #12]
    if(uartDev->RxInd != RdmaInd){
 800dfae:	693a      	ldr	r2, [r7, #16]
 800dfb0:	f242 3354 	movw	r3, #9044	; 0x2354
 800dfb4:	4413      	add	r3, r2
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d01d      	beq.n	800dffa <my_read_DMA_byte+0x76>
      c = uartDev->RxBuf[uartDev->RxInd++];
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	f242 3354 	movw	r3, #9044	; 0x2354
 800dfc4:	4413      	add	r3, r2
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	1c51      	adds	r1, r2, #1
 800dfca:	6938      	ldr	r0, [r7, #16]
 800dfcc:	f242 3354 	movw	r3, #9044	; 0x2354
 800dfd0:	4403      	add	r3, r0
 800dfd2:	6019      	str	r1, [r3, #0]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	617b      	str	r3, [r7, #20]
      uartDev->RxInd &= (UART_RX_BUF_SIZE - 1);
 800dfe0:	693a      	ldr	r2, [r7, #16]
 800dfe2:	f242 3354 	movw	r3, #9044	; 0x2354
 800dfe6:	4413      	add	r3, r2
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfee:	401a      	ands	r2, r3
 800dff0:	6939      	ldr	r1, [r7, #16]
 800dff2:	f242 3354 	movw	r3, #9044	; 0x2354
 800dff6:	440b      	add	r3, r1
 800dff8:	601a      	str	r2, [r3, #0]
    }
    return c;
 800dffa:	697b      	ldr	r3, [r7, #20]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3718      	adds	r7, #24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <printfBin_init>:
 */
static PRINTFBINSTRUCT printfBinStruct;
//input: array pointer, and data number
//function: add header and tail, send into buffer
static void printfBin_init()
{
 800e004:	b580      	push	{r7, lr}
 800e006:	af00      	add	r7, sp, #0
	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800e008:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e00c:	2100      	movs	r1, #0
 800e00e:	480a      	ldr	r0, [pc, #40]	; (800e038 <printfBin_init+0x34>)
 800e010:	f002 fdc3 	bl	8010b9a <memset>
	printfBinStruct.header[0]=0x5a;
 800e014:	4b08      	ldr	r3, [pc, #32]	; (800e038 <printfBin_init+0x34>)
 800e016:	225a      	movs	r2, #90	; 0x5a
 800e018:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800e01a:	4b07      	ldr	r3, [pc, #28]	; (800e038 <printfBin_init+0x34>)
 800e01c:	225a      	movs	r2, #90	; 0x5a
 800e01e:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800e020:	4b05      	ldr	r3, [pc, #20]	; (800e038 <printfBin_init+0x34>)
 800e022:	22a5      	movs	r2, #165	; 0xa5
 800e024:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800e026:	4b04      	ldr	r3, [pc, #16]	; (800e038 <printfBin_init+0x34>)
 800e028:	22a5      	movs	r2, #165	; 0xa5
 800e02a:	70da      	strb	r2, [r3, #3]
	printfBinStruct.pData=printfBinStruct.data;
 800e02c:	4b02      	ldr	r3, [pc, #8]	; (800e038 <printfBin_init+0x34>)
 800e02e:	4a03      	ldr	r2, [pc, #12]	; (800e03c <printfBin_init+0x38>)
 800e030:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
}
 800e034:	bf00      	nop
 800e036:	bd80      	pop	{r7, pc}
 800e038:	20000cbc 	.word	0x20000cbc
 800e03c:	20000cc0 	.word	0x20000cc0

0800e040 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2200      	movs	r2, #0
 800e04c:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2200      	movs	r2, #0
 800e058:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f04f 0200 	mov.w	r2, #0
 800e060:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f04f 0200 	mov.w	r2, #0
 800e068:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	4a0e      	ldr	r2, [pc, #56]	; (800e0a8 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
 800e06e:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f04f 0200 	mov.w	r2, #0
 800e076:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f240 6266 	movw	r2, #1638	; 0x666
 800e07e:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f643 1299 	movw	r2, #14745	; 0x3999
 800e086:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4a08      	ldr	r2, [pc, #32]	; (800e0ac <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800e08c:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a07      	ldr	r2, [pc, #28]	; (800e0b0 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800e092:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2210      	movs	r2, #16
 800e098:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4618      	mov	r0, r3
 800e09e:	370c      	adds	r7, #12
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a6:	4770      	bx	lr
 800e0a8:	48ca0080 	.word	0x48ca0080
 800e0ac:	2000a894 	.word	0x2000a894
 800e0b0:	40021000 	.word	0x40021000

0800e0b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e0b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e0ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e0b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e0ba:	e003      	b.n	800e0c4 <LoopCopyDataInit>

0800e0bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e0bc:	4b0c      	ldr	r3, [pc, #48]	; (800e0f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e0be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e0c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e0c2:	3104      	adds	r1, #4

0800e0c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e0c4:	480b      	ldr	r0, [pc, #44]	; (800e0f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e0c6:	4b0c      	ldr	r3, [pc, #48]	; (800e0f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e0c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e0ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e0cc:	d3f6      	bcc.n	800e0bc <CopyDataInit>
  ldr  r2, =_sbss
 800e0ce:	4a0b      	ldr	r2, [pc, #44]	; (800e0fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e0d0:	e002      	b.n	800e0d8 <LoopFillZerobss>

0800e0d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e0d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e0d4:	f842 3b04 	str.w	r3, [r2], #4

0800e0d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e0d8:	4b09      	ldr	r3, [pc, #36]	; (800e100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e0da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e0dc:	d3f9      	bcc.n	800e0d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e0de:	f7fb fc19 	bl	8009914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e0e2:	f002 fd23 	bl	8010b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e0e6:	f7fa fda3 	bl	8008c30 <main>
  bx  lr    
 800e0ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e0ec:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800e0f0:	080157f0 	.word	0x080157f0
  ldr  r0, =_sdata
 800e0f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e0f8:	2000054c 	.word	0x2000054c
  ldr  r2, =_sbss
 800e0fc:	2000054c 	.word	0x2000054c
  ldr  r3, = _ebss
 800e100:	20011fe4 	.word	0x20011fe4

0800e104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e104:	e7fe      	b.n	800e104 <ADC_IRQHandler>
	...

0800e108 <canConfig>:
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
void canConfig(){
 800e108:	b5b0      	push	{r4, r5, r7, lr}
 800e10a:	b08c      	sub	sp, #48	; 0x30
 800e10c:	af00      	add	r7, sp, #0
	canbus.CanHandle=hcan1;
 800e10e:	4a39      	ldr	r2, [pc, #228]	; (800e1f4 <canConfig+0xec>)
 800e110:	4b39      	ldr	r3, [pc, #228]	; (800e1f8 <canConfig+0xf0>)
 800e112:	4614      	mov	r4, r2
 800e114:	461d      	mov	r5, r3
 800e116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e11a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e11c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e11e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e122:	e884 0003 	stmia.w	r4, {r0, r1}
	CAN_FilterTypeDef  sFilterConfig;
	/*##-2- Configure the CAN Filter ###########################################*/
	/*For single CAN instance(14 dedicated filter banks)*/
	for(int i=0;i<14;i++){
 800e126:	2300      	movs	r3, #0
 800e128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12c:	2b0d      	cmp	r3, #13
 800e12e:	dc41      	bgt.n	800e1b4 <canConfig+0xac>
		sFilterConfig.FilterBank = i;
 800e130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e132:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800e134:	2301      	movs	r3, #1
 800e136:	61fb      	str	r3, [r7, #28]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800e138:	2300      	movs	r3, #0
 800e13a:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterIdHigh = (uint16_t)((uint16_t)(4*i))<<5;
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	b29b      	uxth	r3, r3
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	b29b      	uxth	r3, r3
 800e144:	015b      	lsls	r3, r3, #5
 800e146:	607b      	str	r3, [r7, #4]
		sFilterConfig.FilterIdLow = (uint16_t)((uint16_t)(4*i+1))<<5;
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	b29b      	uxth	r3, r3
 800e150:	3301      	adds	r3, #1
 800e152:	b29b      	uxth	r3, r3
 800e154:	015b      	lsls	r3, r3, #5
 800e156:	60bb      	str	r3, [r7, #8]
		sFilterConfig.FilterMaskIdHigh = (uint16_t)((uint16_t)(4*i+2))<<5;
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	b29b      	uxth	r3, r3
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	b29b      	uxth	r3, r3
 800e160:	3302      	adds	r3, #2
 800e162:	b29b      	uxth	r3, r3
 800e164:	015b      	lsls	r3, r3, #5
 800e166:	60fb      	str	r3, [r7, #12]
		sFilterConfig.FilterMaskIdLow = (uint16_t)((uint16_t)(4*i+3))<<5;
 800e168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	b29b      	uxth	r3, r3
 800e170:	3303      	adds	r3, #3
 800e172:	b29b      	uxth	r3, r3
 800e174:	015b      	lsls	r3, r3, #5
 800e176:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterFIFOAssignment = i%2;//CAN_RX_FIFO0=0; CAN_RX_FIFO1=1
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	f003 0301 	and.w	r3, r3, #1
 800e180:	bfb8      	it	lt
 800e182:	425b      	neglt	r3, r3
 800e184:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterActivation = ENABLE;
 800e186:	2301      	movs	r3, #1
 800e188:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.SlaveStartFilterBank = 14;
 800e18a:	230e      	movs	r3, #14
 800e18c:	62bb      	str	r3, [r7, #40]	; 0x28
//		sFilterConfig.FilterMaskIdLow = 0x0000;
//		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
//		sFilterConfig.FilterActivation = ENABLE;
//		sFilterConfig.SlaveStartFilterBank = 14;

		if (HAL_CAN_ConfigFilter(&canbus.CanHandle, &sFilterConfig) != HAL_OK)
 800e18e:	1d3b      	adds	r3, r7, #4
 800e190:	4619      	mov	r1, r3
 800e192:	4818      	ldr	r0, [pc, #96]	; (800e1f4 <canConfig+0xec>)
 800e194:	f7f3 fae2 	bl	800175c <HAL_CAN_ConfigFilter>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bf14      	ite	ne
 800e19e:	2301      	movne	r3, #1
 800e1a0:	2300      	moveq	r3, #0
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <canConfig+0xa4>
		{
			/* Filter configuration Error */
			Error_Handler();
 800e1a8:	f7fa fe90 	bl	8008ecc <Error_Handler>
	for(int i=0;i<14;i++){
 800e1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1b2:	e7ba      	b.n	800e12a <canConfig+0x22>
		}
	}


	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&canbus.CanHandle) != HAL_OK)
 800e1b4:	480f      	ldr	r0, [pc, #60]	; (800e1f4 <canConfig+0xec>)
 800e1b6:	f7f3 fbbd 	bl	8001934 <HAL_CAN_Start>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	bf14      	ite	ne
 800e1c0:	2301      	movne	r3, #1
 800e1c2:	2300      	moveq	r3, #0
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <canConfig+0xc6>
	{
		/* Start Error */
		Error_Handler();
 800e1ca:	f7fa fe7f 	bl	8008ecc <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&canbus.CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 800e1ce:	2112      	movs	r1, #18
 800e1d0:	4808      	ldr	r0, [pc, #32]	; (800e1f4 <canConfig+0xec>)
 800e1d2:	f7f3 fbf3 	bl	80019bc <HAL_CAN_ActivateNotification>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bf14      	ite	ne
 800e1dc:	2301      	movne	r3, #1
 800e1de:	2300      	moveq	r3, #0
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d001      	beq.n	800e1ea <canConfig+0xe2>
	{
		/* Notification Error */
		Error_Handler();
 800e1e6:	f7fa fe71 	bl	8008ecc <Error_Handler>
	}


}
 800e1ea:	bf00      	nop
 800e1ec:	3730      	adds	r7, #48	; 0x30
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20000fe4 	.word	0x20000fe4
 800e1f8:	200026b0 	.word	0x200026b0

0800e1fc <HAL_CAN_RxFifo0MsgPendingCallback>:



/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* Get RX message */

  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e204:	4b0a      	ldr	r3, [pc, #40]	; (800e230 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800e206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e208:	4a0a      	ldr	r2, [pc, #40]	; (800e234 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800e20a:	2100      	movs	r1, #0
 800e20c:	4808      	ldr	r0, [pc, #32]	; (800e230 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800e20e:	f000 f831 	bl	800e274 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800e212:	4603      	mov	r3, r0
 800e214:	2b00      	cmp	r3, #0
 800e216:	bf14      	ite	ne
 800e218:	2301      	movne	r3, #1
 800e21a:	2300      	moveq	r3, #0
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800e222:	f7fa fe53 	bl	8008ecc <Error_Handler>
  }
  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
  //printf("ID[%d]: %x %x %x %x %x %x %x %x\r\n", canbus.RxHeader.StdId, canbus.RxData[0], canbus.RxData[1], canbus.RxData[2], canbus.RxData[3], canbus.RxData[4], canbus.RxData[5], canbus.RxData[6], canbus.RxData[7]);
  //printf("FIFO0: ID[%d]\r\n", canbus.RxHeader.StdId, canbus.RxData);
}
 800e226:	bf00      	nop
 800e228:	3708      	adds	r7, #8
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}
 800e22e:	bf00      	nop
 800e230:	20000fe4 	.word	0x20000fe4
 800e234:	20001024 	.word	0x20001024

0800e238 <HAL_CAN_RxFifo1MsgPendingCallback>:

/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* Get RX message */


  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO1, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e240:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800e242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e244:	4a0a      	ldr	r2, [pc, #40]	; (800e270 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800e246:	2101      	movs	r1, #1
 800e248:	4808      	ldr	r0, [pc, #32]	; (800e26c <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800e24a:	f000 f813 	bl	800e274 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	bf14      	ite	ne
 800e254:	2301      	movne	r3, #1
 800e256:	2300      	moveq	r3, #0
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800e25e:	f7fa fe35 	bl	8008ecc <Error_Handler>
  }
  //printf("FIFO1: ID[%d]\r\n", canbus.RxHeader.StdId);

  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
}
 800e262:	bf00      	nop
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	20000fe4 	.word	0x20000fe4
 800e270:	20001024 	.word	0x20001024

0800e274 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>:

static HAL_StatusTypeDef my_HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800e274:	b580      	push	{r7, lr}
 800e276:	b088      	sub	sp, #32
 800e278:	af00      	add	r7, sp, #0
 800e27a:	60f8      	str	r0, [r7, #12]
 800e27c:	60b9      	str	r1, [r7, #8]
 800e27e:	607a      	str	r2, [r7, #4]
 800e280:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e288:	77fb      	strb	r3, [r7, #31]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800e28a:	7ffb      	ldrb	r3, [r7, #31]
 800e28c:	2b01      	cmp	r3, #1
 800e28e:	d003      	beq.n	800e298 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x24>
 800e290:	7ffb      	ldrb	r3, [r7, #31]
 800e292:	2b02      	cmp	r3, #2
 800e294:	f040 814a 	bne.w	800e52c <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b8>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d113      	bne.n	800e2c6 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68db      	ldr	r3, [r3, #12]
 800e2a4:	f003 0303 	and.w	r3, r3, #3
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	bf0c      	ite	eq
 800e2ac:	2301      	moveq	r3, #1
 800e2ae:	2300      	movne	r3, #0
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d01b      	beq.n	800e2ee <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e139      	b.n	800e53a <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	691b      	ldr	r3, [r3, #16]
 800e2cc:	f003 0303 	and.w	r3, r3, #3
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	bf0c      	ite	eq
 800e2d4:	2301      	moveq	r3, #1
 800e2d6:	2300      	movne	r3, #0
 800e2d8:	b2db      	uxtb	r3, r3
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d007      	beq.n	800e2ee <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	e125      	b.n	800e53a <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	331b      	adds	r3, #27
 800e2f6:	011b      	lsls	r3, r3, #4
 800e2f8:	4413      	add	r3, r2
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f003 0204 	and.w	r2, r3, #4
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d10c      	bne.n	800e326 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xb2>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681a      	ldr	r2, [r3, #0]
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	331b      	adds	r3, #27
 800e314:	011b      	lsls	r3, r3, #4
 800e316:	4413      	add	r3, r2
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	0d5b      	lsrs	r3, r3, #21
 800e31c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	e00b      	b.n	800e33e <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xca>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	331b      	adds	r3, #27
 800e32e:	011b      	lsls	r3, r3, #4
 800e330:	4413      	add	r3, r2
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	08db      	lsrs	r3, r3, #3
 800e336:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681a      	ldr	r2, [r3, #0]
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	331b      	adds	r3, #27
 800e346:	011b      	lsls	r3, r3, #4
 800e348:	4413      	add	r3, r2
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f003 0202 	and.w	r2, r3, #2
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	331b      	adds	r3, #27
 800e35c:	011b      	lsls	r3, r3, #4
 800e35e:	4413      	add	r3, r2
 800e360:	3304      	adds	r3, #4
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f003 020f 	and.w	r2, r3, #15
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	331b      	adds	r3, #27
 800e374:	011b      	lsls	r3, r3, #4
 800e376:	4413      	add	r3, r2
 800e378:	3304      	adds	r3, #4
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	0a1b      	lsrs	r3, r3, #8
 800e37e:	b2da      	uxtb	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681a      	ldr	r2, [r3, #0]
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	331b      	adds	r3, #27
 800e38c:	011b      	lsls	r3, r3, #4
 800e38e:	4413      	add	r3, r2
 800e390:	3304      	adds	r3, #4
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	0c1b      	lsrs	r3, r3, #16
 800e396:	b29a      	uxth	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	615a      	str	r2, [r3, #20]



    /**********************  added  ******************************************/
	int i = pHeader->StdId/6;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a68      	ldr	r2, [pc, #416]	; (800e544 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800e3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3a6:	089b      	lsrs	r3, r3, #2
 800e3a8:	61bb      	str	r3, [r7, #24]
    int j = pHeader->StdId%6;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6819      	ldr	r1, [r3, #0]
 800e3ae:	4b65      	ldr	r3, [pc, #404]	; (800e544 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d0>)
 800e3b0:	fba3 2301 	umull	r2, r3, r3, r1
 800e3b4:	089a      	lsrs	r2, r3, #2
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	005b      	lsls	r3, r3, #1
 800e3ba:	4413      	add	r3, r2
 800e3bc:	005b      	lsls	r3, r3, #1
 800e3be:	1aca      	subs	r2, r1, r3
 800e3c0:	617a      	str	r2, [r7, #20]
    softArm.actuatorOnline[j][j]=10;
 800e3c2:	4961      	ldr	r1, [pc, #388]	; (800e548 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	005b      	lsls	r3, r3, #1
 800e3ca:	4413      	add	r3, r2
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	18ca      	adds	r2, r1, r3
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	f603 732a 	addw	r3, r3, #3882	; 0xf2a
 800e3d8:	220a      	movs	r2, #10
 800e3da:	701a      	strb	r2, [r3, #0]
    aData=(uint8_t *)(&softArm.sensorDataBuffer[i][j]);
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	4613      	mov	r3, r2
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	4413      	add	r3, r2
 800e3e4:	005b      	lsls	r3, r3, #1
 800e3e6:	697a      	ldr	r2, [r7, #20]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	33b8      	adds	r3, #184	; 0xb8
 800e3ec:	00db      	lsls	r3, r3, #3
 800e3ee:	4a56      	ldr	r2, [pc, #344]	; (800e548 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e3f0:	4413      	add	r3, r2
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	603b      	str	r3, [r7, #0]
    /****************************************************************/

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	68bb      	ldr	r3, [r7, #8]
 800e3fc:	011b      	lsls	r3, r3, #4
 800e3fe:	4413      	add	r3, r2
 800e400:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	b2da      	uxtb	r2, r3
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	011b      	lsls	r3, r3, #4
 800e414:	4413      	add	r3, r2
 800e416:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	0a1a      	lsrs	r2, r3, #8
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	3301      	adds	r3, #1
 800e422:	b2d2      	uxtb	r2, r2
 800e424:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	011b      	lsls	r3, r3, #4
 800e42e:	4413      	add	r3, r2
 800e430:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	0c1a      	lsrs	r2, r3, #16
 800e438:	683b      	ldr	r3, [r7, #0]
 800e43a:	3302      	adds	r3, #2
 800e43c:	b2d2      	uxtb	r2, r2
 800e43e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681a      	ldr	r2, [r3, #0]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	011b      	lsls	r3, r3, #4
 800e448:	4413      	add	r3, r2
 800e44a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	0e1a      	lsrs	r2, r3, #24
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	3303      	adds	r3, #3
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	011b      	lsls	r3, r3, #4
 800e462:	4413      	add	r3, r2
 800e464:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e468:	681a      	ldr	r2, [r3, #0]
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	3304      	adds	r3, #4
 800e46e:	b2d2      	uxtb	r2, r2
 800e470:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681a      	ldr	r2, [r3, #0]
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	011b      	lsls	r3, r3, #4
 800e47a:	4413      	add	r3, r2
 800e47c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	0a1a      	lsrs	r2, r3, #8
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	3305      	adds	r3, #5
 800e488:	b2d2      	uxtb	r2, r2
 800e48a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681a      	ldr	r2, [r3, #0]
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	011b      	lsls	r3, r3, #4
 800e494:	4413      	add	r3, r2
 800e496:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	0c1a      	lsrs	r2, r3, #16
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	3306      	adds	r3, #6
 800e4a2:	b2d2      	uxtb	r2, r2
 800e4a4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	011b      	lsls	r3, r3, #4
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	0e1a      	lsrs	r2, r3, #24
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	3307      	adds	r3, #7
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	701a      	strb	r2, [r3, #0]


    /**********************  Added Docode the sensor Data to SPI buffer*******************************/
    decodeSensorData(&softArm.sensorDataBuffer[i][j],&(softArm.sensorData.data[i][j]));
 800e4c0:	69ba      	ldr	r2, [r7, #24]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	005b      	lsls	r3, r3, #1
 800e4c6:	4413      	add	r3, r2
 800e4c8:	005b      	lsls	r3, r3, #1
 800e4ca:	697a      	ldr	r2, [r7, #20]
 800e4cc:	4413      	add	r3, r2
 800e4ce:	33b8      	adds	r3, #184	; 0xb8
 800e4d0:	00db      	lsls	r3, r3, #3
 800e4d2:	4a1d      	ldr	r2, [pc, #116]	; (800e548 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e4d4:	4413      	add	r3, r2
 800e4d6:	1d18      	adds	r0, r3, #4
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	461a      	mov	r2, r3
 800e4dc:	0052      	lsls	r2, r2, #1
 800e4de:	441a      	add	r2, r3
 800e4e0:	0093      	lsls	r3, r2, #2
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	69b9      	ldr	r1, [r7, #24]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	00db      	lsls	r3, r3, #3
 800e4ea:	440b      	add	r3, r1
 800e4ec:	00db      	lsls	r3, r3, #3
 800e4ee:	4413      	add	r3, r2
 800e4f0:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800e4f4:	4a14      	ldr	r2, [pc, #80]	; (800e548 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2d4>)
 800e4f6:	4413      	add	r3, r2
 800e4f8:	3306      	adds	r3, #6
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	f002 f804 	bl	8010508 <decodeSensorData>
    /*******************************************************************/


    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d108      	bne.n	800e518 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2a4>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	68da      	ldr	r2, [r3, #12]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f042 0220 	orr.w	r2, r2, #32
 800e514:	60da      	str	r2, [r3, #12]
 800e516:	e007      	b.n	800e528 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2b4>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	691a      	ldr	r2, [r3, #16]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f042 0220 	orr.w	r2, r2, #32
 800e526:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    //printf("sensor[%d]: %hu\r\n", pHeader->StdId, softArm.sensorData[i][j].pressure);

    return HAL_OK;
 800e528:	2300      	movs	r3, #0
 800e52a:	e006      	b.n	800e53a <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2c6>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e530:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800e538:	2301      	movs	r3, #1
  }
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3720      	adds	r7, #32
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	aaaaaaab 	.word	0xaaaaaaab
 800e548:	200015b4 	.word	0x200015b4

0800e54c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	4a04      	ldr	r2, [pc, #16]	; (800e568 <_ZN3ros3MsgC1Ev+0x1c>)
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4618      	mov	r0, r3
 800e55e:	370c      	adds	r7, #12
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr
 800e568:	0801549c 	.word	0x0801549c

0800e56c <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b082      	sub	sp, #8
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
      data(0)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4618      	mov	r0, r3
 800e578:	f7ff ffe8 	bl	800e54c <_ZN3ros3MsgC1Ev>
 800e57c:	4a05      	ldr	r2, [pc, #20]	; (800e594 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	601a      	str	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2200      	movs	r2, #0
 800e586:	809a      	strh	r2, [r3, #4]
    {
    }
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	4618      	mov	r0, r3
 800e58c:	3708      	adds	r7, #8
 800e58e:	46bd      	mov	sp, r7
 800e590:	bd80      	pop	{r7, pc}
 800e592:	bf00      	nop
 800e594:	08015484 	.word	0x08015484

0800e598 <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800e598:	b480      	push	{r7}
 800e59a:	b085      	sub	sp, #20
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	8899      	ldrh	r1, [r3, #4]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	683a      	ldr	r2, [r7, #0]
 800e5ae:	4413      	add	r3, r2
 800e5b0:	b2ca      	uxtb	r2, r1
 800e5b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	889b      	ldrh	r3, [r3, #4]
 800e5b8:	0a1b      	lsrs	r3, r3, #8
 800e5ba:	b299      	uxth	r1, r3
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	3301      	adds	r3, #1
 800e5c0:	683a      	ldr	r2, [r7, #0]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	b2ca      	uxtb	r2, r1
 800e5c6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3302      	adds	r3, #2
 800e5cc:	60fb      	str	r3, [r7, #12]
      return offset;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
    }
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3714      	adds	r7, #20
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	889b      	ldrh	r3, [r3, #4]
 800e5fc:	b21a      	sxth	r2, r3
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	3301      	adds	r3, #1
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	440b      	add	r3, r1
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	021b      	lsls	r3, r3, #8
 800e60a:	b21b      	sxth	r3, r3
 800e60c:	4313      	orrs	r3, r2
 800e60e:	b21b      	sxth	r3, r3
 800e610:	b29a      	uxth	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3302      	adds	r3, #2
 800e61a:	60fb      	str	r3, [r7, #12]
     return offset;
 800e61c:	68fb      	ldr	r3, [r7, #12]
    }
 800e61e:	4618      	mov	r0, r3
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr
	...

0800e62c <_ZN8std_msgs6UInt167getTypeEv>:

    const char * getType(){ return "std_msgs/UInt16"; };
 800e62c:	b480      	push	{r7}
 800e62e:	b083      	sub	sp, #12
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	4b03      	ldr	r3, [pc, #12]	; (800e644 <_ZN8std_msgs6UInt167getTypeEv+0x18>)
 800e636:	4618      	mov	r0, r3
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop
 800e644:	0801513c 	.word	0x0801513c

0800e648 <_ZN8std_msgs6UInt166getMD5Ev>:
    const char * getMD5(){ return "1df79edf208b629fe6b81923a544552d"; };
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	4b03      	ldr	r3, [pc, #12]	; (800e660 <_ZN8std_msgs6UInt166getMD5Ev+0x18>)
 800e652:	4618      	mov	r0, r3
 800e654:	370c      	adds	r7, #12
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr
 800e65e:	bf00      	nop
 800e660:	0801514c 	.word	0x0801514c

0800e664 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7ff ff6c 	bl	800e54c <_ZN3ros3MsgC1Ev>
 800e674:	4a06      	ldr	r2, [pc, #24]	; (800e690 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	601a      	str	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2200      	movs	r2, #0
 800e67e:	711a      	strb	r2, [r3, #4]
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4a04      	ldr	r2, [pc, #16]	; (800e694 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800e684:	609a      	str	r2, [r3, #8]
    {
    }
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	4618      	mov	r0, r3
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	0801546c 	.word	0x0801546c
 800e694:	08015170 	.word	0x08015170

0800e698 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800e698:	b580      	push	{r7, lr}
 800e69a:	b084      	sub	sp, #16
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	683a      	ldr	r2, [r7, #0]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	687a      	ldr	r2, [r7, #4]
 800e6ae:	7912      	ldrb	r2, [r2, #4]
 800e6b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3301      	adds	r3, #1
 800e6b6:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7f1 fdbf 	bl	8000240 <strlen>
 800e6c2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	4413      	add	r3, r2
 800e6ca:	68b9      	ldr	r1, [r7, #8]
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f000 febd 	bl	800f44c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3304      	adds	r3, #4
 800e6d6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	18d0      	adds	r0, r2, r3
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	689b      	ldr	r3, [r3, #8]
 800e6e2:	68ba      	ldr	r2, [r7, #8]
 800e6e4:	4619      	mov	r1, r3
 800e6e6:	f002 fa4d 	bl	8010b84 <memcpy>
      offset += length_msg;
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	4413      	add	r3, r2
 800e6f0:	60fb      	str	r3, [r7, #12]
      return offset;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
    }
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	4413      	add	r3, r2
 800e710:	781a      	ldrb	r2, [r3, #0]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	3301      	adds	r3, #1
 800e71a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	441a      	add	r2, r3
 800e722:	f107 030c 	add.w	r3, r7, #12
 800e726:	4611      	mov	r1, r2
 800e728:	4618      	mov	r0, r3
 800e72a:	f000 fead 	bl	800f488 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	3304      	adds	r3, #4
 800e732:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	617b      	str	r3, [r7, #20]
 800e738:	693a      	ldr	r2, [r7, #16]
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	4413      	add	r3, r2
 800e73e:	697a      	ldr	r2, [r7, #20]
 800e740:	429a      	cmp	r2, r3
 800e742:	d20c      	bcs.n	800e75e <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800e744:	683a      	ldr	r2, [r7, #0]
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	441a      	add	r2, r3
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	3b01      	subs	r3, #1
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	440b      	add	r3, r1
 800e752:	7812      	ldrb	r2, [r2, #0]
 800e754:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	3301      	adds	r3, #1
 800e75a:	617b      	str	r3, [r7, #20]
 800e75c:	e7ec      	b.n	800e738 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800e75e:	693a      	ldr	r2, [r7, #16]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	4413      	add	r3, r2
 800e764:	3b01      	subs	r3, #1
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	4413      	add	r3, r2
 800e76a:	2200      	movs	r2, #0
 800e76c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	3b01      	subs	r3, #1
 800e772:	683a      	ldr	r2, [r7, #0]
 800e774:	441a      	add	r2, r3
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800e77a:	693a      	ldr	r2, [r7, #16]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	4413      	add	r3, r2
 800e780:	613b      	str	r3, [r7, #16]
     return offset;
 800e782:	693b      	ldr	r3, [r7, #16]
    }
 800e784:	4618      	mov	r0, r3
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
 800e794:	4b03      	ldr	r3, [pc, #12]	; (800e7a4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800e796:	4618      	mov	r0, r3
 800e798:	370c      	adds	r7, #12
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	08015174 	.word	0x08015174

0800e7a8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
 800e7b0:	4b03      	ldr	r3, [pc, #12]	; (800e7c0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr
 800e7be:	bf00      	nop
 800e7c0:	08015188 	.word	0x08015188

0800e7c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f7ff febc 	bl	800e54c <_ZN3ros3MsgC1Ev>
 800e7d4:	4a0c      	ldr	r2, [pc, #48]	; (800e808 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	601a      	str	r2, [r3, #0]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	605a      	str	r2, [r3, #4]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	60da      	str	r2, [r3, #12]
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	611a      	str	r2, [r3, #16]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	619a      	str	r2, [r3, #24]
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	61da      	str	r2, [r3, #28]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4618      	mov	r0, r3
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}
 800e808:	08015454 	.word	0x08015454

0800e80c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b08a      	sub	sp, #40	; 0x28
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
 800e814:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800e816:	2300      	movs	r3, #0
 800e818:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	6859      	ldr	r1, [r3, #4]
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	683a      	ldr	r2, [r7, #0]
 800e822:	4413      	add	r3, r2
 800e824:	b2ca      	uxtb	r2, r1
 800e826:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	685b      	ldr	r3, [r3, #4]
 800e82c:	0a19      	lsrs	r1, r3, #8
 800e82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e830:	3301      	adds	r3, #1
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	4413      	add	r3, r2
 800e836:	b2ca      	uxtb	r2, r1
 800e838:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	0c19      	lsrs	r1, r3, #16
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	3302      	adds	r3, #2
 800e844:	683a      	ldr	r2, [r7, #0]
 800e846:	4413      	add	r3, r2
 800e848:	b2ca      	uxtb	r2, r1
 800e84a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	685b      	ldr	r3, [r3, #4]
 800e850:	0e19      	lsrs	r1, r3, #24
 800e852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e854:	3303      	adds	r3, #3
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	4413      	add	r3, r2
 800e85a:	b2ca      	uxtb	r2, r1
 800e85c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e860:	3304      	adds	r3, #4
 800e862:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800e864:	2300      	movs	r3, #0
 800e866:	623b      	str	r3, [r7, #32]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	685b      	ldr	r3, [r3, #4]
 800e86c:	6a3a      	ldr	r2, [r7, #32]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d22b      	bcs.n	800e8ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	68da      	ldr	r2, [r3, #12]
 800e876:	6a3b      	ldr	r3, [r7, #32]
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800e880:	6939      	ldr	r1, [r7, #16]
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	683a      	ldr	r2, [r7, #0]
 800e886:	4413      	add	r3, r2
 800e888:	b2ca      	uxtb	r2, r1
 800e88a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800e88c:	693b      	ldr	r3, [r7, #16]
 800e88e:	0a19      	lsrs	r1, r3, #8
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	3301      	adds	r3, #1
 800e894:	683a      	ldr	r2, [r7, #0]
 800e896:	4413      	add	r3, r2
 800e898:	b2ca      	uxtb	r2, r1
 800e89a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	0c19      	lsrs	r1, r3, #16
 800e8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a2:	3302      	adds	r3, #2
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	4413      	add	r3, r2
 800e8a8:	b2ca      	uxtb	r2, r1
 800e8aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	0e19      	lsrs	r1, r3, #24
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	3303      	adds	r3, #3
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	4413      	add	r3, r2
 800e8b8:	b2ca      	uxtb	r2, r1
 800e8ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800e8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8be:	3304      	adds	r3, #4
 800e8c0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	623b      	str	r3, [r7, #32]
 800e8c8:	e7ce      	b.n	800e868 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6919      	ldr	r1, [r3, #16]
 800e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d0:	683a      	ldr	r2, [r7, #0]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	b2ca      	uxtb	r2, r1
 800e8d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	0a19      	lsrs	r1, r3, #8
 800e8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	b2ca      	uxtb	r2, r1
 800e8e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	691b      	ldr	r3, [r3, #16]
 800e8ee:	0c19      	lsrs	r1, r3, #16
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	3302      	adds	r3, #2
 800e8f4:	683a      	ldr	r2, [r7, #0]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	b2ca      	uxtb	r2, r1
 800e8fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	691b      	ldr	r3, [r3, #16]
 800e900:	0e19      	lsrs	r1, r3, #24
 800e902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e904:	3303      	adds	r3, #3
 800e906:	683a      	ldr	r2, [r7, #0]
 800e908:	4413      	add	r3, r2
 800e90a:	b2ca      	uxtb	r2, r1
 800e90c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800e90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e910:	3304      	adds	r3, #4
 800e912:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800e914:	2300      	movs	r3, #0
 800e916:	61fb      	str	r3, [r7, #28]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	69fa      	ldr	r2, [r7, #28]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d22b      	bcs.n	800e97a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	699a      	ldr	r2, [r3, #24]
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	009b      	lsls	r3, r3, #2
 800e92a:	4413      	add	r3, r2
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800e930:	68f9      	ldr	r1, [r7, #12]
 800e932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	4413      	add	r3, r2
 800e938:	b2ca      	uxtb	r2, r1
 800e93a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	0a19      	lsrs	r1, r3, #8
 800e940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e942:	3301      	adds	r3, #1
 800e944:	683a      	ldr	r2, [r7, #0]
 800e946:	4413      	add	r3, r2
 800e948:	b2ca      	uxtb	r2, r1
 800e94a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	0c19      	lsrs	r1, r3, #16
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	3302      	adds	r3, #2
 800e954:	683a      	ldr	r2, [r7, #0]
 800e956:	4413      	add	r3, r2
 800e958:	b2ca      	uxtb	r2, r1
 800e95a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	0e19      	lsrs	r1, r3, #24
 800e960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e962:	3303      	adds	r3, #3
 800e964:	683a      	ldr	r2, [r7, #0]
 800e966:	4413      	add	r3, r2
 800e968:	b2ca      	uxtb	r2, r1
 800e96a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800e96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96e:	3304      	adds	r3, #4
 800e970:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800e972:	69fb      	ldr	r3, [r7, #28]
 800e974:	3301      	adds	r3, #1
 800e976:	61fb      	str	r3, [r7, #28]
 800e978:	e7ce      	b.n	800e918 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	69d9      	ldr	r1, [r3, #28]
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	683a      	ldr	r2, [r7, #0]
 800e982:	4413      	add	r3, r2
 800e984:	b2ca      	uxtb	r2, r1
 800e986:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	69db      	ldr	r3, [r3, #28]
 800e98c:	0a19      	lsrs	r1, r3, #8
 800e98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e990:	3301      	adds	r3, #1
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	4413      	add	r3, r2
 800e996:	b2ca      	uxtb	r2, r1
 800e998:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	69db      	ldr	r3, [r3, #28]
 800e99e:	0c19      	lsrs	r1, r3, #16
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	3302      	adds	r3, #2
 800e9a4:	683a      	ldr	r2, [r7, #0]
 800e9a6:	4413      	add	r3, r2
 800e9a8:	b2ca      	uxtb	r2, r1
 800e9aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	69db      	ldr	r3, [r3, #28]
 800e9b0:	0e19      	lsrs	r1, r3, #24
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b4:	3303      	adds	r3, #3
 800e9b6:	683a      	ldr	r2, [r7, #0]
 800e9b8:	4413      	add	r3, r2
 800e9ba:	b2ca      	uxtb	r2, r1
 800e9bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	3304      	adds	r3, #4
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	61bb      	str	r3, [r7, #24]
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	69db      	ldr	r3, [r3, #28]
 800e9cc:	69ba      	ldr	r2, [r7, #24]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d228      	bcs.n	800ea24 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9d6:	69bb      	ldr	r3, [r7, #24]
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	4413      	add	r3, r2
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7f1 fc2e 	bl	8000240 <strlen>
 800e9e4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e8:	683a      	ldr	r2, [r7, #0]
 800e9ea:	4413      	add	r3, r2
 800e9ec:	6979      	ldr	r1, [r7, #20]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f000 fd2c 	bl	800f44c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800e9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800e9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fc:	683a      	ldr	r2, [r7, #0]
 800e9fe:	18d0      	adds	r0, r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea04:	69bb      	ldr	r3, [r7, #24]
 800ea06:	009b      	lsls	r3, r3, #2
 800ea08:	4413      	add	r3, r2
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	697a      	ldr	r2, [r7, #20]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	f002 f8b8 	bl	8010b84 <memcpy>
      offset += length_stringsi;
 800ea14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	4413      	add	r3, r2
 800ea1a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800ea1c:	69bb      	ldr	r3, [r7, #24]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	61bb      	str	r3, [r7, #24]
 800ea22:	e7d1      	b.n	800e9c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800ea26:	4618      	mov	r0, r3
 800ea28:	3728      	adds	r7, #40	; 0x28
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b08e      	sub	sp, #56	; 0x38
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
 800ea36:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800ea3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	4413      	add	r3, r2
 800ea42:	781b      	ldrb	r3, [r3, #0]
 800ea44:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800ea46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea48:	3301      	adds	r3, #1
 800ea4a:	683a      	ldr	r2, [r7, #0]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	021b      	lsls	r3, r3, #8
 800ea52:	6a3a      	ldr	r2, [r7, #32]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800ea58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea5a:	3302      	adds	r3, #2
 800ea5c:	683a      	ldr	r2, [r7, #0]
 800ea5e:	4413      	add	r3, r2
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	041b      	lsls	r3, r3, #16
 800ea64:	6a3a      	ldr	r2, [r7, #32]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800ea6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea6c:	3303      	adds	r3, #3
 800ea6e:	683a      	ldr	r2, [r7, #0]
 800ea70:	4413      	add	r3, r2
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	061b      	lsls	r3, r3, #24
 800ea76:	6a3a      	ldr	r2, [r7, #32]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800ea7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea7e:	3304      	adds	r3, #4
 800ea80:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	6a3a      	ldr	r2, [r7, #32]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d90a      	bls.n	800eaa2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	68da      	ldr	r2, [r3, #12]
 800ea90:	6a3b      	ldr	r3, [r7, #32]
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4619      	mov	r1, r3
 800ea96:	4610      	mov	r0, r2
 800ea98:	f002 ffce 	bl	8011a38 <realloc>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a3a      	ldr	r2, [r7, #32]
 800eaa6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	633b      	str	r3, [r7, #48]	; 0x30
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d236      	bcs.n	800eb24 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	440a      	add	r2, r1
 800eac2:	7812      	ldrb	r2, [r2, #0]
 800eac4:	4313      	orrs	r3, r2
 800eac6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800eac8:	697a      	ldr	r2, [r7, #20]
 800eaca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eacc:	3301      	adds	r3, #1
 800eace:	6839      	ldr	r1, [r7, #0]
 800ead0:	440b      	add	r3, r1
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	021b      	lsls	r3, r3, #8
 800ead6:	4313      	orrs	r3, r2
 800ead8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800eada:	697a      	ldr	r2, [r7, #20]
 800eadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eade:	3302      	adds	r3, #2
 800eae0:	6839      	ldr	r1, [r7, #0]
 800eae2:	440b      	add	r3, r1
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	041b      	lsls	r3, r3, #16
 800eae8:	4313      	orrs	r3, r2
 800eaea:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800eaec:	697a      	ldr	r2, [r7, #20]
 800eaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf0:	3303      	adds	r3, #3
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	440b      	add	r3, r1
 800eaf6:	781b      	ldrb	r3, [r3, #0]
 800eaf8:	061b      	lsls	r3, r3, #24
 800eafa:	4313      	orrs	r3, r2
 800eafc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800eb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb06:	3304      	adds	r3, #4
 800eb08:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68da      	ldr	r2, [r3, #12]
 800eb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	4413      	add	r3, r2
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	3208      	adds	r2, #8
 800eb18:	6812      	ldr	r2, [r2, #0]
 800eb1a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	3301      	adds	r3, #1
 800eb20:	633b      	str	r3, [r7, #48]	; 0x30
 800eb22:	e7c3      	b.n	800eaac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800eb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	4413      	add	r3, r2
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800eb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb30:	3301      	adds	r3, #1
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	4413      	add	r3, r2
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	021b      	lsls	r3, r3, #8
 800eb3a:	69fa      	ldr	r2, [r7, #28]
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800eb40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb42:	3302      	adds	r3, #2
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	4413      	add	r3, r2
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	041b      	lsls	r3, r3, #16
 800eb4c:	69fa      	ldr	r2, [r7, #28]
 800eb4e:	4313      	orrs	r3, r2
 800eb50:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800eb52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb54:	3303      	adds	r3, #3
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	4413      	add	r3, r2
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	061b      	lsls	r3, r3, #24
 800eb5e:	69fa      	ldr	r2, [r7, #28]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800eb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb66:	3304      	adds	r3, #4
 800eb68:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	691b      	ldr	r3, [r3, #16]
 800eb6e:	69fa      	ldr	r2, [r7, #28]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d90a      	bls.n	800eb8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	699a      	ldr	r2, [r3, #24]
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	4610      	mov	r0, r2
 800eb80:	f002 ff5a 	bl	8011a38 <realloc>
 800eb84:	4602      	mov	r2, r0
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	69fa      	ldr	r2, [r7, #28]
 800eb8e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800eb90:	2300      	movs	r3, #0
 800eb92:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	691b      	ldr	r3, [r3, #16]
 800eb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d236      	bcs.n	800ec0c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eba6:	6839      	ldr	r1, [r7, #0]
 800eba8:	440a      	add	r2, r1
 800ebaa:	7812      	ldrb	r2, [r2, #0]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800ebb0:	693a      	ldr	r2, [r7, #16]
 800ebb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	6839      	ldr	r1, [r7, #0]
 800ebb8:	440b      	add	r3, r1
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	021b      	lsls	r3, r3, #8
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800ebc2:	693a      	ldr	r2, [r7, #16]
 800ebc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc6:	3302      	adds	r3, #2
 800ebc8:	6839      	ldr	r1, [r7, #0]
 800ebca:	440b      	add	r3, r1
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	041b      	lsls	r3, r3, #16
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd8:	3303      	adds	r3, #3
 800ebda:	6839      	ldr	r1, [r7, #0]
 800ebdc:	440b      	add	r3, r1
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	061b      	lsls	r3, r3, #24
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800ebe6:	693a      	ldr	r2, [r7, #16]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800ebec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebee:	3304      	adds	r3, #4
 800ebf0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	699a      	ldr	r2, [r3, #24]
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	009b      	lsls	r3, r3, #2
 800ebfa:	4413      	add	r3, r2
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	3214      	adds	r2, #20
 800ec00:	6812      	ldr	r2, [r2, #0]
 800ec02:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	3301      	adds	r3, #1
 800ec08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec0a:	e7c3      	b.n	800eb94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800ec0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec0e:	683a      	ldr	r2, [r7, #0]
 800ec10:	4413      	add	r3, r2
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800ec16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec18:	3301      	adds	r3, #1
 800ec1a:	683a      	ldr	r2, [r7, #0]
 800ec1c:	4413      	add	r3, r2
 800ec1e:	781b      	ldrb	r3, [r3, #0]
 800ec20:	021b      	lsls	r3, r3, #8
 800ec22:	69ba      	ldr	r2, [r7, #24]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800ec28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2a:	3302      	adds	r3, #2
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	4413      	add	r3, r2
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	041b      	lsls	r3, r3, #16
 800ec34:	69ba      	ldr	r2, [r7, #24]
 800ec36:	4313      	orrs	r3, r2
 800ec38:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800ec3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec3c:	3303      	adds	r3, #3
 800ec3e:	683a      	ldr	r2, [r7, #0]
 800ec40:	4413      	add	r3, r2
 800ec42:	781b      	ldrb	r3, [r3, #0]
 800ec44:	061b      	lsls	r3, r3, #24
 800ec46:	69ba      	ldr	r2, [r7, #24]
 800ec48:	4313      	orrs	r3, r2
 800ec4a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800ec4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec4e:	3304      	adds	r3, #4
 800ec50:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	69db      	ldr	r3, [r3, #28]
 800ec56:	69ba      	ldr	r2, [r7, #24]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d90a      	bls.n	800ec72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	009b      	lsls	r3, r3, #2
 800ec64:	4619      	mov	r1, r3
 800ec66:	4610      	mov	r0, r2
 800ec68:	f002 fee6 	bl	8011a38 <realloc>
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	69ba      	ldr	r2, [r7, #24]
 800ec76:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800ec78:	2300      	movs	r3, #0
 800ec7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	69db      	ldr	r3, [r3, #28]
 800ec80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d23f      	bcs.n	800ed06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800ec86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	441a      	add	r2, r3
 800ec8c:	f107 030c 	add.w	r3, r7, #12
 800ec90:	4611      	mov	r1, r2
 800ec92:	4618      	mov	r0, r3
 800ec94:	f000 fbf8 	bl	800f488 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800ec98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9a:	3304      	adds	r3, #4
 800ec9c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800ec9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eca0:	627b      	str	r3, [r7, #36]	; 0x24
 800eca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	4413      	add	r3, r2
 800eca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d20c      	bcs.n	800ecc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb2:	441a      	add	r2, r3
 800ecb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb6:	3b01      	subs	r3, #1
 800ecb8:	6839      	ldr	r1, [r7, #0]
 800ecba:	440b      	add	r3, r1
 800ecbc:	7812      	ldrb	r2, [r2, #0]
 800ecbe:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	627b      	str	r3, [r7, #36]	; 0x24
 800ecc6:	e7ec      	b.n	800eca2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800ecc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	4413      	add	r3, r2
 800ecce:	3b01      	subs	r3, #1
 800ecd0:	683a      	ldr	r2, [r7, #0]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	683a      	ldr	r2, [r7, #0]
 800ecde:	441a      	add	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800ece4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	4413      	add	r3, r2
 800ecea:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf2:	009b      	lsls	r3, r3, #2
 800ecf4:	4413      	add	r3, r2
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	3220      	adds	r2, #32
 800ecfa:	6812      	ldr	r2, [r2, #0]
 800ecfc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800ecfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed00:	3301      	adds	r3, #1
 800ed02:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed04:	e7ba      	b.n	800ec7c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800ed06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3738      	adds	r7, #56	; 0x38
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800ed10:	b480      	push	{r7}
 800ed12:	b083      	sub	sp, #12
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	4b03      	ldr	r3, [pc, #12]	; (800ed28 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	370c      	adds	r7, #12
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	080153a8 	.word	0x080153a8

0800ed2c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	6078      	str	r0, [r7, #4]
 800ed34:	4b03      	ldr	r3, [pc, #12]	; (800ed44 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800ed36:	4618      	mov	r0, r3
 800ed38:	370c      	adds	r7, #12
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	080151ac 	.word	0x080151ac

0800ed48 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f7ff fbfa 	bl	800e54c <_ZN3ros3MsgC1Ev>
 800ed58:	4a0b      	ldr	r2, [pc, #44]	; (800ed88 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	601a      	str	r2, [r3, #0]
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2200      	movs	r2, #0
 800ed62:	809a      	strh	r2, [r3, #4]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	4a09      	ldr	r2, [pc, #36]	; (800ed8c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800ed68:	609a      	str	r2, [r3, #8]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4a07      	ldr	r2, [pc, #28]	; (800ed8c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800ed6e:	60da      	str	r2, [r3, #12]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a06      	ldr	r2, [pc, #24]	; (800ed8c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800ed74:	611a      	str	r2, [r3, #16]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	2200      	movs	r2, #0
 800ed7a:	615a      	str	r2, [r3, #20]
    {
    }
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3708      	adds	r7, #8
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop
 800ed88:	0801543c 	.word	0x0801543c
 800ed8c:	08015170 	.word	0x08015170

0800ed90 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b088      	sub	sp, #32
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	8899      	ldrh	r1, [r3, #4]
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	4413      	add	r3, r2
 800eda8:	b2ca      	uxtb	r2, r1
 800edaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	889b      	ldrh	r3, [r3, #4]
 800edb0:	0a1b      	lsrs	r3, r3, #8
 800edb2:	b299      	uxth	r1, r3
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	3301      	adds	r3, #1
 800edb8:	683a      	ldr	r2, [r7, #0]
 800edba:	4413      	add	r3, r2
 800edbc:	b2ca      	uxtb	r2, r1
 800edbe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	3302      	adds	r3, #2
 800edc4:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	689b      	ldr	r3, [r3, #8]
 800edca:	4618      	mov	r0, r3
 800edcc:	f7f1 fa38 	bl	8000240 <strlen>
 800edd0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800edd2:	69fb      	ldr	r3, [r7, #28]
 800edd4:	683a      	ldr	r2, [r7, #0]
 800edd6:	4413      	add	r3, r2
 800edd8:	69b9      	ldr	r1, [r7, #24]
 800edda:	4618      	mov	r0, r3
 800eddc:	f000 fb36 	bl	800f44c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	3304      	adds	r3, #4
 800ede4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800ede6:	69fb      	ldr	r3, [r7, #28]
 800ede8:	683a      	ldr	r2, [r7, #0]
 800edea:	18d0      	adds	r0, r2, r3
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	69ba      	ldr	r2, [r7, #24]
 800edf2:	4619      	mov	r1, r3
 800edf4:	f001 fec6 	bl	8010b84 <memcpy>
      offset += length_topic_name;
 800edf8:	69fa      	ldr	r2, [r7, #28]
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	4413      	add	r3, r2
 800edfe:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7f1 fa1b 	bl	8000240 <strlen>
 800ee0a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	683a      	ldr	r2, [r7, #0]
 800ee10:	4413      	add	r3, r2
 800ee12:	6979      	ldr	r1, [r7, #20]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f000 fb19 	bl	800f44c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	3304      	adds	r3, #4
 800ee1e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	18d0      	adds	r0, r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	f001 fea9 	bl	8010b84 <memcpy>
      offset += length_message_type;
 800ee32:	69fa      	ldr	r2, [r7, #28]
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	4413      	add	r3, r2
 800ee38:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7f1 f9fe 	bl	8000240 <strlen>
 800ee44:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800ee46:	69fb      	ldr	r3, [r7, #28]
 800ee48:	683a      	ldr	r2, [r7, #0]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	6939      	ldr	r1, [r7, #16]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f000 fafc 	bl	800f44c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800ee54:	69fb      	ldr	r3, [r7, #28]
 800ee56:	3304      	adds	r3, #4
 800ee58:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800ee5a:	69fb      	ldr	r3, [r7, #28]
 800ee5c:	683a      	ldr	r2, [r7, #0]
 800ee5e:	18d0      	adds	r0, r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	691b      	ldr	r3, [r3, #16]
 800ee64:	693a      	ldr	r2, [r7, #16]
 800ee66:	4619      	mov	r1, r3
 800ee68:	f001 fe8c 	bl	8010b84 <memcpy>
      offset += length_md5sum;
 800ee6c:	69fa      	ldr	r2, [r7, #28]
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	4413      	add	r3, r2
 800ee72:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	695b      	ldr	r3, [r3, #20]
 800ee78:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800ee7a:	68f9      	ldr	r1, [r7, #12]
 800ee7c:	69fb      	ldr	r3, [r7, #28]
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	4413      	add	r3, r2
 800ee82:	b2ca      	uxtb	r2, r1
 800ee84:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	0a19      	lsrs	r1, r3, #8
 800ee8a:	69fb      	ldr	r3, [r7, #28]
 800ee8c:	3301      	adds	r3, #1
 800ee8e:	683a      	ldr	r2, [r7, #0]
 800ee90:	4413      	add	r3, r2
 800ee92:	b2ca      	uxtb	r2, r1
 800ee94:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	0c19      	lsrs	r1, r3, #16
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	3302      	adds	r3, #2
 800ee9e:	683a      	ldr	r2, [r7, #0]
 800eea0:	4413      	add	r3, r2
 800eea2:	b2ca      	uxtb	r2, r1
 800eea4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	0e19      	lsrs	r1, r3, #24
 800eeaa:	69fb      	ldr	r3, [r7, #28]
 800eeac:	3303      	adds	r3, #3
 800eeae:	683a      	ldr	r2, [r7, #0]
 800eeb0:	4413      	add	r3, r2
 800eeb2:	b2ca      	uxtb	r2, r1
 800eeb4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800eeb6:	69fb      	ldr	r3, [r7, #28]
 800eeb8:	3304      	adds	r3, #4
 800eeba:	61fb      	str	r3, [r7, #28]
      return offset;
 800eebc:	69fb      	ldr	r3, [r7, #28]
    }
 800eebe:	4618      	mov	r0, r3
 800eec0:	3720      	adds	r7, #32
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b08a      	sub	sp, #40	; 0x28
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800eed0:	2300      	movs	r3, #0
 800eed2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800eed4:	69bb      	ldr	r3, [r7, #24]
 800eed6:	683a      	ldr	r2, [r7, #0]
 800eed8:	4413      	add	r3, r2
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	b29a      	uxth	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	889b      	ldrh	r3, [r3, #4]
 800eee6:	b21a      	sxth	r2, r3
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	3301      	adds	r3, #1
 800eeec:	6839      	ldr	r1, [r7, #0]
 800eeee:	440b      	add	r3, r1
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	021b      	lsls	r3, r3, #8
 800eef4:	b21b      	sxth	r3, r3
 800eef6:	4313      	orrs	r3, r2
 800eef8:	b21b      	sxth	r3, r3
 800eefa:	b29a      	uxth	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	3302      	adds	r3, #2
 800ef04:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	683a      	ldr	r2, [r7, #0]
 800ef0a:	441a      	add	r2, r3
 800ef0c:	f107 0314 	add.w	r3, r7, #20
 800ef10:	4611      	mov	r1, r2
 800ef12:	4618      	mov	r0, r3
 800ef14:	f000 fab8 	bl	800f488 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	3304      	adds	r3, #4
 800ef1c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800ef1e:	69bb      	ldr	r3, [r7, #24]
 800ef20:	627b      	str	r3, [r7, #36]	; 0x24
 800ef22:	69ba      	ldr	r2, [r7, #24]
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	4413      	add	r3, r2
 800ef28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef2a:	429a      	cmp	r2, r3
 800ef2c:	d20c      	bcs.n	800ef48 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800ef2e:	683a      	ldr	r2, [r7, #0]
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	441a      	add	r2, r3
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	3b01      	subs	r3, #1
 800ef38:	6839      	ldr	r1, [r7, #0]
 800ef3a:	440b      	add	r3, r1
 800ef3c:	7812      	ldrb	r2, [r2, #0]
 800ef3e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800ef40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef42:	3301      	adds	r3, #1
 800ef44:	627b      	str	r3, [r7, #36]	; 0x24
 800ef46:	e7ec      	b.n	800ef22 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800ef48:	69ba      	ldr	r2, [r7, #24]
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	3b01      	subs	r3, #1
 800ef50:	683a      	ldr	r2, [r7, #0]
 800ef52:	4413      	add	r3, r2
 800ef54:	2200      	movs	r2, #0
 800ef56:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800ef58:	69bb      	ldr	r3, [r7, #24]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	441a      	add	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800ef64:	69ba      	ldr	r2, [r7, #24]
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	4413      	add	r3, r2
 800ef6a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800ef6c:	69bb      	ldr	r3, [r7, #24]
 800ef6e:	683a      	ldr	r2, [r7, #0]
 800ef70:	441a      	add	r2, r3
 800ef72:	f107 0310 	add.w	r3, r7, #16
 800ef76:	4611      	mov	r1, r2
 800ef78:	4618      	mov	r0, r3
 800ef7a:	f000 fa85 	bl	800f488 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	3304      	adds	r3, #4
 800ef82:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	623b      	str	r3, [r7, #32]
 800ef88:	69ba      	ldr	r2, [r7, #24]
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	4413      	add	r3, r2
 800ef8e:	6a3a      	ldr	r2, [r7, #32]
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d20c      	bcs.n	800efae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800ef94:	683a      	ldr	r2, [r7, #0]
 800ef96:	6a3b      	ldr	r3, [r7, #32]
 800ef98:	441a      	add	r2, r3
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	3b01      	subs	r3, #1
 800ef9e:	6839      	ldr	r1, [r7, #0]
 800efa0:	440b      	add	r3, r1
 800efa2:	7812      	ldrb	r2, [r2, #0]
 800efa4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800efa6:	6a3b      	ldr	r3, [r7, #32]
 800efa8:	3301      	adds	r3, #1
 800efaa:	623b      	str	r3, [r7, #32]
 800efac:	e7ec      	b.n	800ef88 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800efae:	69ba      	ldr	r2, [r7, #24]
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	4413      	add	r3, r2
 800efb4:	3b01      	subs	r3, #1
 800efb6:	683a      	ldr	r2, [r7, #0]
 800efb8:	4413      	add	r3, r2
 800efba:	2200      	movs	r2, #0
 800efbc:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	683a      	ldr	r2, [r7, #0]
 800efc4:	441a      	add	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	4413      	add	r3, r2
 800efd0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	683a      	ldr	r2, [r7, #0]
 800efd6:	441a      	add	r2, r3
 800efd8:	f107 030c 	add.w	r3, r7, #12
 800efdc:	4611      	mov	r1, r2
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 fa52 	bl	800f488 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800efe4:	69bb      	ldr	r3, [r7, #24]
 800efe6:	3304      	adds	r3, #4
 800efe8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	61fb      	str	r3, [r7, #28]
 800efee:	69ba      	ldr	r2, [r7, #24]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	4413      	add	r3, r2
 800eff4:	69fa      	ldr	r2, [r7, #28]
 800eff6:	429a      	cmp	r2, r3
 800eff8:	d20c      	bcs.n	800f014 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800effa:	683a      	ldr	r2, [r7, #0]
 800effc:	69fb      	ldr	r3, [r7, #28]
 800effe:	441a      	add	r2, r3
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	3b01      	subs	r3, #1
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	440b      	add	r3, r1
 800f008:	7812      	ldrb	r2, [r2, #0]
 800f00a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f00c:	69fb      	ldr	r3, [r7, #28]
 800f00e:	3301      	adds	r3, #1
 800f010:	61fb      	str	r3, [r7, #28]
 800f012:	e7ec      	b.n	800efee <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f014:	69ba      	ldr	r2, [r7, #24]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	4413      	add	r3, r2
 800f01a:	3b01      	subs	r3, #1
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	4413      	add	r3, r2
 800f020:	2200      	movs	r2, #0
 800f022:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	3b01      	subs	r3, #1
 800f028:	683a      	ldr	r2, [r7, #0]
 800f02a:	441a      	add	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800f030:	69ba      	ldr	r2, [r7, #24]
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	4413      	add	r3, r2
 800f036:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800f038:	2300      	movs	r3, #0
 800f03a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	69ba      	ldr	r2, [r7, #24]
 800f040:	6839      	ldr	r1, [r7, #0]
 800f042:	440a      	add	r2, r1
 800f044:	7812      	ldrb	r2, [r2, #0]
 800f046:	4313      	orrs	r3, r2
 800f048:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f04a:	68ba      	ldr	r2, [r7, #8]
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	3301      	adds	r3, #1
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	440b      	add	r3, r1
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	021b      	lsls	r3, r3, #8
 800f058:	4313      	orrs	r3, r2
 800f05a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f05c:	68ba      	ldr	r2, [r7, #8]
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	3302      	adds	r3, #2
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	440b      	add	r3, r1
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	041b      	lsls	r3, r3, #16
 800f06a:	4313      	orrs	r3, r2
 800f06c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	69bb      	ldr	r3, [r7, #24]
 800f072:	3303      	adds	r3, #3
 800f074:	6839      	ldr	r1, [r7, #0]
 800f076:	440b      	add	r3, r1
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	061b      	lsls	r3, r3, #24
 800f07c:	4313      	orrs	r3, r2
 800f07e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	3304      	adds	r3, #4
 800f08a:	61bb      	str	r3, [r7, #24]
     return offset;
 800f08c:	69bb      	ldr	r3, [r7, #24]
    }
 800f08e:	4618      	mov	r0, r3
 800f090:	3728      	adds	r7, #40	; 0x28
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
	...

0800f098 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	4b03      	ldr	r3, [pc, #12]	; (800f0b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	370c      	adds	r7, #12
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	080151d0 	.word	0x080151d0

0800f0b4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800f0b4:	b480      	push	{r7}
 800f0b6:	b083      	sub	sp, #12
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	4b03      	ldr	r3, [pc, #12]	; (800f0cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800f0be:	4618      	mov	r0, r3
 800f0c0:	370c      	adds	r7, #12
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	080151ec 	.word	0x080151ec

0800f0d0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	605a      	str	r2, [r3, #4]
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	370c      	adds	r7, #12
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr
	...

0800f0f4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b082      	sub	sp, #8
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
      data()
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4618      	mov	r0, r3
 800f100:	f7ff fa24 	bl	800e54c <_ZN3ros3MsgC1Ev>
 800f104:	4a06      	ldr	r2, [pc, #24]	; (800f120 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	3304      	adds	r3, #4
 800f10e:	4618      	mov	r0, r3
 800f110:	f7ff ffde 	bl	800f0d0 <_ZN3ros4TimeC1Ev>
    {
    }
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	08015424 	.word	0x08015424

0800f124 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800f124:	b480      	push	{r7}
 800f126:	b085      	sub	sp, #20
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800f12e:	2300      	movs	r3, #0
 800f130:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	6859      	ldr	r1, [r3, #4]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	4413      	add	r3, r2
 800f13c:	b2ca      	uxtb	r2, r1
 800f13e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	685b      	ldr	r3, [r3, #4]
 800f144:	0a19      	lsrs	r1, r3, #8
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	3301      	adds	r3, #1
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	4413      	add	r3, r2
 800f14e:	b2ca      	uxtb	r2, r1
 800f150:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	685b      	ldr	r3, [r3, #4]
 800f156:	0c19      	lsrs	r1, r3, #16
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	3302      	adds	r3, #2
 800f15c:	683a      	ldr	r2, [r7, #0]
 800f15e:	4413      	add	r3, r2
 800f160:	b2ca      	uxtb	r2, r1
 800f162:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	0e19      	lsrs	r1, r3, #24
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	3303      	adds	r3, #3
 800f16e:	683a      	ldr	r2, [r7, #0]
 800f170:	4413      	add	r3, r2
 800f172:	b2ca      	uxtb	r2, r1
 800f174:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	3304      	adds	r3, #4
 800f17a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6899      	ldr	r1, [r3, #8]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	683a      	ldr	r2, [r7, #0]
 800f184:	4413      	add	r3, r2
 800f186:	b2ca      	uxtb	r2, r1
 800f188:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	0a19      	lsrs	r1, r3, #8
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	3301      	adds	r3, #1
 800f194:	683a      	ldr	r2, [r7, #0]
 800f196:	4413      	add	r3, r2
 800f198:	b2ca      	uxtb	r2, r1
 800f19a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	689b      	ldr	r3, [r3, #8]
 800f1a0:	0c19      	lsrs	r1, r3, #16
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	3302      	adds	r3, #2
 800f1a6:	683a      	ldr	r2, [r7, #0]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	b2ca      	uxtb	r2, r1
 800f1ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	689b      	ldr	r3, [r3, #8]
 800f1b2:	0e19      	lsrs	r1, r3, #24
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	3303      	adds	r3, #3
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	4413      	add	r3, r2
 800f1bc:	b2ca      	uxtb	r2, r1
 800f1be:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3304      	adds	r3, #4
 800f1c4:	60fb      	str	r3, [r7, #12]
      return offset;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
    }
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3714      	adds	r7, #20
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800f1d4:	b480      	push	{r7}
 800f1d6:	b085      	sub	sp, #20
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	4413      	add	r3, r2
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	685a      	ldr	r2, [r3, #4]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	6839      	ldr	r1, [r7, #0]
 800f1fa:	440b      	add	r3, r1
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	021b      	lsls	r3, r3, #8
 800f200:	431a      	orrs	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	3302      	adds	r3, #2
 800f20e:	6839      	ldr	r1, [r7, #0]
 800f210:	440b      	add	r3, r1
 800f212:	781b      	ldrb	r3, [r3, #0]
 800f214:	041b      	lsls	r3, r3, #16
 800f216:	431a      	orrs	r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	685a      	ldr	r2, [r3, #4]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	3303      	adds	r3, #3
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	440b      	add	r3, r1
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	061b      	lsls	r3, r3, #24
 800f22c:	431a      	orrs	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	3304      	adds	r3, #4
 800f236:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	683a      	ldr	r2, [r7, #0]
 800f23c:	4413      	add	r3, r2
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	461a      	mov	r2, r3
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	689a      	ldr	r2, [r3, #8]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	3301      	adds	r3, #1
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	440b      	add	r3, r1
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	021b      	lsls	r3, r3, #8
 800f256:	431a      	orrs	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	689a      	ldr	r2, [r3, #8]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	3302      	adds	r3, #2
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	440b      	add	r3, r1
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	041b      	lsls	r3, r3, #16
 800f26c:	431a      	orrs	r2, r3
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	689a      	ldr	r2, [r3, #8]
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	3303      	adds	r3, #3
 800f27a:	6839      	ldr	r1, [r7, #0]
 800f27c:	440b      	add	r3, r1
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	061b      	lsls	r3, r3, #24
 800f282:	431a      	orrs	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3304      	adds	r3, #4
 800f28c:	60fb      	str	r3, [r7, #12]
     return offset;
 800f28e:	68fb      	ldr	r3, [r7, #12]
    }
 800f290:	4618      	mov	r0, r3
 800f292:	3714      	adds	r7, #20
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	4b03      	ldr	r3, [pc, #12]	; (800f2b4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	370c      	adds	r7, #12
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	08015210 	.word	0x08015210

0800f2b8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800f2b8:	b480      	push	{r7}
 800f2ba:	b083      	sub	sp, #12
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	4b03      	ldr	r3, [pc, #12]	; (800f2d0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	370c      	adds	r7, #12
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop
 800f2d0:	08015220 	.word	0x08015220

0800f2d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800f2d4:	b480      	push	{r7}
 800f2d6:	b085      	sub	sp, #20
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	60f8      	str	r0, [r7, #12]
 800f2dc:	60b9      	str	r1, [r7, #8]
 800f2de:	607a      	str	r2, [r7, #4]
 800f2e0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	68ba      	ldr	r2, [r7, #8]
 800f2e6:	601a      	str	r2, [r3, #0]
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	605a      	str	r2, [r3, #4]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	683a      	ldr	r2, [r7, #0]
 800f2f2:	611a      	str	r2, [r3, #16]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	3714      	adds	r7, #20
 800f2fa:	46bd      	mov	sp, r7
 800f2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f300:	4770      	bx	lr

0800f302 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800f302:	b580      	push	{r7, lr}
 800f304:	b082      	sub	sp, #8
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
 800f30a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	68d8      	ldr	r0, [r3, #12]
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	68db      	ldr	r3, [r3, #12]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	6891      	ldr	r1, [r2, #8]
 800f31c:	683a      	ldr	r2, [r7, #0]
 800f31e:	4798      	blx	r3
 800f320:	4603      	mov	r3, r0
  };
 800f322:	4618      	mov	r0, r3
 800f324:	3708      	adds	r7, #8
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800f32a:	b480      	push	{r7}
 800f32c:	b083      	sub	sp, #12
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	691b      	ldr	r3, [r3, #16]
  }
 800f336:	4618      	mov	r0, r3
 800f338:	370c      	adds	r7, #12
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr
	...

0800f344 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    UART_HandleTypeDef *huart;

  public:
    STM32Hardware():
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
      huart(&huart1){
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a04      	ldr	r2, [pc, #16]	; (800f360 <_ZN13STM32HardwareC1Ev+0x1c>)
 800f350:	601a      	str	r2, [r3, #0]
    }
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	370c      	adds	r7, #12
 800f358:	46bd      	mov	sp, r7
 800f35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35e:	4770      	bx	lr
 800f360:	2000b0c4 	.word	0x2000b0c4

0800f364 <_ZN13STM32Hardware4initEv>:

    void init(){
 800f364:	b480      	push	{r7}
 800f366:	b083      	sub	sp, #12
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]

    }
 800f36c:	bf00      	nop
 800f36e:	370c      	adds	r7, #12
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr

0800f378 <_ZN13STM32Hardware4readEv>:

    int read(){
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
      return my_read_DMA_byte(huart);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4618      	mov	r0, r3
 800f386:	f7fe fdfd 	bl	800df84 <my_read_DMA_byte>
 800f38a:	4603      	mov	r3, r0
    }
 800f38c:	4618      	mov	r0, r3
 800f38e:	3708      	adds	r7, #8
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	60f8      	str	r0, [r7, #12]
 800f39c:	60b9      	str	r1, [r7, #8]
 800f39e:	607a      	str	r2, [r7, #4]
    	my_write_DMA(huart, data, length);
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	68b9      	ldr	r1, [r7, #8]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7fe fab9 	bl	800d920 <my_write_DMA>
    }
 800f3ae:	bf00      	nop
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}

0800f3b6 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b082      	sub	sp, #8
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
    	return HAL_GetTick();
 800f3be:	f7f1 fe1b 	bl	8000ff8 <HAL_GetTick>
 800f3c2:	4603      	mov	r3, r0
    }
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}

0800f3cc <_Z12rosNodeSetupv>:

void rosNodeSubCB(const std_msgs::UInt16& msg);
ros::Subscriber<std_msgs::UInt16> _sub("subTopicName", &rosNodeSubCB);
/***************  Modify 1 end***********************/

void rosNodeSetup(){
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	af00      	add	r7, sp, #0
	rosSerialNode.initNode();
 800f3d0:	4806      	ldr	r0, [pc, #24]	; (800f3ec <_Z12rosNodeSetupv+0x20>)
 800f3d2:	f000 f941 	bl	800f658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	/***************Modify 2 begin **************/
	rosSerialNode.advertise(_pub);
 800f3d6:	4906      	ldr	r1, [pc, #24]	; (800f3f0 <_Z12rosNodeSetupv+0x24>)
 800f3d8:	4804      	ldr	r0, [pc, #16]	; (800f3ec <_Z12rosNodeSetupv+0x20>)
 800f3da:	f000 f95a 	bl	800f692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	rosSerialNode.subscribe(_sub);
 800f3de:	4905      	ldr	r1, [pc, #20]	; (800f3f4 <_Z12rosNodeSetupv+0x28>)
 800f3e0:	4802      	ldr	r0, [pc, #8]	; (800f3ec <_Z12rosNodeSetupv+0x20>)
 800f3e2:	f000 f984 	bl	800f6ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_>
	/***************Modify 2 end  **************/
}
 800f3e6:	bf00      	nop
 800f3e8:	bd80      	pop	{r7, pc}
 800f3ea:	bf00      	nop
 800f3ec:	2000104c 	.word	0x2000104c
 800f3f0:	20001584 	.word	0x20001584
 800f3f4:	20001598 	.word	0x20001598

0800f3f8 <_Z15rosNodeSpinOncev>:


void rosNodeSpinOnce(void)
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	af00      	add	r7, sp, #0
   rosSerialNode.spinOnce();
 800f3fc:	4802      	ldr	r0, [pc, #8]	; (800f408 <_Z15rosNodeSpinOncev+0x10>)
 800f3fe:	f000 f9a3 	bl	800f748 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800f402:	bf00      	nop
 800f404:	bd80      	pop	{r7, pc}
 800f406:	bf00      	nop
 800f408:	2000104c 	.word	0x2000104c

0800f40c <_Z10rosNodePubv>:

/***************Modify 3 begin  **************/
void rosNodePub(){
 800f40c:	b580      	push	{r7, lr}
 800f40e:	af00      	add	r7, sp, #0
	pubData.data=2;
 800f410:	4b04      	ldr	r3, [pc, #16]	; (800f424 <_Z10rosNodePubv+0x18>)
 800f412:	2202      	movs	r2, #2
 800f414:	809a      	strh	r2, [r3, #4]
	_pub.publish(&pubData);
 800f416:	4903      	ldr	r1, [pc, #12]	; (800f424 <_Z10rosNodePubv+0x18>)
 800f418:	4803      	ldr	r0, [pc, #12]	; (800f428 <_Z10rosNodePubv+0x1c>)
 800f41a:	f7ff ff72 	bl	800f302 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800f41e:	bf00      	nop
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	2000157c 	.word	0x2000157c
 800f428:	20001584 	.word	0x20001584

0800f42c <_Z12rosNodeSubCBRKN8std_msgs6UInt16E>:

void rosNodeSubCB(const std_msgs::UInt16& msg){
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
	printf("Receive test topi %d\r\n",msg.data);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	889b      	ldrh	r3, [r3, #4]
 800f438:	4619      	mov	r1, r3
 800f43a:	4803      	ldr	r0, [pc, #12]	; (800f448 <_Z12rosNodeSubCBRKN8std_msgs6UInt16E+0x1c>)
 800f43c:	f002 fa80 	bl	8011940 <iprintf>
}
 800f440:	bf00      	nop
 800f442:	3708      	adds	r7, #8
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	08015244 	.word	0x08015244

0800f44c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800f456:	2300      	movs	r3, #0
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2b03      	cmp	r3, #3
 800f45e:	d80d      	bhi.n	800f47c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	00db      	lsls	r3, r3, #3
 800f464:	683a      	ldr	r2, [r7, #0]
 800f466:	fa22 f103 	lsr.w	r1, r2, r3
 800f46a:	687a      	ldr	r2, [r7, #4]
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	4413      	add	r3, r2
 800f470:	b2ca      	uxtb	r2, r1
 800f472:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3301      	adds	r3, #1
 800f478:	60fb      	str	r3, [r7, #12]
 800f47a:	e7ee      	b.n	800f45a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800f47c:	bf00      	nop
 800f47e:	3714      	adds	r7, #20
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr

0800f488 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800f488:	b480      	push	{r7}
 800f48a:	b085      	sub	sp, #20
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800f498:	2300      	movs	r3, #0
 800f49a:	60fb      	str	r3, [r7, #12]
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	2b03      	cmp	r3, #3
 800f4a0:	d811      	bhi.n	800f4c6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6839      	ldr	r1, [r7, #0]
 800f4a8:	68fa      	ldr	r2, [r7, #12]
 800f4aa:	440a      	add	r2, r1
 800f4ac:	7812      	ldrb	r2, [r2, #0]
 800f4ae:	4611      	mov	r1, r2
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	00d2      	lsls	r2, r2, #3
 800f4b4:	fa01 f202 	lsl.w	r2, r1, r2
 800f4b8:	431a      	orrs	r2, r3
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	60fb      	str	r3, [r7, #12]
 800f4c4:	e7ea      	b.n	800f49c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800f4c6:	bf00      	nop
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
	...

0800f4d4 <_ZN3ros15NodeHandleBase_C1Ev>:


namespace ros
{

class NodeHandleBase_
 800f4d4:	b480      	push	{r7}
 800f4d6:	b083      	sub	sp, #12
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	4a04      	ldr	r2, [pc, #16]	; (800f4f0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	601a      	str	r2, [r3, #0]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	370c      	adds	r7, #12
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ee:	4770      	bx	lr
 800f4f0:	08015410 	.word	0x08015410

0800f4f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b086      	sub	sp, #24
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff ffe8 	bl	800f4d4 <_ZN3ros15NodeHandleBase_C1Ev>
 800f504:	4a39      	ldr	r2, [pc, #228]	; (800f5ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3304      	adds	r3, #4
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff ff18 	bl	800f344 <_ZN13STM32HardwareC1Ev>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800f522:	4618      	mov	r0, r3
 800f524:	f7ff f94e 	bl	800e7c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800f528:	2300      	movs	r3, #0
 800f52a:	617b      	str	r3, [r7, #20]
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	2b18      	cmp	r3, #24
 800f530:	d80a      	bhi.n	800f548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	697a      	ldr	r2, [r7, #20]
 800f536:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800f53a:	2100      	movs	r1, #0
 800f53c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	3301      	adds	r3, #1
 800f544:	617b      	str	r3, [r7, #20]
 800f546:	e7f1      	b.n	800f52c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800f548:	2300      	movs	r3, #0
 800f54a:	613b      	str	r3, [r7, #16]
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	2b18      	cmp	r3, #24
 800f550:	d80b      	bhi.n	800f56a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800f55a:	009b      	lsls	r3, r3, #2
 800f55c:	4413      	add	r3, r2
 800f55e:	2200      	movs	r2, #0
 800f560:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	3301      	adds	r3, #1
 800f566:	613b      	str	r3, [r7, #16]
 800f568:	e7f0      	b.n	800f54c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800f56a:	2300      	movs	r3, #0
 800f56c:	60fb      	str	r3, [r7, #12]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f574:	d209      	bcs.n	800f58a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	4413      	add	r3, r2
 800f57c:	3318      	adds	r3, #24
 800f57e:	2200      	movs	r2, #0
 800f580:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	3301      	adds	r3, #1
 800f586:	60fb      	str	r3, [r7, #12]
 800f588:	e7f1      	b.n	800f56e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800f58a:	2300      	movs	r3, #0
 800f58c:	60bb      	str	r3, [r7, #8]
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f594:	d20a      	bcs.n	800f5ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	68bb      	ldr	r3, [r7, #8]
 800f59a:	4413      	add	r3, r2
 800f59c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	60bb      	str	r3, [r7, #8]
 800f5aa:	e7f0      	b.n	800f58e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	615a      	str	r2, [r3, #20]
  }
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	3718      	adds	r7, #24
 800f5e8:	46bd      	mov	sp, r7
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	080153e4 	.word	0x080153e4

0800f5f0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800f5f0:	b480      	push	{r7}
 800f5f2:	b083      	sub	sp, #12
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
 800f5f8:	4a04      	ldr	r2, [pc, #16]	; (800f60c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	601a      	str	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4618      	mov	r0, r3
 800f602:	370c      	adds	r7, #12
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	080153f8 	.word	0x080153f8

0800f610 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	4618      	mov	r0, r3
 800f622:	f7ff ffe5 	bl	800f5f0 <_ZN3ros11Subscriber_C1Ev>
 800f626:	4a0b      	ldr	r2, [pc, #44]	; (800f654 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei+0x44>)
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	601a      	str	r2, [r3, #0]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	330c      	adds	r3, #12
 800f630:	4618      	mov	r0, r3
 800f632:	f7fe ff9b 	bl	800e56c <_ZN8std_msgs6UInt16C1Ev>
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	615a      	str	r2, [r3, #20]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	609a      	str	r2, [r3, #8]
  };
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	080153cc 	.word	0x080153cc

0800f658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	3304      	adds	r3, #4
 800f664:	4618      	mov	r0, r3
 800f666:	f7ff fe7d 	bl	800f364 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800f68a:	bf00      	nop
 800f68c:	3708      	adds	r7, #8
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800f692:	b480      	push	{r7}
 800f694:	b085      	sub	sp, #20
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
 800f69a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800f69c:	2300      	movs	r3, #0
 800f69e:	60fb      	str	r3, [r7, #12]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	2b18      	cmp	r3, #24
 800f6a4:	dc1c      	bgt.n	800f6e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	68fa      	ldr	r2, [r7, #12]
 800f6aa:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800f6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d110      	bne.n	800f6d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800f6be:	6839      	ldr	r1, [r7, #0]
 800f6c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800f6ce:	687a      	ldr	r2, [r7, #4]
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	60da      	str	r2, [r3, #12]
        return true;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	e004      	b.n	800f6e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	60fb      	str	r3, [r7, #12]
 800f6de:	e7df      	b.n	800f6a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800f6e0:	2300      	movs	r3, #0
  }
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3714      	adds	r7, #20
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800f6ee:	b480      	push	{r7}
 800f6f0:	b085      	sub	sp, #20
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
 800f6f6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	60fb      	str	r3, [r7, #12]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	2b18      	cmp	r3, #24
 800f700:	dc1b      	bgt.n	800f73a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 800f702:	687a      	ldr	r2, [r7, #4]
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800f70a:	009b      	lsls	r3, r3, #2
 800f70c:	4413      	add	r3, r2
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10e      	bne.n	800f732 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800f714:	683a      	ldr	r2, [r7, #0]
 800f716:	6879      	ldr	r1, [r7, #4]
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	440b      	add	r3, r1
 800f722:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	605a      	str	r2, [r3, #4]
        return true;
 800f72e:	2301      	movs	r3, #1
 800f730:	e004      	b.n	800f73c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3301      	adds	r3, #1
 800f736:	60fb      	str	r3, [r7, #12]
 800f738:	e7e0      	b.n	800f6fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0xe>
      }
    }
    return false;
 800f73a:	2300      	movs	r3, #0
  }
 800f73c:	4618      	mov	r0, r3
 800f73e:	3714      	adds	r7, #20
 800f740:	46bd      	mov	sp, r7
 800f742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f746:	4770      	bx	lr

0800f748 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	3304      	adds	r3, #4
 800f754:	4618      	mov	r0, r3
 800f756:	f7ff fe2e 	bl	800f3b6 <_ZN13STM32Hardware4timeEv>
 800f75a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	1ad3      	subs	r3, r2, r3
 800f766:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d903      	bls.n	800f776 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	2200      	movs	r2, #0
 800f772:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d009      	beq.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800f786:	68fa      	ldr	r2, [r7, #12]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d903      	bls.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2200      	movs	r2, #0
 800f790:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	695b      	ldr	r3, [r3, #20]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d013      	beq.n	800f7c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7ff fe08 	bl	800f3b6 <_ZN13STM32Hardware4timeEv>
 800f7a6:	4602      	mov	r2, r0
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	1ad2      	subs	r2, r2, r3
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	695b      	ldr	r3, [r3, #20]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	bf8c      	ite	hi
 800f7b4:	2301      	movhi	r3, #1
 800f7b6:	2300      	movls	r3, #0
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800f7be:	f06f 0301 	mvn.w	r3, #1
 800f7c2:	e193      	b.n	800faec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	3304      	adds	r3, #4
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7ff fdd5 	bl	800f378 <_ZN13STM32Hardware4readEv>
 800f7ce:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f2c0 8173 	blt.w	800fabe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	441a      	add	r2, r3
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f7ee:	2b07      	cmp	r3, #7
 800f7f0:	d11d      	bne.n	800f82e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800f7f8:	1c59      	adds	r1, r3, #1
 800f7fa:	687a      	ldr	r2, [r7, #4]
 800f7fc:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	b2d1      	uxtb	r1, r2
 800f804:	687a      	ldr	r2, [r7, #4]
 800f806:	4413      	add	r3, r2
 800f808:	460a      	mov	r2, r1
 800f80a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800f812:	1e5a      	subs	r2, r3, #1
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1b7      	bne.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2208      	movs	r2, #8
 800f828:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800f82c:	e7b2      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f834:	2b00      	cmp	r3, #0
 800f836:	d128      	bne.n	800f88a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	2bff      	cmp	r3, #255	; 0xff
 800f83c:	d10d      	bne.n	800f85a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f844:	1c5a      	adds	r2, r3, #1
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f103 0214 	add.w	r2, r3, #20
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800f858:	e79c      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	3304      	adds	r3, #4
 800f85e:	4618      	mov	r0, r3
 800f860:	f7ff fda9 	bl	800f3b6 <_ZN13STM32Hardware4timeEv>
 800f864:	4602      	mov	r2, r0
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	1ad3      	subs	r3, r2, r3
 800f86a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f86e:	4293      	cmp	r3, r2
 800f870:	bf8c      	ite	hi
 800f872:	2301      	movhi	r3, #1
 800f874:	2300      	movls	r3, #0
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d08b      	beq.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2200      	movs	r2, #0
 800f880:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 800f884:	f06f 0301 	mvn.w	r3, #1
 800f888:	e130      	b.n	800faec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f890:	2b01      	cmp	r3, #1
 800f892:	d11b      	bne.n	800f8cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	2bfe      	cmp	r3, #254	; 0xfe
 800f898:	d107      	bne.n	800f8aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8a0:	1c5a      	adds	r2, r3, #1
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800f8a8:	e774      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f8b8:	f083 0301 	eor.w	r3, r3, #1
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	f43f af68 	beq.w	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f000 f915 	bl	800faf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800f8ca:	e763      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8d2:	2b02      	cmp	r3, #2
 800f8d4:	d113      	bne.n	800f8fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	68ba      	ldr	r2, [r7, #8]
 800f8da:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f8ec:	1c5a      	adds	r2, r3, #1
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	68ba      	ldr	r2, [r7, #8]
 800f8f8:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800f8fc:	e74a      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f904:	2b03      	cmp	r3, #3
 800f906:	d110      	bne.n	800f92a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	021b      	lsls	r3, r3, #8
 800f912:	441a      	add	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f920:	1c5a      	adds	r2, r3, #1
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800f928:	e734      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f930:	2b04      	cmp	r3, #4
 800f932:	d116      	bne.n	800f962 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800f93a:	425a      	negs	r2, r3
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	b2d2      	uxtb	r2, r2
 800f940:	bf58      	it	pl
 800f942:	4253      	negpl	r3, r2
 800f944:	2bff      	cmp	r3, #255	; 0xff
 800f946:	d107      	bne.n	800f958 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f94e:	1c5a      	adds	r2, r3, #1
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800f956:	e71d      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800f960:	e718      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f968:	2b05      	cmp	r3, #5
 800f96a:	d10f      	bne.n	800f98c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	68ba      	ldr	r2, [r7, #8]
 800f970:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f97a:	1c5a      	adds	r2, r3, #1
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	68ba      	ldr	r2, [r7, #8]
 800f986:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800f98a:	e703      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f992:	2b06      	cmp	r3, #6
 800f994:	d117      	bne.n	800f9c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	021b      	lsls	r3, r3, #8
 800f9a0:	441a      	add	r2, r3
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2207      	movs	r2, #7
 800f9ac:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	f47f aeec 	bne.w	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2208      	movs	r2, #8
 800f9c0:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800f9c4:	e6e6      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f9cc:	2b08      	cmp	r3, #8
 800f9ce:	f47f aee1 	bne.w	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800f9e0:	425a      	negs	r2, r3
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	b2d2      	uxtb	r2, r2
 800f9e6:	bf58      	it	pl
 800f9e8:	4253      	negpl	r3, r2
 800f9ea:	2bff      	cmp	r3, #255	; 0xff
 800f9ec:	f47f aed2 	bne.w	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d110      	bne.n	800fa1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 f87a 	bl	800faf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f000 f894 	bl	800fb2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	68fa      	ldr	r2, [r7, #12]
 800fa0a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 800fa16:	f04f 33ff 	mov.w	r3, #4294967295
 800fa1a:	e067      	b.n	800faec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800fa22:	2b0a      	cmp	r3, #10
 800fa24:	d106      	bne.n	800fa34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3318      	adds	r3, #24
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f000 f95f 	bl	800fcf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800fa32:	e6af      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800fa3a:	2b06      	cmp	r3, #6
 800fa3c:	d10d      	bne.n	800fa5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3318      	adds	r3, #24
 800fa48:	4619      	mov	r1, r3
 800fa4a:	4610      	mov	r0, r2
 800fa4c:	f7fe ffef 	bl	800ea2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2201      	movs	r2, #1
 800fa54:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800fa58:	e69c      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800fa60:	2b0b      	cmp	r3, #11
 800fa62:	d104      	bne.n	800fa6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800fa6c:	e692      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800fa74:	3b64      	subs	r3, #100	; 0x64
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fa7c:	009b      	lsls	r3, r3, #2
 800fa7e:	4413      	add	r3, r2
 800fa80:	685b      	ldr	r3, [r3, #4]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f43f ae86 	beq.w	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800fa8e:	3b64      	subs	r3, #100	; 0x64
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	4413      	add	r3, r2
 800fa9a:	6858      	ldr	r0, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800faa2:	3b64      	subs	r3, #100	; 0x64
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800faaa:	009b      	lsls	r3, r3, #2
 800faac:	4413      	add	r3, r2
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	687a      	ldr	r2, [r7, #4]
 800fab6:	3218      	adds	r2, #24
 800fab8:	4611      	mov	r1, r2
 800faba:	4798      	blx	r3
    while (true)
 800fabc:	e66a      	b.n	800f794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800fabe:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d00f      	beq.n	800faea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 800fad0:	68fa      	ldr	r2, [r7, #12]
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800fad8:	4293      	cmp	r3, r2
 800fada:	d906      	bls.n	800faea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	f000 f809 	bl	800faf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 800faea:	2300      	movs	r3, #0
  }
 800faec:	4618      	mov	r0, r3
 800faee:	3710      	adds	r7, #16
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}

0800faf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b086      	sub	sp, #24
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800fafc:	f107 030c 	add.w	r3, r7, #12
 800fb00:	4618      	mov	r0, r3
 800fb02:	f7ff faf7 	bl	800f0f4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f107 020c 	add.w	r2, r7, #12
 800fb10:	210a      	movs	r1, #10
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	4798      	blx	r3
    rt_time = hardware_.time();
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	3304      	adds	r3, #4
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7ff fc4b 	bl	800f3b6 <_ZN13STM32Hardware4timeEv>
 800fb20:	4602      	mov	r2, r0
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	609a      	str	r2, [r3, #8]
  }
 800fb26:	bf00      	nop
 800fb28:	3718      	adds	r7, #24
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}

0800fb2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800fb2e:	b590      	push	{r4, r7, lr}
 800fb30:	b08b      	sub	sp, #44	; 0x2c
 800fb32:	af00      	add	r7, sp, #0
 800fb34:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800fb36:	f107 030c 	add.w	r3, r7, #12
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff f904 	bl	800ed48 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800fb40:	2300      	movs	r3, #0
 800fb42:	627b      	str	r3, [r7, #36]	; 0x24
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	2b18      	cmp	r3, #24
 800fb48:	dc5b      	bgt.n	800fc02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb4e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fb52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d04f      	beq.n	800fbfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb5e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb70:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb80:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb88:	6859      	ldr	r1, [r3, #4]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb8e:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	3308      	adds	r3, #8
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4608      	mov	r0, r1
 800fba0:	4798      	blx	r3
 800fba2:	4603      	mov	r3, r0
 800fba4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbaa:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fbae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb2:	6859      	ldr	r1, [r3, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbb8:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fbbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	330c      	adds	r3, #12
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4608      	mov	r0, r1
 800fbca:	4798      	blx	r3
 800fbcc:	4603      	mov	r3, r0
 800fbce:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800fbd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbd4:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681c      	ldr	r4, [r3, #0]
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbe0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7ff fb9e 	bl	800f32a <_ZN3ros9Publisher15getEndpointTypeEv>
 800fbee:	4601      	mov	r1, r0
 800fbf0:	f107 030c 	add.w	r3, r7, #12
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	627b      	str	r3, [r7, #36]	; 0x24
 800fc00:	e7a0      	b.n	800fb44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800fc02:	2300      	movs	r3, #0
 800fc04:	627b      	str	r3, [r7, #36]	; 0x24
 800fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc08:	2b18      	cmp	r3, #24
 800fc0a:	dc68      	bgt.n	800fcde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc10:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	685b      	ldr	r3, [r3, #4]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d05b      	beq.n	800fcd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc22:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc26:	009b      	lsls	r3, r3, #2
 800fc28:	4413      	add	r3, r2
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc36:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc48:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4413      	add	r3, r2
 800fc50:	6859      	ldr	r1, [r3, #4]
 800fc52:	687a      	ldr	r2, [r7, #4]
 800fc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc56:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4413      	add	r3, r2
 800fc5e:	685b      	ldr	r3, [r3, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3308      	adds	r3, #8
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	4608      	mov	r0, r1
 800fc68:	4798      	blx	r3
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800fc6e:	687a      	ldr	r2, [r7, #4]
 800fc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc72:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4413      	add	r3, r2
 800fc7a:	6859      	ldr	r1, [r3, #4]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc80:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	4413      	add	r3, r2
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	330c      	adds	r3, #12
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4608      	mov	r0, r1
 800fc92:	4798      	blx	r3
 800fc94:	4603      	mov	r3, r0
 800fc96:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800fc98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc9c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	681c      	ldr	r4, [r3, #0]
 800fca4:	687a      	ldr	r2, [r7, #4]
 800fca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	4413      	add	r3, r2
 800fcb0:	6859      	ldr	r1, [r3, #4]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fcba:	009b      	lsls	r3, r3, #2
 800fcbc:	4413      	add	r3, r2
 800fcbe:	685b      	ldr	r3, [r3, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3304      	adds	r3, #4
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	4608      	mov	r0, r1
 800fcc8:	4798      	blx	r3
 800fcca:	4601      	mov	r1, r0
 800fccc:	f107 030c 	add.w	r3, r7, #12
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd8:	3301      	adds	r3, #1
 800fcda:	627b      	str	r3, [r7, #36]	; 0x24
 800fcdc:	e793      	b.n	800fc06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2201      	movs	r2, #1
 800fce2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 800fce6:	bf00      	nop
 800fce8:	372c      	adds	r7, #44	; 0x2c
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd90      	pop	{r4, r7, pc}
	...

0800fcf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800fcfa:	f107 0308 	add.w	r3, r7, #8
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7ff f9f8 	bl	800f0f4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3304      	adds	r3, #4
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7ff fb54 	bl	800f3b6 <_ZN13STM32Hardware4timeEv>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800fd18:	f107 0308 	add.w	r3, r7, #8
 800fd1c:	6839      	ldr	r1, [r7, #0]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	f7ff fa58 	bl	800f1d4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	4914      	ldr	r1, [pc, #80]	; (800fd7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800fd2a:	fba1 1303 	umull	r1, r3, r1, r3
 800fd2e:	099b      	lsrs	r3, r3, #6
 800fd30:	4413      	add	r3, r2
 800fd32:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800fd34:	6939      	ldr	r1, [r7, #16]
 800fd36:	697a      	ldr	r2, [r7, #20]
 800fd38:	4b10      	ldr	r3, [pc, #64]	; (800fd7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 800fd3a:	fba3 0302 	umull	r0, r3, r3, r2
 800fd3e:	099b      	lsrs	r3, r3, #6
 800fd40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fd44:	fb00 f303 	mul.w	r3, r0, r3
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	4a0d      	ldr	r2, [pc, #52]	; (800fd80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 800fd4c:	fb02 f303 	mul.w	r3, r2, r3
 800fd50:	440b      	add	r3, r1
 800fd52:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800fd54:	f107 0308 	add.w	r3, r7, #8
 800fd58:	3304      	adds	r3, #4
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	6878      	ldr	r0, [r7, #4]
 800fd5e:	f000 f8a3 	bl	800fea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	3304      	adds	r3, #4
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7ff fb25 	bl	800f3b6 <_ZN13STM32Hardware4timeEv>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 800fd74:	bf00      	nop
 800fd76:	3718      	adds	r7, #24
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	10624dd3 	.word	0x10624dd3
 800fd80:	000f4240 	.word	0x000f4240

0800fd84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b088      	sub	sp, #32
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	2b63      	cmp	r3, #99	; 0x63
 800fd94:	dd09      	ble.n	800fdaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fd9c:	f083 0301 	eor.w	r3, r3, #1
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800fda6:	2300      	movs	r3, #0
 800fda8:	e077      	b.n	800fe9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800fdb6:	3207      	adds	r2, #7
 800fdb8:	4611      	mov	r1, r2
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	4798      	blx	r3
 800fdbe:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	22ff      	movs	r2, #255	; 0xff
 800fdc4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	22fe      	movs	r2, #254	; 0xfe
 800fdcc:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	b2da      	uxtb	r2, r3
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	b29b      	uxth	r3, r3
 800fdde:	121b      	asrs	r3, r3, #8
 800fde0:	b2da      	uxtb	r2, r3
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800fdf4:	4413      	add	r3, r2
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	43db      	mvns	r3, r3
 800fdfa:	b2da      	uxtb	r2, r3
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	b2da      	uxtb	r2, r3
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	b21b      	sxth	r3, r3
 800fe10:	121b      	asrs	r3, r3, #8
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800fe1e:	2305      	movs	r3, #5
 800fe20:	61bb      	str	r3, [r7, #24]
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	3307      	adds	r3, #7
 800fe26:	69ba      	ldr	r2, [r7, #24]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	da0d      	bge.n	800fe48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 800fe2c:	68fa      	ldr	r2, [r7, #12]
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	4413      	add	r3, r2
 800fe32:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	461a      	mov	r2, r3
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800fe40:	69bb      	ldr	r3, [r7, #24]
 800fe42:	3301      	adds	r3, #1
 800fe44:	61bb      	str	r3, [r7, #24]
 800fe46:	e7ec      	b.n	800fe22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	3307      	adds	r3, #7
 800fe4c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800fe4e:	69fb      	ldr	r3, [r7, #28]
 800fe50:	425a      	negs	r2, r3
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	b2d2      	uxtb	r2, r2
 800fe56:	bf58      	it	pl
 800fe58:	4253      	negpl	r3, r2
 800fe5a:	b2da      	uxtb	r2, r3
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	1c59      	adds	r1, r3, #1
 800fe60:	6179      	str	r1, [r7, #20]
 800fe62:	43d2      	mvns	r2, r2
 800fe64:	b2d1      	uxtb	r1, r2
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	4413      	add	r3, r2
 800fe6a:	460a      	mov	r2, r1
 800fe6c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 800fe70:	697b      	ldr	r3, [r7, #20]
 800fe72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe76:	dc0a      	bgt.n	800fe8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	1d18      	adds	r0, r3, #4
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fe82:	697a      	ldr	r2, [r7, #20]
 800fe84:	4619      	mov	r1, r3
 800fe86:	f7ff fa85 	bl	800f394 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	e005      	b.n	800fe9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800fe8e:	4905      	ldr	r1, [pc, #20]	; (800fea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 800fe90:	68f8      	ldr	r0, [r7, #12]
 800fe92:	f000 f847 	bl	800ff24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800fe96:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3720      	adds	r7, #32
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	0801525c 	.word	0x0801525c

0800fea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b084      	sub	sp, #16
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
 800feb0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	3304      	adds	r3, #4
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7ff fa7d 	bl	800f3b6 <_ZN13STM32Hardware4timeEv>
 800febc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	4914      	ldr	r1, [pc, #80]	; (800ff18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800fec6:	fba1 1303 	umull	r1, r3, r1, r3
 800feca:	099b      	lsrs	r3, r3, #6
 800fecc:	1ad3      	subs	r3, r2, r3
 800fece:	1e5a      	subs	r2, r3, #1
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	6859      	ldr	r1, [r3, #4]
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	4b0f      	ldr	r3, [pc, #60]	; (800ff18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 800fedc:	fba3 0302 	umull	r0, r3, r3, r2
 800fee0:	099b      	lsrs	r3, r3, #6
 800fee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fee6:	fb00 f303 	mul.w	r3, r0, r3
 800feea:	1ad3      	subs	r3, r2, r3
 800feec:	4a0b      	ldr	r2, [pc, #44]	; (800ff1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800feee:	fb02 f303 	mul.w	r3, r2, r3
 800fef2:	1aca      	subs	r2, r1, r3
 800fef4:	4b0a      	ldr	r3, [pc, #40]	; (800ff20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800fef6:	4413      	add	r3, r2
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f103 020c 	add.w	r2, r3, #12
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	3310      	adds	r3, #16
 800ff06:	4619      	mov	r1, r3
 800ff08:	4610      	mov	r0, r2
 800ff0a:	f7f7 f95d 	bl	80071c8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800ff0e:	bf00      	nop
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	10624dd3 	.word	0x10624dd3
 800ff1c:	000f4240 	.word	0x000f4240
 800ff20:	3b9aca00 	.word	0x3b9aca00

0800ff24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
 800ff2c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800ff2e:	683a      	ldr	r2, [r7, #0]
 800ff30:	2103      	movs	r1, #3
 800ff32:	6878      	ldr	r0, [r7, #4]
 800ff34:	f000 f804 	bl	800ff40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800ff38:	bf00      	nop
 800ff3a:	3708      	adds	r7, #8
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b088      	sub	sp, #32
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	60f8      	str	r0, [r7, #12]
 800ff48:	460b      	mov	r3, r1
 800ff4a:	607a      	str	r2, [r7, #4]
 800ff4c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800ff4e:	f107 0314 	add.w	r3, r7, #20
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7fe fb86 	bl	800e664 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800ff58:	7afb      	ldrb	r3, [r7, #11]
 800ff5a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f107 0214 	add.w	r2, r7, #20
 800ff6a:	2107      	movs	r1, #7
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	4798      	blx	r3
  }
 800ff70:	bf00      	nop
 800ff72:	3720      	adds	r7, #32
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <_Z41__static_initialization_and_destruction_0ii>:
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d116      	bne.n	800ffb6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 800ff88:	683b      	ldr	r3, [r7, #0]
 800ff8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d111      	bne.n	800ffb6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle rosSerialNode;
 800ff92:	480b      	ldr	r0, [pc, #44]	; (800ffc0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800ff94:	f7ff faae 	bl	800f4f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt16 pubData;
 800ff98:	480a      	ldr	r0, [pc, #40]	; (800ffc4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ff9a:	f7fe fae7 	bl	800e56c <_ZN8std_msgs6UInt16C1Ev>
ros::Publisher _pub("pubTopicName", &pubData);
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	4a08      	ldr	r2, [pc, #32]	; (800ffc4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ffa2:	4909      	ldr	r1, [pc, #36]	; (800ffc8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ffa4:	4809      	ldr	r0, [pc, #36]	; (800ffcc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800ffa6:	f7ff f995 	bl	800f2d4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::UInt16> _sub("subTopicName", &rosNodeSubCB);
 800ffaa:	2301      	movs	r3, #1
 800ffac:	4a08      	ldr	r2, [pc, #32]	; (800ffd0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800ffae:	4909      	ldr	r1, [pc, #36]	; (800ffd4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800ffb0:	4809      	ldr	r0, [pc, #36]	; (800ffd8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ffb2:	f7ff fb2d 	bl	800f610 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
}
 800ffb6:	bf00      	nop
 800ffb8:	3708      	adds	r7, #8
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	2000104c 	.word	0x2000104c
 800ffc4:	2000157c 	.word	0x2000157c
 800ffc8:	08015298 	.word	0x08015298
 800ffcc:	20001584 	.word	0x20001584
 800ffd0:	0800f42d 	.word	0x0800f42d
 800ffd4:	080152a8 	.word	0x080152a8
 800ffd8:	20001598 	.word	0x20001598

0800ffdc <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 800ffdc:	b580      	push	{r7, lr}
 800ffde:	b082      	sub	sp, #8
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	330c      	adds	r3, #12
 800ffea:	6839      	ldr	r1, [r7, #0]
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe faf5 	bl	800e5dc <_ZN8std_msgs6UInt1611deserializeEPh>
    this->cb_(msg);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	695b      	ldr	r3, [r3, #20]
 800fff6:	687a      	ldr	r2, [r7, #4]
 800fff8:	320c      	adds	r2, #12
 800fffa:	4610      	mov	r0, r2
 800fffc:	4798      	blx	r3
  }
 800fffe:	bf00      	nop
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}

08010006 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8010006:	b480      	push	{r7}
 8010008:	b083      	sub	sp, #12
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	699b      	ldr	r3, [r3, #24]
  }
 8010012:	4618      	mov	r0, r3
 8010014:	370c      	adds	r7, #12
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 801001e:	b580      	push	{r7, lr}
 8010020:	b082      	sub	sp, #8
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	330c      	adds	r3, #12
 801002a:	4618      	mov	r0, r3
 801002c:	f7fe fafe 	bl	800e62c <_ZN8std_msgs6UInt167getTypeEv>
 8010030:	4603      	mov	r3, r0
  }
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 801003a:	b580      	push	{r7, lr}
 801003c:	b082      	sub	sp, #8
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	330c      	adds	r3, #12
 8010046:	4618      	mov	r0, r3
 8010048:	f7fe fafe 	bl	800e648 <_ZN8std_msgs6UInt166getMD5Ev>
 801004c:	4603      	mov	r3, r0
  }
 801004e:	4618      	mov	r0, r3
 8010050:	3708      	adds	r7, #8
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}

08010056 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8010056:	b480      	push	{r7}
 8010058:	b083      	sub	sp, #12
 801005a:	af00      	add	r7, sp, #0
 801005c:	6078      	str	r0, [r7, #4]
    return configured_;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 8010064:	4618      	mov	r0, r3
 8010066:	370c      	adds	r7, #12
 8010068:	46bd      	mov	sp, r7
 801006a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006e:	4770      	bx	lr

08010070 <_GLOBAL__sub_I_rosSerialNode>:
 8010070:	b580      	push	{r7, lr}
 8010072:	af00      	add	r7, sp, #0
 8010074:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010078:	2001      	movs	r0, #1
 801007a:	f7ff ff7d 	bl	800ff78 <_Z41__static_initialization_and_destruction_0ii>
 801007e:	bd80      	pop	{r7, pc}

08010080 <_ZN8SOFT_ARMC1Ev>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
 8010080:	b5b0      	push	{r4, r5, r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	2408      	movs	r4, #8
 801008c:	461d      	mov	r5, r3
 801008e:	2c00      	cmp	r4, #0
 8010090:	db06      	blt.n	80100a0 <_ZN8SOFT_ARMC1Ev+0x20>
 8010092:	2106      	movs	r1, #6
 8010094:	4628      	mov	r0, r5
 8010096:	f000 f96b 	bl	8010370 <_ZN16SOFT_ARM_SEGMENTC1Ei>
 801009a:	35a4      	adds	r5, #164	; 0xa4
 801009c:	3c01      	subs	r4, #1
 801009e:	e7f6      	b.n	801008e <_ZN8SOFT_ARMC1Ev+0xe>
{

}
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	4618      	mov	r0, r3
 80100a4:	3708      	adds	r7, #8
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080100ac <_ZN8SOFT_ARM17setupChamberPortsEv>:


void SOFT_ARM::setupChamberPorts()
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b088      	sub	sp, #32
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
	/*Every actuator is refered to with two numbers, segNum(0-8) and bellowNum(0-5)*/

	for(int j=0;j<SEGMENTNUM;j++){
 80100b4:	2300      	movs	r3, #0
 80100b6:	61fb      	str	r3, [r7, #28]
 80100b8:	69fb      	ldr	r3, [r7, #28]
 80100ba:	2b08      	cmp	r3, #8
 80100bc:	dc3a      	bgt.n	8010134 <_ZN8SOFT_ARM17setupChamberPortsEv+0x88>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	22a4      	movs	r2, #164	; 0xa4
 80100c2:	fb02 f303 	mul.w	r3, r2, r3
 80100c6:	687a      	ldr	r2, [r7, #4]
 80100c8:	4413      	add	r3, r2
 80100ca:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++)
 80100cc:	2300      	movs	r3, #0
 80100ce:	61bb      	str	r3, [r7, #24]
 80100d0:	69bb      	ldr	r3, [r7, #24]
 80100d2:	2b05      	cmp	r3, #5
 80100d4:	dc2a      	bgt.n	801012c <_ZN8SOFT_ARM17setupChamberPortsEv+0x80>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	69ba      	ldr	r2, [r7, #24]
 80100da:	3216      	adds	r2, #22
 80100dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e0:	613b      	str	r3, [r7, #16]
			int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	011b      	lsls	r3, r3, #4
 80100e6:	3314      	adds	r3, #20
 80100e8:	60fb      	str	r3, [r7, #12]
			/*analog port is treated as the overall No. in our arm.*/
			bellowCur->attach(pwmPortOffset+i*2, pwmPortOffset+i*2+1, j*BELLOWNUM+i);
 80100ea:	69bb      	ldr	r3, [r7, #24]
 80100ec:	005a      	lsls	r2, r3, #1
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	18d1      	adds	r1, r2, r3
 80100f2:	69bb      	ldr	r3, [r7, #24]
 80100f4:	005a      	lsls	r2, r3, #1
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	4413      	add	r3, r2
 80100fa:	1c58      	adds	r0, r3, #1
 80100fc:	69fa      	ldr	r2, [r7, #28]
 80100fe:	4613      	mov	r3, r2
 8010100:	005b      	lsls	r3, r3, #1
 8010102:	4413      	add	r3, r2
 8010104:	005b      	lsls	r3, r3, #1
 8010106:	461a      	mov	r2, r3
 8010108:	69bb      	ldr	r3, [r7, #24]
 801010a:	4413      	add	r3, r2
 801010c:	4602      	mov	r2, r0
 801010e:	6938      	ldr	r0, [r7, #16]
 8010110:	f7fb f878 	bl	800b204 <_ZN7CHAMBER6attachEiii>
			bellowCur->writeOpening(0);
 8010114:	ed9f 0a09 	vldr	s0, [pc, #36]	; 801013c <_ZN8SOFT_ARM17setupChamberPortsEv+0x90>
 8010118:	6938      	ldr	r0, [r7, #16]
 801011a:	f7fb f9c3 	bl	800b4a4 <_ZN7CHAMBER12writeOpeningEf>
			HAL_Delay(10);
 801011e:	200a      	movs	r0, #10
 8010120:	f7f0 ff76 	bl	8001010 <HAL_Delay>
		for(int i=0;i<BELLOWNUM;i++)
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	3301      	adds	r3, #1
 8010128:	61bb      	str	r3, [r7, #24]
 801012a:	e7d1      	b.n	80100d0 <_ZN8SOFT_ARM17setupChamberPortsEv+0x24>
	for(int j=0;j<SEGMENTNUM;j++){
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	3301      	adds	r3, #1
 8010130:	61fb      	str	r3, [r7, #28]
 8010132:	e7c1      	b.n	80100b8 <_ZN8SOFT_ARM17setupChamberPortsEv+0xc>
		}
	}

}
 8010134:	bf00      	nop
 8010136:	3720      	adds	r7, #32
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}
 801013c:	00000000 	.word	0x00000000

08010140 <_ZN8SOFT_ARM15zeroPressureAllEv>:

void SOFT_ARM::zeroPressureAll() {
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 8010148:	2300      	movs	r3, #0
 801014a:	60fb      	str	r3, [r7, #12]
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2b08      	cmp	r3, #8
 8010150:	dc1b      	bgt.n	801018a <_ZN8SOFT_ARM15zeroPressureAllEv+0x4a>
		for(int i=0;i<BELLOWNUM;i++){
 8010152:	2300      	movs	r3, #0
 8010154:	60bb      	str	r3, [r7, #8]
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	2b05      	cmp	r3, #5
 801015a:	dc12      	bgt.n	8010182 <_ZN8SOFT_ARM15zeroPressureAllEv+0x42>
			armSegments[j].bellows[i]->zeroPressure();
 801015c:	6879      	ldr	r1, [r7, #4]
 801015e:	68fa      	ldr	r2, [r7, #12]
 8010160:	4613      	mov	r3, r2
 8010162:	009b      	lsls	r3, r3, #2
 8010164:	4413      	add	r3, r2
 8010166:	00db      	lsls	r3, r3, #3
 8010168:	4413      	add	r3, r2
 801016a:	68ba      	ldr	r2, [r7, #8]
 801016c:	4413      	add	r3, r2
 801016e:	3316      	adds	r3, #22
 8010170:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010174:	4618      	mov	r0, r3
 8010176:	f7fb f862 	bl	800b23e <_ZN7CHAMBER12zeroPressureEv>
		for(int i=0;i<BELLOWNUM;i++){
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	3301      	adds	r3, #1
 801017e:	60bb      	str	r3, [r7, #8]
 8010180:	e7e9      	b.n	8010156 <_ZN8SOFT_ARM15zeroPressureAllEv+0x16>
	for(int j=0;j<SEGMENTNUM;j++){
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3301      	adds	r3, #1
 8010186:	60fb      	str	r3, [r7, #12]
 8010188:	e7e0      	b.n	801014c <_ZN8SOFT_ARM15zeroPressureAllEv+0xc>
		}
	}
}
 801018a:	bf00      	nop
 801018c:	3710      	adds	r7, #16
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <_ZN8SOFT_ARM15readPressureAllEv>:

void SOFT_ARM::readPressureAll()
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b086      	sub	sp, #24
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
	//Read pressure information from sensorData(from CANbus) as the Chamber's pressure
	for(int j=0;j<SEGMENTNUM;j++){
 801019a:	2300      	movs	r3, #0
 801019c:	617b      	str	r3, [r7, #20]
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	2b08      	cmp	r3, #8
 80101a2:	dc39      	bgt.n	8010218 <_ZN8SOFT_ARM15readPressureAllEv+0x86>
		for(int i=0;i<BELLOWNUM;i++){
 80101a4:	2300      	movs	r3, #0
 80101a6:	613b      	str	r3, [r7, #16]
 80101a8:	693b      	ldr	r3, [r7, #16]
 80101aa:	2b05      	cmp	r3, #5
 80101ac:	dc30      	bgt.n	8010210 <_ZN8SOFT_ARM15readPressureAllEv+0x7e>
			float pressureGaugeCan=sensorData.data[j][i].pressure*100;  //gauge Pa
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	6979      	ldr	r1, [r7, #20]
 80101b4:	461a      	mov	r2, r3
 80101b6:	0052      	lsls	r2, r2, #1
 80101b8:	441a      	add	r2, r3
 80101ba:	0093      	lsls	r3, r2, #2
 80101bc:	461a      	mov	r2, r3
 80101be:	460b      	mov	r3, r1
 80101c0:	00db      	lsls	r3, r3, #3
 80101c2:	440b      	add	r3, r1
 80101c4:	00db      	lsls	r3, r3, #3
 80101c6:	4413      	add	r3, r2
 80101c8:	4403      	add	r3, r0
 80101ca:	f603 2306 	addw	r3, r3, #2566	; 0xa06
 80101ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80101d2:	461a      	mov	r2, r3
 80101d4:	2364      	movs	r3, #100	; 0x64
 80101d6:	fb03 f302 	mul.w	r3, r3, r2
 80101da:	ee07 3a90 	vmov	s15, r3
 80101de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101e2:	edc7 7a03 	vstr	s15, [r7, #12]
			armSegments[j].bellows[i]->readPressureExt(pressureGaugeCan);
 80101e6:	6879      	ldr	r1, [r7, #4]
 80101e8:	697a      	ldr	r2, [r7, #20]
 80101ea:	4613      	mov	r3, r2
 80101ec:	009b      	lsls	r3, r3, #2
 80101ee:	4413      	add	r3, r2
 80101f0:	00db      	lsls	r3, r3, #3
 80101f2:	4413      	add	r3, r2
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	4413      	add	r3, r2
 80101f8:	3316      	adds	r3, #22
 80101fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80101fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8010202:	4618      	mov	r0, r3
 8010204:	f7fb f82b 	bl	800b25e <_ZN7CHAMBER15readPressureExtEf>
		for(int i=0;i<BELLOWNUM;i++){
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	3301      	adds	r3, #1
 801020c:	613b      	str	r3, [r7, #16]
 801020e:	e7cb      	b.n	80101a8 <_ZN8SOFT_ARM15readPressureAllEv+0x16>
	for(int j=0;j<SEGMENTNUM;j++){
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	3301      	adds	r3, #1
 8010214:	617b      	str	r3, [r7, #20]
 8010216:	e7c2      	b.n	801019e <_ZN8SOFT_ARM15readPressureAllEv+0xc>
		}
	}
}
 8010218:	bf00      	nop
 801021a:	3718      	adds	r7, #24
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}

08010220 <_ZN8SOFT_ARM15writeCommandAllEv>:

void SOFT_ARM::writeCommandAll()
{
 8010220:	b580      	push	{r7, lr}
 8010222:	b088      	sub	sp, #32
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]

	for(int j=0;j<SEGMENTNUM;j++){
 8010228:	2300      	movs	r3, #0
 801022a:	61fb      	str	r3, [r7, #28]
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	2b08      	cmp	r3, #8
 8010230:	f300 8086 	bgt.w	8010340 <_ZN8SOFT_ARM15writeCommandAllEv+0x120>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	22a4      	movs	r2, #164	; 0xa4
 8010238:	fb02 f303 	mul.w	r3, r2, r3
 801023c:	687a      	ldr	r2, [r7, #4]
 801023e:	4413      	add	r3, r2
 8010240:	617b      	str	r3, [r7, #20]
		for(int i=0;i<BELLOWNUM;i++){
 8010242:	2300      	movs	r3, #0
 8010244:	61bb      	str	r3, [r7, #24]
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	2b05      	cmp	r3, #5
 801024a:	dc75      	bgt.n	8010338 <_ZN8SOFT_ARM15writeCommandAllEv+0x118>
			CHAMBER *bellowCur=armSegCur->bellows[i];
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	69ba      	ldr	r2, [r7, #24]
 8010250:	3216      	adds	r2, #22
 8010252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010256:	613b      	str	r3, [r7, #16]

			//write pressure command from commandData to the chamber
			if(commandData.data[j][i].commandType==pressureCommandType){
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	69f9      	ldr	r1, [r7, #28]
 801025e:	461a      	mov	r2, r3
 8010260:	0052      	lsls	r2, r2, #1
 8010262:	441a      	add	r2, r3
 8010264:	0093      	lsls	r3, r2, #2
 8010266:	461a      	mov	r2, r3
 8010268:	460b      	mov	r3, r1
 801026a:	00db      	lsls	r3, r3, #3
 801026c:	440b      	add	r3, r1
 801026e:	00db      	lsls	r3, r3, #3
 8010270:	4413      	add	r3, r2
 8010272:	4403      	add	r3, r0
 8010274:	f603 43a2 	addw	r3, r3, #3234	; 0xca2
 8010278:	881b      	ldrh	r3, [r3, #0]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d122      	bne.n	80102c4 <_ZN8SOFT_ARM15writeCommandAllEv+0xa4>
				float pressureCommandTemp=commandData.data[j][i].values[0]*1000;//gauge PA
 801027e:	6878      	ldr	r0, [r7, #4]
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	69f9      	ldr	r1, [r7, #28]
 8010284:	461a      	mov	r2, r3
 8010286:	0052      	lsls	r2, r2, #1
 8010288:	441a      	add	r2, r3
 801028a:	0093      	lsls	r3, r2, #2
 801028c:	461a      	mov	r2, r3
 801028e:	460b      	mov	r3, r1
 8010290:	00db      	lsls	r3, r3, #3
 8010292:	440b      	add	r3, r1
 8010294:	00db      	lsls	r3, r3, #3
 8010296:	4413      	add	r3, r2
 8010298:	4403      	add	r3, r0
 801029a:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 801029e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80102a2:	461a      	mov	r2, r3
 80102a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80102a8:	fb03 f302 	mul.w	r3, r3, r2
 80102ac:	ee07 3a90 	vmov	s15, r3
 80102b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102b4:	edc7 7a02 	vstr	s15, [r7, #8]
				bellowCur->writePressure(pressureCommandTemp);
 80102b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80102bc:	6938      	ldr	r0, [r7, #16]
 80102be:	f7fa ffef 	bl	800b2a0 <_ZN7CHAMBER13writePressureEf>
 80102c2:	e035      	b.n	8010330 <_ZN8SOFT_ARM15writeCommandAllEv+0x110>
			}
			else if(commandData.data[j][i].commandType==openingCommandType){
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	69f9      	ldr	r1, [r7, #28]
 80102ca:	461a      	mov	r2, r3
 80102cc:	0052      	lsls	r2, r2, #1
 80102ce:	441a      	add	r2, r3
 80102d0:	0093      	lsls	r3, r2, #2
 80102d2:	461a      	mov	r2, r3
 80102d4:	460b      	mov	r3, r1
 80102d6:	00db      	lsls	r3, r3, #3
 80102d8:	440b      	add	r3, r1
 80102da:	00db      	lsls	r3, r3, #3
 80102dc:	4413      	add	r3, r2
 80102de:	4403      	add	r3, r0
 80102e0:	f603 43a2 	addw	r3, r3, #3234	; 0xca2
 80102e4:	881b      	ldrh	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d122      	bne.n	8010330 <_ZN8SOFT_ARM15writeCommandAllEv+0x110>
				float openingCommandTemp=((int16_t)commandData.data[j][i].values[0])*3.0517578125e-5;//values[0]/32767
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	69bb      	ldr	r3, [r7, #24]
 80102ee:	69f9      	ldr	r1, [r7, #28]
 80102f0:	461a      	mov	r2, r3
 80102f2:	0052      	lsls	r2, r2, #1
 80102f4:	441a      	add	r2, r3
 80102f6:	0093      	lsls	r3, r2, #2
 80102f8:	461a      	mov	r2, r3
 80102fa:	460b      	mov	r3, r1
 80102fc:	00db      	lsls	r3, r3, #3
 80102fe:	440b      	add	r3, r1
 8010300:	00db      	lsls	r3, r3, #3
 8010302:	4413      	add	r3, r2
 8010304:	4403      	add	r3, r0
 8010306:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 801030a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801030e:	ee07 3a90 	vmov	s15, r3
 8010312:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010316:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8010348 <_ZN8SOFT_ARM15writeCommandAllEv+0x128>
 801031a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801031e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010322:	edc7 7a03 	vstr	s15, [r7, #12]
				bellowCur->writeOpening(openingCommandTemp);
 8010326:	ed97 0a03 	vldr	s0, [r7, #12]
 801032a:	6938      	ldr	r0, [r7, #16]
 801032c:	f7fb f8ba 	bl	800b4a4 <_ZN7CHAMBER12writeOpeningEf>
		for(int i=0;i<BELLOWNUM;i++){
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	3301      	adds	r3, #1
 8010334:	61bb      	str	r3, [r7, #24]
 8010336:	e786      	b.n	8010246 <_ZN8SOFT_ARM15writeCommandAllEv+0x26>
	for(int j=0;j<SEGMENTNUM;j++){
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	3301      	adds	r3, #1
 801033c:	61fb      	str	r3, [r7, #28]
 801033e:	e775      	b.n	801022c <_ZN8SOFT_ARM15writeCommandAllEv+0xc>
			}
		}
	}
}
 8010340:	bf00      	nop
 8010342:	3720      	adds	r7, #32
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	00000000 	.word	0x00000000
 801034c:	3f000000 	.word	0x3f000000

08010350 <_ZN8SOFT_ARM15execInfoCommandEPc>:

void SOFT_ARM::execInfoCommand(char *infoBuf){
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
	if(infoBuf[0]=='z'){
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	2b7a      	cmp	r3, #122	; 0x7a
 8010360:	d102      	bne.n	8010368 <_ZN8SOFT_ARM15execInfoCommandEPc+0x18>
		zeroPressureAll();
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7ff feec 	bl	8010140 <_ZN8SOFT_ARM15zeroPressureAllEv>
	}
}
 8010368:	bf00      	nop
 801036a:	3708      	adds	r7, #8
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}

08010370 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 8010370:	b590      	push	{r4, r7, lr}
 8010372:	b085      	sub	sp, #20
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
 8010378:	6039      	str	r1, [r7, #0]
{
	basePlatform = new PNEUDRIVE(num);
 801037a:	2084      	movs	r0, #132	; 0x84
 801037c:	f000 fafb 	bl	8010976 <_Znwj>
 8010380:	4603      	mov	r3, r0
 8010382:	461c      	mov	r4, r3
 8010384:	6839      	ldr	r1, [r7, #0]
 8010386:	4620      	mov	r0, r4
 8010388:	f7fb fe02 	bl	800bf90 <_ZN9PNEUDRIVEC1Ei>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
 8010390:	2300      	movs	r3, #0
 8010392:	60fb      	str	r3, [r7, #12]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	2b05      	cmp	r3, #5
 8010398:	dc0f      	bgt.n	80103ba <_ZN16SOFT_ARM_SEGMENTC1Ei+0x4a>
	{
		bellows[i]=basePlatform->chambers[i];
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801039e:	689a      	ldr	r2, [r3, #8]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4413      	add	r3, r2
 80103a6:	6819      	ldr	r1, [r3, #0]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	3216      	adds	r2, #22
 80103ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	3301      	adds	r3, #1
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	e7ec      	b.n	8010394 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x24>
	}

}
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	4618      	mov	r0, r3
 80103be:	3714      	adds	r7, #20
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd90      	pop	{r4, r7, pc}

080103c4 <unpackQuaternion>:
	qCom->maxLocHigh=maxLoc>>1;
	qCom->maxLocLow=maxLoc;
	qCom->maxSign=((uint16_t)(((uint16_t)qOri->imuData[maxLoc])&0x8000))>>15;
}

void unpackQuaternion(QUATERNIONCOMPACT *qCom,QUATERNION *qOri){
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b088      	sub	sp, #32
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
 80103cc:	6039      	str	r1, [r7, #0]
	int32_t lastNumOri=0;
 80103ce:	2300      	movs	r3, #0
 80103d0:	61fb      	str	r3, [r7, #28]
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	785b      	ldrb	r3, [r3, #1]
 80103d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80103da:	b2db      	uxtb	r3, r3
 80103dc:	005b      	lsls	r3, r3, #1
 80103de:	b21a      	sxth	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	78db      	ldrb	r3, [r3, #3]
 80103e4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	b21b      	sxth	r3, r3
 80103ec:	4313      	orrs	r3, r2
 80103ee:	b21b      	sxth	r3, r3
 80103f0:	837b      	strh	r3, [r7, #26]
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<COMPACT_SHIFT_BIT);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	881b      	ldrh	r3, [r3, #0]
 80103f6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80103fa:	b29b      	uxth	r3, r3
 80103fc:	009b      	lsls	r3, r3, #2
 80103fe:	833b      	strh	r3, [r7, #24]
	int16_t qRes1=(int16_t)(((uint16_t)qCom->imuData1)<<COMPACT_SHIFT_BIT);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	885b      	ldrh	r3, [r3, #2]
 8010404:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010408:	b29b      	uxth	r3, r3
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	82fb      	strh	r3, [r7, #22]
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<COMPACT_SHIFT_BIT);
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	889b      	ldrh	r3, [r3, #4]
 8010412:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010416:	b29b      	uxth	r3, r3
 8010418:	009b      	lsls	r3, r3, #2
 801041a:	82bb      	strh	r3, [r7, #20]

	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 801041c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010420:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010424:	fb02 f203 	mul.w	r2, r2, r3
 8010428:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801042c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8010430:	fb01 f303 	mul.w	r3, r1, r3
 8010434:	441a      	add	r2, r3
 8010436:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801043a:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 801043e:	fb01 f303 	mul.w	r3, r1, r3
 8010442:	4413      	add	r3, r2
 8010444:	613b      	str	r3, [r7, #16]
	const int maxNum=(uint32_t)(1<<30);
 8010446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801044a:	60fb      	str	r3, [r7, #12]
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	693a      	ldr	r2, [r7, #16]
 8010450:	429a      	cmp	r2, r3
 8010452:	d207      	bcs.n	8010464 <unpackQuaternion+0xa0>
 8010454:	68fa      	ldr	r2, [r7, #12]
 8010456:	693b      	ldr	r3, [r7, #16]
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	4618      	mov	r0, r3
 801045c:	f000 f893 	bl	8010586 <fastSqrt32>
 8010460:	4603      	mov	r3, r0
 8010462:	e000      	b.n	8010466 <unpackQuaternion+0xa2>
 8010464:	2300      	movs	r3, #0
 8010466:	61fb      	str	r3, [r7, #28]
	int16_t lastNum=qCom->maxSign?-lastNumOri:lastNumOri;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	795b      	ldrb	r3, [r3, #5]
 801046c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010470:	b2db      	uxtb	r3, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	d005      	beq.n	8010482 <unpackQuaternion+0xbe>
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	b29b      	uxth	r3, r3
 801047a:	425b      	negs	r3, r3
 801047c:	b29b      	uxth	r3, r3
 801047e:	b21b      	sxth	r3, r3
 8010480:	e001      	b.n	8010486 <unpackQuaternion+0xc2>
 8010482:	69fb      	ldr	r3, [r7, #28]
 8010484:	b21b      	sxth	r3, r3
 8010486:	817b      	strh	r3, [r7, #10]
	if(maxLoc==0)
 8010488:	8b7b      	ldrh	r3, [r7, #26]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d10c      	bne.n	80104a8 <unpackQuaternion+0xe4>
	{
		qOri->imuData[1]=qRes0;
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	8b3a      	ldrh	r2, [r7, #24]
 8010492:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes1;
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	8afa      	ldrh	r2, [r7, #22]
 8010498:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	8aba      	ldrh	r2, [r7, #20]
 801049e:	80da      	strh	r2, [r3, #6]
		qOri->imuData[0]=lastNum;
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	897a      	ldrh	r2, [r7, #10]
 80104a4:	801a      	strh	r2, [r3, #0]
		qOri->imuData[0]=qRes0;
		qOri->imuData[1]=qRes1;
		qOri->imuData[2]=qRes2;
		qOri->imuData[3]=lastNum;
	}
}
 80104a6:	e02b      	b.n	8010500 <unpackQuaternion+0x13c>
	else if (maxLoc==1){
 80104a8:	8b7b      	ldrh	r3, [r7, #26]
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d10c      	bne.n	80104c8 <unpackQuaternion+0x104>
		qOri->imuData[0]=qRes0;
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	8b3a      	ldrh	r2, [r7, #24]
 80104b2:	801a      	strh	r2, [r3, #0]
		qOri->imuData[2]=qRes1;
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	8afa      	ldrh	r2, [r7, #22]
 80104b8:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	8aba      	ldrh	r2, [r7, #20]
 80104be:	80da      	strh	r2, [r3, #6]
		qOri->imuData[1]=lastNum;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	897a      	ldrh	r2, [r7, #10]
 80104c4:	805a      	strh	r2, [r3, #2]
}
 80104c6:	e01b      	b.n	8010500 <unpackQuaternion+0x13c>
	else if(maxLoc==2){
 80104c8:	8b7b      	ldrh	r3, [r7, #26]
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d10c      	bne.n	80104e8 <unpackQuaternion+0x124>
		qOri->imuData[0]=qRes0;
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	8b3a      	ldrh	r2, [r7, #24]
 80104d2:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	8afa      	ldrh	r2, [r7, #22]
 80104d8:	805a      	strh	r2, [r3, #2]
		qOri->imuData[3]=qRes2;
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	8aba      	ldrh	r2, [r7, #20]
 80104de:	80da      	strh	r2, [r3, #6]
		qOri->imuData[2]=lastNum;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	897a      	ldrh	r2, [r7, #10]
 80104e4:	809a      	strh	r2, [r3, #4]
}
 80104e6:	e00b      	b.n	8010500 <unpackQuaternion+0x13c>
		qOri->imuData[0]=qRes0;
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	8b3a      	ldrh	r2, [r7, #24]
 80104ec:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	8afa      	ldrh	r2, [r7, #22]
 80104f2:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes2;
 80104f4:	683b      	ldr	r3, [r7, #0]
 80104f6:	8aba      	ldrh	r2, [r7, #20]
 80104f8:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=lastNum;
 80104fa:	683b      	ldr	r3, [r7, #0]
 80104fc:	897a      	ldrh	r2, [r7, #10]
 80104fe:	80da      	strh	r2, [r3, #6]
}
 8010500:	bf00      	nop
 8010502:	3720      	adds	r7, #32
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}

08010508 <decodeSensorData>:


void decodeSensorData(SENSORDATACOMPACT *scom, SENSORDATA *s) {
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]


#if COMPACT_VERSION_PRESSURE_HPA==1
	s->pressure=scom->pressure;    //absolute hpa
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	881b      	ldrh	r3, [r3, #0]
 8010516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801051a:	b29b      	uxth	r3, r3
 801051c:	b21a      	sxth	r2, r3
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	801a      	strh	r2, [r3, #0]
	s->distance= ((uint16_t)(scom->distance<<3)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	785b      	ldrb	r3, [r3, #1]
 8010526:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801052a:	b2db      	uxtb	r3, r3
 801052c:	b29b      	uxth	r3, r3
 801052e:	00db      	lsls	r3, r3, #3
 8010530:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit2<<2)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	78db      	ldrb	r3, [r3, #3]
 8010536:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801053a:	b2db      	uxtb	r3, r3
 801053c:	b29b      	uxth	r3, r3
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	b29b      	uxth	r3, r3
 8010542:	4413      	add	r3, r2
 8010544:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit1<<1)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	795b      	ldrb	r3, [r3, #5]
 801054a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801054e:	b2db      	uxtb	r3, r3
 8010550:	b29b      	uxth	r3, r3
 8010552:	005b      	lsls	r3, r3, #1
 8010554:	b29b      	uxth	r3, r3
 8010556:	4413      	add	r3, r2
 8010558:	b29a      	uxth	r2, r3
			+(uint16_t)(scom->quaternionCom.distanceBit0));
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	79db      	ldrb	r3, [r3, #7]
 801055e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010562:	b2db      	uxtb	r3, r3
 8010564:	b29b      	uxth	r3, r3
 8010566:	4413      	add	r3, r2
 8010568:	b29a      	uxth	r2, r3
	s->distance= ((uint16_t)(scom->distance<<3)
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	805a      	strh	r2, [r3, #2]
#else
	s->pressure=scom->pressure;    //absolute
	s->distance=scom->distance;
#endif
	unpackQuaternion(&(scom->quaternionCom),&(s->quaternion));
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	1c9a      	adds	r2, r3, #2
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	3304      	adds	r3, #4
 8010576:	4619      	mov	r1, r3
 8010578:	4610      	mov	r0, r2
 801057a:	f7ff ff23 	bl	80103c4 <unpackQuaternion>
}
 801057e:	bf00      	nop
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}

08010586 <fastSqrt32>:


static unsigned int fastSqrt32(unsigned long n)
{
 8010586:	b480      	push	{r7}
 8010588:	b085      	sub	sp, #20
 801058a:	af00      	add	r7, sp, #0
 801058c:	6078      	str	r0, [r7, #4]
    unsigned int c = 0x8000;
 801058e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010592:	60fb      	str	r3, [r7, #12]
    unsigned int g = 0x8000;
 8010594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010598:	60bb      	str	r3, [r7, #8]

    for(;;) {
        if(g*g > n)
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	68ba      	ldr	r2, [r7, #8]
 801059e:	fb02 f303 	mul.w	r3, r2, r3
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	429a      	cmp	r2, r3
 80105a6:	d203      	bcs.n	80105b0 <fastSqrt32+0x2a>
            g ^= c;
 80105a8:	68ba      	ldr	r2, [r7, #8]
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	4053      	eors	r3, r2
 80105ae:	60bb      	str	r3, [r7, #8]
        c >>= 1;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	085b      	lsrs	r3, r3, #1
 80105b4:	60fb      	str	r3, [r7, #12]
        if(c == 0)
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d101      	bne.n	80105c0 <fastSqrt32+0x3a>
            return g;
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	e004      	b.n	80105ca <fastSqrt32+0x44>
        g |= c;
 80105c0:	68ba      	ldr	r2, [r7, #8]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	60bb      	str	r3, [r7, #8]
        if(g*g > n)
 80105c8:	e7e7      	b.n	801059a <fastSqrt32+0x14>
    }
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3714      	adds	r7, #20
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
	...

080105d8 <setup>:
#include <SoftArm.h>

SOFT_ARM softArm;


void setup() {
 80105d8:	b580      	push	{r7, lr}
 80105da:	af00      	add	r7, sp, #0
	/*setup 1000Hz control loop*/
	setPeriodControlLoop(10);
 80105dc:	200a      	movs	r0, #10
 80105de:	f7fb fdff 	bl	800c1e0 <setPeriodControlLoop>

	/*setup 50Hz serial display loop*/
	setPeriodSendLoop(100);
 80105e2:	2064      	movs	r0, #100	; 0x64
 80105e4:	f7fb fe0c 	bl	800c200 <setPeriodSendLoop>

	/*soft arm chambers' PWM port mapping*/
	softArm.setupChamberPorts();
 80105e8:	4805      	ldr	r0, [pc, #20]	; (8010600 <setup+0x28>)
 80105ea:	f7ff fd5f 	bl	80100ac <_ZN8SOFT_ARM17setupChamberPortsEv>

	/*start canBus receive*/
	canConfig();
 80105ee:	f7fd fd8b 	bl	800e108 <canConfig>

	/**********start the SPI slave in DMA*****/
	spiSlaveStart();
 80105f2:	f000 f95f 	bl	80108b4 <spiSlaveStart>

	/*********start the rosserial node*******/
	rosNodeSetup();
 80105f6:	f7fe fee9 	bl	800f3cc <_Z12rosNodeSetupv>
}
 80105fa:	bf00      	nop
 80105fc:	bd80      	pop	{r7, pc}
 80105fe:	bf00      	nop
 8010600:	200015b4 	.word	0x200015b4

08010604 <loop>:

void loop() {
 8010604:	b580      	push	{r7, lr}
 8010606:	af00      	add	r7, sp, #0

	/***************Handle string commands from the raspberry pi********************/
	softArm.execInfoCommand(softArm.commandData.infos);
 8010608:	4907      	ldr	r1, [pc, #28]	; (8010628 <loop+0x24>)
 801060a:	4808      	ldr	r0, [pc, #32]	; (801062c <loop+0x28>)
 801060c:	f7ff fea0 	bl	8010350 <_ZN8SOFT_ARM15execInfoCommandEPc>

	//update chamber's pressure from the CANbus************************/
	softArm.readPressureAll();
 8010610:	4806      	ldr	r0, [pc, #24]	; (801062c <loop+0x28>)
 8010612:	f7ff fdbe 	bl	8010192 <_ZN8SOFT_ARM15readPressureAllEv>

	/**Write the command of each chamber, either pressure or opening type*/
	softArm.writeCommandAll();
 8010616:	4805      	ldr	r0, [pc, #20]	; (801062c <loop+0x28>)
 8010618:	f7ff fe02 	bl	8010220 <_ZN8SOFT_ARM15writeCommandAllEv>

	/*rosserial publish**/
	rosNodePub();
 801061c:	f7fe fef6 	bl	800f40c <_Z10rosNodePubv>

	/**rosserial spinonce routine***/
	rosNodeSpinOnce();
 8010620:	f7fe feea 	bl	800f3f8 <_Z15rosNodeSpinOncev>
}
 8010624:	bf00      	nop
 8010626:	bd80      	pop	{r7, pc}
 8010628:	200024d4 	.word	0x200024d4
 801062c:	200015b4 	.word	0x200015b4

08010630 <serialDisplay>:

/*serial output using DMA*/
void serialDisplay() {
 8010630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010632:	b09d      	sub	sp, #116	; 0x74
 8010634:	af10      	add	r7, sp, #64	; 0x40
	//printf("Time: %d\r\n",millis());
	printf("Time:%10lu    PressureCommand:Pressure(KPa)    Distance(mm)\r\n",
 8010636:	f7fb fd53 	bl	800c0e0 <millis>
 801063a:	4603      	mov	r3, r0
 801063c:	4619      	mov	r1, r3
 801063e:	4886      	ldr	r0, [pc, #536]	; (8010858 <serialDisplay+0x228>)
 8010640:	f001 f97e 	bl	8011940 <iprintf>
			millis());
	for (int i = 0; i < SEGMENTNUM; i++) {
 8010644:	2300      	movs	r3, #0
 8010646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064a:	2b08      	cmp	r3, #8
 801064c:	f300 80ff 	bgt.w	801084e <serialDisplay+0x21e>
		printf(
				"     %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd   %hd:%hd    |     %hu,  %hu, %hu, %hu, %hu, %hu\r\n",
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure),
 8010650:	4982      	ldr	r1, [pc, #520]	; (801085c <serialDisplay+0x22c>)
 8010652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010654:	4613      	mov	r3, r2
 8010656:	00db      	lsls	r3, r3, #3
 8010658:	4413      	add	r3, r2
 801065a:	00db      	lsls	r3, r3, #3
 801065c:	440b      	add	r3, r1
 801065e:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8010662:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8010666:	469c      	mov	ip, r3
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure),
 8010668:	4a7c      	ldr	r2, [pc, #496]	; (801085c <serialDisplay+0x22c>)
 801066a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066c:	21a4      	movs	r1, #164	; 0xa4
 801066e:	fb01 f303 	mul.w	r3, r1, r3
 8010672:	4413      	add	r3, r2
 8010674:	3358      	adds	r3, #88	; 0x58
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 801067c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure),
 8010680:	4976      	ldr	r1, [pc, #472]	; (801085c <serialDisplay+0x22c>)
 8010682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010684:	4613      	mov	r3, r2
 8010686:	00db      	lsls	r3, r3, #3
 8010688:	4413      	add	r3, r2
 801068a:	00db      	lsls	r3, r3, #3
 801068c:	440b      	add	r3, r1
 801068e:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8010692:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8010696:	469e      	mov	lr, r3
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure),
 8010698:	4a70      	ldr	r2, [pc, #448]	; (801085c <serialDisplay+0x22c>)
 801069a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069c:	21a4      	movs	r1, #164	; 0xa4
 801069e:	fb01 f303 	mul.w	r3, r1, r3
 80106a2:	4413      	add	r3, r2
 80106a4:	335c      	adds	r3, #92	; 0x5c
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 80106ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure),
 80106b4:	4969      	ldr	r1, [pc, #420]	; (801085c <serialDisplay+0x22c>)
 80106b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106b8:	4613      	mov	r3, r2
 80106ba:	00db      	lsls	r3, r3, #3
 80106bc:	4413      	add	r3, r2
 80106be:	00db      	lsls	r3, r3, #3
 80106c0:	440b      	add	r3, r1
 80106c2:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 80106c6:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 80106ca:	623b      	str	r3, [r7, #32]
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure),
 80106cc:	4a63      	ldr	r2, [pc, #396]	; (801085c <serialDisplay+0x22c>)
 80106ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d0:	21a4      	movs	r1, #164	; 0xa4
 80106d2:	fb01 f303 	mul.w	r3, r1, r3
 80106d6:	4413      	add	r3, r2
 80106d8:	3360      	adds	r3, #96	; 0x60
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 80106e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106e4:	edc7 7a07 	vstr	s15, [r7, #28]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure),
 80106e8:	495c      	ldr	r1, [pc, #368]	; (801085c <serialDisplay+0x22c>)
 80106ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106ec:	4613      	mov	r3, r2
 80106ee:	00db      	lsls	r3, r3, #3
 80106f0:	4413      	add	r3, r2
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	440b      	add	r3, r1
 80106f6:	f603 43bc 	addw	r3, r3, #3260	; 0xcbc
 80106fa:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 80106fe:	61bb      	str	r3, [r7, #24]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure),
 8010700:	4a56      	ldr	r2, [pc, #344]	; (801085c <serialDisplay+0x22c>)
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010704:	21a4      	movs	r1, #164	; 0xa4
 8010706:	fb01 f303 	mul.w	r3, r1, r3
 801070a:	4413      	add	r3, r2
 801070c:	3364      	adds	r3, #100	; 0x64
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 8010714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010718:	edc7 7a05 	vstr	s15, [r7, #20]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure),
 801071c:	494f      	ldr	r1, [pc, #316]	; (801085c <serialDisplay+0x22c>)
 801071e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010720:	4613      	mov	r3, r2
 8010722:	00db      	lsls	r3, r3, #3
 8010724:	4413      	add	r3, r2
 8010726:	00db      	lsls	r3, r3, #3
 8010728:	440b      	add	r3, r1
 801072a:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 801072e:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8010732:	613b      	str	r3, [r7, #16]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure),
 8010734:	4a49      	ldr	r2, [pc, #292]	; (801085c <serialDisplay+0x22c>)
 8010736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010738:	21a4      	movs	r1, #164	; 0xa4
 801073a:	fb01 f303 	mul.w	r3, r1, r3
 801073e:	4413      	add	r3, r2
 8010740:	3368      	adds	r3, #104	; 0x68
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 8010748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801074c:	edc7 7a03 	vstr	s15, [r7, #12]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure),
 8010750:	4942      	ldr	r1, [pc, #264]	; (801085c <serialDisplay+0x22c>)
 8010752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010754:	4613      	mov	r3, r2
 8010756:	00db      	lsls	r3, r3, #3
 8010758:	4413      	add	r3, r2
 801075a:	00db      	lsls	r3, r3, #3
 801075c:	440b      	add	r3, r1
 801075e:	f603 43d4 	addw	r3, r3, #3284	; 0xcd4
 8010762:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8010766:	60bb      	str	r3, [r7, #8]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure),
 8010768:	4a3c      	ldr	r2, [pc, #240]	; (801085c <serialDisplay+0x22c>)
 801076a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076c:	21a4      	movs	r1, #164	; 0xa4
 801076e:	fb01 f303 	mul.w	r3, r1, r3
 8010772:	4413      	add	r3, r2
 8010774:	336c      	adds	r3, #108	; 0x6c
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
		printf(
 801077c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010780:	edc7 7a01 	vstr	s15, [r7, #4]
				softArm.sensorData.data[i][0].distance,
 8010784:	4935      	ldr	r1, [pc, #212]	; (801085c <serialDisplay+0x22c>)
 8010786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010788:	4613      	mov	r3, r2
 801078a:	00db      	lsls	r3, r3, #3
 801078c:	4413      	add	r3, r2
 801078e:	00db      	lsls	r3, r3, #3
 8010790:	440b      	add	r3, r1
 8010792:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8010796:	881b      	ldrh	r3, [r3, #0]
		printf(
 8010798:	603b      	str	r3, [r7, #0]
				softArm.sensorData.data[i][1].distance,
 801079a:	4930      	ldr	r1, [pc, #192]	; (801085c <serialDisplay+0x22c>)
 801079c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801079e:	4613      	mov	r3, r2
 80107a0:	00db      	lsls	r3, r3, #3
 80107a2:	4413      	add	r3, r2
 80107a4:	00db      	lsls	r3, r3, #3
 80107a6:	440b      	add	r3, r1
 80107a8:	f603 2314 	addw	r3, r3, #2580	; 0xa14
 80107ac:	881b      	ldrh	r3, [r3, #0]
		printf(
 80107ae:	461e      	mov	r6, r3
				softArm.sensorData.data[i][2].distance,
 80107b0:	492a      	ldr	r1, [pc, #168]	; (801085c <serialDisplay+0x22c>)
 80107b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107b4:	4613      	mov	r3, r2
 80107b6:	00db      	lsls	r3, r3, #3
 80107b8:	4413      	add	r3, r2
 80107ba:	00db      	lsls	r3, r3, #3
 80107bc:	440b      	add	r3, r1
 80107be:	f503 6322 	add.w	r3, r3, #2592	; 0xa20
 80107c2:	881b      	ldrh	r3, [r3, #0]
		printf(
 80107c4:	461d      	mov	r5, r3
				softArm.sensorData.data[i][3].distance,
 80107c6:	4925      	ldr	r1, [pc, #148]	; (801085c <serialDisplay+0x22c>)
 80107c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107ca:	4613      	mov	r3, r2
 80107cc:	00db      	lsls	r3, r3, #3
 80107ce:	4413      	add	r3, r2
 80107d0:	00db      	lsls	r3, r3, #3
 80107d2:	440b      	add	r3, r1
 80107d4:	f603 232c 	addw	r3, r3, #2604	; 0xa2c
 80107d8:	881b      	ldrh	r3, [r3, #0]
		printf(
 80107da:	461c      	mov	r4, r3
				softArm.sensorData.data[i][4].distance,
 80107dc:	491f      	ldr	r1, [pc, #124]	; (801085c <serialDisplay+0x22c>)
 80107de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107e0:	4613      	mov	r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	4413      	add	r3, r2
 80107e6:	00db      	lsls	r3, r3, #3
 80107e8:	440b      	add	r3, r1
 80107ea:	f603 2338 	addw	r3, r3, #2616	; 0xa38
 80107ee:	881b      	ldrh	r3, [r3, #0]
		printf(
 80107f0:	4618      	mov	r0, r3
				softArm.sensorData.data[i][5].distance);
 80107f2:	491a      	ldr	r1, [pc, #104]	; (801085c <serialDisplay+0x22c>)
 80107f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107f6:	4613      	mov	r3, r2
 80107f8:	00db      	lsls	r3, r3, #3
 80107fa:	4413      	add	r3, r2
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	440b      	add	r3, r1
 8010800:	f603 2344 	addw	r3, r3, #2628	; 0xa44
 8010804:	881b      	ldrh	r3, [r3, #0]
		printf(
 8010806:	930e      	str	r3, [sp, #56]	; 0x38
 8010808:	900d      	str	r0, [sp, #52]	; 0x34
 801080a:	940c      	str	r4, [sp, #48]	; 0x30
 801080c:	950b      	str	r5, [sp, #44]	; 0x2c
 801080e:	960a      	str	r6, [sp, #40]	; 0x28
 8010810:	683a      	ldr	r2, [r7, #0]
 8010812:	9209      	str	r2, [sp, #36]	; 0x24
 8010814:	687a      	ldr	r2, [r7, #4]
 8010816:	9208      	str	r2, [sp, #32]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	9207      	str	r2, [sp, #28]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	9206      	str	r2, [sp, #24]
 8010820:	693a      	ldr	r2, [r7, #16]
 8010822:	9205      	str	r2, [sp, #20]
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	9204      	str	r2, [sp, #16]
 8010828:	69ba      	ldr	r2, [r7, #24]
 801082a:	9203      	str	r2, [sp, #12]
 801082c:	69fa      	ldr	r2, [r7, #28]
 801082e:	9202      	str	r2, [sp, #8]
 8010830:	6a3b      	ldr	r3, [r7, #32]
 8010832:	9301      	str	r3, [sp, #4]
 8010834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010836:	9300      	str	r3, [sp, #0]
 8010838:	4673      	mov	r3, lr
 801083a:	ee17 2a10 	vmov	r2, s14
 801083e:	4661      	mov	r1, ip
 8010840:	4807      	ldr	r0, [pc, #28]	; (8010860 <serialDisplay+0x230>)
 8010842:	f001 f87d 	bl	8011940 <iprintf>
	for (int i = 0; i < SEGMENTNUM; i++) {
 8010846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010848:	3301      	adds	r3, #1
 801084a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801084c:	e6fc      	b.n	8010648 <serialDisplay+0x18>
	}
}
 801084e:	bf00      	nop
 8010850:	3734      	adds	r7, #52	; 0x34
 8010852:	46bd      	mov	sp, r7
 8010854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010856:	bf00      	nop
 8010858:	080152b8 	.word	0x080152b8
 801085c:	200015b4 	.word	0x200015b4
 8010860:	080152f8 	.word	0x080152f8

08010864 <serial3Callback>:

//called when serial input receive string with ending '\r\n'
void serial3Callback(char *pSerialReceiveBuffer) {
 8010864:	b480      	push	{r7}
 8010866:	b083      	sub	sp, #12
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
//		softArm.canBusCommand[1] = 0xEF;
//		softArm.canBusCommand[2] = 0xFE;
//		softArm.canBusCommand[3] = 0xAF;
//		canSend();
	}
}
 801086c:	bf00      	nop
 801086e:	370c      	adds	r7, #12
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr

08010878 <_Z41__static_initialization_and_destruction_0ii>:
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d107      	bne.n	8010898 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8010888:	683b      	ldr	r3, [r7, #0]
 801088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801088e:	4293      	cmp	r3, r2
 8010890:	d102      	bne.n	8010898 <_Z41__static_initialization_and_destruction_0ii+0x20>
SOFT_ARM softArm;
 8010892:	4803      	ldr	r0, [pc, #12]	; (80108a0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8010894:	f7ff fbf4 	bl	8010080 <_ZN8SOFT_ARMC1Ev>
}
 8010898:	bf00      	nop
 801089a:	3708      	adds	r7, #8
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}
 80108a0:	200015b4 	.word	0x200015b4

080108a4 <_GLOBAL__sub_I_softArm>:
 80108a4:	b580      	push	{r7, lr}
 80108a6:	af00      	add	r7, sp, #0
 80108a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80108ac:	2001      	movs	r0, #1
 80108ae:	f7ff ffe3 	bl	8010878 <_Z41__static_initialization_and_destruction_0ii>
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <spiSlaveStart>:
extern SOFT_ARM softArm;

SPI_HandleTypeDef *hspiSlave=&hspi1;


void spiSlaveStart(){
 80108b4:	b580      	push	{r7, lr}
 80108b6:	af00      	add	r7, sp, #0
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 80108b8:	f240 2392 	movw	r3, #658	; 0x292
 80108bc:	4a03      	ldr	r2, [pc, #12]	; (80108cc <spiSlaveStart+0x18>)
 80108be:	4904      	ldr	r1, [pc, #16]	; (80108d0 <spiSlaveStart+0x1c>)
 80108c0:	4804      	ldr	r0, [pc, #16]	; (80108d4 <spiSlaveStart+0x20>)
 80108c2:	f7f3 fe7d 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
}
 80108c6:	bf00      	nop
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	20001d28 	.word	0x20001d28
 80108d0:	20001fba 	.word	0x20001fba
 80108d4:	2000aa80 	.word	0x2000aa80

080108d8 <slaveSPITxRxCpltCallback>:



void slaveSPITxRxCpltCallback(SPI_HandleTypeDef *hspi){
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 80108e0:	4b0d      	ldr	r3, [pc, #52]	; (8010918 <slaveSPITxRxCpltCallback+0x40>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	687a      	ldr	r2, [r7, #4]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d111      	bne.n	801090e <slaveSPITxRxCpltCallback+0x36>

		/*Success on receiving data. Update the actual commandData*/
		memcpy(&(softArm.commandData),&(softArm.commandDataBuffer),sizeof(SPIDATA_R));
 80108ea:	4a0c      	ldr	r2, [pc, #48]	; (801091c <slaveSPITxRxCpltCallback+0x44>)
 80108ec:	4b0b      	ldr	r3, [pc, #44]	; (801091c <slaveSPITxRxCpltCallback+0x44>)
 80108ee:	f602 4098 	addw	r0, r2, #3224	; 0xc98
 80108f2:	f203 7374 	addw	r3, r3, #1908	; 0x774
 80108f6:	f240 2292 	movw	r2, #658	; 0x292
 80108fa:	4619      	mov	r1, r3
 80108fc:	f000 f942 	bl	8010b84 <memcpy>

		/*Re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 8010900:	f240 2392 	movw	r3, #658	; 0x292
 8010904:	4a06      	ldr	r2, [pc, #24]	; (8010920 <slaveSPITxRxCpltCallback+0x48>)
 8010906:	4907      	ldr	r1, [pc, #28]	; (8010924 <slaveSPITxRxCpltCallback+0x4c>)
 8010908:	4807      	ldr	r0, [pc, #28]	; (8010928 <slaveSPITxRxCpltCallback+0x50>)
 801090a:	f7f3 fe59 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
	}
}
 801090e:	bf00      	nop
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	20000370 	.word	0x20000370
 801091c:	200015b4 	.word	0x200015b4
 8010920:	20001d28 	.word	0x20001d28
 8010924:	20001fba 	.word	0x20001fba
 8010928:	2000aa80 	.word	0x2000aa80

0801092c <slaveSPIErrorCallback>:

void slaveSPIErrorCallback(SPI_HandleTypeDef *hspi){
 801092c:	b580      	push	{r7, lr}
 801092e:	b082      	sub	sp, #8
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 8010934:	4b09      	ldr	r3, [pc, #36]	; (801095c <slaveSPIErrorCallback+0x30>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	687a      	ldr	r2, [r7, #4]
 801093a:	429a      	cmp	r2, r3
 801093c:	d109      	bne.n	8010952 <slaveSPIErrorCallback+0x26>
		printf("Error SPI 1 communication with RPI4\r\n");
 801093e:	4808      	ldr	r0, [pc, #32]	; (8010960 <slaveSPIErrorCallback+0x34>)
 8010940:	f001 f872 	bl	8011a28 <puts>
		/*If an error occurs, we only need to re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 8010944:	f240 2392 	movw	r3, #658	; 0x292
 8010948:	4a06      	ldr	r2, [pc, #24]	; (8010964 <slaveSPIErrorCallback+0x38>)
 801094a:	4907      	ldr	r1, [pc, #28]	; (8010968 <slaveSPIErrorCallback+0x3c>)
 801094c:	4807      	ldr	r0, [pc, #28]	; (801096c <slaveSPIErrorCallback+0x40>)
 801094e:	f7f3 fe37 	bl	80045c0 <HAL_SPI_TransmitReceive_DMA>
	}
}
 8010952:	bf00      	nop
 8010954:	3708      	adds	r7, #8
 8010956:	46bd      	mov	sp, r7
 8010958:	bd80      	pop	{r7, pc}
 801095a:	bf00      	nop
 801095c:	20000370 	.word	0x20000370
 8010960:	08015360 	.word	0x08015360
 8010964:	20001d28 	.word	0x20001d28
 8010968:	20001fba 	.word	0x20001fba
 801096c:	2000aa80 	.word	0x2000aa80

08010970 <__cxa_pure_virtual>:
 8010970:	b508      	push	{r3, lr}
 8010972:	f000 f825 	bl	80109c0 <_ZSt9terminatev>

08010976 <_Znwj>:
 8010976:	b510      	push	{r4, lr}
 8010978:	2800      	cmp	r0, #0
 801097a:	bf14      	ite	ne
 801097c:	4604      	movne	r4, r0
 801097e:	2401      	moveq	r4, #1
 8010980:	4620      	mov	r0, r4
 8010982:	f000 f8f7 	bl	8010b74 <malloc>
 8010986:	b930      	cbnz	r0, 8010996 <_Znwj+0x20>
 8010988:	f000 f806 	bl	8010998 <_ZSt15get_new_handlerv>
 801098c:	b908      	cbnz	r0, 8010992 <_Znwj+0x1c>
 801098e:	f000 f8b8 	bl	8010b02 <abort>
 8010992:	4780      	blx	r0
 8010994:	e7f4      	b.n	8010980 <_Znwj+0xa>
 8010996:	bd10      	pop	{r4, pc}

08010998 <_ZSt15get_new_handlerv>:
 8010998:	4b02      	ldr	r3, [pc, #8]	; (80109a4 <_ZSt15get_new_handlerv+0xc>)
 801099a:	6818      	ldr	r0, [r3, #0]
 801099c:	f3bf 8f5b 	dmb	ish
 80109a0:	4770      	bx	lr
 80109a2:	bf00      	nop
 80109a4:	200025f4 	.word	0x200025f4

080109a8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80109a8:	b508      	push	{r3, lr}
 80109aa:	4780      	blx	r0
 80109ac:	f000 f8a9 	bl	8010b02 <abort>

080109b0 <_ZSt13get_terminatev>:
 80109b0:	4b02      	ldr	r3, [pc, #8]	; (80109bc <_ZSt13get_terminatev+0xc>)
 80109b2:	6818      	ldr	r0, [r3, #0]
 80109b4:	f3bf 8f5b 	dmb	ish
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	20000374 	.word	0x20000374

080109c0 <_ZSt9terminatev>:
 80109c0:	b508      	push	{r3, lr}
 80109c2:	f7ff fff5 	bl	80109b0 <_ZSt13get_terminatev>
 80109c6:	f7ff ffef 	bl	80109a8 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080109cc <round>:
 80109cc:	ee10 3a90 	vmov	r3, s1
 80109d0:	b530      	push	{r4, r5, lr}
 80109d2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80109d6:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 80109da:	2913      	cmp	r1, #19
 80109dc:	ee10 5a90 	vmov	r5, s1
 80109e0:	ee10 2a10 	vmov	r2, s0
 80109e4:	dc17      	bgt.n	8010a16 <round+0x4a>
 80109e6:	2900      	cmp	r1, #0
 80109e8:	da09      	bge.n	80109fe <round+0x32>
 80109ea:	3101      	adds	r1, #1
 80109ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80109f0:	d103      	bne.n	80109fa <round+0x2e>
 80109f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80109f6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80109fa:	2200      	movs	r2, #0
 80109fc:	e024      	b.n	8010a48 <round+0x7c>
 80109fe:	4815      	ldr	r0, [pc, #84]	; (8010a54 <round+0x88>)
 8010a00:	4108      	asrs	r0, r1
 8010a02:	4203      	tst	r3, r0
 8010a04:	d100      	bne.n	8010a08 <round+0x3c>
 8010a06:	b16a      	cbz	r2, 8010a24 <round+0x58>
 8010a08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010a0c:	410b      	asrs	r3, r1
 8010a0e:	442b      	add	r3, r5
 8010a10:	ea23 0300 	bic.w	r3, r3, r0
 8010a14:	e7f1      	b.n	80109fa <round+0x2e>
 8010a16:	2933      	cmp	r1, #51	; 0x33
 8010a18:	dd05      	ble.n	8010a26 <round+0x5a>
 8010a1a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010a1e:	d101      	bne.n	8010a24 <round+0x58>
 8010a20:	ee30 0b00 	vadd.f64	d0, d0, d0
 8010a24:	bd30      	pop	{r4, r5, pc}
 8010a26:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 8010a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8010a2e:	40c4      	lsrs	r4, r0
 8010a30:	4222      	tst	r2, r4
 8010a32:	d0f7      	beq.n	8010a24 <round+0x58>
 8010a34:	2001      	movs	r0, #1
 8010a36:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 8010a3a:	fa00 f101 	lsl.w	r1, r0, r1
 8010a3e:	1852      	adds	r2, r2, r1
 8010a40:	bf28      	it	cs
 8010a42:	181b      	addcs	r3, r3, r0
 8010a44:	ea22 0204 	bic.w	r2, r2, r4
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	ec41 0b10 	vmov	d0, r0, r1
 8010a50:	e7e8      	b.n	8010a24 <round+0x58>
 8010a52:	bf00      	nop
 8010a54:	000fffff 	.word	0x000fffff

08010a58 <sqrtf>:
 8010a58:	b500      	push	{lr}
 8010a5a:	ed2d 8b02 	vpush	{d8}
 8010a5e:	b08b      	sub	sp, #44	; 0x2c
 8010a60:	eeb0 8a40 	vmov.f32	s16, s0
 8010a64:	f000 f848 	bl	8010af8 <__ieee754_sqrtf>
 8010a68:	4b21      	ldr	r3, [pc, #132]	; (8010af0 <sqrtf+0x98>)
 8010a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8010a6e:	1c5a      	adds	r2, r3, #1
 8010a70:	d028      	beq.n	8010ac4 <sqrtf+0x6c>
 8010a72:	eeb4 8a48 	vcmp.f32	s16, s16
 8010a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a7a:	d623      	bvs.n	8010ac4 <sqrtf+0x6c>
 8010a7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a84:	d51e      	bpl.n	8010ac4 <sqrtf+0x6c>
 8010a86:	2201      	movs	r2, #1
 8010a88:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 8010a8c:	9200      	str	r2, [sp, #0]
 8010a8e:	4a19      	ldr	r2, [pc, #100]	; (8010af4 <sqrtf+0x9c>)
 8010a90:	9201      	str	r2, [sp, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	9208      	str	r2, [sp, #32]
 8010a96:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010a9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8010a9e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8010ae8 <sqrtf+0x90>
 8010aa2:	b9a3      	cbnz	r3, 8010ace <sqrtf+0x76>
 8010aa4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010aa8:	4668      	mov	r0, sp
 8010aaa:	f000 f828 	bl	8010afe <matherr>
 8010aae:	b1a0      	cbz	r0, 8010ada <sqrtf+0x82>
 8010ab0:	9b08      	ldr	r3, [sp, #32]
 8010ab2:	b11b      	cbz	r3, 8010abc <sqrtf+0x64>
 8010ab4:	f000 f834 	bl	8010b20 <__errno>
 8010ab8:	9b08      	ldr	r3, [sp, #32]
 8010aba:	6003      	str	r3, [r0, #0]
 8010abc:	ed9d 0b06 	vldr	d0, [sp, #24]
 8010ac0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010ac4:	b00b      	add	sp, #44	; 0x2c
 8010ac6:	ecbd 8b02 	vpop	{d8}
 8010aca:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ace:	2b02      	cmp	r3, #2
 8010ad0:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8010ad4:	ed8d 6b06 	vstr	d6, [sp, #24]
 8010ad8:	d1e6      	bne.n	8010aa8 <sqrtf+0x50>
 8010ada:	f000 f821 	bl	8010b20 <__errno>
 8010ade:	2321      	movs	r3, #33	; 0x21
 8010ae0:	6003      	str	r3, [r0, #0]
 8010ae2:	e7e5      	b.n	8010ab0 <sqrtf+0x58>
 8010ae4:	f3af 8000 	nop.w
	...
 8010af0:	20000378 	.word	0x20000378
 8010af4:	080154ac 	.word	0x080154ac

08010af8 <__ieee754_sqrtf>:
 8010af8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010afc:	4770      	bx	lr

08010afe <matherr>:
 8010afe:	2000      	movs	r0, #0
 8010b00:	4770      	bx	lr

08010b02 <abort>:
 8010b02:	b508      	push	{r3, lr}
 8010b04:	2006      	movs	r0, #6
 8010b06:	f000 ffdd 	bl	8011ac4 <raise>
 8010b0a:	2001      	movs	r0, #1
 8010b0c:	f004 fa46 	bl	8014f9c <_exit>

08010b10 <calloc>:
 8010b10:	4b02      	ldr	r3, [pc, #8]	; (8010b1c <calloc+0xc>)
 8010b12:	460a      	mov	r2, r1
 8010b14:	4601      	mov	r1, r0
 8010b16:	6818      	ldr	r0, [r3, #0]
 8010b18:	f000 b847 	b.w	8010baa <_calloc_r>
 8010b1c:	2000037c 	.word	0x2000037c

08010b20 <__errno>:
 8010b20:	4b01      	ldr	r3, [pc, #4]	; (8010b28 <__errno+0x8>)
 8010b22:	6818      	ldr	r0, [r3, #0]
 8010b24:	4770      	bx	lr
 8010b26:	bf00      	nop
 8010b28:	2000037c 	.word	0x2000037c

08010b2c <__libc_init_array>:
 8010b2c:	b570      	push	{r4, r5, r6, lr}
 8010b2e:	4e0d      	ldr	r6, [pc, #52]	; (8010b64 <__libc_init_array+0x38>)
 8010b30:	4c0d      	ldr	r4, [pc, #52]	; (8010b68 <__libc_init_array+0x3c>)
 8010b32:	1ba4      	subs	r4, r4, r6
 8010b34:	10a4      	asrs	r4, r4, #2
 8010b36:	2500      	movs	r5, #0
 8010b38:	42a5      	cmp	r5, r4
 8010b3a:	d109      	bne.n	8010b50 <__libc_init_array+0x24>
 8010b3c:	4e0b      	ldr	r6, [pc, #44]	; (8010b6c <__libc_init_array+0x40>)
 8010b3e:	4c0c      	ldr	r4, [pc, #48]	; (8010b70 <__libc_init_array+0x44>)
 8010b40:	f004 fa2e 	bl	8014fa0 <_init>
 8010b44:	1ba4      	subs	r4, r4, r6
 8010b46:	10a4      	asrs	r4, r4, #2
 8010b48:	2500      	movs	r5, #0
 8010b4a:	42a5      	cmp	r5, r4
 8010b4c:	d105      	bne.n	8010b5a <__libc_init_array+0x2e>
 8010b4e:	bd70      	pop	{r4, r5, r6, pc}
 8010b50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010b54:	4798      	blx	r3
 8010b56:	3501      	adds	r5, #1
 8010b58:	e7ee      	b.n	8010b38 <__libc_init_array+0xc>
 8010b5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010b5e:	4798      	blx	r3
 8010b60:	3501      	adds	r5, #1
 8010b62:	e7f2      	b.n	8010b4a <__libc_init_array+0x1e>
 8010b64:	080157e0 	.word	0x080157e0
 8010b68:	080157e0 	.word	0x080157e0
 8010b6c:	080157e0 	.word	0x080157e0
 8010b70:	080157ec 	.word	0x080157ec

08010b74 <malloc>:
 8010b74:	4b02      	ldr	r3, [pc, #8]	; (8010b80 <malloc+0xc>)
 8010b76:	4601      	mov	r1, r0
 8010b78:	6818      	ldr	r0, [r3, #0]
 8010b7a:	f000 b873 	b.w	8010c64 <_malloc_r>
 8010b7e:	bf00      	nop
 8010b80:	2000037c 	.word	0x2000037c

08010b84 <memcpy>:
 8010b84:	b510      	push	{r4, lr}
 8010b86:	1e43      	subs	r3, r0, #1
 8010b88:	440a      	add	r2, r1
 8010b8a:	4291      	cmp	r1, r2
 8010b8c:	d100      	bne.n	8010b90 <memcpy+0xc>
 8010b8e:	bd10      	pop	{r4, pc}
 8010b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b98:	e7f7      	b.n	8010b8a <memcpy+0x6>

08010b9a <memset>:
 8010b9a:	4402      	add	r2, r0
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	4293      	cmp	r3, r2
 8010ba0:	d100      	bne.n	8010ba4 <memset+0xa>
 8010ba2:	4770      	bx	lr
 8010ba4:	f803 1b01 	strb.w	r1, [r3], #1
 8010ba8:	e7f9      	b.n	8010b9e <memset+0x4>

08010baa <_calloc_r>:
 8010baa:	b538      	push	{r3, r4, r5, lr}
 8010bac:	fb02 f401 	mul.w	r4, r2, r1
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	f000 f857 	bl	8010c64 <_malloc_r>
 8010bb6:	4605      	mov	r5, r0
 8010bb8:	b118      	cbz	r0, 8010bc2 <_calloc_r+0x18>
 8010bba:	4622      	mov	r2, r4
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	f7ff ffec 	bl	8010b9a <memset>
 8010bc2:	4628      	mov	r0, r5
 8010bc4:	bd38      	pop	{r3, r4, r5, pc}
	...

08010bc8 <_free_r>:
 8010bc8:	b538      	push	{r3, r4, r5, lr}
 8010bca:	4605      	mov	r5, r0
 8010bcc:	2900      	cmp	r1, #0
 8010bce:	d045      	beq.n	8010c5c <_free_r+0x94>
 8010bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bd4:	1f0c      	subs	r4, r1, #4
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bfb8      	it	lt
 8010bda:	18e4      	addlt	r4, r4, r3
 8010bdc:	f003 f9f2 	bl	8013fc4 <__malloc_lock>
 8010be0:	4a1f      	ldr	r2, [pc, #124]	; (8010c60 <_free_r+0x98>)
 8010be2:	6813      	ldr	r3, [r2, #0]
 8010be4:	4610      	mov	r0, r2
 8010be6:	b933      	cbnz	r3, 8010bf6 <_free_r+0x2e>
 8010be8:	6063      	str	r3, [r4, #4]
 8010bea:	6014      	str	r4, [r2, #0]
 8010bec:	4628      	mov	r0, r5
 8010bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bf2:	f003 b9e8 	b.w	8013fc6 <__malloc_unlock>
 8010bf6:	42a3      	cmp	r3, r4
 8010bf8:	d90c      	bls.n	8010c14 <_free_r+0x4c>
 8010bfa:	6821      	ldr	r1, [r4, #0]
 8010bfc:	1862      	adds	r2, r4, r1
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	bf04      	itt	eq
 8010c02:	681a      	ldreq	r2, [r3, #0]
 8010c04:	685b      	ldreq	r3, [r3, #4]
 8010c06:	6063      	str	r3, [r4, #4]
 8010c08:	bf04      	itt	eq
 8010c0a:	1852      	addeq	r2, r2, r1
 8010c0c:	6022      	streq	r2, [r4, #0]
 8010c0e:	6004      	str	r4, [r0, #0]
 8010c10:	e7ec      	b.n	8010bec <_free_r+0x24>
 8010c12:	4613      	mov	r3, r2
 8010c14:	685a      	ldr	r2, [r3, #4]
 8010c16:	b10a      	cbz	r2, 8010c1c <_free_r+0x54>
 8010c18:	42a2      	cmp	r2, r4
 8010c1a:	d9fa      	bls.n	8010c12 <_free_r+0x4a>
 8010c1c:	6819      	ldr	r1, [r3, #0]
 8010c1e:	1858      	adds	r0, r3, r1
 8010c20:	42a0      	cmp	r0, r4
 8010c22:	d10b      	bne.n	8010c3c <_free_r+0x74>
 8010c24:	6820      	ldr	r0, [r4, #0]
 8010c26:	4401      	add	r1, r0
 8010c28:	1858      	adds	r0, r3, r1
 8010c2a:	4282      	cmp	r2, r0
 8010c2c:	6019      	str	r1, [r3, #0]
 8010c2e:	d1dd      	bne.n	8010bec <_free_r+0x24>
 8010c30:	6810      	ldr	r0, [r2, #0]
 8010c32:	6852      	ldr	r2, [r2, #4]
 8010c34:	605a      	str	r2, [r3, #4]
 8010c36:	4401      	add	r1, r0
 8010c38:	6019      	str	r1, [r3, #0]
 8010c3a:	e7d7      	b.n	8010bec <_free_r+0x24>
 8010c3c:	d902      	bls.n	8010c44 <_free_r+0x7c>
 8010c3e:	230c      	movs	r3, #12
 8010c40:	602b      	str	r3, [r5, #0]
 8010c42:	e7d3      	b.n	8010bec <_free_r+0x24>
 8010c44:	6820      	ldr	r0, [r4, #0]
 8010c46:	1821      	adds	r1, r4, r0
 8010c48:	428a      	cmp	r2, r1
 8010c4a:	bf04      	itt	eq
 8010c4c:	6811      	ldreq	r1, [r2, #0]
 8010c4e:	6852      	ldreq	r2, [r2, #4]
 8010c50:	6062      	str	r2, [r4, #4]
 8010c52:	bf04      	itt	eq
 8010c54:	1809      	addeq	r1, r1, r0
 8010c56:	6021      	streq	r1, [r4, #0]
 8010c58:	605c      	str	r4, [r3, #4]
 8010c5a:	e7c7      	b.n	8010bec <_free_r+0x24>
 8010c5c:	bd38      	pop	{r3, r4, r5, pc}
 8010c5e:	bf00      	nop
 8010c60:	200025f8 	.word	0x200025f8

08010c64 <_malloc_r>:
 8010c64:	b570      	push	{r4, r5, r6, lr}
 8010c66:	1ccd      	adds	r5, r1, #3
 8010c68:	f025 0503 	bic.w	r5, r5, #3
 8010c6c:	3508      	adds	r5, #8
 8010c6e:	2d0c      	cmp	r5, #12
 8010c70:	bf38      	it	cc
 8010c72:	250c      	movcc	r5, #12
 8010c74:	2d00      	cmp	r5, #0
 8010c76:	4606      	mov	r6, r0
 8010c78:	db01      	blt.n	8010c7e <_malloc_r+0x1a>
 8010c7a:	42a9      	cmp	r1, r5
 8010c7c:	d903      	bls.n	8010c86 <_malloc_r+0x22>
 8010c7e:	230c      	movs	r3, #12
 8010c80:	6033      	str	r3, [r6, #0]
 8010c82:	2000      	movs	r0, #0
 8010c84:	bd70      	pop	{r4, r5, r6, pc}
 8010c86:	f003 f99d 	bl	8013fc4 <__malloc_lock>
 8010c8a:	4a21      	ldr	r2, [pc, #132]	; (8010d10 <_malloc_r+0xac>)
 8010c8c:	6814      	ldr	r4, [r2, #0]
 8010c8e:	4621      	mov	r1, r4
 8010c90:	b991      	cbnz	r1, 8010cb8 <_malloc_r+0x54>
 8010c92:	4c20      	ldr	r4, [pc, #128]	; (8010d14 <_malloc_r+0xb0>)
 8010c94:	6823      	ldr	r3, [r4, #0]
 8010c96:	b91b      	cbnz	r3, 8010ca0 <_malloc_r+0x3c>
 8010c98:	4630      	mov	r0, r6
 8010c9a:	f000 fed5 	bl	8011a48 <_sbrk_r>
 8010c9e:	6020      	str	r0, [r4, #0]
 8010ca0:	4629      	mov	r1, r5
 8010ca2:	4630      	mov	r0, r6
 8010ca4:	f000 fed0 	bl	8011a48 <_sbrk_r>
 8010ca8:	1c43      	adds	r3, r0, #1
 8010caa:	d124      	bne.n	8010cf6 <_malloc_r+0x92>
 8010cac:	230c      	movs	r3, #12
 8010cae:	6033      	str	r3, [r6, #0]
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f003 f988 	bl	8013fc6 <__malloc_unlock>
 8010cb6:	e7e4      	b.n	8010c82 <_malloc_r+0x1e>
 8010cb8:	680b      	ldr	r3, [r1, #0]
 8010cba:	1b5b      	subs	r3, r3, r5
 8010cbc:	d418      	bmi.n	8010cf0 <_malloc_r+0x8c>
 8010cbe:	2b0b      	cmp	r3, #11
 8010cc0:	d90f      	bls.n	8010ce2 <_malloc_r+0x7e>
 8010cc2:	600b      	str	r3, [r1, #0]
 8010cc4:	50cd      	str	r5, [r1, r3]
 8010cc6:	18cc      	adds	r4, r1, r3
 8010cc8:	4630      	mov	r0, r6
 8010cca:	f003 f97c 	bl	8013fc6 <__malloc_unlock>
 8010cce:	f104 000b 	add.w	r0, r4, #11
 8010cd2:	1d23      	adds	r3, r4, #4
 8010cd4:	f020 0007 	bic.w	r0, r0, #7
 8010cd8:	1ac3      	subs	r3, r0, r3
 8010cda:	d0d3      	beq.n	8010c84 <_malloc_r+0x20>
 8010cdc:	425a      	negs	r2, r3
 8010cde:	50e2      	str	r2, [r4, r3]
 8010ce0:	e7d0      	b.n	8010c84 <_malloc_r+0x20>
 8010ce2:	428c      	cmp	r4, r1
 8010ce4:	684b      	ldr	r3, [r1, #4]
 8010ce6:	bf16      	itet	ne
 8010ce8:	6063      	strne	r3, [r4, #4]
 8010cea:	6013      	streq	r3, [r2, #0]
 8010cec:	460c      	movne	r4, r1
 8010cee:	e7eb      	b.n	8010cc8 <_malloc_r+0x64>
 8010cf0:	460c      	mov	r4, r1
 8010cf2:	6849      	ldr	r1, [r1, #4]
 8010cf4:	e7cc      	b.n	8010c90 <_malloc_r+0x2c>
 8010cf6:	1cc4      	adds	r4, r0, #3
 8010cf8:	f024 0403 	bic.w	r4, r4, #3
 8010cfc:	42a0      	cmp	r0, r4
 8010cfe:	d005      	beq.n	8010d0c <_malloc_r+0xa8>
 8010d00:	1a21      	subs	r1, r4, r0
 8010d02:	4630      	mov	r0, r6
 8010d04:	f000 fea0 	bl	8011a48 <_sbrk_r>
 8010d08:	3001      	adds	r0, #1
 8010d0a:	d0cf      	beq.n	8010cac <_malloc_r+0x48>
 8010d0c:	6025      	str	r5, [r4, #0]
 8010d0e:	e7db      	b.n	8010cc8 <_malloc_r+0x64>
 8010d10:	200025f8 	.word	0x200025f8
 8010d14:	200025fc 	.word	0x200025fc

08010d18 <__cvt>:
 8010d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d1a:	ed2d 8b02 	vpush	{d8}
 8010d1e:	eeb0 8b40 	vmov.f64	d8, d0
 8010d22:	b085      	sub	sp, #20
 8010d24:	4617      	mov	r7, r2
 8010d26:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010d28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010d2a:	ee18 2a90 	vmov	r2, s17
 8010d2e:	f025 0520 	bic.w	r5, r5, #32
 8010d32:	2a00      	cmp	r2, #0
 8010d34:	bfb6      	itet	lt
 8010d36:	222d      	movlt	r2, #45	; 0x2d
 8010d38:	2200      	movge	r2, #0
 8010d3a:	eeb1 8b40 	vneglt.f64	d8, d0
 8010d3e:	2d46      	cmp	r5, #70	; 0x46
 8010d40:	460c      	mov	r4, r1
 8010d42:	701a      	strb	r2, [r3, #0]
 8010d44:	d004      	beq.n	8010d50 <__cvt+0x38>
 8010d46:	2d45      	cmp	r5, #69	; 0x45
 8010d48:	d100      	bne.n	8010d4c <__cvt+0x34>
 8010d4a:	3401      	adds	r4, #1
 8010d4c:	2102      	movs	r1, #2
 8010d4e:	e000      	b.n	8010d52 <__cvt+0x3a>
 8010d50:	2103      	movs	r1, #3
 8010d52:	ab03      	add	r3, sp, #12
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	ab02      	add	r3, sp, #8
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	4622      	mov	r2, r4
 8010d5c:	4633      	mov	r3, r6
 8010d5e:	eeb0 0b48 	vmov.f64	d0, d8
 8010d62:	f001 feb9 	bl	8012ad8 <_dtoa_r>
 8010d66:	2d47      	cmp	r5, #71	; 0x47
 8010d68:	d101      	bne.n	8010d6e <__cvt+0x56>
 8010d6a:	07fb      	lsls	r3, r7, #31
 8010d6c:	d51e      	bpl.n	8010dac <__cvt+0x94>
 8010d6e:	2d46      	cmp	r5, #70	; 0x46
 8010d70:	eb00 0304 	add.w	r3, r0, r4
 8010d74:	d10c      	bne.n	8010d90 <__cvt+0x78>
 8010d76:	7802      	ldrb	r2, [r0, #0]
 8010d78:	2a30      	cmp	r2, #48	; 0x30
 8010d7a:	d107      	bne.n	8010d8c <__cvt+0x74>
 8010d7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d84:	bf1c      	itt	ne
 8010d86:	f1c4 0401 	rsbne	r4, r4, #1
 8010d8a:	6034      	strne	r4, [r6, #0]
 8010d8c:	6832      	ldr	r2, [r6, #0]
 8010d8e:	4413      	add	r3, r2
 8010d90:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d98:	d007      	beq.n	8010daa <__cvt+0x92>
 8010d9a:	2130      	movs	r1, #48	; 0x30
 8010d9c:	9a03      	ldr	r2, [sp, #12]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d204      	bcs.n	8010dac <__cvt+0x94>
 8010da2:	1c54      	adds	r4, r2, #1
 8010da4:	9403      	str	r4, [sp, #12]
 8010da6:	7011      	strb	r1, [r2, #0]
 8010da8:	e7f8      	b.n	8010d9c <__cvt+0x84>
 8010daa:	9303      	str	r3, [sp, #12]
 8010dac:	9b03      	ldr	r3, [sp, #12]
 8010dae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010db0:	1a1b      	subs	r3, r3, r0
 8010db2:	6013      	str	r3, [r2, #0]
 8010db4:	b005      	add	sp, #20
 8010db6:	ecbd 8b02 	vpop	{d8}
 8010dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010dbc <__exponent>:
 8010dbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010dbe:	2900      	cmp	r1, #0
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	bfba      	itte	lt
 8010dc4:	4249      	neglt	r1, r1
 8010dc6:	232d      	movlt	r3, #45	; 0x2d
 8010dc8:	232b      	movge	r3, #43	; 0x2b
 8010dca:	2909      	cmp	r1, #9
 8010dcc:	f804 2b02 	strb.w	r2, [r4], #2
 8010dd0:	7043      	strb	r3, [r0, #1]
 8010dd2:	dd20      	ble.n	8010e16 <__exponent+0x5a>
 8010dd4:	f10d 0307 	add.w	r3, sp, #7
 8010dd8:	461f      	mov	r7, r3
 8010dda:	260a      	movs	r6, #10
 8010ddc:	fb91 f5f6 	sdiv	r5, r1, r6
 8010de0:	fb06 1115 	mls	r1, r6, r5, r1
 8010de4:	3130      	adds	r1, #48	; 0x30
 8010de6:	2d09      	cmp	r5, #9
 8010de8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010dec:	f103 32ff 	add.w	r2, r3, #4294967295
 8010df0:	4629      	mov	r1, r5
 8010df2:	dc09      	bgt.n	8010e08 <__exponent+0x4c>
 8010df4:	3130      	adds	r1, #48	; 0x30
 8010df6:	3b02      	subs	r3, #2
 8010df8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010dfc:	42bb      	cmp	r3, r7
 8010dfe:	4622      	mov	r2, r4
 8010e00:	d304      	bcc.n	8010e0c <__exponent+0x50>
 8010e02:	1a10      	subs	r0, r2, r0
 8010e04:	b003      	add	sp, #12
 8010e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e08:	4613      	mov	r3, r2
 8010e0a:	e7e7      	b.n	8010ddc <__exponent+0x20>
 8010e0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e10:	f804 2b01 	strb.w	r2, [r4], #1
 8010e14:	e7f2      	b.n	8010dfc <__exponent+0x40>
 8010e16:	2330      	movs	r3, #48	; 0x30
 8010e18:	4419      	add	r1, r3
 8010e1a:	7083      	strb	r3, [r0, #2]
 8010e1c:	1d02      	adds	r2, r0, #4
 8010e1e:	70c1      	strb	r1, [r0, #3]
 8010e20:	e7ef      	b.n	8010e02 <__exponent+0x46>
 8010e22:	0000      	movs	r0, r0
 8010e24:	0000      	movs	r0, r0
	...

08010e28 <_printf_float>:
 8010e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e2c:	b08d      	sub	sp, #52	; 0x34
 8010e2e:	460c      	mov	r4, r1
 8010e30:	4616      	mov	r6, r2
 8010e32:	461f      	mov	r7, r3
 8010e34:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010e38:	4605      	mov	r5, r0
 8010e3a:	f003 f83f 	bl	8013ebc <_localeconv_r>
 8010e3e:	f8d0 b000 	ldr.w	fp, [r0]
 8010e42:	4658      	mov	r0, fp
 8010e44:	f7ef f9fc 	bl	8000240 <strlen>
 8010e48:	2300      	movs	r3, #0
 8010e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8010e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8010e50:	9005      	str	r0, [sp, #20]
 8010e52:	3307      	adds	r3, #7
 8010e54:	f023 0307 	bic.w	r3, r3, #7
 8010e58:	f103 0108 	add.w	r1, r3, #8
 8010e5c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010e60:	6822      	ldr	r2, [r4, #0]
 8010e62:	f8c8 1000 	str.w	r1, [r8]
 8010e66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010e6a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8010e6e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80110f8 <_printf_float+0x2d0>
 8010e72:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010e76:	eeb0 6bc0 	vabs.f64	d6, d0
 8010e7a:	eeb4 6b47 	vcmp.f64	d6, d7
 8010e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e82:	dd24      	ble.n	8010ece <_printf_float+0xa6>
 8010e84:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8c:	d502      	bpl.n	8010e94 <_printf_float+0x6c>
 8010e8e:	232d      	movs	r3, #45	; 0x2d
 8010e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e94:	499a      	ldr	r1, [pc, #616]	; (8011100 <_printf_float+0x2d8>)
 8010e96:	4b9b      	ldr	r3, [pc, #620]	; (8011104 <_printf_float+0x2dc>)
 8010e98:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010e9c:	bf8c      	ite	hi
 8010e9e:	4688      	movhi	r8, r1
 8010ea0:	4698      	movls	r8, r3
 8010ea2:	f022 0204 	bic.w	r2, r2, #4
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	6123      	str	r3, [r4, #16]
 8010eaa:	6022      	str	r2, [r4, #0]
 8010eac:	f04f 0a00 	mov.w	sl, #0
 8010eb0:	9700      	str	r7, [sp, #0]
 8010eb2:	4633      	mov	r3, r6
 8010eb4:	aa0b      	add	r2, sp, #44	; 0x2c
 8010eb6:	4621      	mov	r1, r4
 8010eb8:	4628      	mov	r0, r5
 8010eba:	f000 f9e1 	bl	8011280 <_printf_common>
 8010ebe:	3001      	adds	r0, #1
 8010ec0:	f040 8089 	bne.w	8010fd6 <_printf_float+0x1ae>
 8010ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ec8:	b00d      	add	sp, #52	; 0x34
 8010eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ece:	eeb4 0b40 	vcmp.f64	d0, d0
 8010ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed6:	d702      	bvc.n	8010ede <_printf_float+0xb6>
 8010ed8:	498b      	ldr	r1, [pc, #556]	; (8011108 <_printf_float+0x2e0>)
 8010eda:	4b8c      	ldr	r3, [pc, #560]	; (801110c <_printf_float+0x2e4>)
 8010edc:	e7dc      	b.n	8010e98 <_printf_float+0x70>
 8010ede:	6861      	ldr	r1, [r4, #4]
 8010ee0:	1c4b      	adds	r3, r1, #1
 8010ee2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010ee6:	ab0a      	add	r3, sp, #40	; 0x28
 8010ee8:	a809      	add	r0, sp, #36	; 0x24
 8010eea:	d13b      	bne.n	8010f64 <_printf_float+0x13c>
 8010eec:	2106      	movs	r1, #6
 8010eee:	6061      	str	r1, [r4, #4]
 8010ef0:	f04f 0c00 	mov.w	ip, #0
 8010ef4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8010ef8:	e9cd 0900 	strd	r0, r9, [sp]
 8010efc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f00:	6022      	str	r2, [r4, #0]
 8010f02:	6861      	ldr	r1, [r4, #4]
 8010f04:	4628      	mov	r0, r5
 8010f06:	f7ff ff07 	bl	8010d18 <__cvt>
 8010f0a:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8010f0e:	2b47      	cmp	r3, #71	; 0x47
 8010f10:	4680      	mov	r8, r0
 8010f12:	d109      	bne.n	8010f28 <_printf_float+0x100>
 8010f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f16:	1cd8      	adds	r0, r3, #3
 8010f18:	db02      	blt.n	8010f20 <_printf_float+0xf8>
 8010f1a:	6862      	ldr	r2, [r4, #4]
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	dd47      	ble.n	8010fb0 <_printf_float+0x188>
 8010f20:	f1a9 0902 	sub.w	r9, r9, #2
 8010f24:	fa5f f989 	uxtb.w	r9, r9
 8010f28:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f2e:	d824      	bhi.n	8010f7a <_printf_float+0x152>
 8010f30:	3901      	subs	r1, #1
 8010f32:	464a      	mov	r2, r9
 8010f34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f38:	9109      	str	r1, [sp, #36]	; 0x24
 8010f3a:	f7ff ff3f 	bl	8010dbc <__exponent>
 8010f3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f40:	1813      	adds	r3, r2, r0
 8010f42:	2a01      	cmp	r2, #1
 8010f44:	4682      	mov	sl, r0
 8010f46:	6123      	str	r3, [r4, #16]
 8010f48:	dc02      	bgt.n	8010f50 <_printf_float+0x128>
 8010f4a:	6822      	ldr	r2, [r4, #0]
 8010f4c:	07d1      	lsls	r1, r2, #31
 8010f4e:	d501      	bpl.n	8010f54 <_printf_float+0x12c>
 8010f50:	3301      	adds	r3, #1
 8010f52:	6123      	str	r3, [r4, #16]
 8010f54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d0a9      	beq.n	8010eb0 <_printf_float+0x88>
 8010f5c:	232d      	movs	r3, #45	; 0x2d
 8010f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010f62:	e7a5      	b.n	8010eb0 <_printf_float+0x88>
 8010f64:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8010f68:	f000 8178 	beq.w	801125c <_printf_float+0x434>
 8010f6c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8010f70:	d1be      	bne.n	8010ef0 <_printf_float+0xc8>
 8010f72:	2900      	cmp	r1, #0
 8010f74:	d1bc      	bne.n	8010ef0 <_printf_float+0xc8>
 8010f76:	2101      	movs	r1, #1
 8010f78:	e7b9      	b.n	8010eee <_printf_float+0xc6>
 8010f7a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010f7e:	d119      	bne.n	8010fb4 <_printf_float+0x18c>
 8010f80:	2900      	cmp	r1, #0
 8010f82:	6863      	ldr	r3, [r4, #4]
 8010f84:	dd0c      	ble.n	8010fa0 <_printf_float+0x178>
 8010f86:	6121      	str	r1, [r4, #16]
 8010f88:	b913      	cbnz	r3, 8010f90 <_printf_float+0x168>
 8010f8a:	6822      	ldr	r2, [r4, #0]
 8010f8c:	07d2      	lsls	r2, r2, #31
 8010f8e:	d502      	bpl.n	8010f96 <_printf_float+0x16e>
 8010f90:	3301      	adds	r3, #1
 8010f92:	440b      	add	r3, r1
 8010f94:	6123      	str	r3, [r4, #16]
 8010f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f98:	65a3      	str	r3, [r4, #88]	; 0x58
 8010f9a:	f04f 0a00 	mov.w	sl, #0
 8010f9e:	e7d9      	b.n	8010f54 <_printf_float+0x12c>
 8010fa0:	b913      	cbnz	r3, 8010fa8 <_printf_float+0x180>
 8010fa2:	6822      	ldr	r2, [r4, #0]
 8010fa4:	07d0      	lsls	r0, r2, #31
 8010fa6:	d501      	bpl.n	8010fac <_printf_float+0x184>
 8010fa8:	3302      	adds	r3, #2
 8010faa:	e7f3      	b.n	8010f94 <_printf_float+0x16c>
 8010fac:	2301      	movs	r3, #1
 8010fae:	e7f1      	b.n	8010f94 <_printf_float+0x16c>
 8010fb0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010fb4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	db05      	blt.n	8010fc8 <_printf_float+0x1a0>
 8010fbc:	6822      	ldr	r2, [r4, #0]
 8010fbe:	6123      	str	r3, [r4, #16]
 8010fc0:	07d1      	lsls	r1, r2, #31
 8010fc2:	d5e8      	bpl.n	8010f96 <_printf_float+0x16e>
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	e7e5      	b.n	8010f94 <_printf_float+0x16c>
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	bfd4      	ite	le
 8010fcc:	f1c3 0302 	rsble	r3, r3, #2
 8010fd0:	2301      	movgt	r3, #1
 8010fd2:	4413      	add	r3, r2
 8010fd4:	e7de      	b.n	8010f94 <_printf_float+0x16c>
 8010fd6:	6823      	ldr	r3, [r4, #0]
 8010fd8:	055a      	lsls	r2, r3, #21
 8010fda:	d407      	bmi.n	8010fec <_printf_float+0x1c4>
 8010fdc:	6923      	ldr	r3, [r4, #16]
 8010fde:	4642      	mov	r2, r8
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	47b8      	blx	r7
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	d12a      	bne.n	8011040 <_printf_float+0x218>
 8010fea:	e76b      	b.n	8010ec4 <_printf_float+0x9c>
 8010fec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010ff0:	f240 80de 	bls.w	80111b0 <_printf_float+0x388>
 8010ff4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010ff8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011000:	d133      	bne.n	801106a <_printf_float+0x242>
 8011002:	2301      	movs	r3, #1
 8011004:	4a42      	ldr	r2, [pc, #264]	; (8011110 <_printf_float+0x2e8>)
 8011006:	4631      	mov	r1, r6
 8011008:	4628      	mov	r0, r5
 801100a:	47b8      	blx	r7
 801100c:	3001      	adds	r0, #1
 801100e:	f43f af59 	beq.w	8010ec4 <_printf_float+0x9c>
 8011012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011016:	429a      	cmp	r2, r3
 8011018:	db02      	blt.n	8011020 <_printf_float+0x1f8>
 801101a:	6823      	ldr	r3, [r4, #0]
 801101c:	07d8      	lsls	r0, r3, #31
 801101e:	d50f      	bpl.n	8011040 <_printf_float+0x218>
 8011020:	9b05      	ldr	r3, [sp, #20]
 8011022:	465a      	mov	r2, fp
 8011024:	4631      	mov	r1, r6
 8011026:	4628      	mov	r0, r5
 8011028:	47b8      	blx	r7
 801102a:	3001      	adds	r0, #1
 801102c:	f43f af4a 	beq.w	8010ec4 <_printf_float+0x9c>
 8011030:	f04f 0800 	mov.w	r8, #0
 8011034:	f104 091a 	add.w	r9, r4, #26
 8011038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801103a:	3b01      	subs	r3, #1
 801103c:	4543      	cmp	r3, r8
 801103e:	dc09      	bgt.n	8011054 <_printf_float+0x22c>
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	079b      	lsls	r3, r3, #30
 8011044:	f100 8105 	bmi.w	8011252 <_printf_float+0x42a>
 8011048:	68e0      	ldr	r0, [r4, #12]
 801104a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801104c:	4298      	cmp	r0, r3
 801104e:	bfb8      	it	lt
 8011050:	4618      	movlt	r0, r3
 8011052:	e739      	b.n	8010ec8 <_printf_float+0xa0>
 8011054:	2301      	movs	r3, #1
 8011056:	464a      	mov	r2, r9
 8011058:	4631      	mov	r1, r6
 801105a:	4628      	mov	r0, r5
 801105c:	47b8      	blx	r7
 801105e:	3001      	adds	r0, #1
 8011060:	f43f af30 	beq.w	8010ec4 <_printf_float+0x9c>
 8011064:	f108 0801 	add.w	r8, r8, #1
 8011068:	e7e6      	b.n	8011038 <_printf_float+0x210>
 801106a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801106c:	2b00      	cmp	r3, #0
 801106e:	dc2b      	bgt.n	80110c8 <_printf_float+0x2a0>
 8011070:	2301      	movs	r3, #1
 8011072:	4a27      	ldr	r2, [pc, #156]	; (8011110 <_printf_float+0x2e8>)
 8011074:	4631      	mov	r1, r6
 8011076:	4628      	mov	r0, r5
 8011078:	47b8      	blx	r7
 801107a:	3001      	adds	r0, #1
 801107c:	f43f af22 	beq.w	8010ec4 <_printf_float+0x9c>
 8011080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011082:	b923      	cbnz	r3, 801108e <_printf_float+0x266>
 8011084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011086:	b913      	cbnz	r3, 801108e <_printf_float+0x266>
 8011088:	6823      	ldr	r3, [r4, #0]
 801108a:	07d9      	lsls	r1, r3, #31
 801108c:	d5d8      	bpl.n	8011040 <_printf_float+0x218>
 801108e:	9b05      	ldr	r3, [sp, #20]
 8011090:	465a      	mov	r2, fp
 8011092:	4631      	mov	r1, r6
 8011094:	4628      	mov	r0, r5
 8011096:	47b8      	blx	r7
 8011098:	3001      	adds	r0, #1
 801109a:	f43f af13 	beq.w	8010ec4 <_printf_float+0x9c>
 801109e:	f04f 0900 	mov.w	r9, #0
 80110a2:	f104 0a1a 	add.w	sl, r4, #26
 80110a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110a8:	425b      	negs	r3, r3
 80110aa:	454b      	cmp	r3, r9
 80110ac:	dc01      	bgt.n	80110b2 <_printf_float+0x28a>
 80110ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110b0:	e795      	b.n	8010fde <_printf_float+0x1b6>
 80110b2:	2301      	movs	r3, #1
 80110b4:	4652      	mov	r2, sl
 80110b6:	4631      	mov	r1, r6
 80110b8:	4628      	mov	r0, r5
 80110ba:	47b8      	blx	r7
 80110bc:	3001      	adds	r0, #1
 80110be:	f43f af01 	beq.w	8010ec4 <_printf_float+0x9c>
 80110c2:	f109 0901 	add.w	r9, r9, #1
 80110c6:	e7ee      	b.n	80110a6 <_printf_float+0x27e>
 80110c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80110cc:	429a      	cmp	r2, r3
 80110ce:	bfa8      	it	ge
 80110d0:	461a      	movge	r2, r3
 80110d2:	2a00      	cmp	r2, #0
 80110d4:	4691      	mov	r9, r2
 80110d6:	dd07      	ble.n	80110e8 <_printf_float+0x2c0>
 80110d8:	4613      	mov	r3, r2
 80110da:	4631      	mov	r1, r6
 80110dc:	4642      	mov	r2, r8
 80110de:	4628      	mov	r0, r5
 80110e0:	47b8      	blx	r7
 80110e2:	3001      	adds	r0, #1
 80110e4:	f43f aeee 	beq.w	8010ec4 <_printf_float+0x9c>
 80110e8:	f104 031a 	add.w	r3, r4, #26
 80110ec:	f04f 0a00 	mov.w	sl, #0
 80110f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80110f4:	9307      	str	r3, [sp, #28]
 80110f6:	e017      	b.n	8011128 <_printf_float+0x300>
 80110f8:	ffffffff 	.word	0xffffffff
 80110fc:	7fefffff 	.word	0x7fefffff
 8011100:	080154bc 	.word	0x080154bc
 8011104:	080154b8 	.word	0x080154b8
 8011108:	080154c4 	.word	0x080154c4
 801110c:	080154c0 	.word	0x080154c0
 8011110:	080154c8 	.word	0x080154c8
 8011114:	2301      	movs	r3, #1
 8011116:	9a07      	ldr	r2, [sp, #28]
 8011118:	4631      	mov	r1, r6
 801111a:	4628      	mov	r0, r5
 801111c:	47b8      	blx	r7
 801111e:	3001      	adds	r0, #1
 8011120:	f43f aed0 	beq.w	8010ec4 <_printf_float+0x9c>
 8011124:	f10a 0a01 	add.w	sl, sl, #1
 8011128:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801112a:	9306      	str	r3, [sp, #24]
 801112c:	eba3 0309 	sub.w	r3, r3, r9
 8011130:	4553      	cmp	r3, sl
 8011132:	dcef      	bgt.n	8011114 <_printf_float+0x2ec>
 8011134:	9b06      	ldr	r3, [sp, #24]
 8011136:	4498      	add	r8, r3
 8011138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801113c:	429a      	cmp	r2, r3
 801113e:	db15      	blt.n	801116c <_printf_float+0x344>
 8011140:	6823      	ldr	r3, [r4, #0]
 8011142:	07da      	lsls	r2, r3, #31
 8011144:	d412      	bmi.n	801116c <_printf_float+0x344>
 8011146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011148:	9a06      	ldr	r2, [sp, #24]
 801114a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801114c:	1a9a      	subs	r2, r3, r2
 801114e:	eba3 0a01 	sub.w	sl, r3, r1
 8011152:	4592      	cmp	sl, r2
 8011154:	bfa8      	it	ge
 8011156:	4692      	movge	sl, r2
 8011158:	f1ba 0f00 	cmp.w	sl, #0
 801115c:	dc0e      	bgt.n	801117c <_printf_float+0x354>
 801115e:	f04f 0800 	mov.w	r8, #0
 8011162:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011166:	f104 091a 	add.w	r9, r4, #26
 801116a:	e019      	b.n	80111a0 <_printf_float+0x378>
 801116c:	9b05      	ldr	r3, [sp, #20]
 801116e:	465a      	mov	r2, fp
 8011170:	4631      	mov	r1, r6
 8011172:	4628      	mov	r0, r5
 8011174:	47b8      	blx	r7
 8011176:	3001      	adds	r0, #1
 8011178:	d1e5      	bne.n	8011146 <_printf_float+0x31e>
 801117a:	e6a3      	b.n	8010ec4 <_printf_float+0x9c>
 801117c:	4653      	mov	r3, sl
 801117e:	4642      	mov	r2, r8
 8011180:	4631      	mov	r1, r6
 8011182:	4628      	mov	r0, r5
 8011184:	47b8      	blx	r7
 8011186:	3001      	adds	r0, #1
 8011188:	d1e9      	bne.n	801115e <_printf_float+0x336>
 801118a:	e69b      	b.n	8010ec4 <_printf_float+0x9c>
 801118c:	2301      	movs	r3, #1
 801118e:	464a      	mov	r2, r9
 8011190:	4631      	mov	r1, r6
 8011192:	4628      	mov	r0, r5
 8011194:	47b8      	blx	r7
 8011196:	3001      	adds	r0, #1
 8011198:	f43f ae94 	beq.w	8010ec4 <_printf_float+0x9c>
 801119c:	f108 0801 	add.w	r8, r8, #1
 80111a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111a4:	1a9b      	subs	r3, r3, r2
 80111a6:	eba3 030a 	sub.w	r3, r3, sl
 80111aa:	4543      	cmp	r3, r8
 80111ac:	dcee      	bgt.n	801118c <_printf_float+0x364>
 80111ae:	e747      	b.n	8011040 <_printf_float+0x218>
 80111b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80111b2:	2a01      	cmp	r2, #1
 80111b4:	dc01      	bgt.n	80111ba <_printf_float+0x392>
 80111b6:	07db      	lsls	r3, r3, #31
 80111b8:	d539      	bpl.n	801122e <_printf_float+0x406>
 80111ba:	2301      	movs	r3, #1
 80111bc:	4642      	mov	r2, r8
 80111be:	4631      	mov	r1, r6
 80111c0:	4628      	mov	r0, r5
 80111c2:	47b8      	blx	r7
 80111c4:	3001      	adds	r0, #1
 80111c6:	f43f ae7d 	beq.w	8010ec4 <_printf_float+0x9c>
 80111ca:	9b05      	ldr	r3, [sp, #20]
 80111cc:	465a      	mov	r2, fp
 80111ce:	4631      	mov	r1, r6
 80111d0:	4628      	mov	r0, r5
 80111d2:	47b8      	blx	r7
 80111d4:	3001      	adds	r0, #1
 80111d6:	f108 0801 	add.w	r8, r8, #1
 80111da:	f43f ae73 	beq.w	8010ec4 <_printf_float+0x9c>
 80111de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80111e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80111e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80111f0:	d018      	beq.n	8011224 <_printf_float+0x3fc>
 80111f2:	4642      	mov	r2, r8
 80111f4:	4631      	mov	r1, r6
 80111f6:	4628      	mov	r0, r5
 80111f8:	47b8      	blx	r7
 80111fa:	3001      	adds	r0, #1
 80111fc:	d10e      	bne.n	801121c <_printf_float+0x3f4>
 80111fe:	e661      	b.n	8010ec4 <_printf_float+0x9c>
 8011200:	2301      	movs	r3, #1
 8011202:	464a      	mov	r2, r9
 8011204:	4631      	mov	r1, r6
 8011206:	4628      	mov	r0, r5
 8011208:	47b8      	blx	r7
 801120a:	3001      	adds	r0, #1
 801120c:	f43f ae5a 	beq.w	8010ec4 <_printf_float+0x9c>
 8011210:	f108 0801 	add.w	r8, r8, #1
 8011214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011216:	3b01      	subs	r3, #1
 8011218:	4543      	cmp	r3, r8
 801121a:	dcf1      	bgt.n	8011200 <_printf_float+0x3d8>
 801121c:	4653      	mov	r3, sl
 801121e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011222:	e6dd      	b.n	8010fe0 <_printf_float+0x1b8>
 8011224:	f04f 0800 	mov.w	r8, #0
 8011228:	f104 091a 	add.w	r9, r4, #26
 801122c:	e7f2      	b.n	8011214 <_printf_float+0x3ec>
 801122e:	2301      	movs	r3, #1
 8011230:	e7df      	b.n	80111f2 <_printf_float+0x3ca>
 8011232:	2301      	movs	r3, #1
 8011234:	464a      	mov	r2, r9
 8011236:	4631      	mov	r1, r6
 8011238:	4628      	mov	r0, r5
 801123a:	47b8      	blx	r7
 801123c:	3001      	adds	r0, #1
 801123e:	f43f ae41 	beq.w	8010ec4 <_printf_float+0x9c>
 8011242:	f108 0801 	add.w	r8, r8, #1
 8011246:	68e3      	ldr	r3, [r4, #12]
 8011248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801124a:	1a9b      	subs	r3, r3, r2
 801124c:	4543      	cmp	r3, r8
 801124e:	dcf0      	bgt.n	8011232 <_printf_float+0x40a>
 8011250:	e6fa      	b.n	8011048 <_printf_float+0x220>
 8011252:	f04f 0800 	mov.w	r8, #0
 8011256:	f104 0919 	add.w	r9, r4, #25
 801125a:	e7f4      	b.n	8011246 <_printf_float+0x41e>
 801125c:	2900      	cmp	r1, #0
 801125e:	f43f ae8a 	beq.w	8010f76 <_printf_float+0x14e>
 8011262:	f04f 0c00 	mov.w	ip, #0
 8011266:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801126a:	e9cd 0900 	strd	r0, r9, [sp]
 801126e:	6022      	str	r2, [r4, #0]
 8011270:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011274:	4628      	mov	r0, r5
 8011276:	f7ff fd4f 	bl	8010d18 <__cvt>
 801127a:	4680      	mov	r8, r0
 801127c:	e64a      	b.n	8010f14 <_printf_float+0xec>
 801127e:	bf00      	nop

08011280 <_printf_common>:
 8011280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011284:	4691      	mov	r9, r2
 8011286:	461f      	mov	r7, r3
 8011288:	688a      	ldr	r2, [r1, #8]
 801128a:	690b      	ldr	r3, [r1, #16]
 801128c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011290:	4293      	cmp	r3, r2
 8011292:	bfb8      	it	lt
 8011294:	4613      	movlt	r3, r2
 8011296:	f8c9 3000 	str.w	r3, [r9]
 801129a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801129e:	4606      	mov	r6, r0
 80112a0:	460c      	mov	r4, r1
 80112a2:	b112      	cbz	r2, 80112aa <_printf_common+0x2a>
 80112a4:	3301      	adds	r3, #1
 80112a6:	f8c9 3000 	str.w	r3, [r9]
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	0699      	lsls	r1, r3, #26
 80112ae:	bf42      	ittt	mi
 80112b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80112b4:	3302      	addmi	r3, #2
 80112b6:	f8c9 3000 	strmi.w	r3, [r9]
 80112ba:	6825      	ldr	r5, [r4, #0]
 80112bc:	f015 0506 	ands.w	r5, r5, #6
 80112c0:	d107      	bne.n	80112d2 <_printf_common+0x52>
 80112c2:	f104 0a19 	add.w	sl, r4, #25
 80112c6:	68e3      	ldr	r3, [r4, #12]
 80112c8:	f8d9 2000 	ldr.w	r2, [r9]
 80112cc:	1a9b      	subs	r3, r3, r2
 80112ce:	42ab      	cmp	r3, r5
 80112d0:	dc28      	bgt.n	8011324 <_printf_common+0xa4>
 80112d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80112d6:	6822      	ldr	r2, [r4, #0]
 80112d8:	3300      	adds	r3, #0
 80112da:	bf18      	it	ne
 80112dc:	2301      	movne	r3, #1
 80112de:	0692      	lsls	r2, r2, #26
 80112e0:	d42d      	bmi.n	801133e <_printf_common+0xbe>
 80112e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112e6:	4639      	mov	r1, r7
 80112e8:	4630      	mov	r0, r6
 80112ea:	47c0      	blx	r8
 80112ec:	3001      	adds	r0, #1
 80112ee:	d020      	beq.n	8011332 <_printf_common+0xb2>
 80112f0:	6823      	ldr	r3, [r4, #0]
 80112f2:	68e5      	ldr	r5, [r4, #12]
 80112f4:	f8d9 2000 	ldr.w	r2, [r9]
 80112f8:	f003 0306 	and.w	r3, r3, #6
 80112fc:	2b04      	cmp	r3, #4
 80112fe:	bf08      	it	eq
 8011300:	1aad      	subeq	r5, r5, r2
 8011302:	68a3      	ldr	r3, [r4, #8]
 8011304:	6922      	ldr	r2, [r4, #16]
 8011306:	bf0c      	ite	eq
 8011308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801130c:	2500      	movne	r5, #0
 801130e:	4293      	cmp	r3, r2
 8011310:	bfc4      	itt	gt
 8011312:	1a9b      	subgt	r3, r3, r2
 8011314:	18ed      	addgt	r5, r5, r3
 8011316:	f04f 0900 	mov.w	r9, #0
 801131a:	341a      	adds	r4, #26
 801131c:	454d      	cmp	r5, r9
 801131e:	d11a      	bne.n	8011356 <_printf_common+0xd6>
 8011320:	2000      	movs	r0, #0
 8011322:	e008      	b.n	8011336 <_printf_common+0xb6>
 8011324:	2301      	movs	r3, #1
 8011326:	4652      	mov	r2, sl
 8011328:	4639      	mov	r1, r7
 801132a:	4630      	mov	r0, r6
 801132c:	47c0      	blx	r8
 801132e:	3001      	adds	r0, #1
 8011330:	d103      	bne.n	801133a <_printf_common+0xba>
 8011332:	f04f 30ff 	mov.w	r0, #4294967295
 8011336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801133a:	3501      	adds	r5, #1
 801133c:	e7c3      	b.n	80112c6 <_printf_common+0x46>
 801133e:	18e1      	adds	r1, r4, r3
 8011340:	1c5a      	adds	r2, r3, #1
 8011342:	2030      	movs	r0, #48	; 0x30
 8011344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011348:	4422      	add	r2, r4
 801134a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801134e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011352:	3302      	adds	r3, #2
 8011354:	e7c5      	b.n	80112e2 <_printf_common+0x62>
 8011356:	2301      	movs	r3, #1
 8011358:	4622      	mov	r2, r4
 801135a:	4639      	mov	r1, r7
 801135c:	4630      	mov	r0, r6
 801135e:	47c0      	blx	r8
 8011360:	3001      	adds	r0, #1
 8011362:	d0e6      	beq.n	8011332 <_printf_common+0xb2>
 8011364:	f109 0901 	add.w	r9, r9, #1
 8011368:	e7d8      	b.n	801131c <_printf_common+0x9c>
	...

0801136c <_printf_i>:
 801136c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011370:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011374:	460c      	mov	r4, r1
 8011376:	7e09      	ldrb	r1, [r1, #24]
 8011378:	b085      	sub	sp, #20
 801137a:	296e      	cmp	r1, #110	; 0x6e
 801137c:	4617      	mov	r7, r2
 801137e:	4606      	mov	r6, r0
 8011380:	4698      	mov	r8, r3
 8011382:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011384:	f000 80b3 	beq.w	80114ee <_printf_i+0x182>
 8011388:	d822      	bhi.n	80113d0 <_printf_i+0x64>
 801138a:	2963      	cmp	r1, #99	; 0x63
 801138c:	d036      	beq.n	80113fc <_printf_i+0x90>
 801138e:	d80a      	bhi.n	80113a6 <_printf_i+0x3a>
 8011390:	2900      	cmp	r1, #0
 8011392:	f000 80b9 	beq.w	8011508 <_printf_i+0x19c>
 8011396:	2958      	cmp	r1, #88	; 0x58
 8011398:	f000 8083 	beq.w	80114a2 <_printf_i+0x136>
 801139c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80113a4:	e032      	b.n	801140c <_printf_i+0xa0>
 80113a6:	2964      	cmp	r1, #100	; 0x64
 80113a8:	d001      	beq.n	80113ae <_printf_i+0x42>
 80113aa:	2969      	cmp	r1, #105	; 0x69
 80113ac:	d1f6      	bne.n	801139c <_printf_i+0x30>
 80113ae:	6820      	ldr	r0, [r4, #0]
 80113b0:	6813      	ldr	r3, [r2, #0]
 80113b2:	0605      	lsls	r5, r0, #24
 80113b4:	f103 0104 	add.w	r1, r3, #4
 80113b8:	d52a      	bpl.n	8011410 <_printf_i+0xa4>
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	6011      	str	r1, [r2, #0]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	da03      	bge.n	80113ca <_printf_i+0x5e>
 80113c2:	222d      	movs	r2, #45	; 0x2d
 80113c4:	425b      	negs	r3, r3
 80113c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80113ca:	486f      	ldr	r0, [pc, #444]	; (8011588 <_printf_i+0x21c>)
 80113cc:	220a      	movs	r2, #10
 80113ce:	e039      	b.n	8011444 <_printf_i+0xd8>
 80113d0:	2973      	cmp	r1, #115	; 0x73
 80113d2:	f000 809d 	beq.w	8011510 <_printf_i+0x1a4>
 80113d6:	d808      	bhi.n	80113ea <_printf_i+0x7e>
 80113d8:	296f      	cmp	r1, #111	; 0x6f
 80113da:	d020      	beq.n	801141e <_printf_i+0xb2>
 80113dc:	2970      	cmp	r1, #112	; 0x70
 80113de:	d1dd      	bne.n	801139c <_printf_i+0x30>
 80113e0:	6823      	ldr	r3, [r4, #0]
 80113e2:	f043 0320 	orr.w	r3, r3, #32
 80113e6:	6023      	str	r3, [r4, #0]
 80113e8:	e003      	b.n	80113f2 <_printf_i+0x86>
 80113ea:	2975      	cmp	r1, #117	; 0x75
 80113ec:	d017      	beq.n	801141e <_printf_i+0xb2>
 80113ee:	2978      	cmp	r1, #120	; 0x78
 80113f0:	d1d4      	bne.n	801139c <_printf_i+0x30>
 80113f2:	2378      	movs	r3, #120	; 0x78
 80113f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113f8:	4864      	ldr	r0, [pc, #400]	; (801158c <_printf_i+0x220>)
 80113fa:	e055      	b.n	80114a8 <_printf_i+0x13c>
 80113fc:	6813      	ldr	r3, [r2, #0]
 80113fe:	1d19      	adds	r1, r3, #4
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	6011      	str	r1, [r2, #0]
 8011404:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801140c:	2301      	movs	r3, #1
 801140e:	e08c      	b.n	801152a <_printf_i+0x1be>
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	6011      	str	r1, [r2, #0]
 8011414:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011418:	bf18      	it	ne
 801141a:	b21b      	sxthne	r3, r3
 801141c:	e7cf      	b.n	80113be <_printf_i+0x52>
 801141e:	6813      	ldr	r3, [r2, #0]
 8011420:	6825      	ldr	r5, [r4, #0]
 8011422:	1d18      	adds	r0, r3, #4
 8011424:	6010      	str	r0, [r2, #0]
 8011426:	0628      	lsls	r0, r5, #24
 8011428:	d501      	bpl.n	801142e <_printf_i+0xc2>
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	e002      	b.n	8011434 <_printf_i+0xc8>
 801142e:	0668      	lsls	r0, r5, #25
 8011430:	d5fb      	bpl.n	801142a <_printf_i+0xbe>
 8011432:	881b      	ldrh	r3, [r3, #0]
 8011434:	4854      	ldr	r0, [pc, #336]	; (8011588 <_printf_i+0x21c>)
 8011436:	296f      	cmp	r1, #111	; 0x6f
 8011438:	bf14      	ite	ne
 801143a:	220a      	movne	r2, #10
 801143c:	2208      	moveq	r2, #8
 801143e:	2100      	movs	r1, #0
 8011440:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011444:	6865      	ldr	r5, [r4, #4]
 8011446:	60a5      	str	r5, [r4, #8]
 8011448:	2d00      	cmp	r5, #0
 801144a:	f2c0 8095 	blt.w	8011578 <_printf_i+0x20c>
 801144e:	6821      	ldr	r1, [r4, #0]
 8011450:	f021 0104 	bic.w	r1, r1, #4
 8011454:	6021      	str	r1, [r4, #0]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d13d      	bne.n	80114d6 <_printf_i+0x16a>
 801145a:	2d00      	cmp	r5, #0
 801145c:	f040 808e 	bne.w	801157c <_printf_i+0x210>
 8011460:	4665      	mov	r5, ip
 8011462:	2a08      	cmp	r2, #8
 8011464:	d10b      	bne.n	801147e <_printf_i+0x112>
 8011466:	6823      	ldr	r3, [r4, #0]
 8011468:	07db      	lsls	r3, r3, #31
 801146a:	d508      	bpl.n	801147e <_printf_i+0x112>
 801146c:	6923      	ldr	r3, [r4, #16]
 801146e:	6862      	ldr	r2, [r4, #4]
 8011470:	429a      	cmp	r2, r3
 8011472:	bfde      	ittt	le
 8011474:	2330      	movle	r3, #48	; 0x30
 8011476:	f805 3c01 	strble.w	r3, [r5, #-1]
 801147a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801147e:	ebac 0305 	sub.w	r3, ip, r5
 8011482:	6123      	str	r3, [r4, #16]
 8011484:	f8cd 8000 	str.w	r8, [sp]
 8011488:	463b      	mov	r3, r7
 801148a:	aa03      	add	r2, sp, #12
 801148c:	4621      	mov	r1, r4
 801148e:	4630      	mov	r0, r6
 8011490:	f7ff fef6 	bl	8011280 <_printf_common>
 8011494:	3001      	adds	r0, #1
 8011496:	d14d      	bne.n	8011534 <_printf_i+0x1c8>
 8011498:	f04f 30ff 	mov.w	r0, #4294967295
 801149c:	b005      	add	sp, #20
 801149e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114a2:	4839      	ldr	r0, [pc, #228]	; (8011588 <_printf_i+0x21c>)
 80114a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80114a8:	6813      	ldr	r3, [r2, #0]
 80114aa:	6821      	ldr	r1, [r4, #0]
 80114ac:	1d1d      	adds	r5, r3, #4
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	6015      	str	r5, [r2, #0]
 80114b2:	060a      	lsls	r2, r1, #24
 80114b4:	d50b      	bpl.n	80114ce <_printf_i+0x162>
 80114b6:	07ca      	lsls	r2, r1, #31
 80114b8:	bf44      	itt	mi
 80114ba:	f041 0120 	orrmi.w	r1, r1, #32
 80114be:	6021      	strmi	r1, [r4, #0]
 80114c0:	b91b      	cbnz	r3, 80114ca <_printf_i+0x15e>
 80114c2:	6822      	ldr	r2, [r4, #0]
 80114c4:	f022 0220 	bic.w	r2, r2, #32
 80114c8:	6022      	str	r2, [r4, #0]
 80114ca:	2210      	movs	r2, #16
 80114cc:	e7b7      	b.n	801143e <_printf_i+0xd2>
 80114ce:	064d      	lsls	r5, r1, #25
 80114d0:	bf48      	it	mi
 80114d2:	b29b      	uxthmi	r3, r3
 80114d4:	e7ef      	b.n	80114b6 <_printf_i+0x14a>
 80114d6:	4665      	mov	r5, ip
 80114d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80114dc:	fb02 3311 	mls	r3, r2, r1, r3
 80114e0:	5cc3      	ldrb	r3, [r0, r3]
 80114e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80114e6:	460b      	mov	r3, r1
 80114e8:	2900      	cmp	r1, #0
 80114ea:	d1f5      	bne.n	80114d8 <_printf_i+0x16c>
 80114ec:	e7b9      	b.n	8011462 <_printf_i+0xf6>
 80114ee:	6813      	ldr	r3, [r2, #0]
 80114f0:	6825      	ldr	r5, [r4, #0]
 80114f2:	6961      	ldr	r1, [r4, #20]
 80114f4:	1d18      	adds	r0, r3, #4
 80114f6:	6010      	str	r0, [r2, #0]
 80114f8:	0628      	lsls	r0, r5, #24
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	d501      	bpl.n	8011502 <_printf_i+0x196>
 80114fe:	6019      	str	r1, [r3, #0]
 8011500:	e002      	b.n	8011508 <_printf_i+0x19c>
 8011502:	066a      	lsls	r2, r5, #25
 8011504:	d5fb      	bpl.n	80114fe <_printf_i+0x192>
 8011506:	8019      	strh	r1, [r3, #0]
 8011508:	2300      	movs	r3, #0
 801150a:	6123      	str	r3, [r4, #16]
 801150c:	4665      	mov	r5, ip
 801150e:	e7b9      	b.n	8011484 <_printf_i+0x118>
 8011510:	6813      	ldr	r3, [r2, #0]
 8011512:	1d19      	adds	r1, r3, #4
 8011514:	6011      	str	r1, [r2, #0]
 8011516:	681d      	ldr	r5, [r3, #0]
 8011518:	6862      	ldr	r2, [r4, #4]
 801151a:	2100      	movs	r1, #0
 801151c:	4628      	mov	r0, r5
 801151e:	f7ee fe97 	bl	8000250 <memchr>
 8011522:	b108      	cbz	r0, 8011528 <_printf_i+0x1bc>
 8011524:	1b40      	subs	r0, r0, r5
 8011526:	6060      	str	r0, [r4, #4]
 8011528:	6863      	ldr	r3, [r4, #4]
 801152a:	6123      	str	r3, [r4, #16]
 801152c:	2300      	movs	r3, #0
 801152e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011532:	e7a7      	b.n	8011484 <_printf_i+0x118>
 8011534:	6923      	ldr	r3, [r4, #16]
 8011536:	462a      	mov	r2, r5
 8011538:	4639      	mov	r1, r7
 801153a:	4630      	mov	r0, r6
 801153c:	47c0      	blx	r8
 801153e:	3001      	adds	r0, #1
 8011540:	d0aa      	beq.n	8011498 <_printf_i+0x12c>
 8011542:	6823      	ldr	r3, [r4, #0]
 8011544:	079b      	lsls	r3, r3, #30
 8011546:	d413      	bmi.n	8011570 <_printf_i+0x204>
 8011548:	68e0      	ldr	r0, [r4, #12]
 801154a:	9b03      	ldr	r3, [sp, #12]
 801154c:	4298      	cmp	r0, r3
 801154e:	bfb8      	it	lt
 8011550:	4618      	movlt	r0, r3
 8011552:	e7a3      	b.n	801149c <_printf_i+0x130>
 8011554:	2301      	movs	r3, #1
 8011556:	464a      	mov	r2, r9
 8011558:	4639      	mov	r1, r7
 801155a:	4630      	mov	r0, r6
 801155c:	47c0      	blx	r8
 801155e:	3001      	adds	r0, #1
 8011560:	d09a      	beq.n	8011498 <_printf_i+0x12c>
 8011562:	3501      	adds	r5, #1
 8011564:	68e3      	ldr	r3, [r4, #12]
 8011566:	9a03      	ldr	r2, [sp, #12]
 8011568:	1a9b      	subs	r3, r3, r2
 801156a:	42ab      	cmp	r3, r5
 801156c:	dcf2      	bgt.n	8011554 <_printf_i+0x1e8>
 801156e:	e7eb      	b.n	8011548 <_printf_i+0x1dc>
 8011570:	2500      	movs	r5, #0
 8011572:	f104 0919 	add.w	r9, r4, #25
 8011576:	e7f5      	b.n	8011564 <_printf_i+0x1f8>
 8011578:	2b00      	cmp	r3, #0
 801157a:	d1ac      	bne.n	80114d6 <_printf_i+0x16a>
 801157c:	7803      	ldrb	r3, [r0, #0]
 801157e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011582:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011586:	e76c      	b.n	8011462 <_printf_i+0xf6>
 8011588:	080154ca 	.word	0x080154ca
 801158c:	080154db 	.word	0x080154db

08011590 <_scanf_float>:
 8011590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011594:	469a      	mov	sl, r3
 8011596:	688b      	ldr	r3, [r1, #8]
 8011598:	4616      	mov	r6, r2
 801159a:	1e5a      	subs	r2, r3, #1
 801159c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80115a0:	b087      	sub	sp, #28
 80115a2:	bf83      	ittte	hi
 80115a4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80115a8:	189b      	addhi	r3, r3, r2
 80115aa:	9301      	strhi	r3, [sp, #4]
 80115ac:	2300      	movls	r3, #0
 80115ae:	bf86      	itte	hi
 80115b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80115b4:	608b      	strhi	r3, [r1, #8]
 80115b6:	9301      	strls	r3, [sp, #4]
 80115b8:	680b      	ldr	r3, [r1, #0]
 80115ba:	4688      	mov	r8, r1
 80115bc:	f04f 0b00 	mov.w	fp, #0
 80115c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80115c4:	f848 3b1c 	str.w	r3, [r8], #28
 80115c8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80115cc:	4607      	mov	r7, r0
 80115ce:	460c      	mov	r4, r1
 80115d0:	4645      	mov	r5, r8
 80115d2:	465a      	mov	r2, fp
 80115d4:	46d9      	mov	r9, fp
 80115d6:	f8cd b008 	str.w	fp, [sp, #8]
 80115da:	68a1      	ldr	r1, [r4, #8]
 80115dc:	b181      	cbz	r1, 8011600 <_scanf_float+0x70>
 80115de:	6833      	ldr	r3, [r6, #0]
 80115e0:	781b      	ldrb	r3, [r3, #0]
 80115e2:	2b49      	cmp	r3, #73	; 0x49
 80115e4:	d071      	beq.n	80116ca <_scanf_float+0x13a>
 80115e6:	d84d      	bhi.n	8011684 <_scanf_float+0xf4>
 80115e8:	2b39      	cmp	r3, #57	; 0x39
 80115ea:	d840      	bhi.n	801166e <_scanf_float+0xde>
 80115ec:	2b31      	cmp	r3, #49	; 0x31
 80115ee:	f080 8088 	bcs.w	8011702 <_scanf_float+0x172>
 80115f2:	2b2d      	cmp	r3, #45	; 0x2d
 80115f4:	f000 8090 	beq.w	8011718 <_scanf_float+0x188>
 80115f8:	d815      	bhi.n	8011626 <_scanf_float+0x96>
 80115fa:	2b2b      	cmp	r3, #43	; 0x2b
 80115fc:	f000 808c 	beq.w	8011718 <_scanf_float+0x188>
 8011600:	f1b9 0f00 	cmp.w	r9, #0
 8011604:	d003      	beq.n	801160e <_scanf_float+0x7e>
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801160c:	6023      	str	r3, [r4, #0]
 801160e:	3a01      	subs	r2, #1
 8011610:	2a01      	cmp	r2, #1
 8011612:	f200 80ea 	bhi.w	80117ea <_scanf_float+0x25a>
 8011616:	4545      	cmp	r5, r8
 8011618:	f200 80dc 	bhi.w	80117d4 <_scanf_float+0x244>
 801161c:	2601      	movs	r6, #1
 801161e:	4630      	mov	r0, r6
 8011620:	b007      	add	sp, #28
 8011622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011626:	2b2e      	cmp	r3, #46	; 0x2e
 8011628:	f000 809f 	beq.w	801176a <_scanf_float+0x1da>
 801162c:	2b30      	cmp	r3, #48	; 0x30
 801162e:	d1e7      	bne.n	8011600 <_scanf_float+0x70>
 8011630:	6820      	ldr	r0, [r4, #0]
 8011632:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011636:	d064      	beq.n	8011702 <_scanf_float+0x172>
 8011638:	9b01      	ldr	r3, [sp, #4]
 801163a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801163e:	6020      	str	r0, [r4, #0]
 8011640:	f109 0901 	add.w	r9, r9, #1
 8011644:	b11b      	cbz	r3, 801164e <_scanf_float+0xbe>
 8011646:	3b01      	subs	r3, #1
 8011648:	3101      	adds	r1, #1
 801164a:	9301      	str	r3, [sp, #4]
 801164c:	60a1      	str	r1, [r4, #8]
 801164e:	68a3      	ldr	r3, [r4, #8]
 8011650:	3b01      	subs	r3, #1
 8011652:	60a3      	str	r3, [r4, #8]
 8011654:	6923      	ldr	r3, [r4, #16]
 8011656:	3301      	adds	r3, #1
 8011658:	6123      	str	r3, [r4, #16]
 801165a:	6873      	ldr	r3, [r6, #4]
 801165c:	3b01      	subs	r3, #1
 801165e:	2b00      	cmp	r3, #0
 8011660:	6073      	str	r3, [r6, #4]
 8011662:	f340 80ac 	ble.w	80117be <_scanf_float+0x22e>
 8011666:	6833      	ldr	r3, [r6, #0]
 8011668:	3301      	adds	r3, #1
 801166a:	6033      	str	r3, [r6, #0]
 801166c:	e7b5      	b.n	80115da <_scanf_float+0x4a>
 801166e:	2b45      	cmp	r3, #69	; 0x45
 8011670:	f000 8085 	beq.w	801177e <_scanf_float+0x1ee>
 8011674:	2b46      	cmp	r3, #70	; 0x46
 8011676:	d06a      	beq.n	801174e <_scanf_float+0x1be>
 8011678:	2b41      	cmp	r3, #65	; 0x41
 801167a:	d1c1      	bne.n	8011600 <_scanf_float+0x70>
 801167c:	2a01      	cmp	r2, #1
 801167e:	d1bf      	bne.n	8011600 <_scanf_float+0x70>
 8011680:	2202      	movs	r2, #2
 8011682:	e046      	b.n	8011712 <_scanf_float+0x182>
 8011684:	2b65      	cmp	r3, #101	; 0x65
 8011686:	d07a      	beq.n	801177e <_scanf_float+0x1ee>
 8011688:	d818      	bhi.n	80116bc <_scanf_float+0x12c>
 801168a:	2b54      	cmp	r3, #84	; 0x54
 801168c:	d066      	beq.n	801175c <_scanf_float+0x1cc>
 801168e:	d811      	bhi.n	80116b4 <_scanf_float+0x124>
 8011690:	2b4e      	cmp	r3, #78	; 0x4e
 8011692:	d1b5      	bne.n	8011600 <_scanf_float+0x70>
 8011694:	2a00      	cmp	r2, #0
 8011696:	d146      	bne.n	8011726 <_scanf_float+0x196>
 8011698:	f1b9 0f00 	cmp.w	r9, #0
 801169c:	d145      	bne.n	801172a <_scanf_float+0x19a>
 801169e:	6821      	ldr	r1, [r4, #0]
 80116a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80116a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80116a8:	d13f      	bne.n	801172a <_scanf_float+0x19a>
 80116aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80116ae:	6021      	str	r1, [r4, #0]
 80116b0:	2201      	movs	r2, #1
 80116b2:	e02e      	b.n	8011712 <_scanf_float+0x182>
 80116b4:	2b59      	cmp	r3, #89	; 0x59
 80116b6:	d01e      	beq.n	80116f6 <_scanf_float+0x166>
 80116b8:	2b61      	cmp	r3, #97	; 0x61
 80116ba:	e7de      	b.n	801167a <_scanf_float+0xea>
 80116bc:	2b6e      	cmp	r3, #110	; 0x6e
 80116be:	d0e9      	beq.n	8011694 <_scanf_float+0x104>
 80116c0:	d815      	bhi.n	80116ee <_scanf_float+0x15e>
 80116c2:	2b66      	cmp	r3, #102	; 0x66
 80116c4:	d043      	beq.n	801174e <_scanf_float+0x1be>
 80116c6:	2b69      	cmp	r3, #105	; 0x69
 80116c8:	d19a      	bne.n	8011600 <_scanf_float+0x70>
 80116ca:	f1bb 0f00 	cmp.w	fp, #0
 80116ce:	d138      	bne.n	8011742 <_scanf_float+0x1b2>
 80116d0:	f1b9 0f00 	cmp.w	r9, #0
 80116d4:	d197      	bne.n	8011606 <_scanf_float+0x76>
 80116d6:	6821      	ldr	r1, [r4, #0]
 80116d8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80116dc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80116e0:	d195      	bne.n	801160e <_scanf_float+0x7e>
 80116e2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80116e6:	6021      	str	r1, [r4, #0]
 80116e8:	f04f 0b01 	mov.w	fp, #1
 80116ec:	e011      	b.n	8011712 <_scanf_float+0x182>
 80116ee:	2b74      	cmp	r3, #116	; 0x74
 80116f0:	d034      	beq.n	801175c <_scanf_float+0x1cc>
 80116f2:	2b79      	cmp	r3, #121	; 0x79
 80116f4:	d184      	bne.n	8011600 <_scanf_float+0x70>
 80116f6:	f1bb 0f07 	cmp.w	fp, #7
 80116fa:	d181      	bne.n	8011600 <_scanf_float+0x70>
 80116fc:	f04f 0b08 	mov.w	fp, #8
 8011700:	e007      	b.n	8011712 <_scanf_float+0x182>
 8011702:	eb12 0f0b 	cmn.w	r2, fp
 8011706:	f47f af7b 	bne.w	8011600 <_scanf_float+0x70>
 801170a:	6821      	ldr	r1, [r4, #0]
 801170c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011710:	6021      	str	r1, [r4, #0]
 8011712:	702b      	strb	r3, [r5, #0]
 8011714:	3501      	adds	r5, #1
 8011716:	e79a      	b.n	801164e <_scanf_float+0xbe>
 8011718:	6821      	ldr	r1, [r4, #0]
 801171a:	0608      	lsls	r0, r1, #24
 801171c:	f57f af70 	bpl.w	8011600 <_scanf_float+0x70>
 8011720:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011724:	e7f4      	b.n	8011710 <_scanf_float+0x180>
 8011726:	2a02      	cmp	r2, #2
 8011728:	d047      	beq.n	80117ba <_scanf_float+0x22a>
 801172a:	f1bb 0f01 	cmp.w	fp, #1
 801172e:	d003      	beq.n	8011738 <_scanf_float+0x1a8>
 8011730:	f1bb 0f04 	cmp.w	fp, #4
 8011734:	f47f af64 	bne.w	8011600 <_scanf_float+0x70>
 8011738:	f10b 0b01 	add.w	fp, fp, #1
 801173c:	fa5f fb8b 	uxtb.w	fp, fp
 8011740:	e7e7      	b.n	8011712 <_scanf_float+0x182>
 8011742:	f1bb 0f03 	cmp.w	fp, #3
 8011746:	d0f7      	beq.n	8011738 <_scanf_float+0x1a8>
 8011748:	f1bb 0f05 	cmp.w	fp, #5
 801174c:	e7f2      	b.n	8011734 <_scanf_float+0x1a4>
 801174e:	f1bb 0f02 	cmp.w	fp, #2
 8011752:	f47f af55 	bne.w	8011600 <_scanf_float+0x70>
 8011756:	f04f 0b03 	mov.w	fp, #3
 801175a:	e7da      	b.n	8011712 <_scanf_float+0x182>
 801175c:	f1bb 0f06 	cmp.w	fp, #6
 8011760:	f47f af4e 	bne.w	8011600 <_scanf_float+0x70>
 8011764:	f04f 0b07 	mov.w	fp, #7
 8011768:	e7d3      	b.n	8011712 <_scanf_float+0x182>
 801176a:	6821      	ldr	r1, [r4, #0]
 801176c:	0588      	lsls	r0, r1, #22
 801176e:	f57f af47 	bpl.w	8011600 <_scanf_float+0x70>
 8011772:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8011776:	6021      	str	r1, [r4, #0]
 8011778:	f8cd 9008 	str.w	r9, [sp, #8]
 801177c:	e7c9      	b.n	8011712 <_scanf_float+0x182>
 801177e:	6821      	ldr	r1, [r4, #0]
 8011780:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8011784:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011788:	d006      	beq.n	8011798 <_scanf_float+0x208>
 801178a:	0548      	lsls	r0, r1, #21
 801178c:	f57f af38 	bpl.w	8011600 <_scanf_float+0x70>
 8011790:	f1b9 0f00 	cmp.w	r9, #0
 8011794:	f43f af3b 	beq.w	801160e <_scanf_float+0x7e>
 8011798:	0588      	lsls	r0, r1, #22
 801179a:	bf58      	it	pl
 801179c:	9802      	ldrpl	r0, [sp, #8]
 801179e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80117a2:	bf58      	it	pl
 80117a4:	eba9 0000 	subpl.w	r0, r9, r0
 80117a8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80117ac:	bf58      	it	pl
 80117ae:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80117b2:	6021      	str	r1, [r4, #0]
 80117b4:	f04f 0900 	mov.w	r9, #0
 80117b8:	e7ab      	b.n	8011712 <_scanf_float+0x182>
 80117ba:	2203      	movs	r2, #3
 80117bc:	e7a9      	b.n	8011712 <_scanf_float+0x182>
 80117be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80117c2:	9205      	str	r2, [sp, #20]
 80117c4:	4631      	mov	r1, r6
 80117c6:	4638      	mov	r0, r7
 80117c8:	4798      	blx	r3
 80117ca:	9a05      	ldr	r2, [sp, #20]
 80117cc:	2800      	cmp	r0, #0
 80117ce:	f43f af04 	beq.w	80115da <_scanf_float+0x4a>
 80117d2:	e715      	b.n	8011600 <_scanf_float+0x70>
 80117d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80117d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80117dc:	4632      	mov	r2, r6
 80117de:	4638      	mov	r0, r7
 80117e0:	4798      	blx	r3
 80117e2:	6923      	ldr	r3, [r4, #16]
 80117e4:	3b01      	subs	r3, #1
 80117e6:	6123      	str	r3, [r4, #16]
 80117e8:	e715      	b.n	8011616 <_scanf_float+0x86>
 80117ea:	f10b 33ff 	add.w	r3, fp, #4294967295
 80117ee:	2b06      	cmp	r3, #6
 80117f0:	d80a      	bhi.n	8011808 <_scanf_float+0x278>
 80117f2:	f1bb 0f02 	cmp.w	fp, #2
 80117f6:	d966      	bls.n	80118c6 <_scanf_float+0x336>
 80117f8:	f1ab 0b03 	sub.w	fp, fp, #3
 80117fc:	fa5f fb8b 	uxtb.w	fp, fp
 8011800:	eba5 0b0b 	sub.w	fp, r5, fp
 8011804:	455d      	cmp	r5, fp
 8011806:	d149      	bne.n	801189c <_scanf_float+0x30c>
 8011808:	6823      	ldr	r3, [r4, #0]
 801180a:	05da      	lsls	r2, r3, #23
 801180c:	d51f      	bpl.n	801184e <_scanf_float+0x2be>
 801180e:	055b      	lsls	r3, r3, #21
 8011810:	d466      	bmi.n	80118e0 <_scanf_float+0x350>
 8011812:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8011816:	6923      	ldr	r3, [r4, #16]
 8011818:	2965      	cmp	r1, #101	; 0x65
 801181a:	f103 33ff 	add.w	r3, r3, #4294967295
 801181e:	f105 3bff 	add.w	fp, r5, #4294967295
 8011822:	6123      	str	r3, [r4, #16]
 8011824:	d00d      	beq.n	8011842 <_scanf_float+0x2b2>
 8011826:	2945      	cmp	r1, #69	; 0x45
 8011828:	d00b      	beq.n	8011842 <_scanf_float+0x2b2>
 801182a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801182e:	4632      	mov	r2, r6
 8011830:	4638      	mov	r0, r7
 8011832:	4798      	blx	r3
 8011834:	6923      	ldr	r3, [r4, #16]
 8011836:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801183a:	3b01      	subs	r3, #1
 801183c:	f1a5 0b02 	sub.w	fp, r5, #2
 8011840:	6123      	str	r3, [r4, #16]
 8011842:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011846:	4632      	mov	r2, r6
 8011848:	4638      	mov	r0, r7
 801184a:	4798      	blx	r3
 801184c:	465d      	mov	r5, fp
 801184e:	6826      	ldr	r6, [r4, #0]
 8011850:	f016 0610 	ands.w	r6, r6, #16
 8011854:	d170      	bne.n	8011938 <_scanf_float+0x3a8>
 8011856:	702e      	strb	r6, [r5, #0]
 8011858:	6823      	ldr	r3, [r4, #0]
 801185a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801185e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011862:	d140      	bne.n	80118e6 <_scanf_float+0x356>
 8011864:	9b02      	ldr	r3, [sp, #8]
 8011866:	eba9 0303 	sub.w	r3, r9, r3
 801186a:	425a      	negs	r2, r3
 801186c:	2b00      	cmp	r3, #0
 801186e:	d147      	bne.n	8011900 <_scanf_float+0x370>
 8011870:	2200      	movs	r2, #0
 8011872:	4638      	mov	r0, r7
 8011874:	4641      	mov	r1, r8
 8011876:	f000 ff43 	bl	8012700 <_strtod_r>
 801187a:	6820      	ldr	r0, [r4, #0]
 801187c:	f8da 3000 	ldr.w	r3, [sl]
 8011880:	f010 0f02 	tst.w	r0, #2
 8011884:	f103 0204 	add.w	r2, r3, #4
 8011888:	f8ca 2000 	str.w	r2, [sl]
 801188c:	d043      	beq.n	8011916 <_scanf_float+0x386>
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	ed83 0b00 	vstr	d0, [r3]
 8011894:	68e3      	ldr	r3, [r4, #12]
 8011896:	3301      	adds	r3, #1
 8011898:	60e3      	str	r3, [r4, #12]
 801189a:	e6c0      	b.n	801161e <_scanf_float+0x8e>
 801189c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80118a4:	4632      	mov	r2, r6
 80118a6:	4638      	mov	r0, r7
 80118a8:	4798      	blx	r3
 80118aa:	6923      	ldr	r3, [r4, #16]
 80118ac:	3b01      	subs	r3, #1
 80118ae:	6123      	str	r3, [r4, #16]
 80118b0:	e7a8      	b.n	8011804 <_scanf_float+0x274>
 80118b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118b6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80118ba:	4632      	mov	r2, r6
 80118bc:	4638      	mov	r0, r7
 80118be:	4798      	blx	r3
 80118c0:	6923      	ldr	r3, [r4, #16]
 80118c2:	3b01      	subs	r3, #1
 80118c4:	6123      	str	r3, [r4, #16]
 80118c6:	4545      	cmp	r5, r8
 80118c8:	d8f3      	bhi.n	80118b2 <_scanf_float+0x322>
 80118ca:	e6a7      	b.n	801161c <_scanf_float+0x8c>
 80118cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80118d4:	4632      	mov	r2, r6
 80118d6:	4638      	mov	r0, r7
 80118d8:	4798      	blx	r3
 80118da:	6923      	ldr	r3, [r4, #16]
 80118dc:	3b01      	subs	r3, #1
 80118de:	6123      	str	r3, [r4, #16]
 80118e0:	4545      	cmp	r5, r8
 80118e2:	d8f3      	bhi.n	80118cc <_scanf_float+0x33c>
 80118e4:	e69a      	b.n	801161c <_scanf_float+0x8c>
 80118e6:	9b03      	ldr	r3, [sp, #12]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d0c1      	beq.n	8011870 <_scanf_float+0x2e0>
 80118ec:	9904      	ldr	r1, [sp, #16]
 80118ee:	230a      	movs	r3, #10
 80118f0:	4632      	mov	r2, r6
 80118f2:	3101      	adds	r1, #1
 80118f4:	4638      	mov	r0, r7
 80118f6:	f000 ff8f 	bl	8012818 <_strtol_r>
 80118fa:	9b03      	ldr	r3, [sp, #12]
 80118fc:	9d04      	ldr	r5, [sp, #16]
 80118fe:	1ac2      	subs	r2, r0, r3
 8011900:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8011904:	429d      	cmp	r5, r3
 8011906:	bf28      	it	cs
 8011908:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801190c:	490b      	ldr	r1, [pc, #44]	; (801193c <_scanf_float+0x3ac>)
 801190e:	4628      	mov	r0, r5
 8011910:	f000 f8f4 	bl	8011afc <siprintf>
 8011914:	e7ac      	b.n	8011870 <_scanf_float+0x2e0>
 8011916:	f010 0004 	ands.w	r0, r0, #4
 801191a:	d1b8      	bne.n	801188e <_scanf_float+0x2fe>
 801191c:	eeb4 0b40 	vcmp.f64	d0, d0
 8011920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011924:	681d      	ldr	r5, [r3, #0]
 8011926:	d704      	bvc.n	8011932 <_scanf_float+0x3a2>
 8011928:	f000 f89e 	bl	8011a68 <nanf>
 801192c:	ed85 0a00 	vstr	s0, [r5]
 8011930:	e7b0      	b.n	8011894 <_scanf_float+0x304>
 8011932:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011936:	e7f9      	b.n	801192c <_scanf_float+0x39c>
 8011938:	2600      	movs	r6, #0
 801193a:	e670      	b.n	801161e <_scanf_float+0x8e>
 801193c:	080154ec 	.word	0x080154ec

08011940 <iprintf>:
 8011940:	b40f      	push	{r0, r1, r2, r3}
 8011942:	4b0a      	ldr	r3, [pc, #40]	; (801196c <iprintf+0x2c>)
 8011944:	b513      	push	{r0, r1, r4, lr}
 8011946:	681c      	ldr	r4, [r3, #0]
 8011948:	b124      	cbz	r4, 8011954 <iprintf+0x14>
 801194a:	69a3      	ldr	r3, [r4, #24]
 801194c:	b913      	cbnz	r3, 8011954 <iprintf+0x14>
 801194e:	4620      	mov	r0, r4
 8011950:	f001 fefe 	bl	8013750 <__sinit>
 8011954:	ab05      	add	r3, sp, #20
 8011956:	9a04      	ldr	r2, [sp, #16]
 8011958:	68a1      	ldr	r1, [r4, #8]
 801195a:	9301      	str	r3, [sp, #4]
 801195c:	4620      	mov	r0, r4
 801195e:	f003 f8d5 	bl	8014b0c <_vfiprintf_r>
 8011962:	b002      	add	sp, #8
 8011964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011968:	b004      	add	sp, #16
 801196a:	4770      	bx	lr
 801196c:	2000037c 	.word	0x2000037c

08011970 <_puts_r>:
 8011970:	b570      	push	{r4, r5, r6, lr}
 8011972:	460e      	mov	r6, r1
 8011974:	4605      	mov	r5, r0
 8011976:	b118      	cbz	r0, 8011980 <_puts_r+0x10>
 8011978:	6983      	ldr	r3, [r0, #24]
 801197a:	b90b      	cbnz	r3, 8011980 <_puts_r+0x10>
 801197c:	f001 fee8 	bl	8013750 <__sinit>
 8011980:	69ab      	ldr	r3, [r5, #24]
 8011982:	68ac      	ldr	r4, [r5, #8]
 8011984:	b913      	cbnz	r3, 801198c <_puts_r+0x1c>
 8011986:	4628      	mov	r0, r5
 8011988:	f001 fee2 	bl	8013750 <__sinit>
 801198c:	4b23      	ldr	r3, [pc, #140]	; (8011a1c <_puts_r+0xac>)
 801198e:	429c      	cmp	r4, r3
 8011990:	d117      	bne.n	80119c2 <_puts_r+0x52>
 8011992:	686c      	ldr	r4, [r5, #4]
 8011994:	89a3      	ldrh	r3, [r4, #12]
 8011996:	071b      	lsls	r3, r3, #28
 8011998:	d51d      	bpl.n	80119d6 <_puts_r+0x66>
 801199a:	6923      	ldr	r3, [r4, #16]
 801199c:	b1db      	cbz	r3, 80119d6 <_puts_r+0x66>
 801199e:	3e01      	subs	r6, #1
 80119a0:	68a3      	ldr	r3, [r4, #8]
 80119a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119a6:	3b01      	subs	r3, #1
 80119a8:	60a3      	str	r3, [r4, #8]
 80119aa:	b9e9      	cbnz	r1, 80119e8 <_puts_r+0x78>
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	da2e      	bge.n	8011a0e <_puts_r+0x9e>
 80119b0:	4622      	mov	r2, r4
 80119b2:	210a      	movs	r1, #10
 80119b4:	4628      	mov	r0, r5
 80119b6:	f000 ff41 	bl	801283c <__swbuf_r>
 80119ba:	3001      	adds	r0, #1
 80119bc:	d011      	beq.n	80119e2 <_puts_r+0x72>
 80119be:	200a      	movs	r0, #10
 80119c0:	e011      	b.n	80119e6 <_puts_r+0x76>
 80119c2:	4b17      	ldr	r3, [pc, #92]	; (8011a20 <_puts_r+0xb0>)
 80119c4:	429c      	cmp	r4, r3
 80119c6:	d101      	bne.n	80119cc <_puts_r+0x5c>
 80119c8:	68ac      	ldr	r4, [r5, #8]
 80119ca:	e7e3      	b.n	8011994 <_puts_r+0x24>
 80119cc:	4b15      	ldr	r3, [pc, #84]	; (8011a24 <_puts_r+0xb4>)
 80119ce:	429c      	cmp	r4, r3
 80119d0:	bf08      	it	eq
 80119d2:	68ec      	ldreq	r4, [r5, #12]
 80119d4:	e7de      	b.n	8011994 <_puts_r+0x24>
 80119d6:	4621      	mov	r1, r4
 80119d8:	4628      	mov	r0, r5
 80119da:	f000 ff81 	bl	80128e0 <__swsetup_r>
 80119de:	2800      	cmp	r0, #0
 80119e0:	d0dd      	beq.n	801199e <_puts_r+0x2e>
 80119e2:	f04f 30ff 	mov.w	r0, #4294967295
 80119e6:	bd70      	pop	{r4, r5, r6, pc}
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	da04      	bge.n	80119f6 <_puts_r+0x86>
 80119ec:	69a2      	ldr	r2, [r4, #24]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	dc06      	bgt.n	8011a00 <_puts_r+0x90>
 80119f2:	290a      	cmp	r1, #10
 80119f4:	d004      	beq.n	8011a00 <_puts_r+0x90>
 80119f6:	6823      	ldr	r3, [r4, #0]
 80119f8:	1c5a      	adds	r2, r3, #1
 80119fa:	6022      	str	r2, [r4, #0]
 80119fc:	7019      	strb	r1, [r3, #0]
 80119fe:	e7cf      	b.n	80119a0 <_puts_r+0x30>
 8011a00:	4622      	mov	r2, r4
 8011a02:	4628      	mov	r0, r5
 8011a04:	f000 ff1a 	bl	801283c <__swbuf_r>
 8011a08:	3001      	adds	r0, #1
 8011a0a:	d1c9      	bne.n	80119a0 <_puts_r+0x30>
 8011a0c:	e7e9      	b.n	80119e2 <_puts_r+0x72>
 8011a0e:	6823      	ldr	r3, [r4, #0]
 8011a10:	200a      	movs	r0, #10
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	6022      	str	r2, [r4, #0]
 8011a16:	7018      	strb	r0, [r3, #0]
 8011a18:	e7e5      	b.n	80119e6 <_puts_r+0x76>
 8011a1a:	bf00      	nop
 8011a1c:	08015578 	.word	0x08015578
 8011a20:	08015598 	.word	0x08015598
 8011a24:	08015558 	.word	0x08015558

08011a28 <puts>:
 8011a28:	4b02      	ldr	r3, [pc, #8]	; (8011a34 <puts+0xc>)
 8011a2a:	4601      	mov	r1, r0
 8011a2c:	6818      	ldr	r0, [r3, #0]
 8011a2e:	f7ff bf9f 	b.w	8011970 <_puts_r>
 8011a32:	bf00      	nop
 8011a34:	2000037c 	.word	0x2000037c

08011a38 <realloc>:
 8011a38:	4b02      	ldr	r3, [pc, #8]	; (8011a44 <realloc+0xc>)
 8011a3a:	460a      	mov	r2, r1
 8011a3c:	4601      	mov	r1, r0
 8011a3e:	6818      	ldr	r0, [r3, #0]
 8011a40:	f002 bec2 	b.w	80147c8 <_realloc_r>
 8011a44:	2000037c 	.word	0x2000037c

08011a48 <_sbrk_r>:
 8011a48:	b538      	push	{r3, r4, r5, lr}
 8011a4a:	4c06      	ldr	r4, [pc, #24]	; (8011a64 <_sbrk_r+0x1c>)
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	4605      	mov	r5, r0
 8011a50:	4608      	mov	r0, r1
 8011a52:	6023      	str	r3, [r4, #0]
 8011a54:	f003 fa94 	bl	8014f80 <_sbrk>
 8011a58:	1c43      	adds	r3, r0, #1
 8011a5a:	d102      	bne.n	8011a62 <_sbrk_r+0x1a>
 8011a5c:	6823      	ldr	r3, [r4, #0]
 8011a5e:	b103      	cbz	r3, 8011a62 <_sbrk_r+0x1a>
 8011a60:	602b      	str	r3, [r5, #0]
 8011a62:	bd38      	pop	{r3, r4, r5, pc}
 8011a64:	20011fe0 	.word	0x20011fe0

08011a68 <nanf>:
 8011a68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011a70 <nanf+0x8>
 8011a6c:	4770      	bx	lr
 8011a6e:	bf00      	nop
 8011a70:	7fc00000 	.word	0x7fc00000

08011a74 <_raise_r>:
 8011a74:	291f      	cmp	r1, #31
 8011a76:	b538      	push	{r3, r4, r5, lr}
 8011a78:	4604      	mov	r4, r0
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	d904      	bls.n	8011a88 <_raise_r+0x14>
 8011a7e:	2316      	movs	r3, #22
 8011a80:	6003      	str	r3, [r0, #0]
 8011a82:	f04f 30ff 	mov.w	r0, #4294967295
 8011a86:	bd38      	pop	{r3, r4, r5, pc}
 8011a88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a8a:	b112      	cbz	r2, 8011a92 <_raise_r+0x1e>
 8011a8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a90:	b94b      	cbnz	r3, 8011aa6 <_raise_r+0x32>
 8011a92:	4620      	mov	r0, r4
 8011a94:	f000 f830 	bl	8011af8 <_getpid_r>
 8011a98:	462a      	mov	r2, r5
 8011a9a:	4601      	mov	r1, r0
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aa2:	f000 b817 	b.w	8011ad4 <_kill_r>
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d00a      	beq.n	8011ac0 <_raise_r+0x4c>
 8011aaa:	1c59      	adds	r1, r3, #1
 8011aac:	d103      	bne.n	8011ab6 <_raise_r+0x42>
 8011aae:	2316      	movs	r3, #22
 8011ab0:	6003      	str	r3, [r0, #0]
 8011ab2:	2001      	movs	r0, #1
 8011ab4:	e7e7      	b.n	8011a86 <_raise_r+0x12>
 8011ab6:	2400      	movs	r4, #0
 8011ab8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011abc:	4628      	mov	r0, r5
 8011abe:	4798      	blx	r3
 8011ac0:	2000      	movs	r0, #0
 8011ac2:	e7e0      	b.n	8011a86 <_raise_r+0x12>

08011ac4 <raise>:
 8011ac4:	4b02      	ldr	r3, [pc, #8]	; (8011ad0 <raise+0xc>)
 8011ac6:	4601      	mov	r1, r0
 8011ac8:	6818      	ldr	r0, [r3, #0]
 8011aca:	f7ff bfd3 	b.w	8011a74 <_raise_r>
 8011ace:	bf00      	nop
 8011ad0:	2000037c 	.word	0x2000037c

08011ad4 <_kill_r>:
 8011ad4:	b538      	push	{r3, r4, r5, lr}
 8011ad6:	4c07      	ldr	r4, [pc, #28]	; (8011af4 <_kill_r+0x20>)
 8011ad8:	2300      	movs	r3, #0
 8011ada:	4605      	mov	r5, r0
 8011adc:	4608      	mov	r0, r1
 8011ade:	4611      	mov	r1, r2
 8011ae0:	6023      	str	r3, [r4, #0]
 8011ae2:	f003 fa35 	bl	8014f50 <_kill>
 8011ae6:	1c43      	adds	r3, r0, #1
 8011ae8:	d102      	bne.n	8011af0 <_kill_r+0x1c>
 8011aea:	6823      	ldr	r3, [r4, #0]
 8011aec:	b103      	cbz	r3, 8011af0 <_kill_r+0x1c>
 8011aee:	602b      	str	r3, [r5, #0]
 8011af0:	bd38      	pop	{r3, r4, r5, pc}
 8011af2:	bf00      	nop
 8011af4:	20011fe0 	.word	0x20011fe0

08011af8 <_getpid_r>:
 8011af8:	f003 ba1a 	b.w	8014f30 <_getpid>

08011afc <siprintf>:
 8011afc:	b40e      	push	{r1, r2, r3}
 8011afe:	b500      	push	{lr}
 8011b00:	b09c      	sub	sp, #112	; 0x70
 8011b02:	ab1d      	add	r3, sp, #116	; 0x74
 8011b04:	9002      	str	r0, [sp, #8]
 8011b06:	9006      	str	r0, [sp, #24]
 8011b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011b0c:	4809      	ldr	r0, [pc, #36]	; (8011b34 <siprintf+0x38>)
 8011b0e:	9107      	str	r1, [sp, #28]
 8011b10:	9104      	str	r1, [sp, #16]
 8011b12:	4909      	ldr	r1, [pc, #36]	; (8011b38 <siprintf+0x3c>)
 8011b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b18:	9105      	str	r1, [sp, #20]
 8011b1a:	6800      	ldr	r0, [r0, #0]
 8011b1c:	9301      	str	r3, [sp, #4]
 8011b1e:	a902      	add	r1, sp, #8
 8011b20:	f002 fed2 	bl	80148c8 <_svfiprintf_r>
 8011b24:	9b02      	ldr	r3, [sp, #8]
 8011b26:	2200      	movs	r2, #0
 8011b28:	701a      	strb	r2, [r3, #0]
 8011b2a:	b01c      	add	sp, #112	; 0x70
 8011b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b30:	b003      	add	sp, #12
 8011b32:	4770      	bx	lr
 8011b34:	2000037c 	.word	0x2000037c
 8011b38:	ffff0208 	.word	0xffff0208

08011b3c <sulp>:
 8011b3c:	b570      	push	{r4, r5, r6, lr}
 8011b3e:	4604      	mov	r4, r0
 8011b40:	460d      	mov	r5, r1
 8011b42:	4616      	mov	r6, r2
 8011b44:	ec45 4b10 	vmov	d0, r4, r5
 8011b48:	f002 fd0a 	bl	8014560 <__ulp>
 8011b4c:	b17e      	cbz	r6, 8011b6e <sulp+0x32>
 8011b4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011b52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	dd09      	ble.n	8011b6e <sulp+0x32>
 8011b5a:	051b      	lsls	r3, r3, #20
 8011b5c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8011b60:	2000      	movs	r0, #0
 8011b62:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8011b66:	ec41 0b17 	vmov	d7, r0, r1
 8011b6a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011b6e:	bd70      	pop	{r4, r5, r6, pc}

08011b70 <_strtod_l>:
 8011b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b74:	ed2d 8b0c 	vpush	{d8-d13}
 8011b78:	4698      	mov	r8, r3
 8011b7a:	b09d      	sub	sp, #116	; 0x74
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	4604      	mov	r4, r0
 8011b80:	4640      	mov	r0, r8
 8011b82:	460e      	mov	r6, r1
 8011b84:	9214      	str	r2, [sp, #80]	; 0x50
 8011b86:	9318      	str	r3, [sp, #96]	; 0x60
 8011b88:	f002 f995 	bl	8013eb6 <__localeconv_l>
 8011b8c:	4681      	mov	r9, r0
 8011b8e:	6800      	ldr	r0, [r0, #0]
 8011b90:	f7ee fb56 	bl	8000240 <strlen>
 8011b94:	f04f 0a00 	mov.w	sl, #0
 8011b98:	4607      	mov	r7, r0
 8011b9a:	f04f 0b00 	mov.w	fp, #0
 8011b9e:	9617      	str	r6, [sp, #92]	; 0x5c
 8011ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ba2:	781a      	ldrb	r2, [r3, #0]
 8011ba4:	2a0d      	cmp	r2, #13
 8011ba6:	d834      	bhi.n	8011c12 <_strtod_l+0xa2>
 8011ba8:	2a09      	cmp	r2, #9
 8011baa:	d238      	bcs.n	8011c1e <_strtod_l+0xae>
 8011bac:	2a00      	cmp	r2, #0
 8011bae:	d040      	beq.n	8011c32 <_strtod_l+0xc2>
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	930d      	str	r3, [sp, #52]	; 0x34
 8011bb4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8011bb6:	782b      	ldrb	r3, [r5, #0]
 8011bb8:	2b30      	cmp	r3, #48	; 0x30
 8011bba:	f040 80b3 	bne.w	8011d24 <_strtod_l+0x1b4>
 8011bbe:	786b      	ldrb	r3, [r5, #1]
 8011bc0:	2b58      	cmp	r3, #88	; 0x58
 8011bc2:	d001      	beq.n	8011bc8 <_strtod_l+0x58>
 8011bc4:	2b78      	cmp	r3, #120	; 0x78
 8011bc6:	d169      	bne.n	8011c9c <_strtod_l+0x12c>
 8011bc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bca:	9301      	str	r3, [sp, #4]
 8011bcc:	ab18      	add	r3, sp, #96	; 0x60
 8011bce:	9300      	str	r3, [sp, #0]
 8011bd0:	f8cd 8008 	str.w	r8, [sp, #8]
 8011bd4:	ab19      	add	r3, sp, #100	; 0x64
 8011bd6:	4a8f      	ldr	r2, [pc, #572]	; (8011e14 <_strtod_l+0x2a4>)
 8011bd8:	a917      	add	r1, sp, #92	; 0x5c
 8011bda:	4620      	mov	r0, r4
 8011bdc:	f001 fe91 	bl	8013902 <__gethex>
 8011be0:	f010 0607 	ands.w	r6, r0, #7
 8011be4:	4607      	mov	r7, r0
 8011be6:	d005      	beq.n	8011bf4 <_strtod_l+0x84>
 8011be8:	2e06      	cmp	r6, #6
 8011bea:	d12c      	bne.n	8011c46 <_strtod_l+0xd6>
 8011bec:	3501      	adds	r5, #1
 8011bee:	2300      	movs	r3, #0
 8011bf0:	9517      	str	r5, [sp, #92]	; 0x5c
 8011bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8011bf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	f040 855e 	bne.w	80126b8 <_strtod_l+0xb48>
 8011bfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011bfe:	b1eb      	cbz	r3, 8011c3c <_strtod_l+0xcc>
 8011c00:	ec4b ab17 	vmov	d7, sl, fp
 8011c04:	eeb1 0b47 	vneg.f64	d0, d7
 8011c08:	b01d      	add	sp, #116	; 0x74
 8011c0a:	ecbd 8b0c 	vpop	{d8-d13}
 8011c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c12:	2a2b      	cmp	r2, #43	; 0x2b
 8011c14:	d015      	beq.n	8011c42 <_strtod_l+0xd2>
 8011c16:	2a2d      	cmp	r2, #45	; 0x2d
 8011c18:	d004      	beq.n	8011c24 <_strtod_l+0xb4>
 8011c1a:	2a20      	cmp	r2, #32
 8011c1c:	d1c8      	bne.n	8011bb0 <_strtod_l+0x40>
 8011c1e:	3301      	adds	r3, #1
 8011c20:	9317      	str	r3, [sp, #92]	; 0x5c
 8011c22:	e7bd      	b.n	8011ba0 <_strtod_l+0x30>
 8011c24:	2201      	movs	r2, #1
 8011c26:	920d      	str	r2, [sp, #52]	; 0x34
 8011c28:	1c5a      	adds	r2, r3, #1
 8011c2a:	9217      	str	r2, [sp, #92]	; 0x5c
 8011c2c:	785b      	ldrb	r3, [r3, #1]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d1c0      	bne.n	8011bb4 <_strtod_l+0x44>
 8011c32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c34:	9617      	str	r6, [sp, #92]	; 0x5c
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	f040 853c 	bne.w	80126b4 <_strtod_l+0xb44>
 8011c3c:	ec4b ab10 	vmov	d0, sl, fp
 8011c40:	e7e2      	b.n	8011c08 <_strtod_l+0x98>
 8011c42:	2200      	movs	r2, #0
 8011c44:	e7ef      	b.n	8011c26 <_strtod_l+0xb6>
 8011c46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8011c48:	b13a      	cbz	r2, 8011c5a <_strtod_l+0xea>
 8011c4a:	2135      	movs	r1, #53	; 0x35
 8011c4c:	a81a      	add	r0, sp, #104	; 0x68
 8011c4e:	f002 fd80 	bl	8014752 <__copybits>
 8011c52:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011c54:	4620      	mov	r0, r4
 8011c56:	f002 f9eb 	bl	8014030 <_Bfree>
 8011c5a:	3e01      	subs	r6, #1
 8011c5c:	2e04      	cmp	r6, #4
 8011c5e:	d806      	bhi.n	8011c6e <_strtod_l+0xfe>
 8011c60:	e8df f006 	tbb	[pc, r6]
 8011c64:	1714030a 	.word	0x1714030a
 8011c68:	0a          	.byte	0x0a
 8011c69:	00          	.byte	0x00
 8011c6a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8011c6e:	073b      	lsls	r3, r7, #28
 8011c70:	d5c0      	bpl.n	8011bf4 <_strtod_l+0x84>
 8011c72:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011c76:	e7bd      	b.n	8011bf4 <_strtod_l+0x84>
 8011c78:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011c7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011c7e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011c82:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011c86:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011c8a:	e7f0      	b.n	8011c6e <_strtod_l+0xfe>
 8011c8c:	f8df b188 	ldr.w	fp, [pc, #392]	; 8011e18 <_strtod_l+0x2a8>
 8011c90:	e7ed      	b.n	8011c6e <_strtod_l+0xfe>
 8011c92:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011c96:	f04f 3aff 	mov.w	sl, #4294967295
 8011c9a:	e7e8      	b.n	8011c6e <_strtod_l+0xfe>
 8011c9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c9e:	1c5a      	adds	r2, r3, #1
 8011ca0:	9217      	str	r2, [sp, #92]	; 0x5c
 8011ca2:	785b      	ldrb	r3, [r3, #1]
 8011ca4:	2b30      	cmp	r3, #48	; 0x30
 8011ca6:	d0f9      	beq.n	8011c9c <_strtod_l+0x12c>
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d0a3      	beq.n	8011bf4 <_strtod_l+0x84>
 8011cac:	2301      	movs	r3, #1
 8011cae:	930a      	str	r3, [sp, #40]	; 0x28
 8011cb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011cb2:	930c      	str	r3, [sp, #48]	; 0x30
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	9306      	str	r3, [sp, #24]
 8011cb8:	9308      	str	r3, [sp, #32]
 8011cba:	461d      	mov	r5, r3
 8011cbc:	220a      	movs	r2, #10
 8011cbe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011cc0:	f890 8000 	ldrb.w	r8, [r0]
 8011cc4:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8011cc8:	b2d9      	uxtb	r1, r3
 8011cca:	2909      	cmp	r1, #9
 8011ccc:	d92c      	bls.n	8011d28 <_strtod_l+0x1b8>
 8011cce:	463a      	mov	r2, r7
 8011cd0:	f8d9 1000 	ldr.w	r1, [r9]
 8011cd4:	f003 f873 	bl	8014dbe <strncmp>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d035      	beq.n	8011d48 <_strtod_l+0x1d8>
 8011cdc:	2000      	movs	r0, #0
 8011cde:	4642      	mov	r2, r8
 8011ce0:	462b      	mov	r3, r5
 8011ce2:	4601      	mov	r1, r0
 8011ce4:	9004      	str	r0, [sp, #16]
 8011ce6:	2a65      	cmp	r2, #101	; 0x65
 8011ce8:	d001      	beq.n	8011cee <_strtod_l+0x17e>
 8011cea:	2a45      	cmp	r2, #69	; 0x45
 8011cec:	d117      	bne.n	8011d1e <_strtod_l+0x1ae>
 8011cee:	b923      	cbnz	r3, 8011cfa <_strtod_l+0x18a>
 8011cf0:	b910      	cbnz	r0, 8011cf8 <_strtod_l+0x188>
 8011cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d09c      	beq.n	8011c32 <_strtod_l+0xc2>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011cfc:	1c72      	adds	r2, r6, #1
 8011cfe:	9217      	str	r2, [sp, #92]	; 0x5c
 8011d00:	7872      	ldrb	r2, [r6, #1]
 8011d02:	2a2b      	cmp	r2, #43	; 0x2b
 8011d04:	f000 8082 	beq.w	8011e0c <_strtod_l+0x29c>
 8011d08:	2a2d      	cmp	r2, #45	; 0x2d
 8011d0a:	d079      	beq.n	8011e00 <_strtod_l+0x290>
 8011d0c:	f04f 0e00 	mov.w	lr, #0
 8011d10:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8011d14:	f1bc 0f09 	cmp.w	ip, #9
 8011d18:	f240 8086 	bls.w	8011e28 <_strtod_l+0x2b8>
 8011d1c:	9617      	str	r6, [sp, #92]	; 0x5c
 8011d1e:	f04f 0800 	mov.w	r8, #0
 8011d22:	e0a8      	b.n	8011e76 <_strtod_l+0x306>
 8011d24:	2300      	movs	r3, #0
 8011d26:	e7c2      	b.n	8011cae <_strtod_l+0x13e>
 8011d28:	2d08      	cmp	r5, #8
 8011d2a:	bfd5      	itete	le
 8011d2c:	9908      	ldrle	r1, [sp, #32]
 8011d2e:	9906      	ldrgt	r1, [sp, #24]
 8011d30:	fb02 3301 	mlale	r3, r2, r1, r3
 8011d34:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011d38:	f100 0001 	add.w	r0, r0, #1
 8011d3c:	bfd4      	ite	le
 8011d3e:	9308      	strle	r3, [sp, #32]
 8011d40:	9306      	strgt	r3, [sp, #24]
 8011d42:	3501      	adds	r5, #1
 8011d44:	9017      	str	r0, [sp, #92]	; 0x5c
 8011d46:	e7ba      	b.n	8011cbe <_strtod_l+0x14e>
 8011d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d4a:	19da      	adds	r2, r3, r7
 8011d4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8011d4e:	5dda      	ldrb	r2, [r3, r7]
 8011d50:	2d00      	cmp	r5, #0
 8011d52:	d038      	beq.n	8011dc6 <_strtod_l+0x256>
 8011d54:	4601      	mov	r1, r0
 8011d56:	462b      	mov	r3, r5
 8011d58:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8011d5c:	2f09      	cmp	r7, #9
 8011d5e:	d913      	bls.n	8011d88 <_strtod_l+0x218>
 8011d60:	2701      	movs	r7, #1
 8011d62:	9704      	str	r7, [sp, #16]
 8011d64:	e7bf      	b.n	8011ce6 <_strtod_l+0x176>
 8011d66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d68:	1c5a      	adds	r2, r3, #1
 8011d6a:	9217      	str	r2, [sp, #92]	; 0x5c
 8011d6c:	785a      	ldrb	r2, [r3, #1]
 8011d6e:	3001      	adds	r0, #1
 8011d70:	2a30      	cmp	r2, #48	; 0x30
 8011d72:	d0f8      	beq.n	8011d66 <_strtod_l+0x1f6>
 8011d74:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011d78:	2b08      	cmp	r3, #8
 8011d7a:	f200 84a2 	bhi.w	80126c2 <_strtod_l+0xb52>
 8011d7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011d80:	930c      	str	r3, [sp, #48]	; 0x30
 8011d82:	4601      	mov	r1, r0
 8011d84:	2000      	movs	r0, #0
 8011d86:	4603      	mov	r3, r0
 8011d88:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8011d8c:	f100 0701 	add.w	r7, r0, #1
 8011d90:	d013      	beq.n	8011dba <_strtod_l+0x24a>
 8011d92:	4439      	add	r1, r7
 8011d94:	eb00 0e03 	add.w	lr, r0, r3
 8011d98:	461f      	mov	r7, r3
 8011d9a:	f04f 0c0a 	mov.w	ip, #10
 8011d9e:	45be      	cmp	lr, r7
 8011da0:	d113      	bne.n	8011dca <_strtod_l+0x25a>
 8011da2:	181f      	adds	r7, r3, r0
 8011da4:	2f08      	cmp	r7, #8
 8011da6:	f103 0301 	add.w	r3, r3, #1
 8011daa:	4403      	add	r3, r0
 8011dac:	dc1d      	bgt.n	8011dea <_strtod_l+0x27a>
 8011dae:	9a08      	ldr	r2, [sp, #32]
 8011db0:	200a      	movs	r0, #10
 8011db2:	fb00 8202 	mla	r2, r0, r2, r8
 8011db6:	9208      	str	r2, [sp, #32]
 8011db8:	2700      	movs	r7, #0
 8011dba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011dbc:	1c50      	adds	r0, r2, #1
 8011dbe:	9017      	str	r0, [sp, #92]	; 0x5c
 8011dc0:	7852      	ldrb	r2, [r2, #1]
 8011dc2:	4638      	mov	r0, r7
 8011dc4:	e7c8      	b.n	8011d58 <_strtod_l+0x1e8>
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	e7d2      	b.n	8011d70 <_strtod_l+0x200>
 8011dca:	2f08      	cmp	r7, #8
 8011dcc:	f107 0701 	add.w	r7, r7, #1
 8011dd0:	dc04      	bgt.n	8011ddc <_strtod_l+0x26c>
 8011dd2:	9a08      	ldr	r2, [sp, #32]
 8011dd4:	fb0c f202 	mul.w	r2, ip, r2
 8011dd8:	9208      	str	r2, [sp, #32]
 8011dda:	e7e0      	b.n	8011d9e <_strtod_l+0x22e>
 8011ddc:	2f10      	cmp	r7, #16
 8011dde:	bfde      	ittt	le
 8011de0:	9a06      	ldrle	r2, [sp, #24]
 8011de2:	fb0c f202 	mulle.w	r2, ip, r2
 8011de6:	9206      	strle	r2, [sp, #24]
 8011de8:	e7d9      	b.n	8011d9e <_strtod_l+0x22e>
 8011dea:	2b10      	cmp	r3, #16
 8011dec:	bfdf      	itttt	le
 8011dee:	9a06      	ldrle	r2, [sp, #24]
 8011df0:	200a      	movle	r0, #10
 8011df2:	fb00 8202 	mlale	r2, r0, r2, r8
 8011df6:	9206      	strle	r2, [sp, #24]
 8011df8:	e7de      	b.n	8011db8 <_strtod_l+0x248>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	9304      	str	r3, [sp, #16]
 8011dfe:	e777      	b.n	8011cf0 <_strtod_l+0x180>
 8011e00:	f04f 0e01 	mov.w	lr, #1
 8011e04:	1cb2      	adds	r2, r6, #2
 8011e06:	9217      	str	r2, [sp, #92]	; 0x5c
 8011e08:	78b2      	ldrb	r2, [r6, #2]
 8011e0a:	e781      	b.n	8011d10 <_strtod_l+0x1a0>
 8011e0c:	f04f 0e00 	mov.w	lr, #0
 8011e10:	e7f8      	b.n	8011e04 <_strtod_l+0x294>
 8011e12:	bf00      	nop
 8011e14:	080154f4 	.word	0x080154f4
 8011e18:	7ff00000 	.word	0x7ff00000
 8011e1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e1e:	f102 0c01 	add.w	ip, r2, #1
 8011e22:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011e26:	7852      	ldrb	r2, [r2, #1]
 8011e28:	2a30      	cmp	r2, #48	; 0x30
 8011e2a:	d0f7      	beq.n	8011e1c <_strtod_l+0x2ac>
 8011e2c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8011e30:	f1bc 0f08 	cmp.w	ip, #8
 8011e34:	f63f af73 	bhi.w	8011d1e <_strtod_l+0x1ae>
 8011e38:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8011e3c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e3e:	920e      	str	r2, [sp, #56]	; 0x38
 8011e40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011e42:	f102 0c01 	add.w	ip, r2, #1
 8011e46:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8011e4a:	7852      	ldrb	r2, [r2, #1]
 8011e4c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8011e50:	f1b9 0f09 	cmp.w	r9, #9
 8011e54:	d939      	bls.n	8011eca <_strtod_l+0x35a>
 8011e56:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8011e58:	ebac 0c07 	sub.w	ip, ip, r7
 8011e5c:	f1bc 0f08 	cmp.w	ip, #8
 8011e60:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8011e64:	dc37      	bgt.n	8011ed6 <_strtod_l+0x366>
 8011e66:	45e0      	cmp	r8, ip
 8011e68:	bfa8      	it	ge
 8011e6a:	46e0      	movge	r8, ip
 8011e6c:	f1be 0f00 	cmp.w	lr, #0
 8011e70:	d001      	beq.n	8011e76 <_strtod_l+0x306>
 8011e72:	f1c8 0800 	rsb	r8, r8, #0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d151      	bne.n	8011f1e <_strtod_l+0x3ae>
 8011e7a:	2800      	cmp	r0, #0
 8011e7c:	f47f aeba 	bne.w	8011bf4 <_strtod_l+0x84>
 8011e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	f47f aeb6 	bne.w	8011bf4 <_strtod_l+0x84>
 8011e88:	9b04      	ldr	r3, [sp, #16]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	f47f aed1 	bne.w	8011c32 <_strtod_l+0xc2>
 8011e90:	2a4e      	cmp	r2, #78	; 0x4e
 8011e92:	d027      	beq.n	8011ee4 <_strtod_l+0x374>
 8011e94:	dc21      	bgt.n	8011eda <_strtod_l+0x36a>
 8011e96:	2a49      	cmp	r2, #73	; 0x49
 8011e98:	f47f aecb 	bne.w	8011c32 <_strtod_l+0xc2>
 8011e9c:	499a      	ldr	r1, [pc, #616]	; (8012108 <_strtod_l+0x598>)
 8011e9e:	a817      	add	r0, sp, #92	; 0x5c
 8011ea0:	f001 ff62 	bl	8013d68 <__match>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	f43f aec4 	beq.w	8011c32 <_strtod_l+0xc2>
 8011eaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011eac:	4997      	ldr	r1, [pc, #604]	; (801210c <_strtod_l+0x59c>)
 8011eae:	3b01      	subs	r3, #1
 8011eb0:	a817      	add	r0, sp, #92	; 0x5c
 8011eb2:	9317      	str	r3, [sp, #92]	; 0x5c
 8011eb4:	f001 ff58 	bl	8013d68 <__match>
 8011eb8:	b910      	cbnz	r0, 8011ec0 <_strtod_l+0x350>
 8011eba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ebc:	3301      	adds	r3, #1
 8011ebe:	9317      	str	r3, [sp, #92]	; 0x5c
 8011ec0:	f8df b260 	ldr.w	fp, [pc, #608]	; 8012124 <_strtod_l+0x5b4>
 8011ec4:	f04f 0a00 	mov.w	sl, #0
 8011ec8:	e694      	b.n	8011bf4 <_strtod_l+0x84>
 8011eca:	270a      	movs	r7, #10
 8011ecc:	fb07 2808 	mla	r8, r7, r8, r2
 8011ed0:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8011ed4:	e7b4      	b.n	8011e40 <_strtod_l+0x2d0>
 8011ed6:	46e0      	mov	r8, ip
 8011ed8:	e7c8      	b.n	8011e6c <_strtod_l+0x2fc>
 8011eda:	2a69      	cmp	r2, #105	; 0x69
 8011edc:	d0de      	beq.n	8011e9c <_strtod_l+0x32c>
 8011ede:	2a6e      	cmp	r2, #110	; 0x6e
 8011ee0:	f47f aea7 	bne.w	8011c32 <_strtod_l+0xc2>
 8011ee4:	498a      	ldr	r1, [pc, #552]	; (8012110 <_strtod_l+0x5a0>)
 8011ee6:	a817      	add	r0, sp, #92	; 0x5c
 8011ee8:	f001 ff3e 	bl	8013d68 <__match>
 8011eec:	2800      	cmp	r0, #0
 8011eee:	f43f aea0 	beq.w	8011c32 <_strtod_l+0xc2>
 8011ef2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	2b28      	cmp	r3, #40	; 0x28
 8011ef8:	d10e      	bne.n	8011f18 <_strtod_l+0x3a8>
 8011efa:	aa1a      	add	r2, sp, #104	; 0x68
 8011efc:	4985      	ldr	r1, [pc, #532]	; (8012114 <_strtod_l+0x5a4>)
 8011efe:	a817      	add	r0, sp, #92	; 0x5c
 8011f00:	f001 ff46 	bl	8013d90 <__hexnan>
 8011f04:	2805      	cmp	r0, #5
 8011f06:	d107      	bne.n	8011f18 <_strtod_l+0x3a8>
 8011f08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f0a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011f0e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011f12:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011f16:	e66d      	b.n	8011bf4 <_strtod_l+0x84>
 8011f18:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8012128 <_strtod_l+0x5b8>
 8011f1c:	e7d2      	b.n	8011ec4 <_strtod_l+0x354>
 8011f1e:	eddd 7a08 	vldr	s15, [sp, #32]
 8011f22:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011f26:	eba8 0201 	sub.w	r2, r8, r1
 8011f2a:	2d00      	cmp	r5, #0
 8011f2c:	bf08      	it	eq
 8011f2e:	461d      	moveq	r5, r3
 8011f30:	2b10      	cmp	r3, #16
 8011f32:	9204      	str	r2, [sp, #16]
 8011f34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8011f38:	461a      	mov	r2, r3
 8011f3a:	bfa8      	it	ge
 8011f3c:	2210      	movge	r2, #16
 8011f3e:	2b09      	cmp	r3, #9
 8011f40:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011f44:	dc14      	bgt.n	8011f70 <_strtod_l+0x400>
 8011f46:	9904      	ldr	r1, [sp, #16]
 8011f48:	2900      	cmp	r1, #0
 8011f4a:	f43f ae53 	beq.w	8011bf4 <_strtod_l+0x84>
 8011f4e:	9904      	ldr	r1, [sp, #16]
 8011f50:	dd72      	ble.n	8012038 <_strtod_l+0x4c8>
 8011f52:	2916      	cmp	r1, #22
 8011f54:	dc5a      	bgt.n	801200c <_strtod_l+0x49c>
 8011f56:	4970      	ldr	r1, [pc, #448]	; (8012118 <_strtod_l+0x5a8>)
 8011f58:	9b04      	ldr	r3, [sp, #16]
 8011f5a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011f5e:	ed91 7b00 	vldr	d7, [r1]
 8011f62:	ec4b ab16 	vmov	d6, sl, fp
 8011f66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011f6a:	ec5b ab17 	vmov	sl, fp, d7
 8011f6e:	e641      	b.n	8011bf4 <_strtod_l+0x84>
 8011f70:	4969      	ldr	r1, [pc, #420]	; (8012118 <_strtod_l+0x5a8>)
 8011f72:	eddd 7a06 	vldr	s15, [sp, #24]
 8011f76:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8011f7a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8011f7e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8011f82:	2b0f      	cmp	r3, #15
 8011f84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011f88:	eea5 7b06 	vfma.f64	d7, d5, d6
 8011f8c:	ec5b ab17 	vmov	sl, fp, d7
 8011f90:	ddd9      	ble.n	8011f46 <_strtod_l+0x3d6>
 8011f92:	9904      	ldr	r1, [sp, #16]
 8011f94:	1a9a      	subs	r2, r3, r2
 8011f96:	440a      	add	r2, r1
 8011f98:	2a00      	cmp	r2, #0
 8011f9a:	f340 8096 	ble.w	80120ca <_strtod_l+0x55a>
 8011f9e:	f012 000f 	ands.w	r0, r2, #15
 8011fa2:	d00a      	beq.n	8011fba <_strtod_l+0x44a>
 8011fa4:	495c      	ldr	r1, [pc, #368]	; (8012118 <_strtod_l+0x5a8>)
 8011fa6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8011faa:	ed91 7b00 	vldr	d7, [r1]
 8011fae:	ec4b ab16 	vmov	d6, sl, fp
 8011fb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011fb6:	ec5b ab17 	vmov	sl, fp, d7
 8011fba:	f032 020f 	bics.w	r2, r2, #15
 8011fbe:	d072      	beq.n	80120a6 <_strtod_l+0x536>
 8011fc0:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8011fc4:	dd45      	ble.n	8012052 <_strtod_l+0x4e2>
 8011fc6:	2500      	movs	r5, #0
 8011fc8:	46a8      	mov	r8, r5
 8011fca:	9506      	str	r5, [sp, #24]
 8011fcc:	46a9      	mov	r9, r5
 8011fce:	2322      	movs	r3, #34	; 0x22
 8011fd0:	f8df b150 	ldr.w	fp, [pc, #336]	; 8012124 <_strtod_l+0x5b4>
 8011fd4:	6023      	str	r3, [r4, #0]
 8011fd6:	f04f 0a00 	mov.w	sl, #0
 8011fda:	9b06      	ldr	r3, [sp, #24]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	f43f ae09 	beq.w	8011bf4 <_strtod_l+0x84>
 8011fe2:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	f002 f823 	bl	8014030 <_Bfree>
 8011fea:	4649      	mov	r1, r9
 8011fec:	4620      	mov	r0, r4
 8011fee:	f002 f81f 	bl	8014030 <_Bfree>
 8011ff2:	4641      	mov	r1, r8
 8011ff4:	4620      	mov	r0, r4
 8011ff6:	f002 f81b 	bl	8014030 <_Bfree>
 8011ffa:	9906      	ldr	r1, [sp, #24]
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f002 f817 	bl	8014030 <_Bfree>
 8012002:	4629      	mov	r1, r5
 8012004:	4620      	mov	r0, r4
 8012006:	f002 f813 	bl	8014030 <_Bfree>
 801200a:	e5f3      	b.n	8011bf4 <_strtod_l+0x84>
 801200c:	9804      	ldr	r0, [sp, #16]
 801200e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8012012:	4281      	cmp	r1, r0
 8012014:	dbbd      	blt.n	8011f92 <_strtod_l+0x422>
 8012016:	4a40      	ldr	r2, [pc, #256]	; (8012118 <_strtod_l+0x5a8>)
 8012018:	f1c3 030f 	rsb	r3, r3, #15
 801201c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8012020:	ed91 7b00 	vldr	d7, [r1]
 8012024:	ec4b ab16 	vmov	d6, sl, fp
 8012028:	1ac3      	subs	r3, r0, r3
 801202a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801202e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012032:	ed92 6b00 	vldr	d6, [r2]
 8012036:	e796      	b.n	8011f66 <_strtod_l+0x3f6>
 8012038:	3116      	adds	r1, #22
 801203a:	dbaa      	blt.n	8011f92 <_strtod_l+0x422>
 801203c:	4936      	ldr	r1, [pc, #216]	; (8012118 <_strtod_l+0x5a8>)
 801203e:	9b04      	ldr	r3, [sp, #16]
 8012040:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8012044:	ed91 7b00 	vldr	d7, [r1]
 8012048:	ec4b ab16 	vmov	d6, sl, fp
 801204c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012050:	e78b      	b.n	8011f6a <_strtod_l+0x3fa>
 8012052:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8012056:	2000      	movs	r0, #0
 8012058:	4e30      	ldr	r6, [pc, #192]	; (801211c <_strtod_l+0x5ac>)
 801205a:	1112      	asrs	r2, r2, #4
 801205c:	4601      	mov	r1, r0
 801205e:	2a01      	cmp	r2, #1
 8012060:	dc23      	bgt.n	80120aa <_strtod_l+0x53a>
 8012062:	b108      	cbz	r0, 8012068 <_strtod_l+0x4f8>
 8012064:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012068:	4a2c      	ldr	r2, [pc, #176]	; (801211c <_strtod_l+0x5ac>)
 801206a:	482d      	ldr	r0, [pc, #180]	; (8012120 <_strtod_l+0x5b0>)
 801206c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8012070:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012074:	ed91 7b00 	vldr	d7, [r1]
 8012078:	ec4b ab16 	vmov	d6, sl, fp
 801207c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012080:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012084:	9907      	ldr	r1, [sp, #28]
 8012086:	4a27      	ldr	r2, [pc, #156]	; (8012124 <_strtod_l+0x5b4>)
 8012088:	400a      	ands	r2, r1
 801208a:	4282      	cmp	r2, r0
 801208c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012090:	d899      	bhi.n	8011fc6 <_strtod_l+0x456>
 8012092:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8012096:	4282      	cmp	r2, r0
 8012098:	bf86      	itte	hi
 801209a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 801212c <_strtod_l+0x5bc>
 801209e:	f04f 3aff 	movhi.w	sl, #4294967295
 80120a2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 80120a6:	2700      	movs	r7, #0
 80120a8:	e070      	b.n	801218c <_strtod_l+0x61c>
 80120aa:	07d7      	lsls	r7, r2, #31
 80120ac:	d50a      	bpl.n	80120c4 <_strtod_l+0x554>
 80120ae:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80120b2:	ed90 7b00 	vldr	d7, [r0]
 80120b6:	ed9d 6b06 	vldr	d6, [sp, #24]
 80120ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80120be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80120c2:	2001      	movs	r0, #1
 80120c4:	3101      	adds	r1, #1
 80120c6:	1052      	asrs	r2, r2, #1
 80120c8:	e7c9      	b.n	801205e <_strtod_l+0x4ee>
 80120ca:	d0ec      	beq.n	80120a6 <_strtod_l+0x536>
 80120cc:	4252      	negs	r2, r2
 80120ce:	f012 000f 	ands.w	r0, r2, #15
 80120d2:	d00a      	beq.n	80120ea <_strtod_l+0x57a>
 80120d4:	4910      	ldr	r1, [pc, #64]	; (8012118 <_strtod_l+0x5a8>)
 80120d6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80120da:	ed91 7b00 	vldr	d7, [r1]
 80120de:	ec4b ab16 	vmov	d6, sl, fp
 80120e2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80120e6:	ec5b ab17 	vmov	sl, fp, d7
 80120ea:	1112      	asrs	r2, r2, #4
 80120ec:	d0db      	beq.n	80120a6 <_strtod_l+0x536>
 80120ee:	2a1f      	cmp	r2, #31
 80120f0:	dd1e      	ble.n	8012130 <_strtod_l+0x5c0>
 80120f2:	2500      	movs	r5, #0
 80120f4:	46a8      	mov	r8, r5
 80120f6:	9506      	str	r5, [sp, #24]
 80120f8:	46a9      	mov	r9, r5
 80120fa:	2322      	movs	r3, #34	; 0x22
 80120fc:	f04f 0a00 	mov.w	sl, #0
 8012100:	f04f 0b00 	mov.w	fp, #0
 8012104:	6023      	str	r3, [r4, #0]
 8012106:	e768      	b.n	8011fda <_strtod_l+0x46a>
 8012108:	080154bd 	.word	0x080154bd
 801210c:	0801554b 	.word	0x0801554b
 8012110:	080154c5 	.word	0x080154c5
 8012114:	08015508 	.word	0x08015508
 8012118:	080155f0 	.word	0x080155f0
 801211c:	080155c8 	.word	0x080155c8
 8012120:	7ca00000 	.word	0x7ca00000
 8012124:	7ff00000 	.word	0x7ff00000
 8012128:	fff80000 	.word	0xfff80000
 801212c:	7fefffff 	.word	0x7fefffff
 8012130:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8012134:	f012 0710 	ands.w	r7, r2, #16
 8012138:	49ab      	ldr	r1, [pc, #684]	; (80123e8 <_strtod_l+0x878>)
 801213a:	bf18      	it	ne
 801213c:	276a      	movne	r7, #106	; 0x6a
 801213e:	2000      	movs	r0, #0
 8012140:	2a00      	cmp	r2, #0
 8012142:	f300 8113 	bgt.w	801236c <_strtod_l+0x7fc>
 8012146:	b108      	cbz	r0, 801214c <_strtod_l+0x5dc>
 8012148:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 801214c:	b1bf      	cbz	r7, 801217e <_strtod_l+0x60e>
 801214e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012152:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8012156:	2a00      	cmp	r2, #0
 8012158:	4659      	mov	r1, fp
 801215a:	dd10      	ble.n	801217e <_strtod_l+0x60e>
 801215c:	2a1f      	cmp	r2, #31
 801215e:	f340 8113 	ble.w	8012388 <_strtod_l+0x818>
 8012162:	2a34      	cmp	r2, #52	; 0x34
 8012164:	bfde      	ittt	le
 8012166:	3a20      	suble	r2, #32
 8012168:	f04f 30ff 	movle.w	r0, #4294967295
 801216c:	fa00 f202 	lslle.w	r2, r0, r2
 8012170:	f04f 0a00 	mov.w	sl, #0
 8012174:	bfcc      	ite	gt
 8012176:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801217a:	ea02 0b01 	andle.w	fp, r2, r1
 801217e:	ec4b ab17 	vmov	d7, sl, fp
 8012182:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801218a:	d0b2      	beq.n	80120f2 <_strtod_l+0x582>
 801218c:	9a08      	ldr	r2, [sp, #32]
 801218e:	9200      	str	r2, [sp, #0]
 8012190:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012192:	462a      	mov	r2, r5
 8012194:	4620      	mov	r0, r4
 8012196:	f001 ff9d 	bl	80140d4 <__s2b>
 801219a:	9006      	str	r0, [sp, #24]
 801219c:	2800      	cmp	r0, #0
 801219e:	f43f af12 	beq.w	8011fc6 <_strtod_l+0x456>
 80121a2:	9a04      	ldr	r2, [sp, #16]
 80121a4:	9b04      	ldr	r3, [sp, #16]
 80121a6:	2a00      	cmp	r2, #0
 80121a8:	f1c3 0300 	rsb	r3, r3, #0
 80121ac:	ed9f 9b88 	vldr	d9, [pc, #544]	; 80123d0 <_strtod_l+0x860>
 80121b0:	bfa8      	it	ge
 80121b2:	2300      	movge	r3, #0
 80121b4:	ed9f ab88 	vldr	d10, [pc, #544]	; 80123d8 <_strtod_l+0x868>
 80121b8:	ed9f bb89 	vldr	d11, [pc, #548]	; 80123e0 <_strtod_l+0x870>
 80121bc:	930e      	str	r3, [sp, #56]	; 0x38
 80121be:	2500      	movs	r5, #0
 80121c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80121c4:	9310      	str	r3, [sp, #64]	; 0x40
 80121c6:	46a8      	mov	r8, r5
 80121c8:	9b06      	ldr	r3, [sp, #24]
 80121ca:	4620      	mov	r0, r4
 80121cc:	6859      	ldr	r1, [r3, #4]
 80121ce:	f001 fefb 	bl	8013fc8 <_Balloc>
 80121d2:	4681      	mov	r9, r0
 80121d4:	2800      	cmp	r0, #0
 80121d6:	f43f aefa 	beq.w	8011fce <_strtod_l+0x45e>
 80121da:	9b06      	ldr	r3, [sp, #24]
 80121dc:	691a      	ldr	r2, [r3, #16]
 80121de:	3202      	adds	r2, #2
 80121e0:	f103 010c 	add.w	r1, r3, #12
 80121e4:	0092      	lsls	r2, r2, #2
 80121e6:	300c      	adds	r0, #12
 80121e8:	f7fe fccc 	bl	8010b84 <memcpy>
 80121ec:	aa1a      	add	r2, sp, #104	; 0x68
 80121ee:	a919      	add	r1, sp, #100	; 0x64
 80121f0:	ec4b ab10 	vmov	d0, sl, fp
 80121f4:	4620      	mov	r0, r4
 80121f6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80121fa:	f002 fa27 	bl	801464c <__d2b>
 80121fe:	9018      	str	r0, [sp, #96]	; 0x60
 8012200:	2800      	cmp	r0, #0
 8012202:	f43f aee4 	beq.w	8011fce <_strtod_l+0x45e>
 8012206:	2101      	movs	r1, #1
 8012208:	4620      	mov	r0, r4
 801220a:	f001 ffef 	bl	80141ec <__i2b>
 801220e:	4680      	mov	r8, r0
 8012210:	2800      	cmp	r0, #0
 8012212:	f43f aedc 	beq.w	8011fce <_strtod_l+0x45e>
 8012216:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012218:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801221a:	2e00      	cmp	r6, #0
 801221c:	bfb1      	iteee	lt
 801221e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8012220:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012222:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8012224:	18f3      	addge	r3, r6, r3
 8012226:	bfba      	itte	lt
 8012228:	1b98      	sublt	r0, r3, r6
 801222a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801222c:	9308      	strge	r3, [sp, #32]
 801222e:	eba6 0607 	sub.w	r6, r6, r7
 8012232:	bfb8      	it	lt
 8012234:	9308      	strlt	r3, [sp, #32]
 8012236:	4416      	add	r6, r2
 8012238:	4b6c      	ldr	r3, [pc, #432]	; (80123ec <_strtod_l+0x87c>)
 801223a:	3e01      	subs	r6, #1
 801223c:	429e      	cmp	r6, r3
 801223e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012242:	f280 80b4 	bge.w	80123ae <_strtod_l+0x83e>
 8012246:	1b9b      	subs	r3, r3, r6
 8012248:	2b1f      	cmp	r3, #31
 801224a:	eba2 0203 	sub.w	r2, r2, r3
 801224e:	f04f 0101 	mov.w	r1, #1
 8012252:	f300 80a0 	bgt.w	8012396 <_strtod_l+0x826>
 8012256:	fa01 f303 	lsl.w	r3, r1, r3
 801225a:	9311      	str	r3, [sp, #68]	; 0x44
 801225c:	2300      	movs	r3, #0
 801225e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012260:	9b08      	ldr	r3, [sp, #32]
 8012262:	4413      	add	r3, r2
 8012264:	4402      	add	r2, r0
 8012266:	18be      	adds	r6, r7, r2
 8012268:	9a08      	ldr	r2, [sp, #32]
 801226a:	429a      	cmp	r2, r3
 801226c:	bfa8      	it	ge
 801226e:	461a      	movge	r2, r3
 8012270:	42b2      	cmp	r2, r6
 8012272:	bfa8      	it	ge
 8012274:	4632      	movge	r2, r6
 8012276:	2a00      	cmp	r2, #0
 8012278:	dd04      	ble.n	8012284 <_strtod_l+0x714>
 801227a:	9908      	ldr	r1, [sp, #32]
 801227c:	1a9b      	subs	r3, r3, r2
 801227e:	1ab6      	subs	r6, r6, r2
 8012280:	1a8a      	subs	r2, r1, r2
 8012282:	9208      	str	r2, [sp, #32]
 8012284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012286:	b1c2      	cbz	r2, 80122ba <_strtod_l+0x74a>
 8012288:	4641      	mov	r1, r8
 801228a:	4620      	mov	r0, r4
 801228c:	9315      	str	r3, [sp, #84]	; 0x54
 801228e:	f002 f84d 	bl	801432c <__pow5mult>
 8012292:	4680      	mov	r8, r0
 8012294:	2800      	cmp	r0, #0
 8012296:	f43f ae9a 	beq.w	8011fce <_strtod_l+0x45e>
 801229a:	4601      	mov	r1, r0
 801229c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801229e:	4620      	mov	r0, r4
 80122a0:	f001 ffad 	bl	80141fe <__multiply>
 80122a4:	900c      	str	r0, [sp, #48]	; 0x30
 80122a6:	2800      	cmp	r0, #0
 80122a8:	f43f ae91 	beq.w	8011fce <_strtod_l+0x45e>
 80122ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80122ae:	4620      	mov	r0, r4
 80122b0:	f001 febe 	bl	8014030 <_Bfree>
 80122b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122b8:	9218      	str	r2, [sp, #96]	; 0x60
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	dc7c      	bgt.n	80123b8 <_strtod_l+0x848>
 80122be:	9b04      	ldr	r3, [sp, #16]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	dd08      	ble.n	80122d6 <_strtod_l+0x766>
 80122c4:	4649      	mov	r1, r9
 80122c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80122c8:	4620      	mov	r0, r4
 80122ca:	f002 f82f 	bl	801432c <__pow5mult>
 80122ce:	4681      	mov	r9, r0
 80122d0:	2800      	cmp	r0, #0
 80122d2:	f43f ae7c 	beq.w	8011fce <_strtod_l+0x45e>
 80122d6:	2e00      	cmp	r6, #0
 80122d8:	dd08      	ble.n	80122ec <_strtod_l+0x77c>
 80122da:	4649      	mov	r1, r9
 80122dc:	4632      	mov	r2, r6
 80122de:	4620      	mov	r0, r4
 80122e0:	f002 f872 	bl	80143c8 <__lshift>
 80122e4:	4681      	mov	r9, r0
 80122e6:	2800      	cmp	r0, #0
 80122e8:	f43f ae71 	beq.w	8011fce <_strtod_l+0x45e>
 80122ec:	9b08      	ldr	r3, [sp, #32]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	dd08      	ble.n	8012304 <_strtod_l+0x794>
 80122f2:	4641      	mov	r1, r8
 80122f4:	461a      	mov	r2, r3
 80122f6:	4620      	mov	r0, r4
 80122f8:	f002 f866 	bl	80143c8 <__lshift>
 80122fc:	4680      	mov	r8, r0
 80122fe:	2800      	cmp	r0, #0
 8012300:	f43f ae65 	beq.w	8011fce <_strtod_l+0x45e>
 8012304:	464a      	mov	r2, r9
 8012306:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012308:	4620      	mov	r0, r4
 801230a:	f002 f8cb 	bl	80144a4 <__mdiff>
 801230e:	4605      	mov	r5, r0
 8012310:	2800      	cmp	r0, #0
 8012312:	f43f ae5c 	beq.w	8011fce <_strtod_l+0x45e>
 8012316:	68c3      	ldr	r3, [r0, #12]
 8012318:	930c      	str	r3, [sp, #48]	; 0x30
 801231a:	2300      	movs	r3, #0
 801231c:	60c3      	str	r3, [r0, #12]
 801231e:	4641      	mov	r1, r8
 8012320:	f002 f8a6 	bl	8014470 <__mcmp>
 8012324:	2800      	cmp	r0, #0
 8012326:	da63      	bge.n	80123f0 <_strtod_l+0x880>
 8012328:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801232a:	b9e3      	cbnz	r3, 8012366 <_strtod_l+0x7f6>
 801232c:	f1ba 0f00 	cmp.w	sl, #0
 8012330:	d119      	bne.n	8012366 <_strtod_l+0x7f6>
 8012332:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012336:	b9b3      	cbnz	r3, 8012366 <_strtod_l+0x7f6>
 8012338:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801233c:	0d1b      	lsrs	r3, r3, #20
 801233e:	051b      	lsls	r3, r3, #20
 8012340:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012344:	d90f      	bls.n	8012366 <_strtod_l+0x7f6>
 8012346:	696b      	ldr	r3, [r5, #20]
 8012348:	b913      	cbnz	r3, 8012350 <_strtod_l+0x7e0>
 801234a:	692b      	ldr	r3, [r5, #16]
 801234c:	2b01      	cmp	r3, #1
 801234e:	dd0a      	ble.n	8012366 <_strtod_l+0x7f6>
 8012350:	4629      	mov	r1, r5
 8012352:	2201      	movs	r2, #1
 8012354:	4620      	mov	r0, r4
 8012356:	f002 f837 	bl	80143c8 <__lshift>
 801235a:	4641      	mov	r1, r8
 801235c:	4605      	mov	r5, r0
 801235e:	f002 f887 	bl	8014470 <__mcmp>
 8012362:	2800      	cmp	r0, #0
 8012364:	dc75      	bgt.n	8012452 <_strtod_l+0x8e2>
 8012366:	2f00      	cmp	r7, #0
 8012368:	d17f      	bne.n	801246a <_strtod_l+0x8fa>
 801236a:	e63a      	b.n	8011fe2 <_strtod_l+0x472>
 801236c:	07d6      	lsls	r6, r2, #31
 801236e:	d508      	bpl.n	8012382 <_strtod_l+0x812>
 8012370:	ed9d 6b06 	vldr	d6, [sp, #24]
 8012374:	ed91 7b00 	vldr	d7, [r1]
 8012378:	ee26 7b07 	vmul.f64	d7, d6, d7
 801237c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012380:	2001      	movs	r0, #1
 8012382:	1052      	asrs	r2, r2, #1
 8012384:	3108      	adds	r1, #8
 8012386:	e6db      	b.n	8012140 <_strtod_l+0x5d0>
 8012388:	f04f 31ff 	mov.w	r1, #4294967295
 801238c:	fa01 f202 	lsl.w	r2, r1, r2
 8012390:	ea02 0a0a 	and.w	sl, r2, sl
 8012394:	e6f3      	b.n	801217e <_strtod_l+0x60e>
 8012396:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801239a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801239e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80123a2:	36e2      	adds	r6, #226	; 0xe2
 80123a4:	fa01 f306 	lsl.w	r3, r1, r6
 80123a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80123aa:	9111      	str	r1, [sp, #68]	; 0x44
 80123ac:	e758      	b.n	8012260 <_strtod_l+0x6f0>
 80123ae:	2300      	movs	r3, #0
 80123b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80123b2:	2301      	movs	r3, #1
 80123b4:	9311      	str	r3, [sp, #68]	; 0x44
 80123b6:	e753      	b.n	8012260 <_strtod_l+0x6f0>
 80123b8:	461a      	mov	r2, r3
 80123ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 80123bc:	4620      	mov	r0, r4
 80123be:	f002 f803 	bl	80143c8 <__lshift>
 80123c2:	9018      	str	r0, [sp, #96]	; 0x60
 80123c4:	2800      	cmp	r0, #0
 80123c6:	f47f af7a 	bne.w	80122be <_strtod_l+0x74e>
 80123ca:	e600      	b.n	8011fce <_strtod_l+0x45e>
 80123cc:	f3af 8000 	nop.w
 80123d0:	94a03595 	.word	0x94a03595
 80123d4:	3fdfffff 	.word	0x3fdfffff
 80123d8:	35afe535 	.word	0x35afe535
 80123dc:	3fe00000 	.word	0x3fe00000
 80123e0:	94a03595 	.word	0x94a03595
 80123e4:	3fcfffff 	.word	0x3fcfffff
 80123e8:	08015520 	.word	0x08015520
 80123ec:	fffffc02 	.word	0xfffffc02
 80123f0:	f8cd b020 	str.w	fp, [sp, #32]
 80123f4:	f040 8085 	bne.w	8012502 <_strtod_l+0x992>
 80123f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80123fe:	b322      	cbz	r2, 801244a <_strtod_l+0x8da>
 8012400:	4ab7      	ldr	r2, [pc, #732]	; (80126e0 <_strtod_l+0xb70>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d154      	bne.n	80124b0 <_strtod_l+0x940>
 8012406:	4651      	mov	r1, sl
 8012408:	b1e7      	cbz	r7, 8012444 <_strtod_l+0x8d4>
 801240a:	4bb6      	ldr	r3, [pc, #728]	; (80126e4 <_strtod_l+0xb74>)
 801240c:	465a      	mov	r2, fp
 801240e:	4013      	ands	r3, r2
 8012410:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012414:	f04f 32ff 	mov.w	r2, #4294967295
 8012418:	d803      	bhi.n	8012422 <_strtod_l+0x8b2>
 801241a:	0d1b      	lsrs	r3, r3, #20
 801241c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012420:	409a      	lsls	r2, r3
 8012422:	4291      	cmp	r1, r2
 8012424:	d144      	bne.n	80124b0 <_strtod_l+0x940>
 8012426:	4bb0      	ldr	r3, [pc, #704]	; (80126e8 <_strtod_l+0xb78>)
 8012428:	9a08      	ldr	r2, [sp, #32]
 801242a:	429a      	cmp	r2, r3
 801242c:	d102      	bne.n	8012434 <_strtod_l+0x8c4>
 801242e:	3101      	adds	r1, #1
 8012430:	f43f adcd 	beq.w	8011fce <_strtod_l+0x45e>
 8012434:	4bab      	ldr	r3, [pc, #684]	; (80126e4 <_strtod_l+0xb74>)
 8012436:	9a08      	ldr	r2, [sp, #32]
 8012438:	401a      	ands	r2, r3
 801243a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 801243e:	f04f 0a00 	mov.w	sl, #0
 8012442:	e790      	b.n	8012366 <_strtod_l+0x7f6>
 8012444:	f04f 32ff 	mov.w	r2, #4294967295
 8012448:	e7eb      	b.n	8012422 <_strtod_l+0x8b2>
 801244a:	bb8b      	cbnz	r3, 80124b0 <_strtod_l+0x940>
 801244c:	f1ba 0f00 	cmp.w	sl, #0
 8012450:	d12e      	bne.n	80124b0 <_strtod_l+0x940>
 8012452:	465b      	mov	r3, fp
 8012454:	4aa3      	ldr	r2, [pc, #652]	; (80126e4 <_strtod_l+0xb74>)
 8012456:	b30f      	cbz	r7, 801249c <_strtod_l+0x92c>
 8012458:	ea02 010b 	and.w	r1, r2, fp
 801245c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012460:	dc1c      	bgt.n	801249c <_strtod_l+0x92c>
 8012462:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012466:	f77f ae48 	ble.w	80120fa <_strtod_l+0x58a>
 801246a:	4aa0      	ldr	r2, [pc, #640]	; (80126ec <_strtod_l+0xb7c>)
 801246c:	2300      	movs	r3, #0
 801246e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8012472:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8012476:	ec4b ab17 	vmov	d7, sl, fp
 801247a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801247e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012482:	9b05      	ldr	r3, [sp, #20]
 8012484:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012488:	2b00      	cmp	r3, #0
 801248a:	f47f adaa 	bne.w	8011fe2 <_strtod_l+0x472>
 801248e:	9b04      	ldr	r3, [sp, #16]
 8012490:	2b00      	cmp	r3, #0
 8012492:	f47f ada6 	bne.w	8011fe2 <_strtod_l+0x472>
 8012496:	2322      	movs	r3, #34	; 0x22
 8012498:	6023      	str	r3, [r4, #0]
 801249a:	e5a2      	b.n	8011fe2 <_strtod_l+0x472>
 801249c:	4013      	ands	r3, r2
 801249e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80124a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80124a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80124aa:	f04f 3aff 	mov.w	sl, #4294967295
 80124ae:	e75a      	b.n	8012366 <_strtod_l+0x7f6>
 80124b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124b2:	b18b      	cbz	r3, 80124d8 <_strtod_l+0x968>
 80124b4:	9a08      	ldr	r2, [sp, #32]
 80124b6:	4213      	tst	r3, r2
 80124b8:	f43f af55 	beq.w	8012366 <_strtod_l+0x7f6>
 80124bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124be:	463a      	mov	r2, r7
 80124c0:	4650      	mov	r0, sl
 80124c2:	4659      	mov	r1, fp
 80124c4:	b163      	cbz	r3, 80124e0 <_strtod_l+0x970>
 80124c6:	f7ff fb39 	bl	8011b3c <sulp>
 80124ca:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80124ce:	ee37 7b00 	vadd.f64	d7, d7, d0
 80124d2:	ec5b ab17 	vmov	sl, fp, d7
 80124d6:	e746      	b.n	8012366 <_strtod_l+0x7f6>
 80124d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80124da:	ea13 0f0a 	tst.w	r3, sl
 80124de:	e7eb      	b.n	80124b8 <_strtod_l+0x948>
 80124e0:	f7ff fb2c 	bl	8011b3c <sulp>
 80124e4:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80124e8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80124ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80124f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80124fc:	f43f adfd 	beq.w	80120fa <_strtod_l+0x58a>
 8012500:	e731      	b.n	8012366 <_strtod_l+0x7f6>
 8012502:	4641      	mov	r1, r8
 8012504:	4628      	mov	r0, r5
 8012506:	f002 f8f0 	bl	80146ea <__ratio>
 801250a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801250e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012516:	d869      	bhi.n	80125ec <_strtod_l+0xa7c>
 8012518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801251a:	2b00      	cmp	r3, #0
 801251c:	d045      	beq.n	80125aa <_strtod_l+0xa3a>
 801251e:	4b74      	ldr	r3, [pc, #464]	; (80126f0 <_strtod_l+0xb80>)
 8012520:	2200      	movs	r2, #0
 8012522:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8012526:	9808      	ldr	r0, [sp, #32]
 8012528:	496e      	ldr	r1, [pc, #440]	; (80126e4 <_strtod_l+0xb74>)
 801252a:	ea00 0601 	and.w	r6, r0, r1
 801252e:	4871      	ldr	r0, [pc, #452]	; (80126f4 <_strtod_l+0xb84>)
 8012530:	4286      	cmp	r6, r0
 8012532:	f040 8089 	bne.w	8012648 <_strtod_l+0xad8>
 8012536:	910f      	str	r1, [sp, #60]	; 0x3c
 8012538:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801253c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012540:	9908      	ldr	r1, [sp, #32]
 8012542:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8012546:	ec4b ab10 	vmov	d0, sl, fp
 801254a:	ec43 2b1c 	vmov	d12, r2, r3
 801254e:	f002 f807 	bl	8014560 <__ulp>
 8012552:	ec4b ab1d 	vmov	d13, sl, fp
 8012556:	eeac db00 	vfma.f64	d13, d12, d0
 801255a:	ed8d db08 	vstr	d13, [sp, #32]
 801255e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012560:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012562:	4a65      	ldr	r2, [pc, #404]	; (80126f8 <_strtod_l+0xb88>)
 8012564:	4019      	ands	r1, r3
 8012566:	4291      	cmp	r1, r2
 8012568:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 801256c:	d948      	bls.n	8012600 <_strtod_l+0xa90>
 801256e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012570:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012574:	4293      	cmp	r3, r2
 8012576:	d103      	bne.n	8012580 <_strtod_l+0xa10>
 8012578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801257a:	3301      	adds	r3, #1
 801257c:	f43f ad27 	beq.w	8011fce <_strtod_l+0x45e>
 8012580:	f8df b164 	ldr.w	fp, [pc, #356]	; 80126e8 <_strtod_l+0xb78>
 8012584:	f04f 3aff 	mov.w	sl, #4294967295
 8012588:	9918      	ldr	r1, [sp, #96]	; 0x60
 801258a:	4620      	mov	r0, r4
 801258c:	f001 fd50 	bl	8014030 <_Bfree>
 8012590:	4649      	mov	r1, r9
 8012592:	4620      	mov	r0, r4
 8012594:	f001 fd4c 	bl	8014030 <_Bfree>
 8012598:	4641      	mov	r1, r8
 801259a:	4620      	mov	r0, r4
 801259c:	f001 fd48 	bl	8014030 <_Bfree>
 80125a0:	4629      	mov	r1, r5
 80125a2:	4620      	mov	r0, r4
 80125a4:	f001 fd44 	bl	8014030 <_Bfree>
 80125a8:	e60e      	b.n	80121c8 <_strtod_l+0x658>
 80125aa:	f1ba 0f00 	cmp.w	sl, #0
 80125ae:	d113      	bne.n	80125d8 <_strtod_l+0xa68>
 80125b0:	9b08      	ldr	r3, [sp, #32]
 80125b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80125b6:	b9b3      	cbnz	r3, 80125e6 <_strtod_l+0xa76>
 80125b8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80125bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80125c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125c4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80125c8:	d401      	bmi.n	80125ce <_strtod_l+0xa5e>
 80125ca:	ee20 8b08 	vmul.f64	d8, d0, d8
 80125ce:	eeb1 7b48 	vneg.f64	d7, d8
 80125d2:	ec53 2b17 	vmov	r2, r3, d7
 80125d6:	e7a6      	b.n	8012526 <_strtod_l+0x9b6>
 80125d8:	f1ba 0f01 	cmp.w	sl, #1
 80125dc:	d103      	bne.n	80125e6 <_strtod_l+0xa76>
 80125de:	9b08      	ldr	r3, [sp, #32]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	f43f ad8a 	beq.w	80120fa <_strtod_l+0x58a>
 80125e6:	2200      	movs	r2, #0
 80125e8:	4b44      	ldr	r3, [pc, #272]	; (80126fc <_strtod_l+0xb8c>)
 80125ea:	e79a      	b.n	8012522 <_strtod_l+0x9b2>
 80125ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ee:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80125f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d0e9      	beq.n	80125ce <_strtod_l+0xa5e>
 80125fa:	ec53 2b18 	vmov	r2, r3, d8
 80125fe:	e792      	b.n	8012526 <_strtod_l+0x9b6>
 8012600:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012604:	2f00      	cmp	r7, #0
 8012606:	d1bf      	bne.n	8012588 <_strtod_l+0xa18>
 8012608:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801260c:	0d1b      	lsrs	r3, r3, #20
 801260e:	051b      	lsls	r3, r3, #20
 8012610:	429e      	cmp	r6, r3
 8012612:	d1b9      	bne.n	8012588 <_strtod_l+0xa18>
 8012614:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8012618:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801261a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801261e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012622:	b92b      	cbnz	r3, 8012630 <_strtod_l+0xac0>
 8012624:	f1ba 0f00 	cmp.w	sl, #0
 8012628:	d102      	bne.n	8012630 <_strtod_l+0xac0>
 801262a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 801262e:	b3d2      	cbz	r2, 80126a6 <_strtod_l+0xb36>
 8012630:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012638:	f53f acd3 	bmi.w	8011fe2 <_strtod_l+0x472>
 801263c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8012640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012644:	dda0      	ble.n	8012588 <_strtod_l+0xa18>
 8012646:	e4cc      	b.n	8011fe2 <_strtod_l+0x472>
 8012648:	b1ef      	cbz	r7, 8012686 <_strtod_l+0xb16>
 801264a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 801264e:	d81a      	bhi.n	8012686 <_strtod_l+0xb16>
 8012650:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80126d8 <_strtod_l+0xb68>
 8012654:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265c:	d810      	bhi.n	8012680 <_strtod_l+0xb10>
 801265e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8012662:	ee17 3a90 	vmov	r3, s15
 8012666:	2b00      	cmp	r3, #0
 8012668:	bf08      	it	eq
 801266a:	2301      	moveq	r3, #1
 801266c:	ee07 3a90 	vmov	s15, r3
 8012670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012672:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8012676:	b99b      	cbnz	r3, 80126a0 <_strtod_l+0xb30>
 8012678:	eeb1 7b48 	vneg.f64	d7, d8
 801267c:	ec53 2b17 	vmov	r2, r3, d7
 8012680:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8012684:	1b8b      	subs	r3, r1, r6
 8012686:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801268a:	ec43 2b1c 	vmov	d12, r2, r3
 801268e:	f001 ff67 	bl	8014560 <__ulp>
 8012692:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012696:	eeac 7b00 	vfma.f64	d7, d12, d0
 801269a:	ec5b ab17 	vmov	sl, fp, d7
 801269e:	e7b1      	b.n	8012604 <_strtod_l+0xa94>
 80126a0:	ec53 2b18 	vmov	r2, r3, d8
 80126a4:	e7ec      	b.n	8012680 <_strtod_l+0xb10>
 80126a6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80126aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ae:	f57f af6b 	bpl.w	8012588 <_strtod_l+0xa18>
 80126b2:	e496      	b.n	8011fe2 <_strtod_l+0x472>
 80126b4:	2300      	movs	r3, #0
 80126b6:	930d      	str	r3, [sp, #52]	; 0x34
 80126b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80126ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126bc:	6013      	str	r3, [r2, #0]
 80126be:	f7ff ba9d 	b.w	8011bfc <_strtod_l+0x8c>
 80126c2:	2a65      	cmp	r2, #101	; 0x65
 80126c4:	f04f 0100 	mov.w	r1, #0
 80126c8:	f43f ab97 	beq.w	8011dfa <_strtod_l+0x28a>
 80126cc:	2701      	movs	r7, #1
 80126ce:	460b      	mov	r3, r1
 80126d0:	9704      	str	r7, [sp, #16]
 80126d2:	f7ff bb0a 	b.w	8011cea <_strtod_l+0x17a>
 80126d6:	bf00      	nop
 80126d8:	ffc00000 	.word	0xffc00000
 80126dc:	41dfffff 	.word	0x41dfffff
 80126e0:	000fffff 	.word	0x000fffff
 80126e4:	7ff00000 	.word	0x7ff00000
 80126e8:	7fefffff 	.word	0x7fefffff
 80126ec:	39500000 	.word	0x39500000
 80126f0:	3ff00000 	.word	0x3ff00000
 80126f4:	7fe00000 	.word	0x7fe00000
 80126f8:	7c9fffff 	.word	0x7c9fffff
 80126fc:	bff00000 	.word	0xbff00000

08012700 <_strtod_r>:
 8012700:	4b05      	ldr	r3, [pc, #20]	; (8012718 <_strtod_r+0x18>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	b410      	push	{r4}
 8012706:	6a1b      	ldr	r3, [r3, #32]
 8012708:	4c04      	ldr	r4, [pc, #16]	; (801271c <_strtod_r+0x1c>)
 801270a:	2b00      	cmp	r3, #0
 801270c:	bf08      	it	eq
 801270e:	4623      	moveq	r3, r4
 8012710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012714:	f7ff ba2c 	b.w	8011b70 <_strtod_l>
 8012718:	2000037c 	.word	0x2000037c
 801271c:	200003e0 	.word	0x200003e0

08012720 <_strtol_l.isra.0>:
 8012720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012724:	4680      	mov	r8, r0
 8012726:	4689      	mov	r9, r1
 8012728:	4692      	mov	sl, r2
 801272a:	461e      	mov	r6, r3
 801272c:	460f      	mov	r7, r1
 801272e:	463d      	mov	r5, r7
 8012730:	9808      	ldr	r0, [sp, #32]
 8012732:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012736:	f001 fbbb 	bl	8013eb0 <__locale_ctype_ptr_l>
 801273a:	4420      	add	r0, r4
 801273c:	7843      	ldrb	r3, [r0, #1]
 801273e:	f013 0308 	ands.w	r3, r3, #8
 8012742:	d132      	bne.n	80127aa <_strtol_l.isra.0+0x8a>
 8012744:	2c2d      	cmp	r4, #45	; 0x2d
 8012746:	d132      	bne.n	80127ae <_strtol_l.isra.0+0x8e>
 8012748:	787c      	ldrb	r4, [r7, #1]
 801274a:	1cbd      	adds	r5, r7, #2
 801274c:	2201      	movs	r2, #1
 801274e:	2e00      	cmp	r6, #0
 8012750:	d05d      	beq.n	801280e <_strtol_l.isra.0+0xee>
 8012752:	2e10      	cmp	r6, #16
 8012754:	d109      	bne.n	801276a <_strtol_l.isra.0+0x4a>
 8012756:	2c30      	cmp	r4, #48	; 0x30
 8012758:	d107      	bne.n	801276a <_strtol_l.isra.0+0x4a>
 801275a:	782b      	ldrb	r3, [r5, #0]
 801275c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012760:	2b58      	cmp	r3, #88	; 0x58
 8012762:	d14f      	bne.n	8012804 <_strtol_l.isra.0+0xe4>
 8012764:	786c      	ldrb	r4, [r5, #1]
 8012766:	2610      	movs	r6, #16
 8012768:	3502      	adds	r5, #2
 801276a:	2a00      	cmp	r2, #0
 801276c:	bf14      	ite	ne
 801276e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8012772:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8012776:	2700      	movs	r7, #0
 8012778:	fbb1 fcf6 	udiv	ip, r1, r6
 801277c:	4638      	mov	r0, r7
 801277e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8012782:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8012786:	2b09      	cmp	r3, #9
 8012788:	d817      	bhi.n	80127ba <_strtol_l.isra.0+0x9a>
 801278a:	461c      	mov	r4, r3
 801278c:	42a6      	cmp	r6, r4
 801278e:	dd23      	ble.n	80127d8 <_strtol_l.isra.0+0xb8>
 8012790:	1c7b      	adds	r3, r7, #1
 8012792:	d007      	beq.n	80127a4 <_strtol_l.isra.0+0x84>
 8012794:	4584      	cmp	ip, r0
 8012796:	d31c      	bcc.n	80127d2 <_strtol_l.isra.0+0xb2>
 8012798:	d101      	bne.n	801279e <_strtol_l.isra.0+0x7e>
 801279a:	45a6      	cmp	lr, r4
 801279c:	db19      	blt.n	80127d2 <_strtol_l.isra.0+0xb2>
 801279e:	fb00 4006 	mla	r0, r0, r6, r4
 80127a2:	2701      	movs	r7, #1
 80127a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80127a8:	e7eb      	b.n	8012782 <_strtol_l.isra.0+0x62>
 80127aa:	462f      	mov	r7, r5
 80127ac:	e7bf      	b.n	801272e <_strtol_l.isra.0+0xe>
 80127ae:	2c2b      	cmp	r4, #43	; 0x2b
 80127b0:	bf04      	itt	eq
 80127b2:	1cbd      	addeq	r5, r7, #2
 80127b4:	787c      	ldrbeq	r4, [r7, #1]
 80127b6:	461a      	mov	r2, r3
 80127b8:	e7c9      	b.n	801274e <_strtol_l.isra.0+0x2e>
 80127ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80127be:	2b19      	cmp	r3, #25
 80127c0:	d801      	bhi.n	80127c6 <_strtol_l.isra.0+0xa6>
 80127c2:	3c37      	subs	r4, #55	; 0x37
 80127c4:	e7e2      	b.n	801278c <_strtol_l.isra.0+0x6c>
 80127c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80127ca:	2b19      	cmp	r3, #25
 80127cc:	d804      	bhi.n	80127d8 <_strtol_l.isra.0+0xb8>
 80127ce:	3c57      	subs	r4, #87	; 0x57
 80127d0:	e7dc      	b.n	801278c <_strtol_l.isra.0+0x6c>
 80127d2:	f04f 37ff 	mov.w	r7, #4294967295
 80127d6:	e7e5      	b.n	80127a4 <_strtol_l.isra.0+0x84>
 80127d8:	1c7b      	adds	r3, r7, #1
 80127da:	d108      	bne.n	80127ee <_strtol_l.isra.0+0xce>
 80127dc:	2322      	movs	r3, #34	; 0x22
 80127de:	f8c8 3000 	str.w	r3, [r8]
 80127e2:	4608      	mov	r0, r1
 80127e4:	f1ba 0f00 	cmp.w	sl, #0
 80127e8:	d107      	bne.n	80127fa <_strtol_l.isra.0+0xda>
 80127ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ee:	b102      	cbz	r2, 80127f2 <_strtol_l.isra.0+0xd2>
 80127f0:	4240      	negs	r0, r0
 80127f2:	f1ba 0f00 	cmp.w	sl, #0
 80127f6:	d0f8      	beq.n	80127ea <_strtol_l.isra.0+0xca>
 80127f8:	b10f      	cbz	r7, 80127fe <_strtol_l.isra.0+0xde>
 80127fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80127fe:	f8ca 9000 	str.w	r9, [sl]
 8012802:	e7f2      	b.n	80127ea <_strtol_l.isra.0+0xca>
 8012804:	2430      	movs	r4, #48	; 0x30
 8012806:	2e00      	cmp	r6, #0
 8012808:	d1af      	bne.n	801276a <_strtol_l.isra.0+0x4a>
 801280a:	2608      	movs	r6, #8
 801280c:	e7ad      	b.n	801276a <_strtol_l.isra.0+0x4a>
 801280e:	2c30      	cmp	r4, #48	; 0x30
 8012810:	d0a3      	beq.n	801275a <_strtol_l.isra.0+0x3a>
 8012812:	260a      	movs	r6, #10
 8012814:	e7a9      	b.n	801276a <_strtol_l.isra.0+0x4a>
	...

08012818 <_strtol_r>:
 8012818:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801281a:	4c06      	ldr	r4, [pc, #24]	; (8012834 <_strtol_r+0x1c>)
 801281c:	4d06      	ldr	r5, [pc, #24]	; (8012838 <_strtol_r+0x20>)
 801281e:	6824      	ldr	r4, [r4, #0]
 8012820:	6a24      	ldr	r4, [r4, #32]
 8012822:	2c00      	cmp	r4, #0
 8012824:	bf08      	it	eq
 8012826:	462c      	moveq	r4, r5
 8012828:	9400      	str	r4, [sp, #0]
 801282a:	f7ff ff79 	bl	8012720 <_strtol_l.isra.0>
 801282e:	b003      	add	sp, #12
 8012830:	bd30      	pop	{r4, r5, pc}
 8012832:	bf00      	nop
 8012834:	2000037c 	.word	0x2000037c
 8012838:	200003e0 	.word	0x200003e0

0801283c <__swbuf_r>:
 801283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801283e:	460e      	mov	r6, r1
 8012840:	4614      	mov	r4, r2
 8012842:	4605      	mov	r5, r0
 8012844:	b118      	cbz	r0, 801284e <__swbuf_r+0x12>
 8012846:	6983      	ldr	r3, [r0, #24]
 8012848:	b90b      	cbnz	r3, 801284e <__swbuf_r+0x12>
 801284a:	f000 ff81 	bl	8013750 <__sinit>
 801284e:	4b21      	ldr	r3, [pc, #132]	; (80128d4 <__swbuf_r+0x98>)
 8012850:	429c      	cmp	r4, r3
 8012852:	d12a      	bne.n	80128aa <__swbuf_r+0x6e>
 8012854:	686c      	ldr	r4, [r5, #4]
 8012856:	69a3      	ldr	r3, [r4, #24]
 8012858:	60a3      	str	r3, [r4, #8]
 801285a:	89a3      	ldrh	r3, [r4, #12]
 801285c:	071a      	lsls	r2, r3, #28
 801285e:	d52e      	bpl.n	80128be <__swbuf_r+0x82>
 8012860:	6923      	ldr	r3, [r4, #16]
 8012862:	b363      	cbz	r3, 80128be <__swbuf_r+0x82>
 8012864:	6923      	ldr	r3, [r4, #16]
 8012866:	6820      	ldr	r0, [r4, #0]
 8012868:	1ac0      	subs	r0, r0, r3
 801286a:	6963      	ldr	r3, [r4, #20]
 801286c:	b2f6      	uxtb	r6, r6
 801286e:	4283      	cmp	r3, r0
 8012870:	4637      	mov	r7, r6
 8012872:	dc04      	bgt.n	801287e <__swbuf_r+0x42>
 8012874:	4621      	mov	r1, r4
 8012876:	4628      	mov	r0, r5
 8012878:	f000 ff00 	bl	801367c <_fflush_r>
 801287c:	bb28      	cbnz	r0, 80128ca <__swbuf_r+0x8e>
 801287e:	68a3      	ldr	r3, [r4, #8]
 8012880:	3b01      	subs	r3, #1
 8012882:	60a3      	str	r3, [r4, #8]
 8012884:	6823      	ldr	r3, [r4, #0]
 8012886:	1c5a      	adds	r2, r3, #1
 8012888:	6022      	str	r2, [r4, #0]
 801288a:	701e      	strb	r6, [r3, #0]
 801288c:	6963      	ldr	r3, [r4, #20]
 801288e:	3001      	adds	r0, #1
 8012890:	4283      	cmp	r3, r0
 8012892:	d004      	beq.n	801289e <__swbuf_r+0x62>
 8012894:	89a3      	ldrh	r3, [r4, #12]
 8012896:	07db      	lsls	r3, r3, #31
 8012898:	d519      	bpl.n	80128ce <__swbuf_r+0x92>
 801289a:	2e0a      	cmp	r6, #10
 801289c:	d117      	bne.n	80128ce <__swbuf_r+0x92>
 801289e:	4621      	mov	r1, r4
 80128a0:	4628      	mov	r0, r5
 80128a2:	f000 feeb 	bl	801367c <_fflush_r>
 80128a6:	b190      	cbz	r0, 80128ce <__swbuf_r+0x92>
 80128a8:	e00f      	b.n	80128ca <__swbuf_r+0x8e>
 80128aa:	4b0b      	ldr	r3, [pc, #44]	; (80128d8 <__swbuf_r+0x9c>)
 80128ac:	429c      	cmp	r4, r3
 80128ae:	d101      	bne.n	80128b4 <__swbuf_r+0x78>
 80128b0:	68ac      	ldr	r4, [r5, #8]
 80128b2:	e7d0      	b.n	8012856 <__swbuf_r+0x1a>
 80128b4:	4b09      	ldr	r3, [pc, #36]	; (80128dc <__swbuf_r+0xa0>)
 80128b6:	429c      	cmp	r4, r3
 80128b8:	bf08      	it	eq
 80128ba:	68ec      	ldreq	r4, [r5, #12]
 80128bc:	e7cb      	b.n	8012856 <__swbuf_r+0x1a>
 80128be:	4621      	mov	r1, r4
 80128c0:	4628      	mov	r0, r5
 80128c2:	f000 f80d 	bl	80128e0 <__swsetup_r>
 80128c6:	2800      	cmp	r0, #0
 80128c8:	d0cc      	beq.n	8012864 <__swbuf_r+0x28>
 80128ca:	f04f 37ff 	mov.w	r7, #4294967295
 80128ce:	4638      	mov	r0, r7
 80128d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80128d2:	bf00      	nop
 80128d4:	08015578 	.word	0x08015578
 80128d8:	08015598 	.word	0x08015598
 80128dc:	08015558 	.word	0x08015558

080128e0 <__swsetup_r>:
 80128e0:	4b32      	ldr	r3, [pc, #200]	; (80129ac <__swsetup_r+0xcc>)
 80128e2:	b570      	push	{r4, r5, r6, lr}
 80128e4:	681d      	ldr	r5, [r3, #0]
 80128e6:	4606      	mov	r6, r0
 80128e8:	460c      	mov	r4, r1
 80128ea:	b125      	cbz	r5, 80128f6 <__swsetup_r+0x16>
 80128ec:	69ab      	ldr	r3, [r5, #24]
 80128ee:	b913      	cbnz	r3, 80128f6 <__swsetup_r+0x16>
 80128f0:	4628      	mov	r0, r5
 80128f2:	f000 ff2d 	bl	8013750 <__sinit>
 80128f6:	4b2e      	ldr	r3, [pc, #184]	; (80129b0 <__swsetup_r+0xd0>)
 80128f8:	429c      	cmp	r4, r3
 80128fa:	d10f      	bne.n	801291c <__swsetup_r+0x3c>
 80128fc:	686c      	ldr	r4, [r5, #4]
 80128fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012902:	b29a      	uxth	r2, r3
 8012904:	0715      	lsls	r5, r2, #28
 8012906:	d42c      	bmi.n	8012962 <__swsetup_r+0x82>
 8012908:	06d0      	lsls	r0, r2, #27
 801290a:	d411      	bmi.n	8012930 <__swsetup_r+0x50>
 801290c:	2209      	movs	r2, #9
 801290e:	6032      	str	r2, [r6, #0]
 8012910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012914:	81a3      	strh	r3, [r4, #12]
 8012916:	f04f 30ff 	mov.w	r0, #4294967295
 801291a:	e03e      	b.n	801299a <__swsetup_r+0xba>
 801291c:	4b25      	ldr	r3, [pc, #148]	; (80129b4 <__swsetup_r+0xd4>)
 801291e:	429c      	cmp	r4, r3
 8012920:	d101      	bne.n	8012926 <__swsetup_r+0x46>
 8012922:	68ac      	ldr	r4, [r5, #8]
 8012924:	e7eb      	b.n	80128fe <__swsetup_r+0x1e>
 8012926:	4b24      	ldr	r3, [pc, #144]	; (80129b8 <__swsetup_r+0xd8>)
 8012928:	429c      	cmp	r4, r3
 801292a:	bf08      	it	eq
 801292c:	68ec      	ldreq	r4, [r5, #12]
 801292e:	e7e6      	b.n	80128fe <__swsetup_r+0x1e>
 8012930:	0751      	lsls	r1, r2, #29
 8012932:	d512      	bpl.n	801295a <__swsetup_r+0x7a>
 8012934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012936:	b141      	cbz	r1, 801294a <__swsetup_r+0x6a>
 8012938:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801293c:	4299      	cmp	r1, r3
 801293e:	d002      	beq.n	8012946 <__swsetup_r+0x66>
 8012940:	4630      	mov	r0, r6
 8012942:	f7fe f941 	bl	8010bc8 <_free_r>
 8012946:	2300      	movs	r3, #0
 8012948:	6363      	str	r3, [r4, #52]	; 0x34
 801294a:	89a3      	ldrh	r3, [r4, #12]
 801294c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012950:	81a3      	strh	r3, [r4, #12]
 8012952:	2300      	movs	r3, #0
 8012954:	6063      	str	r3, [r4, #4]
 8012956:	6923      	ldr	r3, [r4, #16]
 8012958:	6023      	str	r3, [r4, #0]
 801295a:	89a3      	ldrh	r3, [r4, #12]
 801295c:	f043 0308 	orr.w	r3, r3, #8
 8012960:	81a3      	strh	r3, [r4, #12]
 8012962:	6923      	ldr	r3, [r4, #16]
 8012964:	b94b      	cbnz	r3, 801297a <__swsetup_r+0x9a>
 8012966:	89a3      	ldrh	r3, [r4, #12]
 8012968:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801296c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012970:	d003      	beq.n	801297a <__swsetup_r+0x9a>
 8012972:	4621      	mov	r1, r4
 8012974:	4630      	mov	r0, r6
 8012976:	f001 fad3 	bl	8013f20 <__smakebuf_r>
 801297a:	89a2      	ldrh	r2, [r4, #12]
 801297c:	f012 0301 	ands.w	r3, r2, #1
 8012980:	d00c      	beq.n	801299c <__swsetup_r+0xbc>
 8012982:	2300      	movs	r3, #0
 8012984:	60a3      	str	r3, [r4, #8]
 8012986:	6963      	ldr	r3, [r4, #20]
 8012988:	425b      	negs	r3, r3
 801298a:	61a3      	str	r3, [r4, #24]
 801298c:	6923      	ldr	r3, [r4, #16]
 801298e:	b953      	cbnz	r3, 80129a6 <__swsetup_r+0xc6>
 8012990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012994:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012998:	d1ba      	bne.n	8012910 <__swsetup_r+0x30>
 801299a:	bd70      	pop	{r4, r5, r6, pc}
 801299c:	0792      	lsls	r2, r2, #30
 801299e:	bf58      	it	pl
 80129a0:	6963      	ldrpl	r3, [r4, #20]
 80129a2:	60a3      	str	r3, [r4, #8]
 80129a4:	e7f2      	b.n	801298c <__swsetup_r+0xac>
 80129a6:	2000      	movs	r0, #0
 80129a8:	e7f7      	b.n	801299a <__swsetup_r+0xba>
 80129aa:	bf00      	nop
 80129ac:	2000037c 	.word	0x2000037c
 80129b0:	08015578 	.word	0x08015578
 80129b4:	08015598 	.word	0x08015598
 80129b8:	08015558 	.word	0x08015558

080129bc <quorem>:
 80129bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c0:	6903      	ldr	r3, [r0, #16]
 80129c2:	690c      	ldr	r4, [r1, #16]
 80129c4:	42a3      	cmp	r3, r4
 80129c6:	4680      	mov	r8, r0
 80129c8:	f2c0 8082 	blt.w	8012ad0 <quorem+0x114>
 80129cc:	3c01      	subs	r4, #1
 80129ce:	f101 0714 	add.w	r7, r1, #20
 80129d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80129d6:	f100 0614 	add.w	r6, r0, #20
 80129da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80129de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80129e2:	eb06 030c 	add.w	r3, r6, ip
 80129e6:	3501      	adds	r5, #1
 80129e8:	eb07 090c 	add.w	r9, r7, ip
 80129ec:	9301      	str	r3, [sp, #4]
 80129ee:	fbb0 f5f5 	udiv	r5, r0, r5
 80129f2:	b395      	cbz	r5, 8012a5a <quorem+0x9e>
 80129f4:	f04f 0a00 	mov.w	sl, #0
 80129f8:	4638      	mov	r0, r7
 80129fa:	46b6      	mov	lr, r6
 80129fc:	46d3      	mov	fp, sl
 80129fe:	f850 2b04 	ldr.w	r2, [r0], #4
 8012a02:	b293      	uxth	r3, r2
 8012a04:	fb05 a303 	mla	r3, r5, r3, sl
 8012a08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	ebab 0303 	sub.w	r3, fp, r3
 8012a12:	0c12      	lsrs	r2, r2, #16
 8012a14:	f8de b000 	ldr.w	fp, [lr]
 8012a18:	fb05 a202 	mla	r2, r5, r2, sl
 8012a1c:	fa13 f38b 	uxtah	r3, r3, fp
 8012a20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012a24:	fa1f fb82 	uxth.w	fp, r2
 8012a28:	f8de 2000 	ldr.w	r2, [lr]
 8012a2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012a30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a34:	b29b      	uxth	r3, r3
 8012a36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a3a:	4581      	cmp	r9, r0
 8012a3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012a40:	f84e 3b04 	str.w	r3, [lr], #4
 8012a44:	d2db      	bcs.n	80129fe <quorem+0x42>
 8012a46:	f856 300c 	ldr.w	r3, [r6, ip]
 8012a4a:	b933      	cbnz	r3, 8012a5a <quorem+0x9e>
 8012a4c:	9b01      	ldr	r3, [sp, #4]
 8012a4e:	3b04      	subs	r3, #4
 8012a50:	429e      	cmp	r6, r3
 8012a52:	461a      	mov	r2, r3
 8012a54:	d330      	bcc.n	8012ab8 <quorem+0xfc>
 8012a56:	f8c8 4010 	str.w	r4, [r8, #16]
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	f001 fd08 	bl	8014470 <__mcmp>
 8012a60:	2800      	cmp	r0, #0
 8012a62:	db25      	blt.n	8012ab0 <quorem+0xf4>
 8012a64:	3501      	adds	r5, #1
 8012a66:	4630      	mov	r0, r6
 8012a68:	f04f 0c00 	mov.w	ip, #0
 8012a6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8012a70:	f8d0 e000 	ldr.w	lr, [r0]
 8012a74:	b293      	uxth	r3, r2
 8012a76:	ebac 0303 	sub.w	r3, ip, r3
 8012a7a:	0c12      	lsrs	r2, r2, #16
 8012a7c:	fa13 f38e 	uxtah	r3, r3, lr
 8012a80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012a84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a8e:	45b9      	cmp	r9, r7
 8012a90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012a94:	f840 3b04 	str.w	r3, [r0], #4
 8012a98:	d2e8      	bcs.n	8012a6c <quorem+0xb0>
 8012a9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012a9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012aa2:	b92a      	cbnz	r2, 8012ab0 <quorem+0xf4>
 8012aa4:	3b04      	subs	r3, #4
 8012aa6:	429e      	cmp	r6, r3
 8012aa8:	461a      	mov	r2, r3
 8012aaa:	d30b      	bcc.n	8012ac4 <quorem+0x108>
 8012aac:	f8c8 4010 	str.w	r4, [r8, #16]
 8012ab0:	4628      	mov	r0, r5
 8012ab2:	b003      	add	sp, #12
 8012ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ab8:	6812      	ldr	r2, [r2, #0]
 8012aba:	3b04      	subs	r3, #4
 8012abc:	2a00      	cmp	r2, #0
 8012abe:	d1ca      	bne.n	8012a56 <quorem+0x9a>
 8012ac0:	3c01      	subs	r4, #1
 8012ac2:	e7c5      	b.n	8012a50 <quorem+0x94>
 8012ac4:	6812      	ldr	r2, [r2, #0]
 8012ac6:	3b04      	subs	r3, #4
 8012ac8:	2a00      	cmp	r2, #0
 8012aca:	d1ef      	bne.n	8012aac <quorem+0xf0>
 8012acc:	3c01      	subs	r4, #1
 8012ace:	e7ea      	b.n	8012aa6 <quorem+0xea>
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	e7ee      	b.n	8012ab2 <quorem+0xf6>
 8012ad4:	0000      	movs	r0, r0
	...

08012ad8 <_dtoa_r>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	ec57 6b10 	vmov	r6, r7, d0
 8012ae0:	b095      	sub	sp, #84	; 0x54
 8012ae2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012ae4:	9108      	str	r1, [sp, #32]
 8012ae6:	4604      	mov	r4, r0
 8012ae8:	920a      	str	r2, [sp, #40]	; 0x28
 8012aea:	9311      	str	r3, [sp, #68]	; 0x44
 8012aec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8012af0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012af4:	b93d      	cbnz	r5, 8012b06 <_dtoa_r+0x2e>
 8012af6:	2010      	movs	r0, #16
 8012af8:	f7fe f83c 	bl	8010b74 <malloc>
 8012afc:	6260      	str	r0, [r4, #36]	; 0x24
 8012afe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012b02:	6005      	str	r5, [r0, #0]
 8012b04:	60c5      	str	r5, [r0, #12]
 8012b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b08:	6819      	ldr	r1, [r3, #0]
 8012b0a:	b151      	cbz	r1, 8012b22 <_dtoa_r+0x4a>
 8012b0c:	685a      	ldr	r2, [r3, #4]
 8012b0e:	604a      	str	r2, [r1, #4]
 8012b10:	2301      	movs	r3, #1
 8012b12:	4093      	lsls	r3, r2
 8012b14:	608b      	str	r3, [r1, #8]
 8012b16:	4620      	mov	r0, r4
 8012b18:	f001 fa8a 	bl	8014030 <_Bfree>
 8012b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b1e:	2200      	movs	r2, #0
 8012b20:	601a      	str	r2, [r3, #0]
 8012b22:	1e3b      	subs	r3, r7, #0
 8012b24:	bfb9      	ittee	lt
 8012b26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012b2a:	9303      	strlt	r3, [sp, #12]
 8012b2c:	2300      	movge	r3, #0
 8012b2e:	f8c8 3000 	strge.w	r3, [r8]
 8012b32:	9d03      	ldr	r5, [sp, #12]
 8012b34:	4bac      	ldr	r3, [pc, #688]	; (8012de8 <_dtoa_r+0x310>)
 8012b36:	bfbc      	itt	lt
 8012b38:	2201      	movlt	r2, #1
 8012b3a:	f8c8 2000 	strlt.w	r2, [r8]
 8012b3e:	43ab      	bics	r3, r5
 8012b40:	d11b      	bne.n	8012b7a <_dtoa_r+0xa2>
 8012b42:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b44:	f242 730f 	movw	r3, #9999	; 0x270f
 8012b48:	6013      	str	r3, [r2, #0]
 8012b4a:	9b02      	ldr	r3, [sp, #8]
 8012b4c:	b923      	cbnz	r3, 8012b58 <_dtoa_r+0x80>
 8012b4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012b52:	2d00      	cmp	r5, #0
 8012b54:	f000 84dd 	beq.w	8013512 <_dtoa_r+0xa3a>
 8012b58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b5a:	b953      	cbnz	r3, 8012b72 <_dtoa_r+0x9a>
 8012b5c:	4ba3      	ldr	r3, [pc, #652]	; (8012dec <_dtoa_r+0x314>)
 8012b5e:	e020      	b.n	8012ba2 <_dtoa_r+0xca>
 8012b60:	4ba3      	ldr	r3, [pc, #652]	; (8012df0 <_dtoa_r+0x318>)
 8012b62:	9304      	str	r3, [sp, #16]
 8012b64:	3308      	adds	r3, #8
 8012b66:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012b68:	6013      	str	r3, [r2, #0]
 8012b6a:	9804      	ldr	r0, [sp, #16]
 8012b6c:	b015      	add	sp, #84	; 0x54
 8012b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b72:	4b9e      	ldr	r3, [pc, #632]	; (8012dec <_dtoa_r+0x314>)
 8012b74:	9304      	str	r3, [sp, #16]
 8012b76:	3303      	adds	r3, #3
 8012b78:	e7f5      	b.n	8012b66 <_dtoa_r+0x8e>
 8012b7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012b7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b86:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b8a:	d10c      	bne.n	8012ba6 <_dtoa_r+0xce>
 8012b8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012b8e:	2301      	movs	r3, #1
 8012b90:	6013      	str	r3, [r2, #0]
 8012b92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	f000 84b9 	beq.w	801350c <_dtoa_r+0xa34>
 8012b9a:	4b96      	ldr	r3, [pc, #600]	; (8012df4 <_dtoa_r+0x31c>)
 8012b9c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8012b9e:	6013      	str	r3, [r2, #0]
 8012ba0:	3b01      	subs	r3, #1
 8012ba2:	9304      	str	r3, [sp, #16]
 8012ba4:	e7e1      	b.n	8012b6a <_dtoa_r+0x92>
 8012ba6:	a913      	add	r1, sp, #76	; 0x4c
 8012ba8:	aa12      	add	r2, sp, #72	; 0x48
 8012baa:	ed9d 0b04 	vldr	d0, [sp, #16]
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f001 fd4c 	bl	801464c <__d2b>
 8012bb4:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8012bb8:	9001      	str	r0, [sp, #4]
 8012bba:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012bbc:	2e00      	cmp	r6, #0
 8012bbe:	d046      	beq.n	8012c4e <_dtoa_r+0x176>
 8012bc0:	9805      	ldr	r0, [sp, #20]
 8012bc2:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8012bc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bca:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8012bce:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012bd2:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8012bd6:	2700      	movs	r7, #0
 8012bd8:	ee07 aa90 	vmov	s15, sl
 8012bdc:	ec43 2b16 	vmov	d6, r2, r3
 8012be0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8012be4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8012dd0 <_dtoa_r+0x2f8>
 8012be8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8012bec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012bf0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8012dd8 <_dtoa_r+0x300>
 8012bf4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8012bf8:	eeb0 7b46 	vmov.f64	d7, d6
 8012bfc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8012de0 <_dtoa_r+0x308>
 8012c00:	eea5 7b06 	vfma.f64	d7, d5, d6
 8012c04:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012c08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c10:	ee16 ba90 	vmov	fp, s13
 8012c14:	d508      	bpl.n	8012c28 <_dtoa_r+0x150>
 8012c16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012c1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8012c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c22:	bf18      	it	ne
 8012c24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8012c28:	f1bb 0f16 	cmp.w	fp, #22
 8012c2c:	d834      	bhi.n	8012c98 <_dtoa_r+0x1c0>
 8012c2e:	4b72      	ldr	r3, [pc, #456]	; (8012df8 <_dtoa_r+0x320>)
 8012c30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012c34:	ed93 7b00 	vldr	d7, [r3]
 8012c38:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012c3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c44:	dd01      	ble.n	8012c4a <_dtoa_r+0x172>
 8012c46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	e025      	b.n	8012c9a <_dtoa_r+0x1c2>
 8012c4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012c50:	eb01 0a03 	add.w	sl, r1, r3
 8012c54:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8012c58:	2b20      	cmp	r3, #32
 8012c5a:	dd17      	ble.n	8012c8c <_dtoa_r+0x1b4>
 8012c5c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8012c60:	9a02      	ldr	r2, [sp, #8]
 8012c62:	409d      	lsls	r5, r3
 8012c64:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8012c68:	fa22 f303 	lsr.w	r3, r2, r3
 8012c6c:	432b      	orrs	r3, r5
 8012c6e:	ee07 3a90 	vmov	s15, r3
 8012c72:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012c76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012c7a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012c7e:	9805      	ldr	r0, [sp, #20]
 8012c80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c84:	2701      	movs	r7, #1
 8012c86:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8012c8a:	e7a5      	b.n	8012bd8 <_dtoa_r+0x100>
 8012c8c:	9a02      	ldr	r2, [sp, #8]
 8012c8e:	f1c3 0320 	rsb	r3, r3, #32
 8012c92:	fa02 f303 	lsl.w	r3, r2, r3
 8012c96:	e7ea      	b.n	8012c6e <_dtoa_r+0x196>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	eba1 0a0a 	sub.w	sl, r1, sl
 8012c9e:	9310      	str	r3, [sp, #64]	; 0x40
 8012ca0:	f1ba 0301 	subs.w	r3, sl, #1
 8012ca4:	9307      	str	r3, [sp, #28]
 8012ca6:	bf43      	ittte	mi
 8012ca8:	2300      	movmi	r3, #0
 8012caa:	f1ca 0a01 	rsbmi	sl, sl, #1
 8012cae:	9307      	strmi	r3, [sp, #28]
 8012cb0:	f04f 0a00 	movpl.w	sl, #0
 8012cb4:	f1bb 0f00 	cmp.w	fp, #0
 8012cb8:	db19      	blt.n	8012cee <_dtoa_r+0x216>
 8012cba:	9b07      	ldr	r3, [sp, #28]
 8012cbc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012cc0:	445b      	add	r3, fp
 8012cc2:	9307      	str	r3, [sp, #28]
 8012cc4:	f04f 0800 	mov.w	r8, #0
 8012cc8:	9b08      	ldr	r3, [sp, #32]
 8012cca:	2b09      	cmp	r3, #9
 8012ccc:	d866      	bhi.n	8012d9c <_dtoa_r+0x2c4>
 8012cce:	2b05      	cmp	r3, #5
 8012cd0:	bfc4      	itt	gt
 8012cd2:	3b04      	subgt	r3, #4
 8012cd4:	9308      	strgt	r3, [sp, #32]
 8012cd6:	9b08      	ldr	r3, [sp, #32]
 8012cd8:	f1a3 0302 	sub.w	r3, r3, #2
 8012cdc:	bfcc      	ite	gt
 8012cde:	2500      	movgt	r5, #0
 8012ce0:	2501      	movle	r5, #1
 8012ce2:	2b03      	cmp	r3, #3
 8012ce4:	d866      	bhi.n	8012db4 <_dtoa_r+0x2dc>
 8012ce6:	e8df f003 	tbb	[pc, r3]
 8012cea:	5755      	.short	0x5755
 8012cec:	4909      	.short	0x4909
 8012cee:	2300      	movs	r3, #0
 8012cf0:	ebaa 0a0b 	sub.w	sl, sl, fp
 8012cf4:	f1cb 0800 	rsb	r8, fp, #0
 8012cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cfa:	e7e5      	b.n	8012cc8 <_dtoa_r+0x1f0>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8012d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	dd59      	ble.n	8012dba <_dtoa_r+0x2e2>
 8012d06:	9306      	str	r3, [sp, #24]
 8012d08:	4699      	mov	r9, r3
 8012d0a:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	6072      	str	r2, [r6, #4]
 8012d10:	2204      	movs	r2, #4
 8012d12:	f102 0014 	add.w	r0, r2, #20
 8012d16:	4298      	cmp	r0, r3
 8012d18:	6871      	ldr	r1, [r6, #4]
 8012d1a:	d953      	bls.n	8012dc4 <_dtoa_r+0x2ec>
 8012d1c:	4620      	mov	r0, r4
 8012d1e:	f001 f953 	bl	8013fc8 <_Balloc>
 8012d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012d24:	6030      	str	r0, [r6, #0]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	9304      	str	r3, [sp, #16]
 8012d2a:	f1b9 0f0e 	cmp.w	r9, #14
 8012d2e:	f200 80c2 	bhi.w	8012eb6 <_dtoa_r+0x3de>
 8012d32:	2d00      	cmp	r5, #0
 8012d34:	f000 80bf 	beq.w	8012eb6 <_dtoa_r+0x3de>
 8012d38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d3c:	f1bb 0f00 	cmp.w	fp, #0
 8012d40:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8012d44:	f340 80e6 	ble.w	8012f14 <_dtoa_r+0x43c>
 8012d48:	4a2b      	ldr	r2, [pc, #172]	; (8012df8 <_dtoa_r+0x320>)
 8012d4a:	f00b 030f 	and.w	r3, fp, #15
 8012d4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012d52:	ed93 7b00 	vldr	d7, [r3]
 8012d56:	ea4f 132b 	mov.w	r3, fp, asr #4
 8012d5a:	06da      	lsls	r2, r3, #27
 8012d5c:	f140 80d8 	bpl.w	8012f10 <_dtoa_r+0x438>
 8012d60:	4a26      	ldr	r2, [pc, #152]	; (8012dfc <_dtoa_r+0x324>)
 8012d62:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8012d66:	ed92 6b08 	vldr	d6, [r2, #32]
 8012d6a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8012d6e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012d72:	f003 030f 	and.w	r3, r3, #15
 8012d76:	2203      	movs	r2, #3
 8012d78:	4920      	ldr	r1, [pc, #128]	; (8012dfc <_dtoa_r+0x324>)
 8012d7a:	e04a      	b.n	8012e12 <_dtoa_r+0x33a>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8012d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d82:	445b      	add	r3, fp
 8012d84:	f103 0901 	add.w	r9, r3, #1
 8012d88:	9306      	str	r3, [sp, #24]
 8012d8a:	464b      	mov	r3, r9
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	bfb8      	it	lt
 8012d90:	2301      	movlt	r3, #1
 8012d92:	e7ba      	b.n	8012d0a <_dtoa_r+0x232>
 8012d94:	2300      	movs	r3, #0
 8012d96:	e7b2      	b.n	8012cfe <_dtoa_r+0x226>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	e7f0      	b.n	8012d7e <_dtoa_r+0x2a6>
 8012d9c:	2501      	movs	r5, #1
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8012da4:	f04f 33ff 	mov.w	r3, #4294967295
 8012da8:	9306      	str	r3, [sp, #24]
 8012daa:	4699      	mov	r9, r3
 8012dac:	2200      	movs	r2, #0
 8012dae:	2312      	movs	r3, #18
 8012db0:	920a      	str	r2, [sp, #40]	; 0x28
 8012db2:	e7aa      	b.n	8012d0a <_dtoa_r+0x232>
 8012db4:	2301      	movs	r3, #1
 8012db6:	9309      	str	r3, [sp, #36]	; 0x24
 8012db8:	e7f4      	b.n	8012da4 <_dtoa_r+0x2cc>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	9306      	str	r3, [sp, #24]
 8012dbe:	4699      	mov	r9, r3
 8012dc0:	461a      	mov	r2, r3
 8012dc2:	e7f5      	b.n	8012db0 <_dtoa_r+0x2d8>
 8012dc4:	3101      	adds	r1, #1
 8012dc6:	6071      	str	r1, [r6, #4]
 8012dc8:	0052      	lsls	r2, r2, #1
 8012dca:	e7a2      	b.n	8012d12 <_dtoa_r+0x23a>
 8012dcc:	f3af 8000 	nop.w
 8012dd0:	636f4361 	.word	0x636f4361
 8012dd4:	3fd287a7 	.word	0x3fd287a7
 8012dd8:	8b60c8b3 	.word	0x8b60c8b3
 8012ddc:	3fc68a28 	.word	0x3fc68a28
 8012de0:	509f79fb 	.word	0x509f79fb
 8012de4:	3fd34413 	.word	0x3fd34413
 8012de8:	7ff00000 	.word	0x7ff00000
 8012dec:	08015551 	.word	0x08015551
 8012df0:	08015548 	.word	0x08015548
 8012df4:	080154c9 	.word	0x080154c9
 8012df8:	080155f0 	.word	0x080155f0
 8012dfc:	080155c8 	.word	0x080155c8
 8012e00:	07de      	lsls	r6, r3, #31
 8012e02:	d504      	bpl.n	8012e0e <_dtoa_r+0x336>
 8012e04:	ed91 6b00 	vldr	d6, [r1]
 8012e08:	3201      	adds	r2, #1
 8012e0a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e0e:	105b      	asrs	r3, r3, #1
 8012e10:	3108      	adds	r1, #8
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d1f4      	bne.n	8012e00 <_dtoa_r+0x328>
 8012e16:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012e1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012e1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	f000 80a7 	beq.w	8012f78 <_dtoa_r+0x4a0>
 8012e2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8012e2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e3a:	f140 809d 	bpl.w	8012f78 <_dtoa_r+0x4a0>
 8012e3e:	f1b9 0f00 	cmp.w	r9, #0
 8012e42:	f000 8099 	beq.w	8012f78 <_dtoa_r+0x4a0>
 8012e46:	9b06      	ldr	r3, [sp, #24]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	dd30      	ble.n	8012eae <_dtoa_r+0x3d6>
 8012e4c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8012e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e58:	9d06      	ldr	r5, [sp, #24]
 8012e5a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012e5e:	3201      	adds	r2, #1
 8012e60:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012e64:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8012e68:	ee07 2a90 	vmov	s15, r2
 8012e6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012e70:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012e74:	ed8d 5b02 	vstr	d5, [sp, #8]
 8012e78:	9a03      	ldr	r2, [sp, #12]
 8012e7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e7e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8012e82:	2d00      	cmp	r5, #0
 8012e84:	d17b      	bne.n	8012f7e <_dtoa_r+0x4a6>
 8012e86:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012e8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012e8e:	ec41 0b17 	vmov	d7, r0, r1
 8012e92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9a:	f300 8253 	bgt.w	8013344 <_dtoa_r+0x86c>
 8012e9e:	eeb1 7b47 	vneg.f64	d7, d7
 8012ea2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eaa:	f100 8249 	bmi.w	8013340 <_dtoa_r+0x868>
 8012eae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012eb2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012eb6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	f2c0 8119 	blt.w	80130f0 <_dtoa_r+0x618>
 8012ebe:	f1bb 0f0e 	cmp.w	fp, #14
 8012ec2:	f300 8115 	bgt.w	80130f0 <_dtoa_r+0x618>
 8012ec6:	4bc3      	ldr	r3, [pc, #780]	; (80131d4 <_dtoa_r+0x6fc>)
 8012ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012ecc:	ed93 6b00 	vldr	d6, [r3]
 8012ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	f280 80ba 	bge.w	801304c <_dtoa_r+0x574>
 8012ed8:	f1b9 0f00 	cmp.w	r9, #0
 8012edc:	f300 80b6 	bgt.w	801304c <_dtoa_r+0x574>
 8012ee0:	f040 822d 	bne.w	801333e <_dtoa_r+0x866>
 8012ee4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8012ee8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012eec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ef0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef8:	464d      	mov	r5, r9
 8012efa:	464f      	mov	r7, r9
 8012efc:	f280 8204 	bge.w	8013308 <_dtoa_r+0x830>
 8012f00:	9b04      	ldr	r3, [sp, #16]
 8012f02:	9a04      	ldr	r2, [sp, #16]
 8012f04:	1c5e      	adds	r6, r3, #1
 8012f06:	2331      	movs	r3, #49	; 0x31
 8012f08:	7013      	strb	r3, [r2, #0]
 8012f0a:	f10b 0b01 	add.w	fp, fp, #1
 8012f0e:	e1ff      	b.n	8013310 <_dtoa_r+0x838>
 8012f10:	2202      	movs	r2, #2
 8012f12:	e731      	b.n	8012d78 <_dtoa_r+0x2a0>
 8012f14:	d02e      	beq.n	8012f74 <_dtoa_r+0x49c>
 8012f16:	f1cb 0300 	rsb	r3, fp, #0
 8012f1a:	4aae      	ldr	r2, [pc, #696]	; (80131d4 <_dtoa_r+0x6fc>)
 8012f1c:	f003 010f 	and.w	r1, r3, #15
 8012f20:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012f24:	ed92 7b00 	vldr	d7, [r2]
 8012f28:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8012f2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012f30:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012f34:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8012f38:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8012f3c:	49a6      	ldr	r1, [pc, #664]	; (80131d8 <_dtoa_r+0x700>)
 8012f3e:	111b      	asrs	r3, r3, #4
 8012f40:	2000      	movs	r0, #0
 8012f42:	2202      	movs	r2, #2
 8012f44:	b93b      	cbnz	r3, 8012f56 <_dtoa_r+0x47e>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	f43f af6b 	beq.w	8012e22 <_dtoa_r+0x34a>
 8012f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f54:	e765      	b.n	8012e22 <_dtoa_r+0x34a>
 8012f56:	07dd      	lsls	r5, r3, #31
 8012f58:	d509      	bpl.n	8012f6e <_dtoa_r+0x496>
 8012f5a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8012f5e:	ed91 7b00 	vldr	d7, [r1]
 8012f62:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012f66:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8012f6a:	3201      	adds	r2, #1
 8012f6c:	2001      	movs	r0, #1
 8012f6e:	105b      	asrs	r3, r3, #1
 8012f70:	3108      	adds	r1, #8
 8012f72:	e7e7      	b.n	8012f44 <_dtoa_r+0x46c>
 8012f74:	2202      	movs	r2, #2
 8012f76:	e754      	b.n	8012e22 <_dtoa_r+0x34a>
 8012f78:	465b      	mov	r3, fp
 8012f7a:	464d      	mov	r5, r9
 8012f7c:	e770      	b.n	8012e60 <_dtoa_r+0x388>
 8012f7e:	4a95      	ldr	r2, [pc, #596]	; (80131d4 <_dtoa_r+0x6fc>)
 8012f80:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8012f84:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f8a:	ec41 0b17 	vmov	d7, r0, r1
 8012f8e:	b35a      	cbz	r2, 8012fe8 <_dtoa_r+0x510>
 8012f90:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8012f94:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8012f98:	9e04      	ldr	r6, [sp, #16]
 8012f9a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012f9e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012fa2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012fa6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012faa:	ee14 2a90 	vmov	r2, s9
 8012fae:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012fb2:	3230      	adds	r2, #48	; 0x30
 8012fb4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012fb8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc0:	f806 2b01 	strb.w	r2, [r6], #1
 8012fc4:	d43b      	bmi.n	801303e <_dtoa_r+0x566>
 8012fc6:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012fca:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fd2:	d472      	bmi.n	80130ba <_dtoa_r+0x5e2>
 8012fd4:	9a04      	ldr	r2, [sp, #16]
 8012fd6:	1ab2      	subs	r2, r6, r2
 8012fd8:	4295      	cmp	r5, r2
 8012fda:	f77f af68 	ble.w	8012eae <_dtoa_r+0x3d6>
 8012fde:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012fe2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012fe6:	e7de      	b.n	8012fa6 <_dtoa_r+0x4ce>
 8012fe8:	9a04      	ldr	r2, [sp, #16]
 8012fea:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012fee:	1956      	adds	r6, r2, r5
 8012ff0:	4611      	mov	r1, r2
 8012ff2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8012ff6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012ffa:	ee14 2a90 	vmov	r2, s9
 8012ffe:	3230      	adds	r2, #48	; 0x30
 8013000:	f801 2b01 	strb.w	r2, [r1], #1
 8013004:	42b1      	cmp	r1, r6
 8013006:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801300a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801300e:	d11a      	bne.n	8013046 <_dtoa_r+0x56e>
 8013010:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013014:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013018:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013020:	dc4b      	bgt.n	80130ba <_dtoa_r+0x5e2>
 8013022:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013026:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801302a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801302e:	f57f af3e 	bpl.w	8012eae <_dtoa_r+0x3d6>
 8013032:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013036:	2a30      	cmp	r2, #48	; 0x30
 8013038:	f106 31ff 	add.w	r1, r6, #4294967295
 801303c:	d001      	beq.n	8013042 <_dtoa_r+0x56a>
 801303e:	469b      	mov	fp, r3
 8013040:	e02a      	b.n	8013098 <_dtoa_r+0x5c0>
 8013042:	460e      	mov	r6, r1
 8013044:	e7f5      	b.n	8013032 <_dtoa_r+0x55a>
 8013046:	ee26 6b03 	vmul.f64	d6, d6, d3
 801304a:	e7d4      	b.n	8012ff6 <_dtoa_r+0x51e>
 801304c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013050:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013054:	9e04      	ldr	r6, [sp, #16]
 8013056:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801305a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801305e:	ee15 3a10 	vmov	r3, s10
 8013062:	3330      	adds	r3, #48	; 0x30
 8013064:	f806 3b01 	strb.w	r3, [r6], #1
 8013068:	9b04      	ldr	r3, [sp, #16]
 801306a:	1af3      	subs	r3, r6, r3
 801306c:	4599      	cmp	r9, r3
 801306e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013072:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013076:	d133      	bne.n	80130e0 <_dtoa_r+0x608>
 8013078:	ee37 7b07 	vadd.f64	d7, d7, d7
 801307c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013084:	dc18      	bgt.n	80130b8 <_dtoa_r+0x5e0>
 8013086:	eeb4 7b46 	vcmp.f64	d7, d6
 801308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308e:	d103      	bne.n	8013098 <_dtoa_r+0x5c0>
 8013090:	ee15 3a10 	vmov	r3, s10
 8013094:	07db      	lsls	r3, r3, #31
 8013096:	d40f      	bmi.n	80130b8 <_dtoa_r+0x5e0>
 8013098:	9901      	ldr	r1, [sp, #4]
 801309a:	4620      	mov	r0, r4
 801309c:	f000 ffc8 	bl	8014030 <_Bfree>
 80130a0:	2300      	movs	r3, #0
 80130a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80130a4:	7033      	strb	r3, [r6, #0]
 80130a6:	f10b 0301 	add.w	r3, fp, #1
 80130aa:	6013      	str	r3, [r2, #0]
 80130ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	f43f ad5b 	beq.w	8012b6a <_dtoa_r+0x92>
 80130b4:	601e      	str	r6, [r3, #0]
 80130b6:	e558      	b.n	8012b6a <_dtoa_r+0x92>
 80130b8:	465b      	mov	r3, fp
 80130ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80130be:	2939      	cmp	r1, #57	; 0x39
 80130c0:	f106 32ff 	add.w	r2, r6, #4294967295
 80130c4:	d106      	bne.n	80130d4 <_dtoa_r+0x5fc>
 80130c6:	9904      	ldr	r1, [sp, #16]
 80130c8:	4291      	cmp	r1, r2
 80130ca:	d107      	bne.n	80130dc <_dtoa_r+0x604>
 80130cc:	2230      	movs	r2, #48	; 0x30
 80130ce:	700a      	strb	r2, [r1, #0]
 80130d0:	3301      	adds	r3, #1
 80130d2:	460a      	mov	r2, r1
 80130d4:	7811      	ldrb	r1, [r2, #0]
 80130d6:	3101      	adds	r1, #1
 80130d8:	7011      	strb	r1, [r2, #0]
 80130da:	e7b0      	b.n	801303e <_dtoa_r+0x566>
 80130dc:	4616      	mov	r6, r2
 80130de:	e7ec      	b.n	80130ba <_dtoa_r+0x5e2>
 80130e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80130e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80130e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130ec:	d1b3      	bne.n	8013056 <_dtoa_r+0x57e>
 80130ee:	e7d3      	b.n	8013098 <_dtoa_r+0x5c0>
 80130f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80130f2:	2a00      	cmp	r2, #0
 80130f4:	f000 808d 	beq.w	8013212 <_dtoa_r+0x73a>
 80130f8:	9a08      	ldr	r2, [sp, #32]
 80130fa:	2a01      	cmp	r2, #1
 80130fc:	dc72      	bgt.n	80131e4 <_dtoa_r+0x70c>
 80130fe:	2f00      	cmp	r7, #0
 8013100:	d06c      	beq.n	80131dc <_dtoa_r+0x704>
 8013102:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013106:	4645      	mov	r5, r8
 8013108:	4656      	mov	r6, sl
 801310a:	9a07      	ldr	r2, [sp, #28]
 801310c:	2101      	movs	r1, #1
 801310e:	441a      	add	r2, r3
 8013110:	4620      	mov	r0, r4
 8013112:	449a      	add	sl, r3
 8013114:	9207      	str	r2, [sp, #28]
 8013116:	f001 f869 	bl	80141ec <__i2b>
 801311a:	4607      	mov	r7, r0
 801311c:	2e00      	cmp	r6, #0
 801311e:	dd0b      	ble.n	8013138 <_dtoa_r+0x660>
 8013120:	9b07      	ldr	r3, [sp, #28]
 8013122:	2b00      	cmp	r3, #0
 8013124:	dd08      	ble.n	8013138 <_dtoa_r+0x660>
 8013126:	42b3      	cmp	r3, r6
 8013128:	9a07      	ldr	r2, [sp, #28]
 801312a:	bfa8      	it	ge
 801312c:	4633      	movge	r3, r6
 801312e:	ebaa 0a03 	sub.w	sl, sl, r3
 8013132:	1af6      	subs	r6, r6, r3
 8013134:	1ad3      	subs	r3, r2, r3
 8013136:	9307      	str	r3, [sp, #28]
 8013138:	f1b8 0f00 	cmp.w	r8, #0
 801313c:	d01d      	beq.n	801317a <_dtoa_r+0x6a2>
 801313e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013140:	2b00      	cmp	r3, #0
 8013142:	d06a      	beq.n	801321a <_dtoa_r+0x742>
 8013144:	b18d      	cbz	r5, 801316a <_dtoa_r+0x692>
 8013146:	4639      	mov	r1, r7
 8013148:	462a      	mov	r2, r5
 801314a:	4620      	mov	r0, r4
 801314c:	f001 f8ee 	bl	801432c <__pow5mult>
 8013150:	9a01      	ldr	r2, [sp, #4]
 8013152:	4601      	mov	r1, r0
 8013154:	4607      	mov	r7, r0
 8013156:	4620      	mov	r0, r4
 8013158:	f001 f851 	bl	80141fe <__multiply>
 801315c:	9901      	ldr	r1, [sp, #4]
 801315e:	900c      	str	r0, [sp, #48]	; 0x30
 8013160:	4620      	mov	r0, r4
 8013162:	f000 ff65 	bl	8014030 <_Bfree>
 8013166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013168:	9301      	str	r3, [sp, #4]
 801316a:	ebb8 0205 	subs.w	r2, r8, r5
 801316e:	d004      	beq.n	801317a <_dtoa_r+0x6a2>
 8013170:	9901      	ldr	r1, [sp, #4]
 8013172:	4620      	mov	r0, r4
 8013174:	f001 f8da 	bl	801432c <__pow5mult>
 8013178:	9001      	str	r0, [sp, #4]
 801317a:	2101      	movs	r1, #1
 801317c:	4620      	mov	r0, r4
 801317e:	f001 f835 	bl	80141ec <__i2b>
 8013182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013184:	4605      	mov	r5, r0
 8013186:	2b00      	cmp	r3, #0
 8013188:	f000 81ca 	beq.w	8013520 <_dtoa_r+0xa48>
 801318c:	461a      	mov	r2, r3
 801318e:	4601      	mov	r1, r0
 8013190:	4620      	mov	r0, r4
 8013192:	f001 f8cb 	bl	801432c <__pow5mult>
 8013196:	9b08      	ldr	r3, [sp, #32]
 8013198:	2b01      	cmp	r3, #1
 801319a:	4605      	mov	r5, r0
 801319c:	dc44      	bgt.n	8013228 <_dtoa_r+0x750>
 801319e:	9b02      	ldr	r3, [sp, #8]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d13c      	bne.n	801321e <_dtoa_r+0x746>
 80131a4:	9b03      	ldr	r3, [sp, #12]
 80131a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d137      	bne.n	801321e <_dtoa_r+0x746>
 80131ae:	9b03      	ldr	r3, [sp, #12]
 80131b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80131b4:	0d1b      	lsrs	r3, r3, #20
 80131b6:	051b      	lsls	r3, r3, #20
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d033      	beq.n	8013224 <_dtoa_r+0x74c>
 80131bc:	9b07      	ldr	r3, [sp, #28]
 80131be:	3301      	adds	r3, #1
 80131c0:	f10a 0a01 	add.w	sl, sl, #1
 80131c4:	9307      	str	r3, [sp, #28]
 80131c6:	f04f 0801 	mov.w	r8, #1
 80131ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131cc:	bb73      	cbnz	r3, 801322c <_dtoa_r+0x754>
 80131ce:	2001      	movs	r0, #1
 80131d0:	e034      	b.n	801323c <_dtoa_r+0x764>
 80131d2:	bf00      	nop
 80131d4:	080155f0 	.word	0x080155f0
 80131d8:	080155c8 	.word	0x080155c8
 80131dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80131de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80131e2:	e790      	b.n	8013106 <_dtoa_r+0x62e>
 80131e4:	f109 35ff 	add.w	r5, r9, #4294967295
 80131e8:	45a8      	cmp	r8, r5
 80131ea:	bfbf      	itttt	lt
 80131ec:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80131ee:	eba5 0808 	sublt.w	r8, r5, r8
 80131f2:	4443      	addlt	r3, r8
 80131f4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80131f6:	bfb6      	itet	lt
 80131f8:	46a8      	movlt	r8, r5
 80131fa:	eba8 0505 	subge.w	r5, r8, r5
 80131fe:	2500      	movlt	r5, #0
 8013200:	f1b9 0f00 	cmp.w	r9, #0
 8013204:	bfb9      	ittee	lt
 8013206:	ebaa 0609 	sublt.w	r6, sl, r9
 801320a:	2300      	movlt	r3, #0
 801320c:	4656      	movge	r6, sl
 801320e:	464b      	movge	r3, r9
 8013210:	e77b      	b.n	801310a <_dtoa_r+0x632>
 8013212:	4645      	mov	r5, r8
 8013214:	4656      	mov	r6, sl
 8013216:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013218:	e780      	b.n	801311c <_dtoa_r+0x644>
 801321a:	4642      	mov	r2, r8
 801321c:	e7a8      	b.n	8013170 <_dtoa_r+0x698>
 801321e:	f04f 0800 	mov.w	r8, #0
 8013222:	e7d2      	b.n	80131ca <_dtoa_r+0x6f2>
 8013224:	4698      	mov	r8, r3
 8013226:	e7d0      	b.n	80131ca <_dtoa_r+0x6f2>
 8013228:	f04f 0800 	mov.w	r8, #0
 801322c:	692b      	ldr	r3, [r5, #16]
 801322e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013232:	6918      	ldr	r0, [r3, #16]
 8013234:	f000 ff8c 	bl	8014150 <__hi0bits>
 8013238:	f1c0 0020 	rsb	r0, r0, #32
 801323c:	9b07      	ldr	r3, [sp, #28]
 801323e:	4418      	add	r0, r3
 8013240:	f010 001f 	ands.w	r0, r0, #31
 8013244:	d047      	beq.n	80132d6 <_dtoa_r+0x7fe>
 8013246:	f1c0 0320 	rsb	r3, r0, #32
 801324a:	2b04      	cmp	r3, #4
 801324c:	dd3b      	ble.n	80132c6 <_dtoa_r+0x7ee>
 801324e:	9b07      	ldr	r3, [sp, #28]
 8013250:	f1c0 001c 	rsb	r0, r0, #28
 8013254:	4482      	add	sl, r0
 8013256:	4406      	add	r6, r0
 8013258:	4403      	add	r3, r0
 801325a:	9307      	str	r3, [sp, #28]
 801325c:	f1ba 0f00 	cmp.w	sl, #0
 8013260:	dd05      	ble.n	801326e <_dtoa_r+0x796>
 8013262:	4652      	mov	r2, sl
 8013264:	9901      	ldr	r1, [sp, #4]
 8013266:	4620      	mov	r0, r4
 8013268:	f001 f8ae 	bl	80143c8 <__lshift>
 801326c:	9001      	str	r0, [sp, #4]
 801326e:	9b07      	ldr	r3, [sp, #28]
 8013270:	2b00      	cmp	r3, #0
 8013272:	dd05      	ble.n	8013280 <_dtoa_r+0x7a8>
 8013274:	4629      	mov	r1, r5
 8013276:	461a      	mov	r2, r3
 8013278:	4620      	mov	r0, r4
 801327a:	f001 f8a5 	bl	80143c8 <__lshift>
 801327e:	4605      	mov	r5, r0
 8013280:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013282:	b353      	cbz	r3, 80132da <_dtoa_r+0x802>
 8013284:	4629      	mov	r1, r5
 8013286:	9801      	ldr	r0, [sp, #4]
 8013288:	f001 f8f2 	bl	8014470 <__mcmp>
 801328c:	2800      	cmp	r0, #0
 801328e:	da24      	bge.n	80132da <_dtoa_r+0x802>
 8013290:	2300      	movs	r3, #0
 8013292:	220a      	movs	r2, #10
 8013294:	9901      	ldr	r1, [sp, #4]
 8013296:	4620      	mov	r0, r4
 8013298:	f000 fee1 	bl	801405e <__multadd>
 801329c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801329e:	9001      	str	r0, [sp, #4]
 80132a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	f000 8142 	beq.w	801352e <_dtoa_r+0xa56>
 80132aa:	2300      	movs	r3, #0
 80132ac:	4639      	mov	r1, r7
 80132ae:	220a      	movs	r2, #10
 80132b0:	4620      	mov	r0, r4
 80132b2:	f000 fed4 	bl	801405e <__multadd>
 80132b6:	9b06      	ldr	r3, [sp, #24]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	4607      	mov	r7, r0
 80132bc:	dc4b      	bgt.n	8013356 <_dtoa_r+0x87e>
 80132be:	9b08      	ldr	r3, [sp, #32]
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	dd48      	ble.n	8013356 <_dtoa_r+0x87e>
 80132c4:	e011      	b.n	80132ea <_dtoa_r+0x812>
 80132c6:	d0c9      	beq.n	801325c <_dtoa_r+0x784>
 80132c8:	9a07      	ldr	r2, [sp, #28]
 80132ca:	331c      	adds	r3, #28
 80132cc:	441a      	add	r2, r3
 80132ce:	449a      	add	sl, r3
 80132d0:	441e      	add	r6, r3
 80132d2:	4613      	mov	r3, r2
 80132d4:	e7c1      	b.n	801325a <_dtoa_r+0x782>
 80132d6:	4603      	mov	r3, r0
 80132d8:	e7f6      	b.n	80132c8 <_dtoa_r+0x7f0>
 80132da:	f1b9 0f00 	cmp.w	r9, #0
 80132de:	dc34      	bgt.n	801334a <_dtoa_r+0x872>
 80132e0:	9b08      	ldr	r3, [sp, #32]
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	dd31      	ble.n	801334a <_dtoa_r+0x872>
 80132e6:	f8cd 9018 	str.w	r9, [sp, #24]
 80132ea:	9b06      	ldr	r3, [sp, #24]
 80132ec:	b963      	cbnz	r3, 8013308 <_dtoa_r+0x830>
 80132ee:	4629      	mov	r1, r5
 80132f0:	2205      	movs	r2, #5
 80132f2:	4620      	mov	r0, r4
 80132f4:	f000 feb3 	bl	801405e <__multadd>
 80132f8:	4601      	mov	r1, r0
 80132fa:	4605      	mov	r5, r0
 80132fc:	9801      	ldr	r0, [sp, #4]
 80132fe:	f001 f8b7 	bl	8014470 <__mcmp>
 8013302:	2800      	cmp	r0, #0
 8013304:	f73f adfc 	bgt.w	8012f00 <_dtoa_r+0x428>
 8013308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801330a:	9e04      	ldr	r6, [sp, #16]
 801330c:	ea6f 0b03 	mvn.w	fp, r3
 8013310:	f04f 0900 	mov.w	r9, #0
 8013314:	4629      	mov	r1, r5
 8013316:	4620      	mov	r0, r4
 8013318:	f000 fe8a 	bl	8014030 <_Bfree>
 801331c:	2f00      	cmp	r7, #0
 801331e:	f43f aebb 	beq.w	8013098 <_dtoa_r+0x5c0>
 8013322:	f1b9 0f00 	cmp.w	r9, #0
 8013326:	d005      	beq.n	8013334 <_dtoa_r+0x85c>
 8013328:	45b9      	cmp	r9, r7
 801332a:	d003      	beq.n	8013334 <_dtoa_r+0x85c>
 801332c:	4649      	mov	r1, r9
 801332e:	4620      	mov	r0, r4
 8013330:	f000 fe7e 	bl	8014030 <_Bfree>
 8013334:	4639      	mov	r1, r7
 8013336:	4620      	mov	r0, r4
 8013338:	f000 fe7a 	bl	8014030 <_Bfree>
 801333c:	e6ac      	b.n	8013098 <_dtoa_r+0x5c0>
 801333e:	2500      	movs	r5, #0
 8013340:	462f      	mov	r7, r5
 8013342:	e7e1      	b.n	8013308 <_dtoa_r+0x830>
 8013344:	469b      	mov	fp, r3
 8013346:	462f      	mov	r7, r5
 8013348:	e5da      	b.n	8012f00 <_dtoa_r+0x428>
 801334a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801334c:	f8cd 9018 	str.w	r9, [sp, #24]
 8013350:	2b00      	cmp	r3, #0
 8013352:	f000 80f3 	beq.w	801353c <_dtoa_r+0xa64>
 8013356:	2e00      	cmp	r6, #0
 8013358:	dd05      	ble.n	8013366 <_dtoa_r+0x88e>
 801335a:	4639      	mov	r1, r7
 801335c:	4632      	mov	r2, r6
 801335e:	4620      	mov	r0, r4
 8013360:	f001 f832 	bl	80143c8 <__lshift>
 8013364:	4607      	mov	r7, r0
 8013366:	f1b8 0f00 	cmp.w	r8, #0
 801336a:	d04c      	beq.n	8013406 <_dtoa_r+0x92e>
 801336c:	6879      	ldr	r1, [r7, #4]
 801336e:	4620      	mov	r0, r4
 8013370:	f000 fe2a 	bl	8013fc8 <_Balloc>
 8013374:	693a      	ldr	r2, [r7, #16]
 8013376:	3202      	adds	r2, #2
 8013378:	4606      	mov	r6, r0
 801337a:	0092      	lsls	r2, r2, #2
 801337c:	f107 010c 	add.w	r1, r7, #12
 8013380:	300c      	adds	r0, #12
 8013382:	f7fd fbff 	bl	8010b84 <memcpy>
 8013386:	2201      	movs	r2, #1
 8013388:	4631      	mov	r1, r6
 801338a:	4620      	mov	r0, r4
 801338c:	f001 f81c 	bl	80143c8 <__lshift>
 8013390:	9b02      	ldr	r3, [sp, #8]
 8013392:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013396:	f003 0301 	and.w	r3, r3, #1
 801339a:	46b9      	mov	r9, r7
 801339c:	9307      	str	r3, [sp, #28]
 801339e:	4607      	mov	r7, r0
 80133a0:	4629      	mov	r1, r5
 80133a2:	9801      	ldr	r0, [sp, #4]
 80133a4:	f7ff fb0a 	bl	80129bc <quorem>
 80133a8:	4649      	mov	r1, r9
 80133aa:	4606      	mov	r6, r0
 80133ac:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80133b0:	9801      	ldr	r0, [sp, #4]
 80133b2:	f001 f85d 	bl	8014470 <__mcmp>
 80133b6:	463a      	mov	r2, r7
 80133b8:	9002      	str	r0, [sp, #8]
 80133ba:	4629      	mov	r1, r5
 80133bc:	4620      	mov	r0, r4
 80133be:	f001 f871 	bl	80144a4 <__mdiff>
 80133c2:	68c3      	ldr	r3, [r0, #12]
 80133c4:	4602      	mov	r2, r0
 80133c6:	bb03      	cbnz	r3, 801340a <_dtoa_r+0x932>
 80133c8:	4601      	mov	r1, r0
 80133ca:	9009      	str	r0, [sp, #36]	; 0x24
 80133cc:	9801      	ldr	r0, [sp, #4]
 80133ce:	f001 f84f 	bl	8014470 <__mcmp>
 80133d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80133d4:	4603      	mov	r3, r0
 80133d6:	4611      	mov	r1, r2
 80133d8:	4620      	mov	r0, r4
 80133da:	9309      	str	r3, [sp, #36]	; 0x24
 80133dc:	f000 fe28 	bl	8014030 <_Bfree>
 80133e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133e2:	b9a3      	cbnz	r3, 801340e <_dtoa_r+0x936>
 80133e4:	9a08      	ldr	r2, [sp, #32]
 80133e6:	b992      	cbnz	r2, 801340e <_dtoa_r+0x936>
 80133e8:	9a07      	ldr	r2, [sp, #28]
 80133ea:	b982      	cbnz	r2, 801340e <_dtoa_r+0x936>
 80133ec:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80133f0:	d029      	beq.n	8013446 <_dtoa_r+0x96e>
 80133f2:	9b02      	ldr	r3, [sp, #8]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	dd01      	ble.n	80133fc <_dtoa_r+0x924>
 80133f8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80133fc:	f10a 0601 	add.w	r6, sl, #1
 8013400:	f88a 8000 	strb.w	r8, [sl]
 8013404:	e786      	b.n	8013314 <_dtoa_r+0x83c>
 8013406:	4638      	mov	r0, r7
 8013408:	e7c2      	b.n	8013390 <_dtoa_r+0x8b8>
 801340a:	2301      	movs	r3, #1
 801340c:	e7e3      	b.n	80133d6 <_dtoa_r+0x8fe>
 801340e:	9a02      	ldr	r2, [sp, #8]
 8013410:	2a00      	cmp	r2, #0
 8013412:	db04      	blt.n	801341e <_dtoa_r+0x946>
 8013414:	d124      	bne.n	8013460 <_dtoa_r+0x988>
 8013416:	9a08      	ldr	r2, [sp, #32]
 8013418:	bb12      	cbnz	r2, 8013460 <_dtoa_r+0x988>
 801341a:	9a07      	ldr	r2, [sp, #28]
 801341c:	bb02      	cbnz	r2, 8013460 <_dtoa_r+0x988>
 801341e:	2b00      	cmp	r3, #0
 8013420:	ddec      	ble.n	80133fc <_dtoa_r+0x924>
 8013422:	2201      	movs	r2, #1
 8013424:	9901      	ldr	r1, [sp, #4]
 8013426:	4620      	mov	r0, r4
 8013428:	f000 ffce 	bl	80143c8 <__lshift>
 801342c:	4629      	mov	r1, r5
 801342e:	9001      	str	r0, [sp, #4]
 8013430:	f001 f81e 	bl	8014470 <__mcmp>
 8013434:	2800      	cmp	r0, #0
 8013436:	dc03      	bgt.n	8013440 <_dtoa_r+0x968>
 8013438:	d1e0      	bne.n	80133fc <_dtoa_r+0x924>
 801343a:	f018 0f01 	tst.w	r8, #1
 801343e:	d0dd      	beq.n	80133fc <_dtoa_r+0x924>
 8013440:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013444:	d1d8      	bne.n	80133f8 <_dtoa_r+0x920>
 8013446:	2339      	movs	r3, #57	; 0x39
 8013448:	f10a 0601 	add.w	r6, sl, #1
 801344c:	f88a 3000 	strb.w	r3, [sl]
 8013450:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013454:	2b39      	cmp	r3, #57	; 0x39
 8013456:	f106 32ff 	add.w	r2, r6, #4294967295
 801345a:	d04c      	beq.n	80134f6 <_dtoa_r+0xa1e>
 801345c:	3301      	adds	r3, #1
 801345e:	e051      	b.n	8013504 <_dtoa_r+0xa2c>
 8013460:	2b00      	cmp	r3, #0
 8013462:	f10a 0601 	add.w	r6, sl, #1
 8013466:	dd05      	ble.n	8013474 <_dtoa_r+0x99c>
 8013468:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801346c:	d0eb      	beq.n	8013446 <_dtoa_r+0x96e>
 801346e:	f108 0801 	add.w	r8, r8, #1
 8013472:	e7c5      	b.n	8013400 <_dtoa_r+0x928>
 8013474:	9b04      	ldr	r3, [sp, #16]
 8013476:	9a06      	ldr	r2, [sp, #24]
 8013478:	f806 8c01 	strb.w	r8, [r6, #-1]
 801347c:	1af3      	subs	r3, r6, r3
 801347e:	4293      	cmp	r3, r2
 8013480:	d021      	beq.n	80134c6 <_dtoa_r+0x9ee>
 8013482:	2300      	movs	r3, #0
 8013484:	220a      	movs	r2, #10
 8013486:	9901      	ldr	r1, [sp, #4]
 8013488:	4620      	mov	r0, r4
 801348a:	f000 fde8 	bl	801405e <__multadd>
 801348e:	45b9      	cmp	r9, r7
 8013490:	9001      	str	r0, [sp, #4]
 8013492:	f04f 0300 	mov.w	r3, #0
 8013496:	f04f 020a 	mov.w	r2, #10
 801349a:	4649      	mov	r1, r9
 801349c:	4620      	mov	r0, r4
 801349e:	d105      	bne.n	80134ac <_dtoa_r+0x9d4>
 80134a0:	f000 fddd 	bl	801405e <__multadd>
 80134a4:	4681      	mov	r9, r0
 80134a6:	4607      	mov	r7, r0
 80134a8:	46b2      	mov	sl, r6
 80134aa:	e779      	b.n	80133a0 <_dtoa_r+0x8c8>
 80134ac:	f000 fdd7 	bl	801405e <__multadd>
 80134b0:	4639      	mov	r1, r7
 80134b2:	4681      	mov	r9, r0
 80134b4:	2300      	movs	r3, #0
 80134b6:	220a      	movs	r2, #10
 80134b8:	4620      	mov	r0, r4
 80134ba:	f000 fdd0 	bl	801405e <__multadd>
 80134be:	4607      	mov	r7, r0
 80134c0:	e7f2      	b.n	80134a8 <_dtoa_r+0x9d0>
 80134c2:	f04f 0900 	mov.w	r9, #0
 80134c6:	2201      	movs	r2, #1
 80134c8:	9901      	ldr	r1, [sp, #4]
 80134ca:	4620      	mov	r0, r4
 80134cc:	f000 ff7c 	bl	80143c8 <__lshift>
 80134d0:	4629      	mov	r1, r5
 80134d2:	9001      	str	r0, [sp, #4]
 80134d4:	f000 ffcc 	bl	8014470 <__mcmp>
 80134d8:	2800      	cmp	r0, #0
 80134da:	dcb9      	bgt.n	8013450 <_dtoa_r+0x978>
 80134dc:	d102      	bne.n	80134e4 <_dtoa_r+0xa0c>
 80134de:	f018 0f01 	tst.w	r8, #1
 80134e2:	d1b5      	bne.n	8013450 <_dtoa_r+0x978>
 80134e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80134e8:	2b30      	cmp	r3, #48	; 0x30
 80134ea:	f106 32ff 	add.w	r2, r6, #4294967295
 80134ee:	f47f af11 	bne.w	8013314 <_dtoa_r+0x83c>
 80134f2:	4616      	mov	r6, r2
 80134f4:	e7f6      	b.n	80134e4 <_dtoa_r+0xa0c>
 80134f6:	9b04      	ldr	r3, [sp, #16]
 80134f8:	4293      	cmp	r3, r2
 80134fa:	d105      	bne.n	8013508 <_dtoa_r+0xa30>
 80134fc:	9a04      	ldr	r2, [sp, #16]
 80134fe:	f10b 0b01 	add.w	fp, fp, #1
 8013502:	2331      	movs	r3, #49	; 0x31
 8013504:	7013      	strb	r3, [r2, #0]
 8013506:	e705      	b.n	8013314 <_dtoa_r+0x83c>
 8013508:	4616      	mov	r6, r2
 801350a:	e7a1      	b.n	8013450 <_dtoa_r+0x978>
 801350c:	4b16      	ldr	r3, [pc, #88]	; (8013568 <_dtoa_r+0xa90>)
 801350e:	f7ff bb48 	b.w	8012ba2 <_dtoa_r+0xca>
 8013512:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013514:	2b00      	cmp	r3, #0
 8013516:	f47f ab23 	bne.w	8012b60 <_dtoa_r+0x88>
 801351a:	4b14      	ldr	r3, [pc, #80]	; (801356c <_dtoa_r+0xa94>)
 801351c:	f7ff bb41 	b.w	8012ba2 <_dtoa_r+0xca>
 8013520:	9b08      	ldr	r3, [sp, #32]
 8013522:	2b01      	cmp	r3, #1
 8013524:	f77f ae3b 	ble.w	801319e <_dtoa_r+0x6c6>
 8013528:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801352c:	e64f      	b.n	80131ce <_dtoa_r+0x6f6>
 801352e:	9b06      	ldr	r3, [sp, #24]
 8013530:	2b00      	cmp	r3, #0
 8013532:	dc03      	bgt.n	801353c <_dtoa_r+0xa64>
 8013534:	9b08      	ldr	r3, [sp, #32]
 8013536:	2b02      	cmp	r3, #2
 8013538:	f73f aed7 	bgt.w	80132ea <_dtoa_r+0x812>
 801353c:	9e04      	ldr	r6, [sp, #16]
 801353e:	9801      	ldr	r0, [sp, #4]
 8013540:	4629      	mov	r1, r5
 8013542:	f7ff fa3b 	bl	80129bc <quorem>
 8013546:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801354a:	f806 8b01 	strb.w	r8, [r6], #1
 801354e:	9b04      	ldr	r3, [sp, #16]
 8013550:	9a06      	ldr	r2, [sp, #24]
 8013552:	1af3      	subs	r3, r6, r3
 8013554:	429a      	cmp	r2, r3
 8013556:	ddb4      	ble.n	80134c2 <_dtoa_r+0x9ea>
 8013558:	2300      	movs	r3, #0
 801355a:	220a      	movs	r2, #10
 801355c:	9901      	ldr	r1, [sp, #4]
 801355e:	4620      	mov	r0, r4
 8013560:	f000 fd7d 	bl	801405e <__multadd>
 8013564:	9001      	str	r0, [sp, #4]
 8013566:	e7ea      	b.n	801353e <_dtoa_r+0xa66>
 8013568:	080154c8 	.word	0x080154c8
 801356c:	08015548 	.word	0x08015548

08013570 <__sflush_r>:
 8013570:	898a      	ldrh	r2, [r1, #12]
 8013572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013576:	4605      	mov	r5, r0
 8013578:	0710      	lsls	r0, r2, #28
 801357a:	460c      	mov	r4, r1
 801357c:	d458      	bmi.n	8013630 <__sflush_r+0xc0>
 801357e:	684b      	ldr	r3, [r1, #4]
 8013580:	2b00      	cmp	r3, #0
 8013582:	dc05      	bgt.n	8013590 <__sflush_r+0x20>
 8013584:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013586:	2b00      	cmp	r3, #0
 8013588:	dc02      	bgt.n	8013590 <__sflush_r+0x20>
 801358a:	2000      	movs	r0, #0
 801358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013590:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013592:	2e00      	cmp	r6, #0
 8013594:	d0f9      	beq.n	801358a <__sflush_r+0x1a>
 8013596:	2300      	movs	r3, #0
 8013598:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801359c:	682f      	ldr	r7, [r5, #0]
 801359e:	6a21      	ldr	r1, [r4, #32]
 80135a0:	602b      	str	r3, [r5, #0]
 80135a2:	d032      	beq.n	801360a <__sflush_r+0x9a>
 80135a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135a6:	89a3      	ldrh	r3, [r4, #12]
 80135a8:	075a      	lsls	r2, r3, #29
 80135aa:	d505      	bpl.n	80135b8 <__sflush_r+0x48>
 80135ac:	6863      	ldr	r3, [r4, #4]
 80135ae:	1ac0      	subs	r0, r0, r3
 80135b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80135b2:	b10b      	cbz	r3, 80135b8 <__sflush_r+0x48>
 80135b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135b6:	1ac0      	subs	r0, r0, r3
 80135b8:	2300      	movs	r3, #0
 80135ba:	4602      	mov	r2, r0
 80135bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135be:	6a21      	ldr	r1, [r4, #32]
 80135c0:	4628      	mov	r0, r5
 80135c2:	47b0      	blx	r6
 80135c4:	1c43      	adds	r3, r0, #1
 80135c6:	89a3      	ldrh	r3, [r4, #12]
 80135c8:	d106      	bne.n	80135d8 <__sflush_r+0x68>
 80135ca:	6829      	ldr	r1, [r5, #0]
 80135cc:	291d      	cmp	r1, #29
 80135ce:	d848      	bhi.n	8013662 <__sflush_r+0xf2>
 80135d0:	4a29      	ldr	r2, [pc, #164]	; (8013678 <__sflush_r+0x108>)
 80135d2:	40ca      	lsrs	r2, r1
 80135d4:	07d6      	lsls	r6, r2, #31
 80135d6:	d544      	bpl.n	8013662 <__sflush_r+0xf2>
 80135d8:	2200      	movs	r2, #0
 80135da:	6062      	str	r2, [r4, #4]
 80135dc:	04d9      	lsls	r1, r3, #19
 80135de:	6922      	ldr	r2, [r4, #16]
 80135e0:	6022      	str	r2, [r4, #0]
 80135e2:	d504      	bpl.n	80135ee <__sflush_r+0x7e>
 80135e4:	1c42      	adds	r2, r0, #1
 80135e6:	d101      	bne.n	80135ec <__sflush_r+0x7c>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	b903      	cbnz	r3, 80135ee <__sflush_r+0x7e>
 80135ec:	6560      	str	r0, [r4, #84]	; 0x54
 80135ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135f0:	602f      	str	r7, [r5, #0]
 80135f2:	2900      	cmp	r1, #0
 80135f4:	d0c9      	beq.n	801358a <__sflush_r+0x1a>
 80135f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135fa:	4299      	cmp	r1, r3
 80135fc:	d002      	beq.n	8013604 <__sflush_r+0x94>
 80135fe:	4628      	mov	r0, r5
 8013600:	f7fd fae2 	bl	8010bc8 <_free_r>
 8013604:	2000      	movs	r0, #0
 8013606:	6360      	str	r0, [r4, #52]	; 0x34
 8013608:	e7c0      	b.n	801358c <__sflush_r+0x1c>
 801360a:	2301      	movs	r3, #1
 801360c:	4628      	mov	r0, r5
 801360e:	47b0      	blx	r6
 8013610:	1c41      	adds	r1, r0, #1
 8013612:	d1c8      	bne.n	80135a6 <__sflush_r+0x36>
 8013614:	682b      	ldr	r3, [r5, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d0c5      	beq.n	80135a6 <__sflush_r+0x36>
 801361a:	2b1d      	cmp	r3, #29
 801361c:	d001      	beq.n	8013622 <__sflush_r+0xb2>
 801361e:	2b16      	cmp	r3, #22
 8013620:	d101      	bne.n	8013626 <__sflush_r+0xb6>
 8013622:	602f      	str	r7, [r5, #0]
 8013624:	e7b1      	b.n	801358a <__sflush_r+0x1a>
 8013626:	89a3      	ldrh	r3, [r4, #12]
 8013628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801362c:	81a3      	strh	r3, [r4, #12]
 801362e:	e7ad      	b.n	801358c <__sflush_r+0x1c>
 8013630:	690f      	ldr	r7, [r1, #16]
 8013632:	2f00      	cmp	r7, #0
 8013634:	d0a9      	beq.n	801358a <__sflush_r+0x1a>
 8013636:	0793      	lsls	r3, r2, #30
 8013638:	680e      	ldr	r6, [r1, #0]
 801363a:	bf08      	it	eq
 801363c:	694b      	ldreq	r3, [r1, #20]
 801363e:	600f      	str	r7, [r1, #0]
 8013640:	bf18      	it	ne
 8013642:	2300      	movne	r3, #0
 8013644:	eba6 0807 	sub.w	r8, r6, r7
 8013648:	608b      	str	r3, [r1, #8]
 801364a:	f1b8 0f00 	cmp.w	r8, #0
 801364e:	dd9c      	ble.n	801358a <__sflush_r+0x1a>
 8013650:	4643      	mov	r3, r8
 8013652:	463a      	mov	r2, r7
 8013654:	6a21      	ldr	r1, [r4, #32]
 8013656:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013658:	4628      	mov	r0, r5
 801365a:	47b0      	blx	r6
 801365c:	2800      	cmp	r0, #0
 801365e:	dc06      	bgt.n	801366e <__sflush_r+0xfe>
 8013660:	89a3      	ldrh	r3, [r4, #12]
 8013662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013666:	81a3      	strh	r3, [r4, #12]
 8013668:	f04f 30ff 	mov.w	r0, #4294967295
 801366c:	e78e      	b.n	801358c <__sflush_r+0x1c>
 801366e:	4407      	add	r7, r0
 8013670:	eba8 0800 	sub.w	r8, r8, r0
 8013674:	e7e9      	b.n	801364a <__sflush_r+0xda>
 8013676:	bf00      	nop
 8013678:	20400001 	.word	0x20400001

0801367c <_fflush_r>:
 801367c:	b538      	push	{r3, r4, r5, lr}
 801367e:	690b      	ldr	r3, [r1, #16]
 8013680:	4605      	mov	r5, r0
 8013682:	460c      	mov	r4, r1
 8013684:	b1db      	cbz	r3, 80136be <_fflush_r+0x42>
 8013686:	b118      	cbz	r0, 8013690 <_fflush_r+0x14>
 8013688:	6983      	ldr	r3, [r0, #24]
 801368a:	b90b      	cbnz	r3, 8013690 <_fflush_r+0x14>
 801368c:	f000 f860 	bl	8013750 <__sinit>
 8013690:	4b0c      	ldr	r3, [pc, #48]	; (80136c4 <_fflush_r+0x48>)
 8013692:	429c      	cmp	r4, r3
 8013694:	d109      	bne.n	80136aa <_fflush_r+0x2e>
 8013696:	686c      	ldr	r4, [r5, #4]
 8013698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801369c:	b17b      	cbz	r3, 80136be <_fflush_r+0x42>
 801369e:	4621      	mov	r1, r4
 80136a0:	4628      	mov	r0, r5
 80136a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136a6:	f7ff bf63 	b.w	8013570 <__sflush_r>
 80136aa:	4b07      	ldr	r3, [pc, #28]	; (80136c8 <_fflush_r+0x4c>)
 80136ac:	429c      	cmp	r4, r3
 80136ae:	d101      	bne.n	80136b4 <_fflush_r+0x38>
 80136b0:	68ac      	ldr	r4, [r5, #8]
 80136b2:	e7f1      	b.n	8013698 <_fflush_r+0x1c>
 80136b4:	4b05      	ldr	r3, [pc, #20]	; (80136cc <_fflush_r+0x50>)
 80136b6:	429c      	cmp	r4, r3
 80136b8:	bf08      	it	eq
 80136ba:	68ec      	ldreq	r4, [r5, #12]
 80136bc:	e7ec      	b.n	8013698 <_fflush_r+0x1c>
 80136be:	2000      	movs	r0, #0
 80136c0:	bd38      	pop	{r3, r4, r5, pc}
 80136c2:	bf00      	nop
 80136c4:	08015578 	.word	0x08015578
 80136c8:	08015598 	.word	0x08015598
 80136cc:	08015558 	.word	0x08015558

080136d0 <std>:
 80136d0:	2300      	movs	r3, #0
 80136d2:	b510      	push	{r4, lr}
 80136d4:	4604      	mov	r4, r0
 80136d6:	e9c0 3300 	strd	r3, r3, [r0]
 80136da:	6083      	str	r3, [r0, #8]
 80136dc:	8181      	strh	r1, [r0, #12]
 80136de:	6643      	str	r3, [r0, #100]	; 0x64
 80136e0:	81c2      	strh	r2, [r0, #14]
 80136e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136e6:	6183      	str	r3, [r0, #24]
 80136e8:	4619      	mov	r1, r3
 80136ea:	2208      	movs	r2, #8
 80136ec:	305c      	adds	r0, #92	; 0x5c
 80136ee:	f7fd fa54 	bl	8010b9a <memset>
 80136f2:	4b05      	ldr	r3, [pc, #20]	; (8013708 <std+0x38>)
 80136f4:	6263      	str	r3, [r4, #36]	; 0x24
 80136f6:	4b05      	ldr	r3, [pc, #20]	; (801370c <std+0x3c>)
 80136f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80136fa:	4b05      	ldr	r3, [pc, #20]	; (8013710 <std+0x40>)
 80136fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136fe:	4b05      	ldr	r3, [pc, #20]	; (8013714 <std+0x44>)
 8013700:	6224      	str	r4, [r4, #32]
 8013702:	6323      	str	r3, [r4, #48]	; 0x30
 8013704:	bd10      	pop	{r4, pc}
 8013706:	bf00      	nop
 8013708:	08014d39 	.word	0x08014d39
 801370c:	08014d5b 	.word	0x08014d5b
 8013710:	08014d93 	.word	0x08014d93
 8013714:	08014db7 	.word	0x08014db7

08013718 <_cleanup_r>:
 8013718:	4901      	ldr	r1, [pc, #4]	; (8013720 <_cleanup_r+0x8>)
 801371a:	f000 b885 	b.w	8013828 <_fwalk_reent>
 801371e:	bf00      	nop
 8013720:	0801367d 	.word	0x0801367d

08013724 <__sfmoreglue>:
 8013724:	b570      	push	{r4, r5, r6, lr}
 8013726:	1e4a      	subs	r2, r1, #1
 8013728:	2568      	movs	r5, #104	; 0x68
 801372a:	4355      	muls	r5, r2
 801372c:	460e      	mov	r6, r1
 801372e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013732:	f7fd fa97 	bl	8010c64 <_malloc_r>
 8013736:	4604      	mov	r4, r0
 8013738:	b140      	cbz	r0, 801374c <__sfmoreglue+0x28>
 801373a:	2100      	movs	r1, #0
 801373c:	e9c0 1600 	strd	r1, r6, [r0]
 8013740:	300c      	adds	r0, #12
 8013742:	60a0      	str	r0, [r4, #8]
 8013744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013748:	f7fd fa27 	bl	8010b9a <memset>
 801374c:	4620      	mov	r0, r4
 801374e:	bd70      	pop	{r4, r5, r6, pc}

08013750 <__sinit>:
 8013750:	6983      	ldr	r3, [r0, #24]
 8013752:	b510      	push	{r4, lr}
 8013754:	4604      	mov	r4, r0
 8013756:	bb33      	cbnz	r3, 80137a6 <__sinit+0x56>
 8013758:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801375c:	6503      	str	r3, [r0, #80]	; 0x50
 801375e:	4b12      	ldr	r3, [pc, #72]	; (80137a8 <__sinit+0x58>)
 8013760:	4a12      	ldr	r2, [pc, #72]	; (80137ac <__sinit+0x5c>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	6282      	str	r2, [r0, #40]	; 0x28
 8013766:	4298      	cmp	r0, r3
 8013768:	bf04      	itt	eq
 801376a:	2301      	moveq	r3, #1
 801376c:	6183      	streq	r3, [r0, #24]
 801376e:	f000 f81f 	bl	80137b0 <__sfp>
 8013772:	6060      	str	r0, [r4, #4]
 8013774:	4620      	mov	r0, r4
 8013776:	f000 f81b 	bl	80137b0 <__sfp>
 801377a:	60a0      	str	r0, [r4, #8]
 801377c:	4620      	mov	r0, r4
 801377e:	f000 f817 	bl	80137b0 <__sfp>
 8013782:	2200      	movs	r2, #0
 8013784:	60e0      	str	r0, [r4, #12]
 8013786:	2104      	movs	r1, #4
 8013788:	6860      	ldr	r0, [r4, #4]
 801378a:	f7ff ffa1 	bl	80136d0 <std>
 801378e:	2201      	movs	r2, #1
 8013790:	2109      	movs	r1, #9
 8013792:	68a0      	ldr	r0, [r4, #8]
 8013794:	f7ff ff9c 	bl	80136d0 <std>
 8013798:	2202      	movs	r2, #2
 801379a:	2112      	movs	r1, #18
 801379c:	68e0      	ldr	r0, [r4, #12]
 801379e:	f7ff ff97 	bl	80136d0 <std>
 80137a2:	2301      	movs	r3, #1
 80137a4:	61a3      	str	r3, [r4, #24]
 80137a6:	bd10      	pop	{r4, pc}
 80137a8:	080154b4 	.word	0x080154b4
 80137ac:	08013719 	.word	0x08013719

080137b0 <__sfp>:
 80137b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137b2:	4b1b      	ldr	r3, [pc, #108]	; (8013820 <__sfp+0x70>)
 80137b4:	681e      	ldr	r6, [r3, #0]
 80137b6:	69b3      	ldr	r3, [r6, #24]
 80137b8:	4607      	mov	r7, r0
 80137ba:	b913      	cbnz	r3, 80137c2 <__sfp+0x12>
 80137bc:	4630      	mov	r0, r6
 80137be:	f7ff ffc7 	bl	8013750 <__sinit>
 80137c2:	3648      	adds	r6, #72	; 0x48
 80137c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80137c8:	3b01      	subs	r3, #1
 80137ca:	d503      	bpl.n	80137d4 <__sfp+0x24>
 80137cc:	6833      	ldr	r3, [r6, #0]
 80137ce:	b133      	cbz	r3, 80137de <__sfp+0x2e>
 80137d0:	6836      	ldr	r6, [r6, #0]
 80137d2:	e7f7      	b.n	80137c4 <__sfp+0x14>
 80137d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80137d8:	b16d      	cbz	r5, 80137f6 <__sfp+0x46>
 80137da:	3468      	adds	r4, #104	; 0x68
 80137dc:	e7f4      	b.n	80137c8 <__sfp+0x18>
 80137de:	2104      	movs	r1, #4
 80137e0:	4638      	mov	r0, r7
 80137e2:	f7ff ff9f 	bl	8013724 <__sfmoreglue>
 80137e6:	6030      	str	r0, [r6, #0]
 80137e8:	2800      	cmp	r0, #0
 80137ea:	d1f1      	bne.n	80137d0 <__sfp+0x20>
 80137ec:	230c      	movs	r3, #12
 80137ee:	603b      	str	r3, [r7, #0]
 80137f0:	4604      	mov	r4, r0
 80137f2:	4620      	mov	r0, r4
 80137f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137f6:	4b0b      	ldr	r3, [pc, #44]	; (8013824 <__sfp+0x74>)
 80137f8:	6665      	str	r5, [r4, #100]	; 0x64
 80137fa:	e9c4 5500 	strd	r5, r5, [r4]
 80137fe:	60a5      	str	r5, [r4, #8]
 8013800:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013804:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013808:	2208      	movs	r2, #8
 801380a:	4629      	mov	r1, r5
 801380c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013810:	f7fd f9c3 	bl	8010b9a <memset>
 8013814:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013818:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801381c:	e7e9      	b.n	80137f2 <__sfp+0x42>
 801381e:	bf00      	nop
 8013820:	080154b4 	.word	0x080154b4
 8013824:	ffff0001 	.word	0xffff0001

08013828 <_fwalk_reent>:
 8013828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801382c:	4680      	mov	r8, r0
 801382e:	4689      	mov	r9, r1
 8013830:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013834:	2600      	movs	r6, #0
 8013836:	b914      	cbnz	r4, 801383e <_fwalk_reent+0x16>
 8013838:	4630      	mov	r0, r6
 801383a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801383e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013842:	3f01      	subs	r7, #1
 8013844:	d501      	bpl.n	801384a <_fwalk_reent+0x22>
 8013846:	6824      	ldr	r4, [r4, #0]
 8013848:	e7f5      	b.n	8013836 <_fwalk_reent+0xe>
 801384a:	89ab      	ldrh	r3, [r5, #12]
 801384c:	2b01      	cmp	r3, #1
 801384e:	d907      	bls.n	8013860 <_fwalk_reent+0x38>
 8013850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013854:	3301      	adds	r3, #1
 8013856:	d003      	beq.n	8013860 <_fwalk_reent+0x38>
 8013858:	4629      	mov	r1, r5
 801385a:	4640      	mov	r0, r8
 801385c:	47c8      	blx	r9
 801385e:	4306      	orrs	r6, r0
 8013860:	3568      	adds	r5, #104	; 0x68
 8013862:	e7ee      	b.n	8013842 <_fwalk_reent+0x1a>

08013864 <rshift>:
 8013864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013866:	6906      	ldr	r6, [r0, #16]
 8013868:	114b      	asrs	r3, r1, #5
 801386a:	429e      	cmp	r6, r3
 801386c:	f100 0414 	add.w	r4, r0, #20
 8013870:	dd30      	ble.n	80138d4 <rshift+0x70>
 8013872:	f011 011f 	ands.w	r1, r1, #31
 8013876:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801387a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801387e:	d108      	bne.n	8013892 <rshift+0x2e>
 8013880:	4621      	mov	r1, r4
 8013882:	42b2      	cmp	r2, r6
 8013884:	460b      	mov	r3, r1
 8013886:	d211      	bcs.n	80138ac <rshift+0x48>
 8013888:	f852 3b04 	ldr.w	r3, [r2], #4
 801388c:	f841 3b04 	str.w	r3, [r1], #4
 8013890:	e7f7      	b.n	8013882 <rshift+0x1e>
 8013892:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013896:	f1c1 0c20 	rsb	ip, r1, #32
 801389a:	40cd      	lsrs	r5, r1
 801389c:	3204      	adds	r2, #4
 801389e:	4623      	mov	r3, r4
 80138a0:	42b2      	cmp	r2, r6
 80138a2:	4617      	mov	r7, r2
 80138a4:	d30c      	bcc.n	80138c0 <rshift+0x5c>
 80138a6:	601d      	str	r5, [r3, #0]
 80138a8:	b105      	cbz	r5, 80138ac <rshift+0x48>
 80138aa:	3304      	adds	r3, #4
 80138ac:	1b1a      	subs	r2, r3, r4
 80138ae:	42a3      	cmp	r3, r4
 80138b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80138b4:	bf08      	it	eq
 80138b6:	2300      	moveq	r3, #0
 80138b8:	6102      	str	r2, [r0, #16]
 80138ba:	bf08      	it	eq
 80138bc:	6143      	streq	r3, [r0, #20]
 80138be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c0:	683f      	ldr	r7, [r7, #0]
 80138c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80138c6:	433d      	orrs	r5, r7
 80138c8:	f843 5b04 	str.w	r5, [r3], #4
 80138cc:	f852 5b04 	ldr.w	r5, [r2], #4
 80138d0:	40cd      	lsrs	r5, r1
 80138d2:	e7e5      	b.n	80138a0 <rshift+0x3c>
 80138d4:	4623      	mov	r3, r4
 80138d6:	e7e9      	b.n	80138ac <rshift+0x48>

080138d8 <__hexdig_fun>:
 80138d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80138dc:	2b09      	cmp	r3, #9
 80138de:	d802      	bhi.n	80138e6 <__hexdig_fun+0xe>
 80138e0:	3820      	subs	r0, #32
 80138e2:	b2c0      	uxtb	r0, r0
 80138e4:	4770      	bx	lr
 80138e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80138ea:	2b05      	cmp	r3, #5
 80138ec:	d801      	bhi.n	80138f2 <__hexdig_fun+0x1a>
 80138ee:	3847      	subs	r0, #71	; 0x47
 80138f0:	e7f7      	b.n	80138e2 <__hexdig_fun+0xa>
 80138f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80138f6:	2b05      	cmp	r3, #5
 80138f8:	d801      	bhi.n	80138fe <__hexdig_fun+0x26>
 80138fa:	3827      	subs	r0, #39	; 0x27
 80138fc:	e7f1      	b.n	80138e2 <__hexdig_fun+0xa>
 80138fe:	2000      	movs	r0, #0
 8013900:	4770      	bx	lr

08013902 <__gethex>:
 8013902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013906:	b08b      	sub	sp, #44	; 0x2c
 8013908:	468a      	mov	sl, r1
 801390a:	9002      	str	r0, [sp, #8]
 801390c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801390e:	9306      	str	r3, [sp, #24]
 8013910:	4690      	mov	r8, r2
 8013912:	f000 fad0 	bl	8013eb6 <__localeconv_l>
 8013916:	6803      	ldr	r3, [r0, #0]
 8013918:	9303      	str	r3, [sp, #12]
 801391a:	4618      	mov	r0, r3
 801391c:	f7ec fc90 	bl	8000240 <strlen>
 8013920:	9b03      	ldr	r3, [sp, #12]
 8013922:	9001      	str	r0, [sp, #4]
 8013924:	4403      	add	r3, r0
 8013926:	f04f 0b00 	mov.w	fp, #0
 801392a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801392e:	9307      	str	r3, [sp, #28]
 8013930:	f8da 3000 	ldr.w	r3, [sl]
 8013934:	3302      	adds	r3, #2
 8013936:	461f      	mov	r7, r3
 8013938:	f813 0b01 	ldrb.w	r0, [r3], #1
 801393c:	2830      	cmp	r0, #48	; 0x30
 801393e:	d06c      	beq.n	8013a1a <__gethex+0x118>
 8013940:	f7ff ffca 	bl	80138d8 <__hexdig_fun>
 8013944:	4604      	mov	r4, r0
 8013946:	2800      	cmp	r0, #0
 8013948:	d16a      	bne.n	8013a20 <__gethex+0x11e>
 801394a:	9a01      	ldr	r2, [sp, #4]
 801394c:	9903      	ldr	r1, [sp, #12]
 801394e:	4638      	mov	r0, r7
 8013950:	f001 fa35 	bl	8014dbe <strncmp>
 8013954:	2800      	cmp	r0, #0
 8013956:	d166      	bne.n	8013a26 <__gethex+0x124>
 8013958:	9b01      	ldr	r3, [sp, #4]
 801395a:	5cf8      	ldrb	r0, [r7, r3]
 801395c:	18fe      	adds	r6, r7, r3
 801395e:	f7ff ffbb 	bl	80138d8 <__hexdig_fun>
 8013962:	2800      	cmp	r0, #0
 8013964:	d062      	beq.n	8013a2c <__gethex+0x12a>
 8013966:	4633      	mov	r3, r6
 8013968:	7818      	ldrb	r0, [r3, #0]
 801396a:	2830      	cmp	r0, #48	; 0x30
 801396c:	461f      	mov	r7, r3
 801396e:	f103 0301 	add.w	r3, r3, #1
 8013972:	d0f9      	beq.n	8013968 <__gethex+0x66>
 8013974:	f7ff ffb0 	bl	80138d8 <__hexdig_fun>
 8013978:	fab0 f580 	clz	r5, r0
 801397c:	096d      	lsrs	r5, r5, #5
 801397e:	4634      	mov	r4, r6
 8013980:	f04f 0b01 	mov.w	fp, #1
 8013984:	463a      	mov	r2, r7
 8013986:	4616      	mov	r6, r2
 8013988:	3201      	adds	r2, #1
 801398a:	7830      	ldrb	r0, [r6, #0]
 801398c:	f7ff ffa4 	bl	80138d8 <__hexdig_fun>
 8013990:	2800      	cmp	r0, #0
 8013992:	d1f8      	bne.n	8013986 <__gethex+0x84>
 8013994:	9a01      	ldr	r2, [sp, #4]
 8013996:	9903      	ldr	r1, [sp, #12]
 8013998:	4630      	mov	r0, r6
 801399a:	f001 fa10 	bl	8014dbe <strncmp>
 801399e:	b950      	cbnz	r0, 80139b6 <__gethex+0xb4>
 80139a0:	b954      	cbnz	r4, 80139b8 <__gethex+0xb6>
 80139a2:	9b01      	ldr	r3, [sp, #4]
 80139a4:	18f4      	adds	r4, r6, r3
 80139a6:	4622      	mov	r2, r4
 80139a8:	4616      	mov	r6, r2
 80139aa:	3201      	adds	r2, #1
 80139ac:	7830      	ldrb	r0, [r6, #0]
 80139ae:	f7ff ff93 	bl	80138d8 <__hexdig_fun>
 80139b2:	2800      	cmp	r0, #0
 80139b4:	d1f8      	bne.n	80139a8 <__gethex+0xa6>
 80139b6:	b10c      	cbz	r4, 80139bc <__gethex+0xba>
 80139b8:	1ba4      	subs	r4, r4, r6
 80139ba:	00a4      	lsls	r4, r4, #2
 80139bc:	7833      	ldrb	r3, [r6, #0]
 80139be:	2b50      	cmp	r3, #80	; 0x50
 80139c0:	d001      	beq.n	80139c6 <__gethex+0xc4>
 80139c2:	2b70      	cmp	r3, #112	; 0x70
 80139c4:	d140      	bne.n	8013a48 <__gethex+0x146>
 80139c6:	7873      	ldrb	r3, [r6, #1]
 80139c8:	2b2b      	cmp	r3, #43	; 0x2b
 80139ca:	d031      	beq.n	8013a30 <__gethex+0x12e>
 80139cc:	2b2d      	cmp	r3, #45	; 0x2d
 80139ce:	d033      	beq.n	8013a38 <__gethex+0x136>
 80139d0:	1c71      	adds	r1, r6, #1
 80139d2:	f04f 0900 	mov.w	r9, #0
 80139d6:	7808      	ldrb	r0, [r1, #0]
 80139d8:	f7ff ff7e 	bl	80138d8 <__hexdig_fun>
 80139dc:	1e43      	subs	r3, r0, #1
 80139de:	b2db      	uxtb	r3, r3
 80139e0:	2b18      	cmp	r3, #24
 80139e2:	d831      	bhi.n	8013a48 <__gethex+0x146>
 80139e4:	f1a0 0210 	sub.w	r2, r0, #16
 80139e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80139ec:	f7ff ff74 	bl	80138d8 <__hexdig_fun>
 80139f0:	1e43      	subs	r3, r0, #1
 80139f2:	b2db      	uxtb	r3, r3
 80139f4:	2b18      	cmp	r3, #24
 80139f6:	d922      	bls.n	8013a3e <__gethex+0x13c>
 80139f8:	f1b9 0f00 	cmp.w	r9, #0
 80139fc:	d000      	beq.n	8013a00 <__gethex+0xfe>
 80139fe:	4252      	negs	r2, r2
 8013a00:	4414      	add	r4, r2
 8013a02:	f8ca 1000 	str.w	r1, [sl]
 8013a06:	b30d      	cbz	r5, 8013a4c <__gethex+0x14a>
 8013a08:	f1bb 0f00 	cmp.w	fp, #0
 8013a0c:	bf0c      	ite	eq
 8013a0e:	2706      	moveq	r7, #6
 8013a10:	2700      	movne	r7, #0
 8013a12:	4638      	mov	r0, r7
 8013a14:	b00b      	add	sp, #44	; 0x2c
 8013a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a1a:	f10b 0b01 	add.w	fp, fp, #1
 8013a1e:	e78a      	b.n	8013936 <__gethex+0x34>
 8013a20:	2500      	movs	r5, #0
 8013a22:	462c      	mov	r4, r5
 8013a24:	e7ae      	b.n	8013984 <__gethex+0x82>
 8013a26:	463e      	mov	r6, r7
 8013a28:	2501      	movs	r5, #1
 8013a2a:	e7c7      	b.n	80139bc <__gethex+0xba>
 8013a2c:	4604      	mov	r4, r0
 8013a2e:	e7fb      	b.n	8013a28 <__gethex+0x126>
 8013a30:	f04f 0900 	mov.w	r9, #0
 8013a34:	1cb1      	adds	r1, r6, #2
 8013a36:	e7ce      	b.n	80139d6 <__gethex+0xd4>
 8013a38:	f04f 0901 	mov.w	r9, #1
 8013a3c:	e7fa      	b.n	8013a34 <__gethex+0x132>
 8013a3e:	230a      	movs	r3, #10
 8013a40:	fb03 0202 	mla	r2, r3, r2, r0
 8013a44:	3a10      	subs	r2, #16
 8013a46:	e7cf      	b.n	80139e8 <__gethex+0xe6>
 8013a48:	4631      	mov	r1, r6
 8013a4a:	e7da      	b.n	8013a02 <__gethex+0x100>
 8013a4c:	1bf3      	subs	r3, r6, r7
 8013a4e:	3b01      	subs	r3, #1
 8013a50:	4629      	mov	r1, r5
 8013a52:	2b07      	cmp	r3, #7
 8013a54:	dc49      	bgt.n	8013aea <__gethex+0x1e8>
 8013a56:	9802      	ldr	r0, [sp, #8]
 8013a58:	f000 fab6 	bl	8013fc8 <_Balloc>
 8013a5c:	9b01      	ldr	r3, [sp, #4]
 8013a5e:	f100 0914 	add.w	r9, r0, #20
 8013a62:	f04f 0b00 	mov.w	fp, #0
 8013a66:	f1c3 0301 	rsb	r3, r3, #1
 8013a6a:	4605      	mov	r5, r0
 8013a6c:	f8cd 9010 	str.w	r9, [sp, #16]
 8013a70:	46da      	mov	sl, fp
 8013a72:	9308      	str	r3, [sp, #32]
 8013a74:	42b7      	cmp	r7, r6
 8013a76:	d33b      	bcc.n	8013af0 <__gethex+0x1ee>
 8013a78:	9804      	ldr	r0, [sp, #16]
 8013a7a:	f840 ab04 	str.w	sl, [r0], #4
 8013a7e:	eba0 0009 	sub.w	r0, r0, r9
 8013a82:	1080      	asrs	r0, r0, #2
 8013a84:	6128      	str	r0, [r5, #16]
 8013a86:	0147      	lsls	r7, r0, #5
 8013a88:	4650      	mov	r0, sl
 8013a8a:	f000 fb61 	bl	8014150 <__hi0bits>
 8013a8e:	f8d8 6000 	ldr.w	r6, [r8]
 8013a92:	1a3f      	subs	r7, r7, r0
 8013a94:	42b7      	cmp	r7, r6
 8013a96:	dd64      	ble.n	8013b62 <__gethex+0x260>
 8013a98:	1bbf      	subs	r7, r7, r6
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	4628      	mov	r0, r5
 8013a9e:	f000 fe72 	bl	8014786 <__any_on>
 8013aa2:	4682      	mov	sl, r0
 8013aa4:	b178      	cbz	r0, 8013ac6 <__gethex+0x1c4>
 8013aa6:	1e7b      	subs	r3, r7, #1
 8013aa8:	1159      	asrs	r1, r3, #5
 8013aaa:	f003 021f 	and.w	r2, r3, #31
 8013aae:	f04f 0a01 	mov.w	sl, #1
 8013ab2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013ab6:	fa0a f202 	lsl.w	r2, sl, r2
 8013aba:	420a      	tst	r2, r1
 8013abc:	d003      	beq.n	8013ac6 <__gethex+0x1c4>
 8013abe:	4553      	cmp	r3, sl
 8013ac0:	dc46      	bgt.n	8013b50 <__gethex+0x24e>
 8013ac2:	f04f 0a02 	mov.w	sl, #2
 8013ac6:	4639      	mov	r1, r7
 8013ac8:	4628      	mov	r0, r5
 8013aca:	f7ff fecb 	bl	8013864 <rshift>
 8013ace:	443c      	add	r4, r7
 8013ad0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013ad4:	42a3      	cmp	r3, r4
 8013ad6:	da52      	bge.n	8013b7e <__gethex+0x27c>
 8013ad8:	4629      	mov	r1, r5
 8013ada:	9802      	ldr	r0, [sp, #8]
 8013adc:	f000 faa8 	bl	8014030 <_Bfree>
 8013ae0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	6013      	str	r3, [r2, #0]
 8013ae6:	27a3      	movs	r7, #163	; 0xa3
 8013ae8:	e793      	b.n	8013a12 <__gethex+0x110>
 8013aea:	3101      	adds	r1, #1
 8013aec:	105b      	asrs	r3, r3, #1
 8013aee:	e7b0      	b.n	8013a52 <__gethex+0x150>
 8013af0:	1e73      	subs	r3, r6, #1
 8013af2:	9305      	str	r3, [sp, #20]
 8013af4:	9a07      	ldr	r2, [sp, #28]
 8013af6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013afa:	4293      	cmp	r3, r2
 8013afc:	d018      	beq.n	8013b30 <__gethex+0x22e>
 8013afe:	f1bb 0f20 	cmp.w	fp, #32
 8013b02:	d107      	bne.n	8013b14 <__gethex+0x212>
 8013b04:	9b04      	ldr	r3, [sp, #16]
 8013b06:	f8c3 a000 	str.w	sl, [r3]
 8013b0a:	3304      	adds	r3, #4
 8013b0c:	f04f 0a00 	mov.w	sl, #0
 8013b10:	9304      	str	r3, [sp, #16]
 8013b12:	46d3      	mov	fp, sl
 8013b14:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013b18:	f7ff fede 	bl	80138d8 <__hexdig_fun>
 8013b1c:	f000 000f 	and.w	r0, r0, #15
 8013b20:	fa00 f00b 	lsl.w	r0, r0, fp
 8013b24:	ea4a 0a00 	orr.w	sl, sl, r0
 8013b28:	f10b 0b04 	add.w	fp, fp, #4
 8013b2c:	9b05      	ldr	r3, [sp, #20]
 8013b2e:	e00d      	b.n	8013b4c <__gethex+0x24a>
 8013b30:	9b05      	ldr	r3, [sp, #20]
 8013b32:	9a08      	ldr	r2, [sp, #32]
 8013b34:	4413      	add	r3, r2
 8013b36:	42bb      	cmp	r3, r7
 8013b38:	d3e1      	bcc.n	8013afe <__gethex+0x1fc>
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	9a01      	ldr	r2, [sp, #4]
 8013b3e:	9903      	ldr	r1, [sp, #12]
 8013b40:	9309      	str	r3, [sp, #36]	; 0x24
 8013b42:	f001 f93c 	bl	8014dbe <strncmp>
 8013b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b48:	2800      	cmp	r0, #0
 8013b4a:	d1d8      	bne.n	8013afe <__gethex+0x1fc>
 8013b4c:	461e      	mov	r6, r3
 8013b4e:	e791      	b.n	8013a74 <__gethex+0x172>
 8013b50:	1eb9      	subs	r1, r7, #2
 8013b52:	4628      	mov	r0, r5
 8013b54:	f000 fe17 	bl	8014786 <__any_on>
 8013b58:	2800      	cmp	r0, #0
 8013b5a:	d0b2      	beq.n	8013ac2 <__gethex+0x1c0>
 8013b5c:	f04f 0a03 	mov.w	sl, #3
 8013b60:	e7b1      	b.n	8013ac6 <__gethex+0x1c4>
 8013b62:	da09      	bge.n	8013b78 <__gethex+0x276>
 8013b64:	1bf7      	subs	r7, r6, r7
 8013b66:	4629      	mov	r1, r5
 8013b68:	463a      	mov	r2, r7
 8013b6a:	9802      	ldr	r0, [sp, #8]
 8013b6c:	f000 fc2c 	bl	80143c8 <__lshift>
 8013b70:	1be4      	subs	r4, r4, r7
 8013b72:	4605      	mov	r5, r0
 8013b74:	f100 0914 	add.w	r9, r0, #20
 8013b78:	f04f 0a00 	mov.w	sl, #0
 8013b7c:	e7a8      	b.n	8013ad0 <__gethex+0x1ce>
 8013b7e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013b82:	42a0      	cmp	r0, r4
 8013b84:	dd6a      	ble.n	8013c5c <__gethex+0x35a>
 8013b86:	1b04      	subs	r4, r0, r4
 8013b88:	42a6      	cmp	r6, r4
 8013b8a:	dc2e      	bgt.n	8013bea <__gethex+0x2e8>
 8013b8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013b90:	2b02      	cmp	r3, #2
 8013b92:	d022      	beq.n	8013bda <__gethex+0x2d8>
 8013b94:	2b03      	cmp	r3, #3
 8013b96:	d024      	beq.n	8013be2 <__gethex+0x2e0>
 8013b98:	2b01      	cmp	r3, #1
 8013b9a:	d115      	bne.n	8013bc8 <__gethex+0x2c6>
 8013b9c:	42a6      	cmp	r6, r4
 8013b9e:	d113      	bne.n	8013bc8 <__gethex+0x2c6>
 8013ba0:	2e01      	cmp	r6, #1
 8013ba2:	dc0b      	bgt.n	8013bbc <__gethex+0x2ba>
 8013ba4:	9a06      	ldr	r2, [sp, #24]
 8013ba6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013baa:	6013      	str	r3, [r2, #0]
 8013bac:	2301      	movs	r3, #1
 8013bae:	612b      	str	r3, [r5, #16]
 8013bb0:	f8c9 3000 	str.w	r3, [r9]
 8013bb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013bb6:	2762      	movs	r7, #98	; 0x62
 8013bb8:	601d      	str	r5, [r3, #0]
 8013bba:	e72a      	b.n	8013a12 <__gethex+0x110>
 8013bbc:	1e71      	subs	r1, r6, #1
 8013bbe:	4628      	mov	r0, r5
 8013bc0:	f000 fde1 	bl	8014786 <__any_on>
 8013bc4:	2800      	cmp	r0, #0
 8013bc6:	d1ed      	bne.n	8013ba4 <__gethex+0x2a2>
 8013bc8:	4629      	mov	r1, r5
 8013bca:	9802      	ldr	r0, [sp, #8]
 8013bcc:	f000 fa30 	bl	8014030 <_Bfree>
 8013bd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	6013      	str	r3, [r2, #0]
 8013bd6:	2750      	movs	r7, #80	; 0x50
 8013bd8:	e71b      	b.n	8013a12 <__gethex+0x110>
 8013bda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d0e1      	beq.n	8013ba4 <__gethex+0x2a2>
 8013be0:	e7f2      	b.n	8013bc8 <__gethex+0x2c6>
 8013be2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d1dd      	bne.n	8013ba4 <__gethex+0x2a2>
 8013be8:	e7ee      	b.n	8013bc8 <__gethex+0x2c6>
 8013bea:	1e67      	subs	r7, r4, #1
 8013bec:	f1ba 0f00 	cmp.w	sl, #0
 8013bf0:	d131      	bne.n	8013c56 <__gethex+0x354>
 8013bf2:	b127      	cbz	r7, 8013bfe <__gethex+0x2fc>
 8013bf4:	4639      	mov	r1, r7
 8013bf6:	4628      	mov	r0, r5
 8013bf8:	f000 fdc5 	bl	8014786 <__any_on>
 8013bfc:	4682      	mov	sl, r0
 8013bfe:	117a      	asrs	r2, r7, #5
 8013c00:	2301      	movs	r3, #1
 8013c02:	f007 071f 	and.w	r7, r7, #31
 8013c06:	fa03 f707 	lsl.w	r7, r3, r7
 8013c0a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013c0e:	4621      	mov	r1, r4
 8013c10:	421f      	tst	r7, r3
 8013c12:	4628      	mov	r0, r5
 8013c14:	bf18      	it	ne
 8013c16:	f04a 0a02 	orrne.w	sl, sl, #2
 8013c1a:	1b36      	subs	r6, r6, r4
 8013c1c:	f7ff fe22 	bl	8013864 <rshift>
 8013c20:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013c24:	2702      	movs	r7, #2
 8013c26:	f1ba 0f00 	cmp.w	sl, #0
 8013c2a:	d048      	beq.n	8013cbe <__gethex+0x3bc>
 8013c2c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013c30:	2b02      	cmp	r3, #2
 8013c32:	d015      	beq.n	8013c60 <__gethex+0x35e>
 8013c34:	2b03      	cmp	r3, #3
 8013c36:	d017      	beq.n	8013c68 <__gethex+0x366>
 8013c38:	2b01      	cmp	r3, #1
 8013c3a:	d109      	bne.n	8013c50 <__gethex+0x34e>
 8013c3c:	f01a 0f02 	tst.w	sl, #2
 8013c40:	d006      	beq.n	8013c50 <__gethex+0x34e>
 8013c42:	f8d9 3000 	ldr.w	r3, [r9]
 8013c46:	ea4a 0a03 	orr.w	sl, sl, r3
 8013c4a:	f01a 0f01 	tst.w	sl, #1
 8013c4e:	d10e      	bne.n	8013c6e <__gethex+0x36c>
 8013c50:	f047 0710 	orr.w	r7, r7, #16
 8013c54:	e033      	b.n	8013cbe <__gethex+0x3bc>
 8013c56:	f04f 0a01 	mov.w	sl, #1
 8013c5a:	e7d0      	b.n	8013bfe <__gethex+0x2fc>
 8013c5c:	2701      	movs	r7, #1
 8013c5e:	e7e2      	b.n	8013c26 <__gethex+0x324>
 8013c60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c62:	f1c3 0301 	rsb	r3, r3, #1
 8013c66:	9315      	str	r3, [sp, #84]	; 0x54
 8013c68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d0f0      	beq.n	8013c50 <__gethex+0x34e>
 8013c6e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013c72:	f105 0314 	add.w	r3, r5, #20
 8013c76:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013c7a:	eb03 010a 	add.w	r1, r3, sl
 8013c7e:	f04f 0c00 	mov.w	ip, #0
 8013c82:	4618      	mov	r0, r3
 8013c84:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c88:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013c8c:	d01c      	beq.n	8013cc8 <__gethex+0x3c6>
 8013c8e:	3201      	adds	r2, #1
 8013c90:	6002      	str	r2, [r0, #0]
 8013c92:	2f02      	cmp	r7, #2
 8013c94:	f105 0314 	add.w	r3, r5, #20
 8013c98:	d138      	bne.n	8013d0c <__gethex+0x40a>
 8013c9a:	f8d8 2000 	ldr.w	r2, [r8]
 8013c9e:	3a01      	subs	r2, #1
 8013ca0:	42b2      	cmp	r2, r6
 8013ca2:	d10a      	bne.n	8013cba <__gethex+0x3b8>
 8013ca4:	1171      	asrs	r1, r6, #5
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	f006 061f 	and.w	r6, r6, #31
 8013cac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013cb0:	fa02 f606 	lsl.w	r6, r2, r6
 8013cb4:	421e      	tst	r6, r3
 8013cb6:	bf18      	it	ne
 8013cb8:	4617      	movne	r7, r2
 8013cba:	f047 0720 	orr.w	r7, r7, #32
 8013cbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013cc0:	601d      	str	r5, [r3, #0]
 8013cc2:	9b06      	ldr	r3, [sp, #24]
 8013cc4:	601c      	str	r4, [r3, #0]
 8013cc6:	e6a4      	b.n	8013a12 <__gethex+0x110>
 8013cc8:	4299      	cmp	r1, r3
 8013cca:	f843 cc04 	str.w	ip, [r3, #-4]
 8013cce:	d8d8      	bhi.n	8013c82 <__gethex+0x380>
 8013cd0:	68ab      	ldr	r3, [r5, #8]
 8013cd2:	4599      	cmp	r9, r3
 8013cd4:	db12      	blt.n	8013cfc <__gethex+0x3fa>
 8013cd6:	6869      	ldr	r1, [r5, #4]
 8013cd8:	9802      	ldr	r0, [sp, #8]
 8013cda:	3101      	adds	r1, #1
 8013cdc:	f000 f974 	bl	8013fc8 <_Balloc>
 8013ce0:	692a      	ldr	r2, [r5, #16]
 8013ce2:	3202      	adds	r2, #2
 8013ce4:	f105 010c 	add.w	r1, r5, #12
 8013ce8:	4683      	mov	fp, r0
 8013cea:	0092      	lsls	r2, r2, #2
 8013cec:	300c      	adds	r0, #12
 8013cee:	f7fc ff49 	bl	8010b84 <memcpy>
 8013cf2:	4629      	mov	r1, r5
 8013cf4:	9802      	ldr	r0, [sp, #8]
 8013cf6:	f000 f99b 	bl	8014030 <_Bfree>
 8013cfa:	465d      	mov	r5, fp
 8013cfc:	692b      	ldr	r3, [r5, #16]
 8013cfe:	1c5a      	adds	r2, r3, #1
 8013d00:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013d04:	612a      	str	r2, [r5, #16]
 8013d06:	2201      	movs	r2, #1
 8013d08:	615a      	str	r2, [r3, #20]
 8013d0a:	e7c2      	b.n	8013c92 <__gethex+0x390>
 8013d0c:	692a      	ldr	r2, [r5, #16]
 8013d0e:	454a      	cmp	r2, r9
 8013d10:	dd0b      	ble.n	8013d2a <__gethex+0x428>
 8013d12:	2101      	movs	r1, #1
 8013d14:	4628      	mov	r0, r5
 8013d16:	f7ff fda5 	bl	8013864 <rshift>
 8013d1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013d1e:	3401      	adds	r4, #1
 8013d20:	42a3      	cmp	r3, r4
 8013d22:	f6ff aed9 	blt.w	8013ad8 <__gethex+0x1d6>
 8013d26:	2701      	movs	r7, #1
 8013d28:	e7c7      	b.n	8013cba <__gethex+0x3b8>
 8013d2a:	f016 061f 	ands.w	r6, r6, #31
 8013d2e:	d0fa      	beq.n	8013d26 <__gethex+0x424>
 8013d30:	449a      	add	sl, r3
 8013d32:	f1c6 0620 	rsb	r6, r6, #32
 8013d36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013d3a:	f000 fa09 	bl	8014150 <__hi0bits>
 8013d3e:	42b0      	cmp	r0, r6
 8013d40:	dbe7      	blt.n	8013d12 <__gethex+0x410>
 8013d42:	e7f0      	b.n	8013d26 <__gethex+0x424>

08013d44 <L_shift>:
 8013d44:	f1c2 0208 	rsb	r2, r2, #8
 8013d48:	0092      	lsls	r2, r2, #2
 8013d4a:	b570      	push	{r4, r5, r6, lr}
 8013d4c:	f1c2 0620 	rsb	r6, r2, #32
 8013d50:	6843      	ldr	r3, [r0, #4]
 8013d52:	6804      	ldr	r4, [r0, #0]
 8013d54:	fa03 f506 	lsl.w	r5, r3, r6
 8013d58:	432c      	orrs	r4, r5
 8013d5a:	40d3      	lsrs	r3, r2
 8013d5c:	6004      	str	r4, [r0, #0]
 8013d5e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013d62:	4288      	cmp	r0, r1
 8013d64:	d3f4      	bcc.n	8013d50 <L_shift+0xc>
 8013d66:	bd70      	pop	{r4, r5, r6, pc}

08013d68 <__match>:
 8013d68:	b530      	push	{r4, r5, lr}
 8013d6a:	6803      	ldr	r3, [r0, #0]
 8013d6c:	3301      	adds	r3, #1
 8013d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d72:	b914      	cbnz	r4, 8013d7a <__match+0x12>
 8013d74:	6003      	str	r3, [r0, #0]
 8013d76:	2001      	movs	r0, #1
 8013d78:	bd30      	pop	{r4, r5, pc}
 8013d7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d7e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013d82:	2d19      	cmp	r5, #25
 8013d84:	bf98      	it	ls
 8013d86:	3220      	addls	r2, #32
 8013d88:	42a2      	cmp	r2, r4
 8013d8a:	d0f0      	beq.n	8013d6e <__match+0x6>
 8013d8c:	2000      	movs	r0, #0
 8013d8e:	e7f3      	b.n	8013d78 <__match+0x10>

08013d90 <__hexnan>:
 8013d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d94:	680b      	ldr	r3, [r1, #0]
 8013d96:	6801      	ldr	r1, [r0, #0]
 8013d98:	115f      	asrs	r7, r3, #5
 8013d9a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8013d9e:	f013 031f 	ands.w	r3, r3, #31
 8013da2:	b087      	sub	sp, #28
 8013da4:	bf18      	it	ne
 8013da6:	3704      	addne	r7, #4
 8013da8:	2500      	movs	r5, #0
 8013daa:	1f3e      	subs	r6, r7, #4
 8013dac:	4682      	mov	sl, r0
 8013dae:	4690      	mov	r8, r2
 8013db0:	9301      	str	r3, [sp, #4]
 8013db2:	f847 5c04 	str.w	r5, [r7, #-4]
 8013db6:	46b1      	mov	r9, r6
 8013db8:	4634      	mov	r4, r6
 8013dba:	9502      	str	r5, [sp, #8]
 8013dbc:	46ab      	mov	fp, r5
 8013dbe:	784a      	ldrb	r2, [r1, #1]
 8013dc0:	1c4b      	adds	r3, r1, #1
 8013dc2:	9303      	str	r3, [sp, #12]
 8013dc4:	b342      	cbz	r2, 8013e18 <__hexnan+0x88>
 8013dc6:	4610      	mov	r0, r2
 8013dc8:	9105      	str	r1, [sp, #20]
 8013dca:	9204      	str	r2, [sp, #16]
 8013dcc:	f7ff fd84 	bl	80138d8 <__hexdig_fun>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d143      	bne.n	8013e5c <__hexnan+0xcc>
 8013dd4:	9a04      	ldr	r2, [sp, #16]
 8013dd6:	9905      	ldr	r1, [sp, #20]
 8013dd8:	2a20      	cmp	r2, #32
 8013dda:	d818      	bhi.n	8013e0e <__hexnan+0x7e>
 8013ddc:	9b02      	ldr	r3, [sp, #8]
 8013dde:	459b      	cmp	fp, r3
 8013de0:	dd13      	ble.n	8013e0a <__hexnan+0x7a>
 8013de2:	454c      	cmp	r4, r9
 8013de4:	d206      	bcs.n	8013df4 <__hexnan+0x64>
 8013de6:	2d07      	cmp	r5, #7
 8013de8:	dc04      	bgt.n	8013df4 <__hexnan+0x64>
 8013dea:	462a      	mov	r2, r5
 8013dec:	4649      	mov	r1, r9
 8013dee:	4620      	mov	r0, r4
 8013df0:	f7ff ffa8 	bl	8013d44 <L_shift>
 8013df4:	4544      	cmp	r4, r8
 8013df6:	d944      	bls.n	8013e82 <__hexnan+0xf2>
 8013df8:	2300      	movs	r3, #0
 8013dfa:	f1a4 0904 	sub.w	r9, r4, #4
 8013dfe:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e02:	f8cd b008 	str.w	fp, [sp, #8]
 8013e06:	464c      	mov	r4, r9
 8013e08:	461d      	mov	r5, r3
 8013e0a:	9903      	ldr	r1, [sp, #12]
 8013e0c:	e7d7      	b.n	8013dbe <__hexnan+0x2e>
 8013e0e:	2a29      	cmp	r2, #41	; 0x29
 8013e10:	d14a      	bne.n	8013ea8 <__hexnan+0x118>
 8013e12:	3102      	adds	r1, #2
 8013e14:	f8ca 1000 	str.w	r1, [sl]
 8013e18:	f1bb 0f00 	cmp.w	fp, #0
 8013e1c:	d044      	beq.n	8013ea8 <__hexnan+0x118>
 8013e1e:	454c      	cmp	r4, r9
 8013e20:	d206      	bcs.n	8013e30 <__hexnan+0xa0>
 8013e22:	2d07      	cmp	r5, #7
 8013e24:	dc04      	bgt.n	8013e30 <__hexnan+0xa0>
 8013e26:	462a      	mov	r2, r5
 8013e28:	4649      	mov	r1, r9
 8013e2a:	4620      	mov	r0, r4
 8013e2c:	f7ff ff8a 	bl	8013d44 <L_shift>
 8013e30:	4544      	cmp	r4, r8
 8013e32:	d928      	bls.n	8013e86 <__hexnan+0xf6>
 8013e34:	4643      	mov	r3, r8
 8013e36:	f854 2b04 	ldr.w	r2, [r4], #4
 8013e3a:	f843 2b04 	str.w	r2, [r3], #4
 8013e3e:	42a6      	cmp	r6, r4
 8013e40:	d2f9      	bcs.n	8013e36 <__hexnan+0xa6>
 8013e42:	2200      	movs	r2, #0
 8013e44:	f843 2b04 	str.w	r2, [r3], #4
 8013e48:	429e      	cmp	r6, r3
 8013e4a:	d2fb      	bcs.n	8013e44 <__hexnan+0xb4>
 8013e4c:	6833      	ldr	r3, [r6, #0]
 8013e4e:	b91b      	cbnz	r3, 8013e58 <__hexnan+0xc8>
 8013e50:	4546      	cmp	r6, r8
 8013e52:	d127      	bne.n	8013ea4 <__hexnan+0x114>
 8013e54:	2301      	movs	r3, #1
 8013e56:	6033      	str	r3, [r6, #0]
 8013e58:	2005      	movs	r0, #5
 8013e5a:	e026      	b.n	8013eaa <__hexnan+0x11a>
 8013e5c:	3501      	adds	r5, #1
 8013e5e:	2d08      	cmp	r5, #8
 8013e60:	f10b 0b01 	add.w	fp, fp, #1
 8013e64:	dd06      	ble.n	8013e74 <__hexnan+0xe4>
 8013e66:	4544      	cmp	r4, r8
 8013e68:	d9cf      	bls.n	8013e0a <__hexnan+0x7a>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013e70:	2501      	movs	r5, #1
 8013e72:	3c04      	subs	r4, #4
 8013e74:	6822      	ldr	r2, [r4, #0]
 8013e76:	f000 000f 	and.w	r0, r0, #15
 8013e7a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013e7e:	6020      	str	r0, [r4, #0]
 8013e80:	e7c3      	b.n	8013e0a <__hexnan+0x7a>
 8013e82:	2508      	movs	r5, #8
 8013e84:	e7c1      	b.n	8013e0a <__hexnan+0x7a>
 8013e86:	9b01      	ldr	r3, [sp, #4]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d0df      	beq.n	8013e4c <__hexnan+0xbc>
 8013e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e90:	f1c3 0320 	rsb	r3, r3, #32
 8013e94:	fa22 f303 	lsr.w	r3, r2, r3
 8013e98:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013e9c:	401a      	ands	r2, r3
 8013e9e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013ea2:	e7d3      	b.n	8013e4c <__hexnan+0xbc>
 8013ea4:	3e04      	subs	r6, #4
 8013ea6:	e7d1      	b.n	8013e4c <__hexnan+0xbc>
 8013ea8:	2004      	movs	r0, #4
 8013eaa:	b007      	add	sp, #28
 8013eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013eb0 <__locale_ctype_ptr_l>:
 8013eb0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013eb4:	4770      	bx	lr

08013eb6 <__localeconv_l>:
 8013eb6:	30f0      	adds	r0, #240	; 0xf0
 8013eb8:	4770      	bx	lr
	...

08013ebc <_localeconv_r>:
 8013ebc:	4b04      	ldr	r3, [pc, #16]	; (8013ed0 <_localeconv_r+0x14>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	6a18      	ldr	r0, [r3, #32]
 8013ec2:	4b04      	ldr	r3, [pc, #16]	; (8013ed4 <_localeconv_r+0x18>)
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	bf08      	it	eq
 8013ec8:	4618      	moveq	r0, r3
 8013eca:	30f0      	adds	r0, #240	; 0xf0
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	2000037c 	.word	0x2000037c
 8013ed4:	200003e0 	.word	0x200003e0

08013ed8 <__swhatbuf_r>:
 8013ed8:	b570      	push	{r4, r5, r6, lr}
 8013eda:	460e      	mov	r6, r1
 8013edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ee0:	2900      	cmp	r1, #0
 8013ee2:	b096      	sub	sp, #88	; 0x58
 8013ee4:	4614      	mov	r4, r2
 8013ee6:	461d      	mov	r5, r3
 8013ee8:	da07      	bge.n	8013efa <__swhatbuf_r+0x22>
 8013eea:	2300      	movs	r3, #0
 8013eec:	602b      	str	r3, [r5, #0]
 8013eee:	89b3      	ldrh	r3, [r6, #12]
 8013ef0:	061a      	lsls	r2, r3, #24
 8013ef2:	d410      	bmi.n	8013f16 <__swhatbuf_r+0x3e>
 8013ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ef8:	e00e      	b.n	8013f18 <__swhatbuf_r+0x40>
 8013efa:	466a      	mov	r2, sp
 8013efc:	f000 ffa0 	bl	8014e40 <_fstat_r>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	dbf2      	blt.n	8013eea <__swhatbuf_r+0x12>
 8013f04:	9a01      	ldr	r2, [sp, #4]
 8013f06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013f0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013f0e:	425a      	negs	r2, r3
 8013f10:	415a      	adcs	r2, r3
 8013f12:	602a      	str	r2, [r5, #0]
 8013f14:	e7ee      	b.n	8013ef4 <__swhatbuf_r+0x1c>
 8013f16:	2340      	movs	r3, #64	; 0x40
 8013f18:	2000      	movs	r0, #0
 8013f1a:	6023      	str	r3, [r4, #0]
 8013f1c:	b016      	add	sp, #88	; 0x58
 8013f1e:	bd70      	pop	{r4, r5, r6, pc}

08013f20 <__smakebuf_r>:
 8013f20:	898b      	ldrh	r3, [r1, #12]
 8013f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f24:	079d      	lsls	r5, r3, #30
 8013f26:	4606      	mov	r6, r0
 8013f28:	460c      	mov	r4, r1
 8013f2a:	d507      	bpl.n	8013f3c <__smakebuf_r+0x1c>
 8013f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f30:	6023      	str	r3, [r4, #0]
 8013f32:	6123      	str	r3, [r4, #16]
 8013f34:	2301      	movs	r3, #1
 8013f36:	6163      	str	r3, [r4, #20]
 8013f38:	b002      	add	sp, #8
 8013f3a:	bd70      	pop	{r4, r5, r6, pc}
 8013f3c:	ab01      	add	r3, sp, #4
 8013f3e:	466a      	mov	r2, sp
 8013f40:	f7ff ffca 	bl	8013ed8 <__swhatbuf_r>
 8013f44:	9900      	ldr	r1, [sp, #0]
 8013f46:	4605      	mov	r5, r0
 8013f48:	4630      	mov	r0, r6
 8013f4a:	f7fc fe8b 	bl	8010c64 <_malloc_r>
 8013f4e:	b948      	cbnz	r0, 8013f64 <__smakebuf_r+0x44>
 8013f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f54:	059a      	lsls	r2, r3, #22
 8013f56:	d4ef      	bmi.n	8013f38 <__smakebuf_r+0x18>
 8013f58:	f023 0303 	bic.w	r3, r3, #3
 8013f5c:	f043 0302 	orr.w	r3, r3, #2
 8013f60:	81a3      	strh	r3, [r4, #12]
 8013f62:	e7e3      	b.n	8013f2c <__smakebuf_r+0xc>
 8013f64:	4b0d      	ldr	r3, [pc, #52]	; (8013f9c <__smakebuf_r+0x7c>)
 8013f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f68:	89a3      	ldrh	r3, [r4, #12]
 8013f6a:	6020      	str	r0, [r4, #0]
 8013f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f70:	81a3      	strh	r3, [r4, #12]
 8013f72:	9b00      	ldr	r3, [sp, #0]
 8013f74:	6163      	str	r3, [r4, #20]
 8013f76:	9b01      	ldr	r3, [sp, #4]
 8013f78:	6120      	str	r0, [r4, #16]
 8013f7a:	b15b      	cbz	r3, 8013f94 <__smakebuf_r+0x74>
 8013f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f80:	4630      	mov	r0, r6
 8013f82:	f000 ff6f 	bl	8014e64 <_isatty_r>
 8013f86:	b128      	cbz	r0, 8013f94 <__smakebuf_r+0x74>
 8013f88:	89a3      	ldrh	r3, [r4, #12]
 8013f8a:	f023 0303 	bic.w	r3, r3, #3
 8013f8e:	f043 0301 	orr.w	r3, r3, #1
 8013f92:	81a3      	strh	r3, [r4, #12]
 8013f94:	89a3      	ldrh	r3, [r4, #12]
 8013f96:	431d      	orrs	r5, r3
 8013f98:	81a5      	strh	r5, [r4, #12]
 8013f9a:	e7cd      	b.n	8013f38 <__smakebuf_r+0x18>
 8013f9c:	08013719 	.word	0x08013719

08013fa0 <__ascii_mbtowc>:
 8013fa0:	b082      	sub	sp, #8
 8013fa2:	b901      	cbnz	r1, 8013fa6 <__ascii_mbtowc+0x6>
 8013fa4:	a901      	add	r1, sp, #4
 8013fa6:	b142      	cbz	r2, 8013fba <__ascii_mbtowc+0x1a>
 8013fa8:	b14b      	cbz	r3, 8013fbe <__ascii_mbtowc+0x1e>
 8013faa:	7813      	ldrb	r3, [r2, #0]
 8013fac:	600b      	str	r3, [r1, #0]
 8013fae:	7812      	ldrb	r2, [r2, #0]
 8013fb0:	1c10      	adds	r0, r2, #0
 8013fb2:	bf18      	it	ne
 8013fb4:	2001      	movne	r0, #1
 8013fb6:	b002      	add	sp, #8
 8013fb8:	4770      	bx	lr
 8013fba:	4610      	mov	r0, r2
 8013fbc:	e7fb      	b.n	8013fb6 <__ascii_mbtowc+0x16>
 8013fbe:	f06f 0001 	mvn.w	r0, #1
 8013fc2:	e7f8      	b.n	8013fb6 <__ascii_mbtowc+0x16>

08013fc4 <__malloc_lock>:
 8013fc4:	4770      	bx	lr

08013fc6 <__malloc_unlock>:
 8013fc6:	4770      	bx	lr

08013fc8 <_Balloc>:
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013fcc:	4604      	mov	r4, r0
 8013fce:	460e      	mov	r6, r1
 8013fd0:	b93d      	cbnz	r5, 8013fe2 <_Balloc+0x1a>
 8013fd2:	2010      	movs	r0, #16
 8013fd4:	f7fc fdce 	bl	8010b74 <malloc>
 8013fd8:	6260      	str	r0, [r4, #36]	; 0x24
 8013fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013fde:	6005      	str	r5, [r0, #0]
 8013fe0:	60c5      	str	r5, [r0, #12]
 8013fe2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013fe4:	68eb      	ldr	r3, [r5, #12]
 8013fe6:	b183      	cbz	r3, 801400a <_Balloc+0x42>
 8013fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fea:	68db      	ldr	r3, [r3, #12]
 8013fec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013ff0:	b9b8      	cbnz	r0, 8014022 <_Balloc+0x5a>
 8013ff2:	2101      	movs	r1, #1
 8013ff4:	fa01 f506 	lsl.w	r5, r1, r6
 8013ff8:	1d6a      	adds	r2, r5, #5
 8013ffa:	0092      	lsls	r2, r2, #2
 8013ffc:	4620      	mov	r0, r4
 8013ffe:	f7fc fdd4 	bl	8010baa <_calloc_r>
 8014002:	b160      	cbz	r0, 801401e <_Balloc+0x56>
 8014004:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8014008:	e00e      	b.n	8014028 <_Balloc+0x60>
 801400a:	2221      	movs	r2, #33	; 0x21
 801400c:	2104      	movs	r1, #4
 801400e:	4620      	mov	r0, r4
 8014010:	f7fc fdcb 	bl	8010baa <_calloc_r>
 8014014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014016:	60e8      	str	r0, [r5, #12]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d1e4      	bne.n	8013fe8 <_Balloc+0x20>
 801401e:	2000      	movs	r0, #0
 8014020:	bd70      	pop	{r4, r5, r6, pc}
 8014022:	6802      	ldr	r2, [r0, #0]
 8014024:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014028:	2300      	movs	r3, #0
 801402a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801402e:	e7f7      	b.n	8014020 <_Balloc+0x58>

08014030 <_Bfree>:
 8014030:	b570      	push	{r4, r5, r6, lr}
 8014032:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8014034:	4606      	mov	r6, r0
 8014036:	460d      	mov	r5, r1
 8014038:	b93c      	cbnz	r4, 801404a <_Bfree+0x1a>
 801403a:	2010      	movs	r0, #16
 801403c:	f7fc fd9a 	bl	8010b74 <malloc>
 8014040:	6270      	str	r0, [r6, #36]	; 0x24
 8014042:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014046:	6004      	str	r4, [r0, #0]
 8014048:	60c4      	str	r4, [r0, #12]
 801404a:	b13d      	cbz	r5, 801405c <_Bfree+0x2c>
 801404c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801404e:	686a      	ldr	r2, [r5, #4]
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014056:	6029      	str	r1, [r5, #0]
 8014058:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801405c:	bd70      	pop	{r4, r5, r6, pc}

0801405e <__multadd>:
 801405e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014062:	690d      	ldr	r5, [r1, #16]
 8014064:	461f      	mov	r7, r3
 8014066:	4606      	mov	r6, r0
 8014068:	460c      	mov	r4, r1
 801406a:	f101 0c14 	add.w	ip, r1, #20
 801406e:	2300      	movs	r3, #0
 8014070:	f8dc 0000 	ldr.w	r0, [ip]
 8014074:	b281      	uxth	r1, r0
 8014076:	fb02 7101 	mla	r1, r2, r1, r7
 801407a:	0c0f      	lsrs	r7, r1, #16
 801407c:	0c00      	lsrs	r0, r0, #16
 801407e:	fb02 7000 	mla	r0, r2, r0, r7
 8014082:	b289      	uxth	r1, r1
 8014084:	3301      	adds	r3, #1
 8014086:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801408a:	429d      	cmp	r5, r3
 801408c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014090:	f84c 1b04 	str.w	r1, [ip], #4
 8014094:	dcec      	bgt.n	8014070 <__multadd+0x12>
 8014096:	b1d7      	cbz	r7, 80140ce <__multadd+0x70>
 8014098:	68a3      	ldr	r3, [r4, #8]
 801409a:	42ab      	cmp	r3, r5
 801409c:	dc12      	bgt.n	80140c4 <__multadd+0x66>
 801409e:	6861      	ldr	r1, [r4, #4]
 80140a0:	4630      	mov	r0, r6
 80140a2:	3101      	adds	r1, #1
 80140a4:	f7ff ff90 	bl	8013fc8 <_Balloc>
 80140a8:	6922      	ldr	r2, [r4, #16]
 80140aa:	3202      	adds	r2, #2
 80140ac:	f104 010c 	add.w	r1, r4, #12
 80140b0:	4680      	mov	r8, r0
 80140b2:	0092      	lsls	r2, r2, #2
 80140b4:	300c      	adds	r0, #12
 80140b6:	f7fc fd65 	bl	8010b84 <memcpy>
 80140ba:	4621      	mov	r1, r4
 80140bc:	4630      	mov	r0, r6
 80140be:	f7ff ffb7 	bl	8014030 <_Bfree>
 80140c2:	4644      	mov	r4, r8
 80140c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80140c8:	3501      	adds	r5, #1
 80140ca:	615f      	str	r7, [r3, #20]
 80140cc:	6125      	str	r5, [r4, #16]
 80140ce:	4620      	mov	r0, r4
 80140d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140d4 <__s2b>:
 80140d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140d8:	460c      	mov	r4, r1
 80140da:	4615      	mov	r5, r2
 80140dc:	461f      	mov	r7, r3
 80140de:	2209      	movs	r2, #9
 80140e0:	3308      	adds	r3, #8
 80140e2:	4606      	mov	r6, r0
 80140e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80140e8:	2100      	movs	r1, #0
 80140ea:	2201      	movs	r2, #1
 80140ec:	429a      	cmp	r2, r3
 80140ee:	db20      	blt.n	8014132 <__s2b+0x5e>
 80140f0:	4630      	mov	r0, r6
 80140f2:	f7ff ff69 	bl	8013fc8 <_Balloc>
 80140f6:	9b08      	ldr	r3, [sp, #32]
 80140f8:	6143      	str	r3, [r0, #20]
 80140fa:	2d09      	cmp	r5, #9
 80140fc:	f04f 0301 	mov.w	r3, #1
 8014100:	6103      	str	r3, [r0, #16]
 8014102:	dd19      	ble.n	8014138 <__s2b+0x64>
 8014104:	f104 0809 	add.w	r8, r4, #9
 8014108:	46c1      	mov	r9, r8
 801410a:	442c      	add	r4, r5
 801410c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014110:	4601      	mov	r1, r0
 8014112:	3b30      	subs	r3, #48	; 0x30
 8014114:	220a      	movs	r2, #10
 8014116:	4630      	mov	r0, r6
 8014118:	f7ff ffa1 	bl	801405e <__multadd>
 801411c:	45a1      	cmp	r9, r4
 801411e:	d1f5      	bne.n	801410c <__s2b+0x38>
 8014120:	eb08 0405 	add.w	r4, r8, r5
 8014124:	3c08      	subs	r4, #8
 8014126:	1b2d      	subs	r5, r5, r4
 8014128:	1963      	adds	r3, r4, r5
 801412a:	42bb      	cmp	r3, r7
 801412c:	db07      	blt.n	801413e <__s2b+0x6a>
 801412e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014132:	0052      	lsls	r2, r2, #1
 8014134:	3101      	adds	r1, #1
 8014136:	e7d9      	b.n	80140ec <__s2b+0x18>
 8014138:	340a      	adds	r4, #10
 801413a:	2509      	movs	r5, #9
 801413c:	e7f3      	b.n	8014126 <__s2b+0x52>
 801413e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014142:	4601      	mov	r1, r0
 8014144:	3b30      	subs	r3, #48	; 0x30
 8014146:	220a      	movs	r2, #10
 8014148:	4630      	mov	r0, r6
 801414a:	f7ff ff88 	bl	801405e <__multadd>
 801414e:	e7eb      	b.n	8014128 <__s2b+0x54>

08014150 <__hi0bits>:
 8014150:	0c02      	lsrs	r2, r0, #16
 8014152:	0412      	lsls	r2, r2, #16
 8014154:	4603      	mov	r3, r0
 8014156:	b9b2      	cbnz	r2, 8014186 <__hi0bits+0x36>
 8014158:	0403      	lsls	r3, r0, #16
 801415a:	2010      	movs	r0, #16
 801415c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014160:	bf04      	itt	eq
 8014162:	021b      	lsleq	r3, r3, #8
 8014164:	3008      	addeq	r0, #8
 8014166:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801416a:	bf04      	itt	eq
 801416c:	011b      	lsleq	r3, r3, #4
 801416e:	3004      	addeq	r0, #4
 8014170:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014174:	bf04      	itt	eq
 8014176:	009b      	lsleq	r3, r3, #2
 8014178:	3002      	addeq	r0, #2
 801417a:	2b00      	cmp	r3, #0
 801417c:	db06      	blt.n	801418c <__hi0bits+0x3c>
 801417e:	005b      	lsls	r3, r3, #1
 8014180:	d503      	bpl.n	801418a <__hi0bits+0x3a>
 8014182:	3001      	adds	r0, #1
 8014184:	4770      	bx	lr
 8014186:	2000      	movs	r0, #0
 8014188:	e7e8      	b.n	801415c <__hi0bits+0xc>
 801418a:	2020      	movs	r0, #32
 801418c:	4770      	bx	lr

0801418e <__lo0bits>:
 801418e:	6803      	ldr	r3, [r0, #0]
 8014190:	f013 0207 	ands.w	r2, r3, #7
 8014194:	4601      	mov	r1, r0
 8014196:	d00b      	beq.n	80141b0 <__lo0bits+0x22>
 8014198:	07da      	lsls	r2, r3, #31
 801419a:	d423      	bmi.n	80141e4 <__lo0bits+0x56>
 801419c:	0798      	lsls	r0, r3, #30
 801419e:	bf49      	itett	mi
 80141a0:	085b      	lsrmi	r3, r3, #1
 80141a2:	089b      	lsrpl	r3, r3, #2
 80141a4:	2001      	movmi	r0, #1
 80141a6:	600b      	strmi	r3, [r1, #0]
 80141a8:	bf5c      	itt	pl
 80141aa:	600b      	strpl	r3, [r1, #0]
 80141ac:	2002      	movpl	r0, #2
 80141ae:	4770      	bx	lr
 80141b0:	b298      	uxth	r0, r3
 80141b2:	b9a8      	cbnz	r0, 80141e0 <__lo0bits+0x52>
 80141b4:	0c1b      	lsrs	r3, r3, #16
 80141b6:	2010      	movs	r0, #16
 80141b8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80141bc:	bf04      	itt	eq
 80141be:	0a1b      	lsreq	r3, r3, #8
 80141c0:	3008      	addeq	r0, #8
 80141c2:	071a      	lsls	r2, r3, #28
 80141c4:	bf04      	itt	eq
 80141c6:	091b      	lsreq	r3, r3, #4
 80141c8:	3004      	addeq	r0, #4
 80141ca:	079a      	lsls	r2, r3, #30
 80141cc:	bf04      	itt	eq
 80141ce:	089b      	lsreq	r3, r3, #2
 80141d0:	3002      	addeq	r0, #2
 80141d2:	07da      	lsls	r2, r3, #31
 80141d4:	d402      	bmi.n	80141dc <__lo0bits+0x4e>
 80141d6:	085b      	lsrs	r3, r3, #1
 80141d8:	d006      	beq.n	80141e8 <__lo0bits+0x5a>
 80141da:	3001      	adds	r0, #1
 80141dc:	600b      	str	r3, [r1, #0]
 80141de:	4770      	bx	lr
 80141e0:	4610      	mov	r0, r2
 80141e2:	e7e9      	b.n	80141b8 <__lo0bits+0x2a>
 80141e4:	2000      	movs	r0, #0
 80141e6:	4770      	bx	lr
 80141e8:	2020      	movs	r0, #32
 80141ea:	4770      	bx	lr

080141ec <__i2b>:
 80141ec:	b510      	push	{r4, lr}
 80141ee:	460c      	mov	r4, r1
 80141f0:	2101      	movs	r1, #1
 80141f2:	f7ff fee9 	bl	8013fc8 <_Balloc>
 80141f6:	2201      	movs	r2, #1
 80141f8:	6144      	str	r4, [r0, #20]
 80141fa:	6102      	str	r2, [r0, #16]
 80141fc:	bd10      	pop	{r4, pc}

080141fe <__multiply>:
 80141fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014202:	4614      	mov	r4, r2
 8014204:	690a      	ldr	r2, [r1, #16]
 8014206:	6923      	ldr	r3, [r4, #16]
 8014208:	429a      	cmp	r2, r3
 801420a:	bfb8      	it	lt
 801420c:	460b      	movlt	r3, r1
 801420e:	4688      	mov	r8, r1
 8014210:	bfbc      	itt	lt
 8014212:	46a0      	movlt	r8, r4
 8014214:	461c      	movlt	r4, r3
 8014216:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801421a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801421e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014222:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014226:	eb07 0609 	add.w	r6, r7, r9
 801422a:	42b3      	cmp	r3, r6
 801422c:	bfb8      	it	lt
 801422e:	3101      	addlt	r1, #1
 8014230:	f7ff feca 	bl	8013fc8 <_Balloc>
 8014234:	f100 0514 	add.w	r5, r0, #20
 8014238:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801423c:	462b      	mov	r3, r5
 801423e:	2200      	movs	r2, #0
 8014240:	4573      	cmp	r3, lr
 8014242:	d316      	bcc.n	8014272 <__multiply+0x74>
 8014244:	f104 0214 	add.w	r2, r4, #20
 8014248:	f108 0114 	add.w	r1, r8, #20
 801424c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014250:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014254:	9300      	str	r3, [sp, #0]
 8014256:	9b00      	ldr	r3, [sp, #0]
 8014258:	9201      	str	r2, [sp, #4]
 801425a:	4293      	cmp	r3, r2
 801425c:	d80c      	bhi.n	8014278 <__multiply+0x7a>
 801425e:	2e00      	cmp	r6, #0
 8014260:	dd03      	ble.n	801426a <__multiply+0x6c>
 8014262:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014266:	2b00      	cmp	r3, #0
 8014268:	d05d      	beq.n	8014326 <__multiply+0x128>
 801426a:	6106      	str	r6, [r0, #16]
 801426c:	b003      	add	sp, #12
 801426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014272:	f843 2b04 	str.w	r2, [r3], #4
 8014276:	e7e3      	b.n	8014240 <__multiply+0x42>
 8014278:	f8b2 b000 	ldrh.w	fp, [r2]
 801427c:	f1bb 0f00 	cmp.w	fp, #0
 8014280:	d023      	beq.n	80142ca <__multiply+0xcc>
 8014282:	4689      	mov	r9, r1
 8014284:	46ac      	mov	ip, r5
 8014286:	f04f 0800 	mov.w	r8, #0
 801428a:	f859 4b04 	ldr.w	r4, [r9], #4
 801428e:	f8dc a000 	ldr.w	sl, [ip]
 8014292:	b2a3      	uxth	r3, r4
 8014294:	fa1f fa8a 	uxth.w	sl, sl
 8014298:	fb0b a303 	mla	r3, fp, r3, sl
 801429c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80142a0:	f8dc 4000 	ldr.w	r4, [ip]
 80142a4:	4443      	add	r3, r8
 80142a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80142aa:	fb0b 840a 	mla	r4, fp, sl, r8
 80142ae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80142b2:	46e2      	mov	sl, ip
 80142b4:	b29b      	uxth	r3, r3
 80142b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80142ba:	454f      	cmp	r7, r9
 80142bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80142c0:	f84a 3b04 	str.w	r3, [sl], #4
 80142c4:	d82b      	bhi.n	801431e <__multiply+0x120>
 80142c6:	f8cc 8004 	str.w	r8, [ip, #4]
 80142ca:	9b01      	ldr	r3, [sp, #4]
 80142cc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80142d0:	3204      	adds	r2, #4
 80142d2:	f1ba 0f00 	cmp.w	sl, #0
 80142d6:	d020      	beq.n	801431a <__multiply+0x11c>
 80142d8:	682b      	ldr	r3, [r5, #0]
 80142da:	4689      	mov	r9, r1
 80142dc:	46a8      	mov	r8, r5
 80142de:	f04f 0b00 	mov.w	fp, #0
 80142e2:	f8b9 c000 	ldrh.w	ip, [r9]
 80142e6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80142ea:	fb0a 440c 	mla	r4, sl, ip, r4
 80142ee:	445c      	add	r4, fp
 80142f0:	46c4      	mov	ip, r8
 80142f2:	b29b      	uxth	r3, r3
 80142f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80142f8:	f84c 3b04 	str.w	r3, [ip], #4
 80142fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8014300:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014304:	0c1b      	lsrs	r3, r3, #16
 8014306:	fb0a b303 	mla	r3, sl, r3, fp
 801430a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801430e:	454f      	cmp	r7, r9
 8014310:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014314:	d805      	bhi.n	8014322 <__multiply+0x124>
 8014316:	f8c8 3004 	str.w	r3, [r8, #4]
 801431a:	3504      	adds	r5, #4
 801431c:	e79b      	b.n	8014256 <__multiply+0x58>
 801431e:	46d4      	mov	ip, sl
 8014320:	e7b3      	b.n	801428a <__multiply+0x8c>
 8014322:	46e0      	mov	r8, ip
 8014324:	e7dd      	b.n	80142e2 <__multiply+0xe4>
 8014326:	3e01      	subs	r6, #1
 8014328:	e799      	b.n	801425e <__multiply+0x60>
	...

0801432c <__pow5mult>:
 801432c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014330:	4615      	mov	r5, r2
 8014332:	f012 0203 	ands.w	r2, r2, #3
 8014336:	4606      	mov	r6, r0
 8014338:	460f      	mov	r7, r1
 801433a:	d007      	beq.n	801434c <__pow5mult+0x20>
 801433c:	3a01      	subs	r2, #1
 801433e:	4c21      	ldr	r4, [pc, #132]	; (80143c4 <__pow5mult+0x98>)
 8014340:	2300      	movs	r3, #0
 8014342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014346:	f7ff fe8a 	bl	801405e <__multadd>
 801434a:	4607      	mov	r7, r0
 801434c:	10ad      	asrs	r5, r5, #2
 801434e:	d035      	beq.n	80143bc <__pow5mult+0x90>
 8014350:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014352:	b93c      	cbnz	r4, 8014364 <__pow5mult+0x38>
 8014354:	2010      	movs	r0, #16
 8014356:	f7fc fc0d 	bl	8010b74 <malloc>
 801435a:	6270      	str	r0, [r6, #36]	; 0x24
 801435c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014360:	6004      	str	r4, [r0, #0]
 8014362:	60c4      	str	r4, [r0, #12]
 8014364:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801436c:	b94c      	cbnz	r4, 8014382 <__pow5mult+0x56>
 801436e:	f240 2171 	movw	r1, #625	; 0x271
 8014372:	4630      	mov	r0, r6
 8014374:	f7ff ff3a 	bl	80141ec <__i2b>
 8014378:	2300      	movs	r3, #0
 801437a:	f8c8 0008 	str.w	r0, [r8, #8]
 801437e:	4604      	mov	r4, r0
 8014380:	6003      	str	r3, [r0, #0]
 8014382:	f04f 0800 	mov.w	r8, #0
 8014386:	07eb      	lsls	r3, r5, #31
 8014388:	d50a      	bpl.n	80143a0 <__pow5mult+0x74>
 801438a:	4639      	mov	r1, r7
 801438c:	4622      	mov	r2, r4
 801438e:	4630      	mov	r0, r6
 8014390:	f7ff ff35 	bl	80141fe <__multiply>
 8014394:	4639      	mov	r1, r7
 8014396:	4681      	mov	r9, r0
 8014398:	4630      	mov	r0, r6
 801439a:	f7ff fe49 	bl	8014030 <_Bfree>
 801439e:	464f      	mov	r7, r9
 80143a0:	106d      	asrs	r5, r5, #1
 80143a2:	d00b      	beq.n	80143bc <__pow5mult+0x90>
 80143a4:	6820      	ldr	r0, [r4, #0]
 80143a6:	b938      	cbnz	r0, 80143b8 <__pow5mult+0x8c>
 80143a8:	4622      	mov	r2, r4
 80143aa:	4621      	mov	r1, r4
 80143ac:	4630      	mov	r0, r6
 80143ae:	f7ff ff26 	bl	80141fe <__multiply>
 80143b2:	6020      	str	r0, [r4, #0]
 80143b4:	f8c0 8000 	str.w	r8, [r0]
 80143b8:	4604      	mov	r4, r0
 80143ba:	e7e4      	b.n	8014386 <__pow5mult+0x5a>
 80143bc:	4638      	mov	r0, r7
 80143be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143c2:	bf00      	nop
 80143c4:	080156b8 	.word	0x080156b8

080143c8 <__lshift>:
 80143c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143cc:	460c      	mov	r4, r1
 80143ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80143d2:	6923      	ldr	r3, [r4, #16]
 80143d4:	6849      	ldr	r1, [r1, #4]
 80143d6:	eb0a 0903 	add.w	r9, sl, r3
 80143da:	68a3      	ldr	r3, [r4, #8]
 80143dc:	4607      	mov	r7, r0
 80143de:	4616      	mov	r6, r2
 80143e0:	f109 0501 	add.w	r5, r9, #1
 80143e4:	42ab      	cmp	r3, r5
 80143e6:	db32      	blt.n	801444e <__lshift+0x86>
 80143e8:	4638      	mov	r0, r7
 80143ea:	f7ff fded 	bl	8013fc8 <_Balloc>
 80143ee:	2300      	movs	r3, #0
 80143f0:	4680      	mov	r8, r0
 80143f2:	f100 0114 	add.w	r1, r0, #20
 80143f6:	461a      	mov	r2, r3
 80143f8:	4553      	cmp	r3, sl
 80143fa:	db2b      	blt.n	8014454 <__lshift+0x8c>
 80143fc:	6920      	ldr	r0, [r4, #16]
 80143fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014402:	f104 0314 	add.w	r3, r4, #20
 8014406:	f016 021f 	ands.w	r2, r6, #31
 801440a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801440e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014412:	d025      	beq.n	8014460 <__lshift+0x98>
 8014414:	f1c2 0e20 	rsb	lr, r2, #32
 8014418:	2000      	movs	r0, #0
 801441a:	681e      	ldr	r6, [r3, #0]
 801441c:	468a      	mov	sl, r1
 801441e:	4096      	lsls	r6, r2
 8014420:	4330      	orrs	r0, r6
 8014422:	f84a 0b04 	str.w	r0, [sl], #4
 8014426:	f853 0b04 	ldr.w	r0, [r3], #4
 801442a:	459c      	cmp	ip, r3
 801442c:	fa20 f00e 	lsr.w	r0, r0, lr
 8014430:	d814      	bhi.n	801445c <__lshift+0x94>
 8014432:	6048      	str	r0, [r1, #4]
 8014434:	b108      	cbz	r0, 801443a <__lshift+0x72>
 8014436:	f109 0502 	add.w	r5, r9, #2
 801443a:	3d01      	subs	r5, #1
 801443c:	4638      	mov	r0, r7
 801443e:	f8c8 5010 	str.w	r5, [r8, #16]
 8014442:	4621      	mov	r1, r4
 8014444:	f7ff fdf4 	bl	8014030 <_Bfree>
 8014448:	4640      	mov	r0, r8
 801444a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801444e:	3101      	adds	r1, #1
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	e7c7      	b.n	80143e4 <__lshift+0x1c>
 8014454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014458:	3301      	adds	r3, #1
 801445a:	e7cd      	b.n	80143f8 <__lshift+0x30>
 801445c:	4651      	mov	r1, sl
 801445e:	e7dc      	b.n	801441a <__lshift+0x52>
 8014460:	3904      	subs	r1, #4
 8014462:	f853 2b04 	ldr.w	r2, [r3], #4
 8014466:	f841 2f04 	str.w	r2, [r1, #4]!
 801446a:	459c      	cmp	ip, r3
 801446c:	d8f9      	bhi.n	8014462 <__lshift+0x9a>
 801446e:	e7e4      	b.n	801443a <__lshift+0x72>

08014470 <__mcmp>:
 8014470:	6903      	ldr	r3, [r0, #16]
 8014472:	690a      	ldr	r2, [r1, #16]
 8014474:	1a9b      	subs	r3, r3, r2
 8014476:	b530      	push	{r4, r5, lr}
 8014478:	d10c      	bne.n	8014494 <__mcmp+0x24>
 801447a:	0092      	lsls	r2, r2, #2
 801447c:	3014      	adds	r0, #20
 801447e:	3114      	adds	r1, #20
 8014480:	1884      	adds	r4, r0, r2
 8014482:	4411      	add	r1, r2
 8014484:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014488:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801448c:	4295      	cmp	r5, r2
 801448e:	d003      	beq.n	8014498 <__mcmp+0x28>
 8014490:	d305      	bcc.n	801449e <__mcmp+0x2e>
 8014492:	2301      	movs	r3, #1
 8014494:	4618      	mov	r0, r3
 8014496:	bd30      	pop	{r4, r5, pc}
 8014498:	42a0      	cmp	r0, r4
 801449a:	d3f3      	bcc.n	8014484 <__mcmp+0x14>
 801449c:	e7fa      	b.n	8014494 <__mcmp+0x24>
 801449e:	f04f 33ff 	mov.w	r3, #4294967295
 80144a2:	e7f7      	b.n	8014494 <__mcmp+0x24>

080144a4 <__mdiff>:
 80144a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a8:	460d      	mov	r5, r1
 80144aa:	4607      	mov	r7, r0
 80144ac:	4611      	mov	r1, r2
 80144ae:	4628      	mov	r0, r5
 80144b0:	4614      	mov	r4, r2
 80144b2:	f7ff ffdd 	bl	8014470 <__mcmp>
 80144b6:	1e06      	subs	r6, r0, #0
 80144b8:	d108      	bne.n	80144cc <__mdiff+0x28>
 80144ba:	4631      	mov	r1, r6
 80144bc:	4638      	mov	r0, r7
 80144be:	f7ff fd83 	bl	8013fc8 <_Balloc>
 80144c2:	2301      	movs	r3, #1
 80144c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80144c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144cc:	bfa4      	itt	ge
 80144ce:	4623      	movge	r3, r4
 80144d0:	462c      	movge	r4, r5
 80144d2:	4638      	mov	r0, r7
 80144d4:	6861      	ldr	r1, [r4, #4]
 80144d6:	bfa6      	itte	ge
 80144d8:	461d      	movge	r5, r3
 80144da:	2600      	movge	r6, #0
 80144dc:	2601      	movlt	r6, #1
 80144de:	f7ff fd73 	bl	8013fc8 <_Balloc>
 80144e2:	692b      	ldr	r3, [r5, #16]
 80144e4:	60c6      	str	r6, [r0, #12]
 80144e6:	6926      	ldr	r6, [r4, #16]
 80144e8:	f105 0914 	add.w	r9, r5, #20
 80144ec:	f104 0214 	add.w	r2, r4, #20
 80144f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80144f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80144f8:	f100 0514 	add.w	r5, r0, #20
 80144fc:	f04f 0e00 	mov.w	lr, #0
 8014500:	f852 ab04 	ldr.w	sl, [r2], #4
 8014504:	f859 4b04 	ldr.w	r4, [r9], #4
 8014508:	fa1e f18a 	uxtah	r1, lr, sl
 801450c:	b2a3      	uxth	r3, r4
 801450e:	1ac9      	subs	r1, r1, r3
 8014510:	0c23      	lsrs	r3, r4, #16
 8014512:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014516:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801451a:	b289      	uxth	r1, r1
 801451c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014520:	45c8      	cmp	r8, r9
 8014522:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014526:	4694      	mov	ip, r2
 8014528:	f845 3b04 	str.w	r3, [r5], #4
 801452c:	d8e8      	bhi.n	8014500 <__mdiff+0x5c>
 801452e:	45bc      	cmp	ip, r7
 8014530:	d304      	bcc.n	801453c <__mdiff+0x98>
 8014532:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014536:	b183      	cbz	r3, 801455a <__mdiff+0xb6>
 8014538:	6106      	str	r6, [r0, #16]
 801453a:	e7c5      	b.n	80144c8 <__mdiff+0x24>
 801453c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014540:	fa1e f381 	uxtah	r3, lr, r1
 8014544:	141a      	asrs	r2, r3, #16
 8014546:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801454a:	b29b      	uxth	r3, r3
 801454c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014550:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014554:	f845 3b04 	str.w	r3, [r5], #4
 8014558:	e7e9      	b.n	801452e <__mdiff+0x8a>
 801455a:	3e01      	subs	r6, #1
 801455c:	e7e9      	b.n	8014532 <__mdiff+0x8e>
	...

08014560 <__ulp>:
 8014560:	4b12      	ldr	r3, [pc, #72]	; (80145ac <__ulp+0x4c>)
 8014562:	ee10 2a90 	vmov	r2, s1
 8014566:	401a      	ands	r2, r3
 8014568:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801456c:	2b00      	cmp	r3, #0
 801456e:	dd04      	ble.n	801457a <__ulp+0x1a>
 8014570:	2000      	movs	r0, #0
 8014572:	4619      	mov	r1, r3
 8014574:	ec41 0b10 	vmov	d0, r0, r1
 8014578:	4770      	bx	lr
 801457a:	425b      	negs	r3, r3
 801457c:	151b      	asrs	r3, r3, #20
 801457e:	2b13      	cmp	r3, #19
 8014580:	f04f 0000 	mov.w	r0, #0
 8014584:	f04f 0100 	mov.w	r1, #0
 8014588:	dc04      	bgt.n	8014594 <__ulp+0x34>
 801458a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801458e:	fa42 f103 	asr.w	r1, r2, r3
 8014592:	e7ef      	b.n	8014574 <__ulp+0x14>
 8014594:	3b14      	subs	r3, #20
 8014596:	2b1e      	cmp	r3, #30
 8014598:	f04f 0201 	mov.w	r2, #1
 801459c:	bfda      	itte	le
 801459e:	f1c3 031f 	rsble	r3, r3, #31
 80145a2:	fa02 f303 	lslle.w	r3, r2, r3
 80145a6:	4613      	movgt	r3, r2
 80145a8:	4618      	mov	r0, r3
 80145aa:	e7e3      	b.n	8014574 <__ulp+0x14>
 80145ac:	7ff00000 	.word	0x7ff00000

080145b0 <__b2d>:
 80145b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145b2:	6905      	ldr	r5, [r0, #16]
 80145b4:	f100 0714 	add.w	r7, r0, #20
 80145b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80145bc:	1f2e      	subs	r6, r5, #4
 80145be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80145c2:	4620      	mov	r0, r4
 80145c4:	f7ff fdc4 	bl	8014150 <__hi0bits>
 80145c8:	f1c0 0320 	rsb	r3, r0, #32
 80145cc:	280a      	cmp	r0, #10
 80145ce:	600b      	str	r3, [r1, #0]
 80145d0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014648 <__b2d+0x98>
 80145d4:	dc14      	bgt.n	8014600 <__b2d+0x50>
 80145d6:	f1c0 0e0b 	rsb	lr, r0, #11
 80145da:	fa24 f10e 	lsr.w	r1, r4, lr
 80145de:	42b7      	cmp	r7, r6
 80145e0:	ea41 030c 	orr.w	r3, r1, ip
 80145e4:	bf34      	ite	cc
 80145e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80145ea:	2100      	movcs	r1, #0
 80145ec:	3015      	adds	r0, #21
 80145ee:	fa04 f000 	lsl.w	r0, r4, r0
 80145f2:	fa21 f10e 	lsr.w	r1, r1, lr
 80145f6:	ea40 0201 	orr.w	r2, r0, r1
 80145fa:	ec43 2b10 	vmov	d0, r2, r3
 80145fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014600:	42b7      	cmp	r7, r6
 8014602:	bf3a      	itte	cc
 8014604:	f1a5 0608 	subcc.w	r6, r5, #8
 8014608:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801460c:	2100      	movcs	r1, #0
 801460e:	380b      	subs	r0, #11
 8014610:	d015      	beq.n	801463e <__b2d+0x8e>
 8014612:	4084      	lsls	r4, r0
 8014614:	f1c0 0520 	rsb	r5, r0, #32
 8014618:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801461c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014620:	42be      	cmp	r6, r7
 8014622:	fa21 fc05 	lsr.w	ip, r1, r5
 8014626:	ea44 030c 	orr.w	r3, r4, ip
 801462a:	bf8c      	ite	hi
 801462c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014630:	2400      	movls	r4, #0
 8014632:	fa01 f000 	lsl.w	r0, r1, r0
 8014636:	40ec      	lsrs	r4, r5
 8014638:	ea40 0204 	orr.w	r2, r0, r4
 801463c:	e7dd      	b.n	80145fa <__b2d+0x4a>
 801463e:	ea44 030c 	orr.w	r3, r4, ip
 8014642:	460a      	mov	r2, r1
 8014644:	e7d9      	b.n	80145fa <__b2d+0x4a>
 8014646:	bf00      	nop
 8014648:	3ff00000 	.word	0x3ff00000

0801464c <__d2b>:
 801464c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014650:	460e      	mov	r6, r1
 8014652:	2101      	movs	r1, #1
 8014654:	ec59 8b10 	vmov	r8, r9, d0
 8014658:	4615      	mov	r5, r2
 801465a:	f7ff fcb5 	bl	8013fc8 <_Balloc>
 801465e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014662:	4607      	mov	r7, r0
 8014664:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014668:	bb34      	cbnz	r4, 80146b8 <__d2b+0x6c>
 801466a:	9301      	str	r3, [sp, #4]
 801466c:	f1b8 0300 	subs.w	r3, r8, #0
 8014670:	d027      	beq.n	80146c2 <__d2b+0x76>
 8014672:	a802      	add	r0, sp, #8
 8014674:	f840 3d08 	str.w	r3, [r0, #-8]!
 8014678:	f7ff fd89 	bl	801418e <__lo0bits>
 801467c:	9900      	ldr	r1, [sp, #0]
 801467e:	b1f0      	cbz	r0, 80146be <__d2b+0x72>
 8014680:	9a01      	ldr	r2, [sp, #4]
 8014682:	f1c0 0320 	rsb	r3, r0, #32
 8014686:	fa02 f303 	lsl.w	r3, r2, r3
 801468a:	430b      	orrs	r3, r1
 801468c:	40c2      	lsrs	r2, r0
 801468e:	617b      	str	r3, [r7, #20]
 8014690:	9201      	str	r2, [sp, #4]
 8014692:	9b01      	ldr	r3, [sp, #4]
 8014694:	61bb      	str	r3, [r7, #24]
 8014696:	2b00      	cmp	r3, #0
 8014698:	bf14      	ite	ne
 801469a:	2102      	movne	r1, #2
 801469c:	2101      	moveq	r1, #1
 801469e:	6139      	str	r1, [r7, #16]
 80146a0:	b1c4      	cbz	r4, 80146d4 <__d2b+0x88>
 80146a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80146a6:	4404      	add	r4, r0
 80146a8:	6034      	str	r4, [r6, #0]
 80146aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80146ae:	6028      	str	r0, [r5, #0]
 80146b0:	4638      	mov	r0, r7
 80146b2:	b003      	add	sp, #12
 80146b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80146b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80146bc:	e7d5      	b.n	801466a <__d2b+0x1e>
 80146be:	6179      	str	r1, [r7, #20]
 80146c0:	e7e7      	b.n	8014692 <__d2b+0x46>
 80146c2:	a801      	add	r0, sp, #4
 80146c4:	f7ff fd63 	bl	801418e <__lo0bits>
 80146c8:	9b01      	ldr	r3, [sp, #4]
 80146ca:	617b      	str	r3, [r7, #20]
 80146cc:	2101      	movs	r1, #1
 80146ce:	6139      	str	r1, [r7, #16]
 80146d0:	3020      	adds	r0, #32
 80146d2:	e7e5      	b.n	80146a0 <__d2b+0x54>
 80146d4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80146d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80146dc:	6030      	str	r0, [r6, #0]
 80146de:	6918      	ldr	r0, [r3, #16]
 80146e0:	f7ff fd36 	bl	8014150 <__hi0bits>
 80146e4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80146e8:	e7e1      	b.n	80146ae <__d2b+0x62>

080146ea <__ratio>:
 80146ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ee:	4688      	mov	r8, r1
 80146f0:	4669      	mov	r1, sp
 80146f2:	4681      	mov	r9, r0
 80146f4:	f7ff ff5c 	bl	80145b0 <__b2d>
 80146f8:	a901      	add	r1, sp, #4
 80146fa:	4640      	mov	r0, r8
 80146fc:	ec57 6b10 	vmov	r6, r7, d0
 8014700:	ee10 4a10 	vmov	r4, s0
 8014704:	f7ff ff54 	bl	80145b0 <__b2d>
 8014708:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801470c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014710:	eba3 0c02 	sub.w	ip, r3, r2
 8014714:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014718:	1a9b      	subs	r3, r3, r2
 801471a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801471e:	ec51 0b10 	vmov	r0, r1, d0
 8014722:	2b00      	cmp	r3, #0
 8014724:	ee10 aa10 	vmov	sl, s0
 8014728:	bfce      	itee	gt
 801472a:	463a      	movgt	r2, r7
 801472c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014730:	460a      	movle	r2, r1
 8014732:	463d      	mov	r5, r7
 8014734:	468b      	mov	fp, r1
 8014736:	bfcc      	ite	gt
 8014738:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801473c:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8014740:	ec45 4b17 	vmov	d7, r4, r5
 8014744:	ec4b ab16 	vmov	d6, sl, fp
 8014748:	ee87 0b06 	vdiv.f64	d0, d7, d6
 801474c:	b003      	add	sp, #12
 801474e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014752 <__copybits>:
 8014752:	3901      	subs	r1, #1
 8014754:	b510      	push	{r4, lr}
 8014756:	1149      	asrs	r1, r1, #5
 8014758:	6914      	ldr	r4, [r2, #16]
 801475a:	3101      	adds	r1, #1
 801475c:	f102 0314 	add.w	r3, r2, #20
 8014760:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014764:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014768:	42a3      	cmp	r3, r4
 801476a:	4602      	mov	r2, r0
 801476c:	d303      	bcc.n	8014776 <__copybits+0x24>
 801476e:	2300      	movs	r3, #0
 8014770:	428a      	cmp	r2, r1
 8014772:	d305      	bcc.n	8014780 <__copybits+0x2e>
 8014774:	bd10      	pop	{r4, pc}
 8014776:	f853 2b04 	ldr.w	r2, [r3], #4
 801477a:	f840 2b04 	str.w	r2, [r0], #4
 801477e:	e7f3      	b.n	8014768 <__copybits+0x16>
 8014780:	f842 3b04 	str.w	r3, [r2], #4
 8014784:	e7f4      	b.n	8014770 <__copybits+0x1e>

08014786 <__any_on>:
 8014786:	f100 0214 	add.w	r2, r0, #20
 801478a:	6900      	ldr	r0, [r0, #16]
 801478c:	114b      	asrs	r3, r1, #5
 801478e:	4298      	cmp	r0, r3
 8014790:	b510      	push	{r4, lr}
 8014792:	db11      	blt.n	80147b8 <__any_on+0x32>
 8014794:	dd0a      	ble.n	80147ac <__any_on+0x26>
 8014796:	f011 011f 	ands.w	r1, r1, #31
 801479a:	d007      	beq.n	80147ac <__any_on+0x26>
 801479c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80147a0:	fa24 f001 	lsr.w	r0, r4, r1
 80147a4:	fa00 f101 	lsl.w	r1, r0, r1
 80147a8:	428c      	cmp	r4, r1
 80147aa:	d10b      	bne.n	80147c4 <__any_on+0x3e>
 80147ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80147b0:	4293      	cmp	r3, r2
 80147b2:	d803      	bhi.n	80147bc <__any_on+0x36>
 80147b4:	2000      	movs	r0, #0
 80147b6:	bd10      	pop	{r4, pc}
 80147b8:	4603      	mov	r3, r0
 80147ba:	e7f7      	b.n	80147ac <__any_on+0x26>
 80147bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80147c0:	2900      	cmp	r1, #0
 80147c2:	d0f5      	beq.n	80147b0 <__any_on+0x2a>
 80147c4:	2001      	movs	r0, #1
 80147c6:	e7f6      	b.n	80147b6 <__any_on+0x30>

080147c8 <_realloc_r>:
 80147c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147ca:	4607      	mov	r7, r0
 80147cc:	4614      	mov	r4, r2
 80147ce:	460e      	mov	r6, r1
 80147d0:	b921      	cbnz	r1, 80147dc <_realloc_r+0x14>
 80147d2:	4611      	mov	r1, r2
 80147d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80147d8:	f7fc ba44 	b.w	8010c64 <_malloc_r>
 80147dc:	b922      	cbnz	r2, 80147e8 <_realloc_r+0x20>
 80147de:	f7fc f9f3 	bl	8010bc8 <_free_r>
 80147e2:	4625      	mov	r5, r4
 80147e4:	4628      	mov	r0, r5
 80147e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147e8:	f000 fb77 	bl	8014eda <_malloc_usable_size_r>
 80147ec:	42a0      	cmp	r0, r4
 80147ee:	d20f      	bcs.n	8014810 <_realloc_r+0x48>
 80147f0:	4621      	mov	r1, r4
 80147f2:	4638      	mov	r0, r7
 80147f4:	f7fc fa36 	bl	8010c64 <_malloc_r>
 80147f8:	4605      	mov	r5, r0
 80147fa:	2800      	cmp	r0, #0
 80147fc:	d0f2      	beq.n	80147e4 <_realloc_r+0x1c>
 80147fe:	4631      	mov	r1, r6
 8014800:	4622      	mov	r2, r4
 8014802:	f7fc f9bf 	bl	8010b84 <memcpy>
 8014806:	4631      	mov	r1, r6
 8014808:	4638      	mov	r0, r7
 801480a:	f7fc f9dd 	bl	8010bc8 <_free_r>
 801480e:	e7e9      	b.n	80147e4 <_realloc_r+0x1c>
 8014810:	4635      	mov	r5, r6
 8014812:	e7e7      	b.n	80147e4 <_realloc_r+0x1c>

08014814 <__ssputs_r>:
 8014814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014818:	688e      	ldr	r6, [r1, #8]
 801481a:	429e      	cmp	r6, r3
 801481c:	4682      	mov	sl, r0
 801481e:	460c      	mov	r4, r1
 8014820:	4690      	mov	r8, r2
 8014822:	4699      	mov	r9, r3
 8014824:	d837      	bhi.n	8014896 <__ssputs_r+0x82>
 8014826:	898a      	ldrh	r2, [r1, #12]
 8014828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801482c:	d031      	beq.n	8014892 <__ssputs_r+0x7e>
 801482e:	6825      	ldr	r5, [r4, #0]
 8014830:	6909      	ldr	r1, [r1, #16]
 8014832:	1a6f      	subs	r7, r5, r1
 8014834:	6965      	ldr	r5, [r4, #20]
 8014836:	2302      	movs	r3, #2
 8014838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801483c:	fb95 f5f3 	sdiv	r5, r5, r3
 8014840:	f109 0301 	add.w	r3, r9, #1
 8014844:	443b      	add	r3, r7
 8014846:	429d      	cmp	r5, r3
 8014848:	bf38      	it	cc
 801484a:	461d      	movcc	r5, r3
 801484c:	0553      	lsls	r3, r2, #21
 801484e:	d530      	bpl.n	80148b2 <__ssputs_r+0x9e>
 8014850:	4629      	mov	r1, r5
 8014852:	f7fc fa07 	bl	8010c64 <_malloc_r>
 8014856:	4606      	mov	r6, r0
 8014858:	b950      	cbnz	r0, 8014870 <__ssputs_r+0x5c>
 801485a:	230c      	movs	r3, #12
 801485c:	f8ca 3000 	str.w	r3, [sl]
 8014860:	89a3      	ldrh	r3, [r4, #12]
 8014862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014866:	81a3      	strh	r3, [r4, #12]
 8014868:	f04f 30ff 	mov.w	r0, #4294967295
 801486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014870:	463a      	mov	r2, r7
 8014872:	6921      	ldr	r1, [r4, #16]
 8014874:	f7fc f986 	bl	8010b84 <memcpy>
 8014878:	89a3      	ldrh	r3, [r4, #12]
 801487a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801487e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014882:	81a3      	strh	r3, [r4, #12]
 8014884:	6126      	str	r6, [r4, #16]
 8014886:	6165      	str	r5, [r4, #20]
 8014888:	443e      	add	r6, r7
 801488a:	1bed      	subs	r5, r5, r7
 801488c:	6026      	str	r6, [r4, #0]
 801488e:	60a5      	str	r5, [r4, #8]
 8014890:	464e      	mov	r6, r9
 8014892:	454e      	cmp	r6, r9
 8014894:	d900      	bls.n	8014898 <__ssputs_r+0x84>
 8014896:	464e      	mov	r6, r9
 8014898:	4632      	mov	r2, r6
 801489a:	4641      	mov	r1, r8
 801489c:	6820      	ldr	r0, [r4, #0]
 801489e:	f000 fb03 	bl	8014ea8 <memmove>
 80148a2:	68a3      	ldr	r3, [r4, #8]
 80148a4:	1b9b      	subs	r3, r3, r6
 80148a6:	60a3      	str	r3, [r4, #8]
 80148a8:	6823      	ldr	r3, [r4, #0]
 80148aa:	441e      	add	r6, r3
 80148ac:	6026      	str	r6, [r4, #0]
 80148ae:	2000      	movs	r0, #0
 80148b0:	e7dc      	b.n	801486c <__ssputs_r+0x58>
 80148b2:	462a      	mov	r2, r5
 80148b4:	f7ff ff88 	bl	80147c8 <_realloc_r>
 80148b8:	4606      	mov	r6, r0
 80148ba:	2800      	cmp	r0, #0
 80148bc:	d1e2      	bne.n	8014884 <__ssputs_r+0x70>
 80148be:	6921      	ldr	r1, [r4, #16]
 80148c0:	4650      	mov	r0, sl
 80148c2:	f7fc f981 	bl	8010bc8 <_free_r>
 80148c6:	e7c8      	b.n	801485a <__ssputs_r+0x46>

080148c8 <_svfiprintf_r>:
 80148c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148cc:	461d      	mov	r5, r3
 80148ce:	898b      	ldrh	r3, [r1, #12]
 80148d0:	061f      	lsls	r7, r3, #24
 80148d2:	b09d      	sub	sp, #116	; 0x74
 80148d4:	4680      	mov	r8, r0
 80148d6:	460c      	mov	r4, r1
 80148d8:	4616      	mov	r6, r2
 80148da:	d50f      	bpl.n	80148fc <_svfiprintf_r+0x34>
 80148dc:	690b      	ldr	r3, [r1, #16]
 80148de:	b96b      	cbnz	r3, 80148fc <_svfiprintf_r+0x34>
 80148e0:	2140      	movs	r1, #64	; 0x40
 80148e2:	f7fc f9bf 	bl	8010c64 <_malloc_r>
 80148e6:	6020      	str	r0, [r4, #0]
 80148e8:	6120      	str	r0, [r4, #16]
 80148ea:	b928      	cbnz	r0, 80148f8 <_svfiprintf_r+0x30>
 80148ec:	230c      	movs	r3, #12
 80148ee:	f8c8 3000 	str.w	r3, [r8]
 80148f2:	f04f 30ff 	mov.w	r0, #4294967295
 80148f6:	e0c8      	b.n	8014a8a <_svfiprintf_r+0x1c2>
 80148f8:	2340      	movs	r3, #64	; 0x40
 80148fa:	6163      	str	r3, [r4, #20]
 80148fc:	2300      	movs	r3, #0
 80148fe:	9309      	str	r3, [sp, #36]	; 0x24
 8014900:	2320      	movs	r3, #32
 8014902:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014906:	2330      	movs	r3, #48	; 0x30
 8014908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801490c:	9503      	str	r5, [sp, #12]
 801490e:	f04f 0b01 	mov.w	fp, #1
 8014912:	4637      	mov	r7, r6
 8014914:	463d      	mov	r5, r7
 8014916:	f815 3b01 	ldrb.w	r3, [r5], #1
 801491a:	b10b      	cbz	r3, 8014920 <_svfiprintf_r+0x58>
 801491c:	2b25      	cmp	r3, #37	; 0x25
 801491e:	d13e      	bne.n	801499e <_svfiprintf_r+0xd6>
 8014920:	ebb7 0a06 	subs.w	sl, r7, r6
 8014924:	d00b      	beq.n	801493e <_svfiprintf_r+0x76>
 8014926:	4653      	mov	r3, sl
 8014928:	4632      	mov	r2, r6
 801492a:	4621      	mov	r1, r4
 801492c:	4640      	mov	r0, r8
 801492e:	f7ff ff71 	bl	8014814 <__ssputs_r>
 8014932:	3001      	adds	r0, #1
 8014934:	f000 80a4 	beq.w	8014a80 <_svfiprintf_r+0x1b8>
 8014938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801493a:	4453      	add	r3, sl
 801493c:	9309      	str	r3, [sp, #36]	; 0x24
 801493e:	783b      	ldrb	r3, [r7, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	f000 809d 	beq.w	8014a80 <_svfiprintf_r+0x1b8>
 8014946:	2300      	movs	r3, #0
 8014948:	f04f 32ff 	mov.w	r2, #4294967295
 801494c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014950:	9304      	str	r3, [sp, #16]
 8014952:	9307      	str	r3, [sp, #28]
 8014954:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014958:	931a      	str	r3, [sp, #104]	; 0x68
 801495a:	462f      	mov	r7, r5
 801495c:	2205      	movs	r2, #5
 801495e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014962:	4850      	ldr	r0, [pc, #320]	; (8014aa4 <_svfiprintf_r+0x1dc>)
 8014964:	f7eb fc74 	bl	8000250 <memchr>
 8014968:	9b04      	ldr	r3, [sp, #16]
 801496a:	b9d0      	cbnz	r0, 80149a2 <_svfiprintf_r+0xda>
 801496c:	06d9      	lsls	r1, r3, #27
 801496e:	bf44      	itt	mi
 8014970:	2220      	movmi	r2, #32
 8014972:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014976:	071a      	lsls	r2, r3, #28
 8014978:	bf44      	itt	mi
 801497a:	222b      	movmi	r2, #43	; 0x2b
 801497c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014980:	782a      	ldrb	r2, [r5, #0]
 8014982:	2a2a      	cmp	r2, #42	; 0x2a
 8014984:	d015      	beq.n	80149b2 <_svfiprintf_r+0xea>
 8014986:	9a07      	ldr	r2, [sp, #28]
 8014988:	462f      	mov	r7, r5
 801498a:	2000      	movs	r0, #0
 801498c:	250a      	movs	r5, #10
 801498e:	4639      	mov	r1, r7
 8014990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014994:	3b30      	subs	r3, #48	; 0x30
 8014996:	2b09      	cmp	r3, #9
 8014998:	d94d      	bls.n	8014a36 <_svfiprintf_r+0x16e>
 801499a:	b1b8      	cbz	r0, 80149cc <_svfiprintf_r+0x104>
 801499c:	e00f      	b.n	80149be <_svfiprintf_r+0xf6>
 801499e:	462f      	mov	r7, r5
 80149a0:	e7b8      	b.n	8014914 <_svfiprintf_r+0x4c>
 80149a2:	4a40      	ldr	r2, [pc, #256]	; (8014aa4 <_svfiprintf_r+0x1dc>)
 80149a4:	1a80      	subs	r0, r0, r2
 80149a6:	fa0b f000 	lsl.w	r0, fp, r0
 80149aa:	4318      	orrs	r0, r3
 80149ac:	9004      	str	r0, [sp, #16]
 80149ae:	463d      	mov	r5, r7
 80149b0:	e7d3      	b.n	801495a <_svfiprintf_r+0x92>
 80149b2:	9a03      	ldr	r2, [sp, #12]
 80149b4:	1d11      	adds	r1, r2, #4
 80149b6:	6812      	ldr	r2, [r2, #0]
 80149b8:	9103      	str	r1, [sp, #12]
 80149ba:	2a00      	cmp	r2, #0
 80149bc:	db01      	blt.n	80149c2 <_svfiprintf_r+0xfa>
 80149be:	9207      	str	r2, [sp, #28]
 80149c0:	e004      	b.n	80149cc <_svfiprintf_r+0x104>
 80149c2:	4252      	negs	r2, r2
 80149c4:	f043 0302 	orr.w	r3, r3, #2
 80149c8:	9207      	str	r2, [sp, #28]
 80149ca:	9304      	str	r3, [sp, #16]
 80149cc:	783b      	ldrb	r3, [r7, #0]
 80149ce:	2b2e      	cmp	r3, #46	; 0x2e
 80149d0:	d10c      	bne.n	80149ec <_svfiprintf_r+0x124>
 80149d2:	787b      	ldrb	r3, [r7, #1]
 80149d4:	2b2a      	cmp	r3, #42	; 0x2a
 80149d6:	d133      	bne.n	8014a40 <_svfiprintf_r+0x178>
 80149d8:	9b03      	ldr	r3, [sp, #12]
 80149da:	1d1a      	adds	r2, r3, #4
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	9203      	str	r2, [sp, #12]
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	bfb8      	it	lt
 80149e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80149e8:	3702      	adds	r7, #2
 80149ea:	9305      	str	r3, [sp, #20]
 80149ec:	4d2e      	ldr	r5, [pc, #184]	; (8014aa8 <_svfiprintf_r+0x1e0>)
 80149ee:	7839      	ldrb	r1, [r7, #0]
 80149f0:	2203      	movs	r2, #3
 80149f2:	4628      	mov	r0, r5
 80149f4:	f7eb fc2c 	bl	8000250 <memchr>
 80149f8:	b138      	cbz	r0, 8014a0a <_svfiprintf_r+0x142>
 80149fa:	2340      	movs	r3, #64	; 0x40
 80149fc:	1b40      	subs	r0, r0, r5
 80149fe:	fa03 f000 	lsl.w	r0, r3, r0
 8014a02:	9b04      	ldr	r3, [sp, #16]
 8014a04:	4303      	orrs	r3, r0
 8014a06:	3701      	adds	r7, #1
 8014a08:	9304      	str	r3, [sp, #16]
 8014a0a:	7839      	ldrb	r1, [r7, #0]
 8014a0c:	4827      	ldr	r0, [pc, #156]	; (8014aac <_svfiprintf_r+0x1e4>)
 8014a0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a12:	2206      	movs	r2, #6
 8014a14:	1c7e      	adds	r6, r7, #1
 8014a16:	f7eb fc1b 	bl	8000250 <memchr>
 8014a1a:	2800      	cmp	r0, #0
 8014a1c:	d038      	beq.n	8014a90 <_svfiprintf_r+0x1c8>
 8014a1e:	4b24      	ldr	r3, [pc, #144]	; (8014ab0 <_svfiprintf_r+0x1e8>)
 8014a20:	bb13      	cbnz	r3, 8014a68 <_svfiprintf_r+0x1a0>
 8014a22:	9b03      	ldr	r3, [sp, #12]
 8014a24:	3307      	adds	r3, #7
 8014a26:	f023 0307 	bic.w	r3, r3, #7
 8014a2a:	3308      	adds	r3, #8
 8014a2c:	9303      	str	r3, [sp, #12]
 8014a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a30:	444b      	add	r3, r9
 8014a32:	9309      	str	r3, [sp, #36]	; 0x24
 8014a34:	e76d      	b.n	8014912 <_svfiprintf_r+0x4a>
 8014a36:	fb05 3202 	mla	r2, r5, r2, r3
 8014a3a:	2001      	movs	r0, #1
 8014a3c:	460f      	mov	r7, r1
 8014a3e:	e7a6      	b.n	801498e <_svfiprintf_r+0xc6>
 8014a40:	2300      	movs	r3, #0
 8014a42:	3701      	adds	r7, #1
 8014a44:	9305      	str	r3, [sp, #20]
 8014a46:	4619      	mov	r1, r3
 8014a48:	250a      	movs	r5, #10
 8014a4a:	4638      	mov	r0, r7
 8014a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a50:	3a30      	subs	r2, #48	; 0x30
 8014a52:	2a09      	cmp	r2, #9
 8014a54:	d903      	bls.n	8014a5e <_svfiprintf_r+0x196>
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d0c8      	beq.n	80149ec <_svfiprintf_r+0x124>
 8014a5a:	9105      	str	r1, [sp, #20]
 8014a5c:	e7c6      	b.n	80149ec <_svfiprintf_r+0x124>
 8014a5e:	fb05 2101 	mla	r1, r5, r1, r2
 8014a62:	2301      	movs	r3, #1
 8014a64:	4607      	mov	r7, r0
 8014a66:	e7f0      	b.n	8014a4a <_svfiprintf_r+0x182>
 8014a68:	ab03      	add	r3, sp, #12
 8014a6a:	9300      	str	r3, [sp, #0]
 8014a6c:	4622      	mov	r2, r4
 8014a6e:	4b11      	ldr	r3, [pc, #68]	; (8014ab4 <_svfiprintf_r+0x1ec>)
 8014a70:	a904      	add	r1, sp, #16
 8014a72:	4640      	mov	r0, r8
 8014a74:	f7fc f9d8 	bl	8010e28 <_printf_float>
 8014a78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014a7c:	4681      	mov	r9, r0
 8014a7e:	d1d6      	bne.n	8014a2e <_svfiprintf_r+0x166>
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	065b      	lsls	r3, r3, #25
 8014a84:	f53f af35 	bmi.w	80148f2 <_svfiprintf_r+0x2a>
 8014a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014a8a:	b01d      	add	sp, #116	; 0x74
 8014a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a90:	ab03      	add	r3, sp, #12
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	4622      	mov	r2, r4
 8014a96:	4b07      	ldr	r3, [pc, #28]	; (8014ab4 <_svfiprintf_r+0x1ec>)
 8014a98:	a904      	add	r1, sp, #16
 8014a9a:	4640      	mov	r0, r8
 8014a9c:	f7fc fc66 	bl	801136c <_printf_i>
 8014aa0:	e7ea      	b.n	8014a78 <_svfiprintf_r+0x1b0>
 8014aa2:	bf00      	nop
 8014aa4:	080156c4 	.word	0x080156c4
 8014aa8:	080156ca 	.word	0x080156ca
 8014aac:	080156ce 	.word	0x080156ce
 8014ab0:	08010e29 	.word	0x08010e29
 8014ab4:	08014815 	.word	0x08014815

08014ab8 <__sfputc_r>:
 8014ab8:	6893      	ldr	r3, [r2, #8]
 8014aba:	3b01      	subs	r3, #1
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	b410      	push	{r4}
 8014ac0:	6093      	str	r3, [r2, #8]
 8014ac2:	da08      	bge.n	8014ad6 <__sfputc_r+0x1e>
 8014ac4:	6994      	ldr	r4, [r2, #24]
 8014ac6:	42a3      	cmp	r3, r4
 8014ac8:	db01      	blt.n	8014ace <__sfputc_r+0x16>
 8014aca:	290a      	cmp	r1, #10
 8014acc:	d103      	bne.n	8014ad6 <__sfputc_r+0x1e>
 8014ace:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ad2:	f7fd beb3 	b.w	801283c <__swbuf_r>
 8014ad6:	6813      	ldr	r3, [r2, #0]
 8014ad8:	1c58      	adds	r0, r3, #1
 8014ada:	6010      	str	r0, [r2, #0]
 8014adc:	7019      	strb	r1, [r3, #0]
 8014ade:	4608      	mov	r0, r1
 8014ae0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ae4:	4770      	bx	lr

08014ae6 <__sfputs_r>:
 8014ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ae8:	4606      	mov	r6, r0
 8014aea:	460f      	mov	r7, r1
 8014aec:	4614      	mov	r4, r2
 8014aee:	18d5      	adds	r5, r2, r3
 8014af0:	42ac      	cmp	r4, r5
 8014af2:	d101      	bne.n	8014af8 <__sfputs_r+0x12>
 8014af4:	2000      	movs	r0, #0
 8014af6:	e007      	b.n	8014b08 <__sfputs_r+0x22>
 8014af8:	463a      	mov	r2, r7
 8014afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014afe:	4630      	mov	r0, r6
 8014b00:	f7ff ffda 	bl	8014ab8 <__sfputc_r>
 8014b04:	1c43      	adds	r3, r0, #1
 8014b06:	d1f3      	bne.n	8014af0 <__sfputs_r+0xa>
 8014b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b0c <_vfiprintf_r>:
 8014b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b10:	460c      	mov	r4, r1
 8014b12:	b09d      	sub	sp, #116	; 0x74
 8014b14:	4617      	mov	r7, r2
 8014b16:	461d      	mov	r5, r3
 8014b18:	4606      	mov	r6, r0
 8014b1a:	b118      	cbz	r0, 8014b24 <_vfiprintf_r+0x18>
 8014b1c:	6983      	ldr	r3, [r0, #24]
 8014b1e:	b90b      	cbnz	r3, 8014b24 <_vfiprintf_r+0x18>
 8014b20:	f7fe fe16 	bl	8013750 <__sinit>
 8014b24:	4b7c      	ldr	r3, [pc, #496]	; (8014d18 <_vfiprintf_r+0x20c>)
 8014b26:	429c      	cmp	r4, r3
 8014b28:	d158      	bne.n	8014bdc <_vfiprintf_r+0xd0>
 8014b2a:	6874      	ldr	r4, [r6, #4]
 8014b2c:	89a3      	ldrh	r3, [r4, #12]
 8014b2e:	0718      	lsls	r0, r3, #28
 8014b30:	d55e      	bpl.n	8014bf0 <_vfiprintf_r+0xe4>
 8014b32:	6923      	ldr	r3, [r4, #16]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d05b      	beq.n	8014bf0 <_vfiprintf_r+0xe4>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	9309      	str	r3, [sp, #36]	; 0x24
 8014b3c:	2320      	movs	r3, #32
 8014b3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b42:	2330      	movs	r3, #48	; 0x30
 8014b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b48:	9503      	str	r5, [sp, #12]
 8014b4a:	f04f 0b01 	mov.w	fp, #1
 8014b4e:	46b8      	mov	r8, r7
 8014b50:	4645      	mov	r5, r8
 8014b52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014b56:	b10b      	cbz	r3, 8014b5c <_vfiprintf_r+0x50>
 8014b58:	2b25      	cmp	r3, #37	; 0x25
 8014b5a:	d154      	bne.n	8014c06 <_vfiprintf_r+0xfa>
 8014b5c:	ebb8 0a07 	subs.w	sl, r8, r7
 8014b60:	d00b      	beq.n	8014b7a <_vfiprintf_r+0x6e>
 8014b62:	4653      	mov	r3, sl
 8014b64:	463a      	mov	r2, r7
 8014b66:	4621      	mov	r1, r4
 8014b68:	4630      	mov	r0, r6
 8014b6a:	f7ff ffbc 	bl	8014ae6 <__sfputs_r>
 8014b6e:	3001      	adds	r0, #1
 8014b70:	f000 80c2 	beq.w	8014cf8 <_vfiprintf_r+0x1ec>
 8014b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b76:	4453      	add	r3, sl
 8014b78:	9309      	str	r3, [sp, #36]	; 0x24
 8014b7a:	f898 3000 	ldrb.w	r3, [r8]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f000 80ba 	beq.w	8014cf8 <_vfiprintf_r+0x1ec>
 8014b84:	2300      	movs	r3, #0
 8014b86:	f04f 32ff 	mov.w	r2, #4294967295
 8014b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b8e:	9304      	str	r3, [sp, #16]
 8014b90:	9307      	str	r3, [sp, #28]
 8014b92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b96:	931a      	str	r3, [sp, #104]	; 0x68
 8014b98:	46a8      	mov	r8, r5
 8014b9a:	2205      	movs	r2, #5
 8014b9c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014ba0:	485e      	ldr	r0, [pc, #376]	; (8014d1c <_vfiprintf_r+0x210>)
 8014ba2:	f7eb fb55 	bl	8000250 <memchr>
 8014ba6:	9b04      	ldr	r3, [sp, #16]
 8014ba8:	bb78      	cbnz	r0, 8014c0a <_vfiprintf_r+0xfe>
 8014baa:	06d9      	lsls	r1, r3, #27
 8014bac:	bf44      	itt	mi
 8014bae:	2220      	movmi	r2, #32
 8014bb0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014bb4:	071a      	lsls	r2, r3, #28
 8014bb6:	bf44      	itt	mi
 8014bb8:	222b      	movmi	r2, #43	; 0x2b
 8014bba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014bbe:	782a      	ldrb	r2, [r5, #0]
 8014bc0:	2a2a      	cmp	r2, #42	; 0x2a
 8014bc2:	d02a      	beq.n	8014c1a <_vfiprintf_r+0x10e>
 8014bc4:	9a07      	ldr	r2, [sp, #28]
 8014bc6:	46a8      	mov	r8, r5
 8014bc8:	2000      	movs	r0, #0
 8014bca:	250a      	movs	r5, #10
 8014bcc:	4641      	mov	r1, r8
 8014bce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014bd2:	3b30      	subs	r3, #48	; 0x30
 8014bd4:	2b09      	cmp	r3, #9
 8014bd6:	d969      	bls.n	8014cac <_vfiprintf_r+0x1a0>
 8014bd8:	b360      	cbz	r0, 8014c34 <_vfiprintf_r+0x128>
 8014bda:	e024      	b.n	8014c26 <_vfiprintf_r+0x11a>
 8014bdc:	4b50      	ldr	r3, [pc, #320]	; (8014d20 <_vfiprintf_r+0x214>)
 8014bde:	429c      	cmp	r4, r3
 8014be0:	d101      	bne.n	8014be6 <_vfiprintf_r+0xda>
 8014be2:	68b4      	ldr	r4, [r6, #8]
 8014be4:	e7a2      	b.n	8014b2c <_vfiprintf_r+0x20>
 8014be6:	4b4f      	ldr	r3, [pc, #316]	; (8014d24 <_vfiprintf_r+0x218>)
 8014be8:	429c      	cmp	r4, r3
 8014bea:	bf08      	it	eq
 8014bec:	68f4      	ldreq	r4, [r6, #12]
 8014bee:	e79d      	b.n	8014b2c <_vfiprintf_r+0x20>
 8014bf0:	4621      	mov	r1, r4
 8014bf2:	4630      	mov	r0, r6
 8014bf4:	f7fd fe74 	bl	80128e0 <__swsetup_r>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d09d      	beq.n	8014b38 <_vfiprintf_r+0x2c>
 8014bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8014c00:	b01d      	add	sp, #116	; 0x74
 8014c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c06:	46a8      	mov	r8, r5
 8014c08:	e7a2      	b.n	8014b50 <_vfiprintf_r+0x44>
 8014c0a:	4a44      	ldr	r2, [pc, #272]	; (8014d1c <_vfiprintf_r+0x210>)
 8014c0c:	1a80      	subs	r0, r0, r2
 8014c0e:	fa0b f000 	lsl.w	r0, fp, r0
 8014c12:	4318      	orrs	r0, r3
 8014c14:	9004      	str	r0, [sp, #16]
 8014c16:	4645      	mov	r5, r8
 8014c18:	e7be      	b.n	8014b98 <_vfiprintf_r+0x8c>
 8014c1a:	9a03      	ldr	r2, [sp, #12]
 8014c1c:	1d11      	adds	r1, r2, #4
 8014c1e:	6812      	ldr	r2, [r2, #0]
 8014c20:	9103      	str	r1, [sp, #12]
 8014c22:	2a00      	cmp	r2, #0
 8014c24:	db01      	blt.n	8014c2a <_vfiprintf_r+0x11e>
 8014c26:	9207      	str	r2, [sp, #28]
 8014c28:	e004      	b.n	8014c34 <_vfiprintf_r+0x128>
 8014c2a:	4252      	negs	r2, r2
 8014c2c:	f043 0302 	orr.w	r3, r3, #2
 8014c30:	9207      	str	r2, [sp, #28]
 8014c32:	9304      	str	r3, [sp, #16]
 8014c34:	f898 3000 	ldrb.w	r3, [r8]
 8014c38:	2b2e      	cmp	r3, #46	; 0x2e
 8014c3a:	d10e      	bne.n	8014c5a <_vfiprintf_r+0x14e>
 8014c3c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014c40:	2b2a      	cmp	r3, #42	; 0x2a
 8014c42:	d138      	bne.n	8014cb6 <_vfiprintf_r+0x1aa>
 8014c44:	9b03      	ldr	r3, [sp, #12]
 8014c46:	1d1a      	adds	r2, r3, #4
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	9203      	str	r2, [sp, #12]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	bfb8      	it	lt
 8014c50:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c54:	f108 0802 	add.w	r8, r8, #2
 8014c58:	9305      	str	r3, [sp, #20]
 8014c5a:	4d33      	ldr	r5, [pc, #204]	; (8014d28 <_vfiprintf_r+0x21c>)
 8014c5c:	f898 1000 	ldrb.w	r1, [r8]
 8014c60:	2203      	movs	r2, #3
 8014c62:	4628      	mov	r0, r5
 8014c64:	f7eb faf4 	bl	8000250 <memchr>
 8014c68:	b140      	cbz	r0, 8014c7c <_vfiprintf_r+0x170>
 8014c6a:	2340      	movs	r3, #64	; 0x40
 8014c6c:	1b40      	subs	r0, r0, r5
 8014c6e:	fa03 f000 	lsl.w	r0, r3, r0
 8014c72:	9b04      	ldr	r3, [sp, #16]
 8014c74:	4303      	orrs	r3, r0
 8014c76:	f108 0801 	add.w	r8, r8, #1
 8014c7a:	9304      	str	r3, [sp, #16]
 8014c7c:	f898 1000 	ldrb.w	r1, [r8]
 8014c80:	482a      	ldr	r0, [pc, #168]	; (8014d2c <_vfiprintf_r+0x220>)
 8014c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c86:	2206      	movs	r2, #6
 8014c88:	f108 0701 	add.w	r7, r8, #1
 8014c8c:	f7eb fae0 	bl	8000250 <memchr>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	d037      	beq.n	8014d04 <_vfiprintf_r+0x1f8>
 8014c94:	4b26      	ldr	r3, [pc, #152]	; (8014d30 <_vfiprintf_r+0x224>)
 8014c96:	bb1b      	cbnz	r3, 8014ce0 <_vfiprintf_r+0x1d4>
 8014c98:	9b03      	ldr	r3, [sp, #12]
 8014c9a:	3307      	adds	r3, #7
 8014c9c:	f023 0307 	bic.w	r3, r3, #7
 8014ca0:	3308      	adds	r3, #8
 8014ca2:	9303      	str	r3, [sp, #12]
 8014ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ca6:	444b      	add	r3, r9
 8014ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8014caa:	e750      	b.n	8014b4e <_vfiprintf_r+0x42>
 8014cac:	fb05 3202 	mla	r2, r5, r2, r3
 8014cb0:	2001      	movs	r0, #1
 8014cb2:	4688      	mov	r8, r1
 8014cb4:	e78a      	b.n	8014bcc <_vfiprintf_r+0xc0>
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	f108 0801 	add.w	r8, r8, #1
 8014cbc:	9305      	str	r3, [sp, #20]
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	250a      	movs	r5, #10
 8014cc2:	4640      	mov	r0, r8
 8014cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cc8:	3a30      	subs	r2, #48	; 0x30
 8014cca:	2a09      	cmp	r2, #9
 8014ccc:	d903      	bls.n	8014cd6 <_vfiprintf_r+0x1ca>
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d0c3      	beq.n	8014c5a <_vfiprintf_r+0x14e>
 8014cd2:	9105      	str	r1, [sp, #20]
 8014cd4:	e7c1      	b.n	8014c5a <_vfiprintf_r+0x14e>
 8014cd6:	fb05 2101 	mla	r1, r5, r1, r2
 8014cda:	2301      	movs	r3, #1
 8014cdc:	4680      	mov	r8, r0
 8014cde:	e7f0      	b.n	8014cc2 <_vfiprintf_r+0x1b6>
 8014ce0:	ab03      	add	r3, sp, #12
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	4622      	mov	r2, r4
 8014ce6:	4b13      	ldr	r3, [pc, #76]	; (8014d34 <_vfiprintf_r+0x228>)
 8014ce8:	a904      	add	r1, sp, #16
 8014cea:	4630      	mov	r0, r6
 8014cec:	f7fc f89c 	bl	8010e28 <_printf_float>
 8014cf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014cf4:	4681      	mov	r9, r0
 8014cf6:	d1d5      	bne.n	8014ca4 <_vfiprintf_r+0x198>
 8014cf8:	89a3      	ldrh	r3, [r4, #12]
 8014cfa:	065b      	lsls	r3, r3, #25
 8014cfc:	f53f af7e 	bmi.w	8014bfc <_vfiprintf_r+0xf0>
 8014d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d02:	e77d      	b.n	8014c00 <_vfiprintf_r+0xf4>
 8014d04:	ab03      	add	r3, sp, #12
 8014d06:	9300      	str	r3, [sp, #0]
 8014d08:	4622      	mov	r2, r4
 8014d0a:	4b0a      	ldr	r3, [pc, #40]	; (8014d34 <_vfiprintf_r+0x228>)
 8014d0c:	a904      	add	r1, sp, #16
 8014d0e:	4630      	mov	r0, r6
 8014d10:	f7fc fb2c 	bl	801136c <_printf_i>
 8014d14:	e7ec      	b.n	8014cf0 <_vfiprintf_r+0x1e4>
 8014d16:	bf00      	nop
 8014d18:	08015578 	.word	0x08015578
 8014d1c:	080156c4 	.word	0x080156c4
 8014d20:	08015598 	.word	0x08015598
 8014d24:	08015558 	.word	0x08015558
 8014d28:	080156ca 	.word	0x080156ca
 8014d2c:	080156ce 	.word	0x080156ce
 8014d30:	08010e29 	.word	0x08010e29
 8014d34:	08014ae7 	.word	0x08014ae7

08014d38 <__sread>:
 8014d38:	b510      	push	{r4, lr}
 8014d3a:	460c      	mov	r4, r1
 8014d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d40:	f000 f8d4 	bl	8014eec <_read_r>
 8014d44:	2800      	cmp	r0, #0
 8014d46:	bfab      	itete	ge
 8014d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8014d4c:	181b      	addge	r3, r3, r0
 8014d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014d52:	bfac      	ite	ge
 8014d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8014d56:	81a3      	strhlt	r3, [r4, #12]
 8014d58:	bd10      	pop	{r4, pc}

08014d5a <__swrite>:
 8014d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d5e:	461f      	mov	r7, r3
 8014d60:	898b      	ldrh	r3, [r1, #12]
 8014d62:	05db      	lsls	r3, r3, #23
 8014d64:	4605      	mov	r5, r0
 8014d66:	460c      	mov	r4, r1
 8014d68:	4616      	mov	r6, r2
 8014d6a:	d505      	bpl.n	8014d78 <__swrite+0x1e>
 8014d6c:	2302      	movs	r3, #2
 8014d6e:	2200      	movs	r2, #0
 8014d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d74:	f000 f886 	bl	8014e84 <_lseek_r>
 8014d78:	89a3      	ldrh	r3, [r4, #12]
 8014d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014d82:	81a3      	strh	r3, [r4, #12]
 8014d84:	4632      	mov	r2, r6
 8014d86:	463b      	mov	r3, r7
 8014d88:	4628      	mov	r0, r5
 8014d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d8e:	f000 b835 	b.w	8014dfc <_write_r>

08014d92 <__sseek>:
 8014d92:	b510      	push	{r4, lr}
 8014d94:	460c      	mov	r4, r1
 8014d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014d9a:	f000 f873 	bl	8014e84 <_lseek_r>
 8014d9e:	1c43      	adds	r3, r0, #1
 8014da0:	89a3      	ldrh	r3, [r4, #12]
 8014da2:	bf15      	itete	ne
 8014da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8014da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014dae:	81a3      	strheq	r3, [r4, #12]
 8014db0:	bf18      	it	ne
 8014db2:	81a3      	strhne	r3, [r4, #12]
 8014db4:	bd10      	pop	{r4, pc}

08014db6 <__sclose>:
 8014db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014dba:	f000 b831 	b.w	8014e20 <_close_r>

08014dbe <strncmp>:
 8014dbe:	b510      	push	{r4, lr}
 8014dc0:	b16a      	cbz	r2, 8014dde <strncmp+0x20>
 8014dc2:	3901      	subs	r1, #1
 8014dc4:	1884      	adds	r4, r0, r2
 8014dc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014dca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014dce:	4293      	cmp	r3, r2
 8014dd0:	d103      	bne.n	8014dda <strncmp+0x1c>
 8014dd2:	42a0      	cmp	r0, r4
 8014dd4:	d001      	beq.n	8014dda <strncmp+0x1c>
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d1f5      	bne.n	8014dc6 <strncmp+0x8>
 8014dda:	1a98      	subs	r0, r3, r2
 8014ddc:	bd10      	pop	{r4, pc}
 8014dde:	4610      	mov	r0, r2
 8014de0:	e7fc      	b.n	8014ddc <strncmp+0x1e>

08014de2 <__ascii_wctomb>:
 8014de2:	b149      	cbz	r1, 8014df8 <__ascii_wctomb+0x16>
 8014de4:	2aff      	cmp	r2, #255	; 0xff
 8014de6:	bf85      	ittet	hi
 8014de8:	238a      	movhi	r3, #138	; 0x8a
 8014dea:	6003      	strhi	r3, [r0, #0]
 8014dec:	700a      	strbls	r2, [r1, #0]
 8014dee:	f04f 30ff 	movhi.w	r0, #4294967295
 8014df2:	bf98      	it	ls
 8014df4:	2001      	movls	r0, #1
 8014df6:	4770      	bx	lr
 8014df8:	4608      	mov	r0, r1
 8014dfa:	4770      	bx	lr

08014dfc <_write_r>:
 8014dfc:	b538      	push	{r3, r4, r5, lr}
 8014dfe:	4c07      	ldr	r4, [pc, #28]	; (8014e1c <_write_r+0x20>)
 8014e00:	4605      	mov	r5, r0
 8014e02:	4608      	mov	r0, r1
 8014e04:	4611      	mov	r1, r2
 8014e06:	2200      	movs	r2, #0
 8014e08:	6022      	str	r2, [r4, #0]
 8014e0a:	461a      	mov	r2, r3
 8014e0c:	f7f8 fd76 	bl	800d8fc <_write>
 8014e10:	1c43      	adds	r3, r0, #1
 8014e12:	d102      	bne.n	8014e1a <_write_r+0x1e>
 8014e14:	6823      	ldr	r3, [r4, #0]
 8014e16:	b103      	cbz	r3, 8014e1a <_write_r+0x1e>
 8014e18:	602b      	str	r3, [r5, #0]
 8014e1a:	bd38      	pop	{r3, r4, r5, pc}
 8014e1c:	20011fe0 	.word	0x20011fe0

08014e20 <_close_r>:
 8014e20:	b538      	push	{r3, r4, r5, lr}
 8014e22:	4c06      	ldr	r4, [pc, #24]	; (8014e3c <_close_r+0x1c>)
 8014e24:	2300      	movs	r3, #0
 8014e26:	4605      	mov	r5, r0
 8014e28:	4608      	mov	r0, r1
 8014e2a:	6023      	str	r3, [r4, #0]
 8014e2c:	f000 f870 	bl	8014f10 <_close>
 8014e30:	1c43      	adds	r3, r0, #1
 8014e32:	d102      	bne.n	8014e3a <_close_r+0x1a>
 8014e34:	6823      	ldr	r3, [r4, #0]
 8014e36:	b103      	cbz	r3, 8014e3a <_close_r+0x1a>
 8014e38:	602b      	str	r3, [r5, #0]
 8014e3a:	bd38      	pop	{r3, r4, r5, pc}
 8014e3c:	20011fe0 	.word	0x20011fe0

08014e40 <_fstat_r>:
 8014e40:	b538      	push	{r3, r4, r5, lr}
 8014e42:	4c07      	ldr	r4, [pc, #28]	; (8014e60 <_fstat_r+0x20>)
 8014e44:	2300      	movs	r3, #0
 8014e46:	4605      	mov	r5, r0
 8014e48:	4608      	mov	r0, r1
 8014e4a:	4611      	mov	r1, r2
 8014e4c:	6023      	str	r3, [r4, #0]
 8014e4e:	f000 f867 	bl	8014f20 <_fstat>
 8014e52:	1c43      	adds	r3, r0, #1
 8014e54:	d102      	bne.n	8014e5c <_fstat_r+0x1c>
 8014e56:	6823      	ldr	r3, [r4, #0]
 8014e58:	b103      	cbz	r3, 8014e5c <_fstat_r+0x1c>
 8014e5a:	602b      	str	r3, [r5, #0]
 8014e5c:	bd38      	pop	{r3, r4, r5, pc}
 8014e5e:	bf00      	nop
 8014e60:	20011fe0 	.word	0x20011fe0

08014e64 <_isatty_r>:
 8014e64:	b538      	push	{r3, r4, r5, lr}
 8014e66:	4c06      	ldr	r4, [pc, #24]	; (8014e80 <_isatty_r+0x1c>)
 8014e68:	2300      	movs	r3, #0
 8014e6a:	4605      	mov	r5, r0
 8014e6c:	4608      	mov	r0, r1
 8014e6e:	6023      	str	r3, [r4, #0]
 8014e70:	f000 f866 	bl	8014f40 <_isatty>
 8014e74:	1c43      	adds	r3, r0, #1
 8014e76:	d102      	bne.n	8014e7e <_isatty_r+0x1a>
 8014e78:	6823      	ldr	r3, [r4, #0]
 8014e7a:	b103      	cbz	r3, 8014e7e <_isatty_r+0x1a>
 8014e7c:	602b      	str	r3, [r5, #0]
 8014e7e:	bd38      	pop	{r3, r4, r5, pc}
 8014e80:	20011fe0 	.word	0x20011fe0

08014e84 <_lseek_r>:
 8014e84:	b538      	push	{r3, r4, r5, lr}
 8014e86:	4c07      	ldr	r4, [pc, #28]	; (8014ea4 <_lseek_r+0x20>)
 8014e88:	4605      	mov	r5, r0
 8014e8a:	4608      	mov	r0, r1
 8014e8c:	4611      	mov	r1, r2
 8014e8e:	2200      	movs	r2, #0
 8014e90:	6022      	str	r2, [r4, #0]
 8014e92:	461a      	mov	r2, r3
 8014e94:	f000 f864 	bl	8014f60 <_lseek>
 8014e98:	1c43      	adds	r3, r0, #1
 8014e9a:	d102      	bne.n	8014ea2 <_lseek_r+0x1e>
 8014e9c:	6823      	ldr	r3, [r4, #0]
 8014e9e:	b103      	cbz	r3, 8014ea2 <_lseek_r+0x1e>
 8014ea0:	602b      	str	r3, [r5, #0]
 8014ea2:	bd38      	pop	{r3, r4, r5, pc}
 8014ea4:	20011fe0 	.word	0x20011fe0

08014ea8 <memmove>:
 8014ea8:	4288      	cmp	r0, r1
 8014eaa:	b510      	push	{r4, lr}
 8014eac:	eb01 0302 	add.w	r3, r1, r2
 8014eb0:	d807      	bhi.n	8014ec2 <memmove+0x1a>
 8014eb2:	1e42      	subs	r2, r0, #1
 8014eb4:	4299      	cmp	r1, r3
 8014eb6:	d00a      	beq.n	8014ece <memmove+0x26>
 8014eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014ebc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014ec0:	e7f8      	b.n	8014eb4 <memmove+0xc>
 8014ec2:	4283      	cmp	r3, r0
 8014ec4:	d9f5      	bls.n	8014eb2 <memmove+0xa>
 8014ec6:	1881      	adds	r1, r0, r2
 8014ec8:	1ad2      	subs	r2, r2, r3
 8014eca:	42d3      	cmn	r3, r2
 8014ecc:	d100      	bne.n	8014ed0 <memmove+0x28>
 8014ece:	bd10      	pop	{r4, pc}
 8014ed0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ed4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014ed8:	e7f7      	b.n	8014eca <memmove+0x22>

08014eda <_malloc_usable_size_r>:
 8014eda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014ede:	1f18      	subs	r0, r3, #4
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	bfbc      	itt	lt
 8014ee4:	580b      	ldrlt	r3, [r1, r0]
 8014ee6:	18c0      	addlt	r0, r0, r3
 8014ee8:	4770      	bx	lr
	...

08014eec <_read_r>:
 8014eec:	b538      	push	{r3, r4, r5, lr}
 8014eee:	4c07      	ldr	r4, [pc, #28]	; (8014f0c <_read_r+0x20>)
 8014ef0:	4605      	mov	r5, r0
 8014ef2:	4608      	mov	r0, r1
 8014ef4:	4611      	mov	r1, r2
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	6022      	str	r2, [r4, #0]
 8014efa:	461a      	mov	r2, r3
 8014efc:	f000 f838 	bl	8014f70 <_read>
 8014f00:	1c43      	adds	r3, r0, #1
 8014f02:	d102      	bne.n	8014f0a <_read_r+0x1e>
 8014f04:	6823      	ldr	r3, [r4, #0]
 8014f06:	b103      	cbz	r3, 8014f0a <_read_r+0x1e>
 8014f08:	602b      	str	r3, [r5, #0]
 8014f0a:	bd38      	pop	{r3, r4, r5, pc}
 8014f0c:	20011fe0 	.word	0x20011fe0

08014f10 <_close>:
 8014f10:	4b02      	ldr	r3, [pc, #8]	; (8014f1c <_close+0xc>)
 8014f12:	2258      	movs	r2, #88	; 0x58
 8014f14:	601a      	str	r2, [r3, #0]
 8014f16:	f04f 30ff 	mov.w	r0, #4294967295
 8014f1a:	4770      	bx	lr
 8014f1c:	20011fe0 	.word	0x20011fe0

08014f20 <_fstat>:
 8014f20:	4b02      	ldr	r3, [pc, #8]	; (8014f2c <_fstat+0xc>)
 8014f22:	2258      	movs	r2, #88	; 0x58
 8014f24:	601a      	str	r2, [r3, #0]
 8014f26:	f04f 30ff 	mov.w	r0, #4294967295
 8014f2a:	4770      	bx	lr
 8014f2c:	20011fe0 	.word	0x20011fe0

08014f30 <_getpid>:
 8014f30:	4b02      	ldr	r3, [pc, #8]	; (8014f3c <_getpid+0xc>)
 8014f32:	2258      	movs	r2, #88	; 0x58
 8014f34:	601a      	str	r2, [r3, #0]
 8014f36:	f04f 30ff 	mov.w	r0, #4294967295
 8014f3a:	4770      	bx	lr
 8014f3c:	20011fe0 	.word	0x20011fe0

08014f40 <_isatty>:
 8014f40:	4b02      	ldr	r3, [pc, #8]	; (8014f4c <_isatty+0xc>)
 8014f42:	2258      	movs	r2, #88	; 0x58
 8014f44:	601a      	str	r2, [r3, #0]
 8014f46:	2000      	movs	r0, #0
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop
 8014f4c:	20011fe0 	.word	0x20011fe0

08014f50 <_kill>:
 8014f50:	4b02      	ldr	r3, [pc, #8]	; (8014f5c <_kill+0xc>)
 8014f52:	2258      	movs	r2, #88	; 0x58
 8014f54:	601a      	str	r2, [r3, #0]
 8014f56:	f04f 30ff 	mov.w	r0, #4294967295
 8014f5a:	4770      	bx	lr
 8014f5c:	20011fe0 	.word	0x20011fe0

08014f60 <_lseek>:
 8014f60:	4b02      	ldr	r3, [pc, #8]	; (8014f6c <_lseek+0xc>)
 8014f62:	2258      	movs	r2, #88	; 0x58
 8014f64:	601a      	str	r2, [r3, #0]
 8014f66:	f04f 30ff 	mov.w	r0, #4294967295
 8014f6a:	4770      	bx	lr
 8014f6c:	20011fe0 	.word	0x20011fe0

08014f70 <_read>:
 8014f70:	4b02      	ldr	r3, [pc, #8]	; (8014f7c <_read+0xc>)
 8014f72:	2258      	movs	r2, #88	; 0x58
 8014f74:	601a      	str	r2, [r3, #0]
 8014f76:	f04f 30ff 	mov.w	r0, #4294967295
 8014f7a:	4770      	bx	lr
 8014f7c:	20011fe0 	.word	0x20011fe0

08014f80 <_sbrk>:
 8014f80:	4b04      	ldr	r3, [pc, #16]	; (8014f94 <_sbrk+0x14>)
 8014f82:	6819      	ldr	r1, [r3, #0]
 8014f84:	4602      	mov	r2, r0
 8014f86:	b909      	cbnz	r1, 8014f8c <_sbrk+0xc>
 8014f88:	4903      	ldr	r1, [pc, #12]	; (8014f98 <_sbrk+0x18>)
 8014f8a:	6019      	str	r1, [r3, #0]
 8014f8c:	6818      	ldr	r0, [r3, #0]
 8014f8e:	4402      	add	r2, r0
 8014f90:	601a      	str	r2, [r3, #0]
 8014f92:	4770      	bx	lr
 8014f94:	20002600 	.word	0x20002600
 8014f98:	20011fe8 	.word	0x20011fe8

08014f9c <_exit>:
 8014f9c:	e7fe      	b.n	8014f9c <_exit>
	...

08014fa0 <_init>:
 8014fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fa2:	bf00      	nop
 8014fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fa6:	bc08      	pop	{r3}
 8014fa8:	469e      	mov	lr, r3
 8014faa:	4770      	bx	lr

08014fac <_fini>:
 8014fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fae:	bf00      	nop
 8014fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014fb2:	bc08      	pop	{r3}
 8014fb4:	469e      	mov	lr, r3
 8014fb6:	4770      	bx	lr
