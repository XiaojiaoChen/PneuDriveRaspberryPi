
PneuDriveRaspberryPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015768  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  08015968  08015968  00025968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080161b8  080161b8  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  080161b8  080161b8  000261b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080161c0  080161c0  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080161c0  080161c0  000261c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080161cc  080161cc  000261cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  080161d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011acc  2000036c  0801653c  0003036c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20011e38  0801653c  00031e38  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005911c  00000000  00000000  0003039a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a2da  00000000  00000000  000894b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002640  00000000  00000000  00093790  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002270  00000000  00000000  00095dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035f10  00000000  00000000  00098040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002fbb3  00000000  00000000  000cdf50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001179bd  00000000  00000000  000fdb03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002154c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ad78  00000000  00000000  0021553c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000b4  00000000  00000000  002202b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  00220368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000036c 	.word	0x2000036c
 800021c:	00000000 	.word	0x00000000
 8000220:	08015950 	.word	0x08015950

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000370 	.word	0x20000370
 800023c:	08015950 	.word	0x08015950

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <arm_mat_add_f32>:

arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b091      	sub	sp, #68	; 0x44
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	60f8      	str	r0, [r7, #12]
 80005f8:	60b9      	str	r1, [r7, #8]
 80005fa:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	637b      	str	r3, [r7, #52]	; 0x34
  else
#endif
  {

    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	881b      	ldrh	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	885b      	ldrh	r3, [r3, #2]
 8000618:	fb03 f302 	mul.w	r3, r3, r2
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined (ARM_MATH_DSP)

    /* Loop unrolling */
    blkCnt = numSamples >> 2U;
 800061e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000620:	089b      	lsrs	r3, r3, #2
 8000622:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000624:	e052      	b.n	80006cc <arm_mat_add_f32+0xdc>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 800062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	61fb      	str	r3, [r7, #28]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000638:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800063c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000644:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 800064e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000654:	ed97 7a07 	vldr	s14, [r7, #28]
 8000658:	edd7 7a05 	vldr	s15, [r7, #20]
 800065c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000660:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 800066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800066c:	69ba      	ldr	r2, [r7, #24]
 800066e:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000672:	3304      	adds	r3, #4
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 800067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	617b      	str	r3, [r7, #20]

      /* out = sourceA + sourceB */
      out1 = inA1 + inB1;
 8000684:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000688:	edd7 7a08 	vldr	s15, [r7, #32]
 800068c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000690:	edc7 7a06 	vstr	s15, [r7, #24]

      /* out = sourceA + sourceB */
      out2 = inA2 + inB2;
 8000694:	ed97 7a07 	vldr	s14, [r7, #28]
 8000698:	edd7 7a05 	vldr	s15, [r7, #20]
 800069c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006a0:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 80006a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006a6:	3308      	adds	r3, #8
 80006a8:	69ba      	ldr	r2, [r7, #24]
 80006aa:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 80006ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ae:	330c      	adds	r3, #12
 80006b0:	693a      	ldr	r2, [r7, #16]
 80006b2:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 80006b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006b6:	3310      	adds	r3, #16
 80006b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 80006ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006bc:	3310      	adds	r3, #16
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 80006c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006c2:	3310      	adds	r3, #16
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
      /* Decrement the loop counter */
      blkCnt--;
 80006c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006c8:	3b01      	subs	r3, #1
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 80006cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1a9      	bne.n	8000626 <arm_mat_add_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	f003 0303 	and.w	r3, r3, #3
 80006d8:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 80006da:	e013      	b.n	8000704 <arm_mat_add_f32+0x114>
    {
      /* C(m,n) = A(m,n) + B(m,n) */
      /* Add and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) + (*pIn2++);
 80006dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80006de:	1d1a      	adds	r2, r3, #4
 80006e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80006e2:	ed93 7a00 	vldr	s14, [r3]
 80006e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80006e8:	1d1a      	adds	r2, r3, #4
 80006ea:	63ba      	str	r2, [r7, #56]	; 0x38
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006f2:	1d1a      	adds	r2, r3, #4
 80006f4:	637a      	str	r2, [r7, #52]	; 0x34
 80006f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006fa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 80006fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000700:	3b01      	subs	r3, #1
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1e8      	bne.n	80006dc <arm_mat_add_f32+0xec>
    }

    /* set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800070a:	2300      	movs	r3, #0
 800070c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  }

  /* Return to application */
  return (status);
 8000710:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000714:	4618      	mov	r0, r3
 8000716:	3744      	adds	r7, #68	; 0x44
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	460b      	mov	r3, r1
 800072c:	817b      	strh	r3, [r7, #10]
 800072e:	4613      	mov	r3, r2
 8000730:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	897a      	ldrh	r2, [r7, #10]
 8000736:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	893a      	ldrh	r2, [r7, #8]
 800073c:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <arm_mat_inverse_f32>:
 */

arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000750:	b480      	push	{r7}
 8000752:	b09b      	sub	sp, #108	; 0x6c
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
 8000758:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	623b      	str	r3, [r7, #32]
  float32_t *pInT1, *pInT2;                      /* Temporary input data matrix pointer */
  float32_t *pOutT1, *pOutT2;                    /* Temporary output data matrix pointer */
  float32_t *pPivotRowIn, *pPRT_in, *pPivotRowDst, *pPRT_pDst;  /* Temporary input and output data matrix pointer */
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	61fb      	str	r3, [r7, #28]
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	885b      	ldrh	r3, [r3, #2]
 8000770:	61bb      	str	r3, [r7, #24]
#if defined (ARM_MATH_DSP)
  float32_t maxC;                                /* maximum value in the column */

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t Xchg, in = 0.0f, in1;                /* Temporary input values  */
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t i, rowCnt, flag = 0U, j, loopCnt, k, l;      /* loop counters */
 8000778:	2300      	movs	r3, #0
 800077a:	63bb      	str	r3, [r7, #56]	; 0x38
	 *		8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
	 *		   Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
	 *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pOutT1 = pOut;
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	65bb      	str	r3, [r7, #88]	; 0x58

    /* Loop over the number of rows */
    rowCnt = numRows;
 8000780:	69fb      	ldr	r3, [r7, #28]
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8000784:	e029      	b.n	80007da <arm_mat_inverse_f32+0x8a>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8000786:	69fa      	ldr	r2, [r7, #28]
 8000788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800078a:	1ad3      	subs	r3, r2, r3
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 800078e:	e008      	b.n	80007a2 <arm_mat_inverse_f32+0x52>
      {
        *pOutT1++ = 0.0f;
 8000790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000792:	1d1a      	adds	r2, r3, #4
 8000794:	65ba      	str	r2, [r7, #88]	; 0x58
 8000796:	f04f 0200 	mov.w	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
        j--;
 800079c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800079e:	3b01      	subs	r3, #1
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1f3      	bne.n	8000790 <arm_mat_inverse_f32+0x40>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pOutT1++ = 1.0f;
 80007a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007aa:	1d1a      	adds	r2, r3, #4
 80007ac:	65ba      	str	r2, [r7, #88]	; 0x58
 80007ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80007b2:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80007b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007b6:	3b01      	subs	r3, #1
 80007b8:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ba:	e008      	b.n	80007ce <arm_mat_inverse_f32+0x7e>
      {
        *pOutT1++ = 0.0f;
 80007bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80007be:	1d1a      	adds	r2, r3, #4
 80007c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80007c2:	f04f 0200 	mov.w	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
        j--;
 80007c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ca:	3b01      	subs	r3, #1
 80007cc:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 80007ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f3      	bne.n	80007bc <arm_mat_inverse_f32+0x6c>
      }

      /* Decrement the loop counter */
      rowCnt--;
 80007d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007d6:	3b01      	subs	r3, #1
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (rowCnt > 0U)
 80007da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1d2      	bne.n	8000786 <arm_mat_inverse_f32+0x36>
    }

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */
    loopCnt = numCols;
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Index modifier to navigate through the columns */
    l = 0U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28

    while (loopCnt > 0U)
 80007e8:	e1aa      	b.n	8000b40 <arm_mat_inverse_f32+0x3f0>
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      /* Working pointer for the input matrix that points
       * to the pivot element of the particular row  */
      pInT1 = pIn + (l * numCols);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	69ba      	ldr	r2, [r7, #24]
 80007ee:	fb02 f303 	mul.w	r3, r2, r3
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f6:	4413      	add	r3, r2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Working pointer for the destination matrix that points
       * to the pivot element of the particular row  */
      pOutT1 = pOut + (l * numCols);
 80007fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fc:	69ba      	ldr	r2, [r7, #24]
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	6a3a      	ldr	r2, [r7, #32]
 8000806:	4413      	add	r3, r2
 8000808:	65bb      	str	r3, [r7, #88]	; 0x58

      /* Temporary variable to hold the pivot value */
      in = *pInT1;
 800080a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	647b      	str	r3, [r7, #68]	; 0x44

      /* Grab the most significant value from column l */
      maxC = 0;
 8000810:	f04f 0300 	mov.w	r3, #0
 8000814:	64bb      	str	r3, [r7, #72]	; 0x48
      for (i = l; i < numRows; i++)
 8000816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
 800081a:	e036      	b.n	800088a <arm_mat_inverse_f32+0x13a>
      {
        maxC = *pInT1 > 0 ? (*pInT1 > maxC ? *pInT1 : maxC) : (-*pInT1 > maxC ? -*pInT1 : maxC);
 800081c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800081e:	edd3 7a00 	vldr	s15, [r3]
 8000822:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	dd10      	ble.n	800084e <arm_mat_inverse_f32+0xfe>
 800082c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800082e:	edd3 7a00 	vldr	s15, [r3]
 8000832:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800083a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083e:	d503      	bpl.n	8000848 <arm_mat_inverse_f32+0xf8>
 8000840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000842:	edd3 7a00 	vldr	s15, [r3]
 8000846:	e016      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000848:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800084c:	e013      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 800084e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000850:	edd3 7a00 	vldr	s15, [r3]
 8000854:	eef1 7a67 	vneg.f32	s15, s15
 8000858:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800085c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000864:	d505      	bpl.n	8000872 <arm_mat_inverse_f32+0x122>
 8000866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000868:	edd3 7a00 	vldr	s15, [r3]
 800086c:	eef1 7a67 	vneg.f32	s15, s15
 8000870:	e001      	b.n	8000876 <arm_mat_inverse_f32+0x126>
 8000872:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000876:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        pInT1 += numCols;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000880:	4413      	add	r3, r2
 8000882:	663b      	str	r3, [r7, #96]	; 0x60
      for (i = l; i < numRows; i++)
 8000884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000886:	3301      	adds	r3, #1
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
 800088a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3c4      	bcc.n	800081c <arm_mat_inverse_f32+0xcc>
      }

      /* Update the status if the matrix is singular */
      if (maxC == 0.0f)
 8000892:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000896:	eef5 7a40 	vcmp.f32	s15, #0.0
 800089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089e:	d102      	bne.n	80008a6 <arm_mat_inverse_f32+0x156>
      {
        return ARM_MATH_SINGULAR;
 80008a0:	f06f 0304 	mvn.w	r3, #4
 80008a4:	e186      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Restore pInT1  */
      pInT1 = pIn;
 80008a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80008a8:	663b      	str	r3, [r7, #96]	; 0x60

      /* Destination pointer modifier */
      k = 1U;
 80008aa:	2301      	movs	r3, #1
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Check if the pivot element is the most significant of the column */
      if ( (in > 0.0f ? in : -in) != maxC)
 80008ae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	dd02      	ble.n	80008c2 <arm_mat_inverse_f32+0x172>
 80008bc:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c0:	e003      	b.n	80008ca <arm_mat_inverse_f32+0x17a>
 80008c2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80008c6:	eef1 7a67 	vneg.f32	s15, s15
 80008ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80008ce:	eef4 7a47 	vcmp.f32	s15, s14
 80008d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008d6:	d069      	beq.n	80009ac <arm_mat_inverse_f32+0x25c>
      {
        /* Loop over the number rows present below */
        i = numRows - (l + 1U);
 80008d8:	69fa      	ldr	r2, [r7, #28]
 80008da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	3b01      	subs	r3, #1
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

        while (i > 0U)
 80008e2:	e060      	b.n	80009a6 <arm_mat_inverse_f32+0x256>
        {
          /* Update the input and destination pointers */
          pInT2 = pInT1 + (numCols * l);
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80008e8:	fb02 f303 	mul.w	r3, r2, r3
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80008f0:	4413      	add	r3, r2
 80008f2:	65fb      	str	r3, [r7, #92]	; 0x5c
          pOutT2 = pOutT1 + (numCols * k);
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f8:	fb02 f303 	mul.w	r3, r2, r3
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000900:	4413      	add	r3, r2
 8000902:	657b      	str	r3, [r7, #84]	; 0x54

          /* Look for the most significant element to
           * replace in the rows below */
          if ((*pInT2 > 0.0f ? *pInT2: -*pInT2) == maxC)
 8000904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	dd03      	ble.n	800091c <arm_mat_inverse_f32+0x1cc>
 8000914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000916:	edd3 7a00 	vldr	s15, [r3]
 800091a:	e004      	b.n	8000926 <arm_mat_inverse_f32+0x1d6>
 800091c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800091e:	edd3 7a00 	vldr	s15, [r3]
 8000922:	eef1 7a67 	vneg.f32	s15, s15
 8000926:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800092a:	eef4 7a47 	vcmp.f32	s15, s14
 800092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000932:	d132      	bne.n	800099a <arm_mat_inverse_f32+0x24a>
          {
            /* Loop over number of columns
             * to the right of the pilot element */
            j = numCols - l;
 8000934:	69ba      	ldr	r2, [r7, #24]
 8000936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800093c:	e010      	b.n	8000960 <arm_mat_inverse_f32+0x210>
            {
              /* Exchange the row elements of the input matrix */
              Xchg = *pInT2;
 800093e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
              *pInT2++ = *pInT1;
 8000944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000946:	1d1a      	adds	r2, r3, #4
 8000948:	65fa      	str	r2, [r7, #92]	; 0x5c
 800094a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	601a      	str	r2, [r3, #0]
              *pInT1++ = Xchg;
 8000950:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000952:	1d1a      	adds	r2, r3, #4
 8000954:	663a      	str	r2, [r7, #96]	; 0x60
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 800095a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800095c:	3b01      	subs	r3, #1
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 8000960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1eb      	bne.n	800093e <arm_mat_inverse_f32+0x1ee>
            }

            /* Loop over number of columns of the destination matrix */
            j = numCols;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	637b      	str	r3, [r7, #52]	; 0x34

            while (j > 0U)
 800096a:	e010      	b.n	800098e <arm_mat_inverse_f32+0x23e>
            {
              /* Exchange the row elements of the destination matrix */
              Xchg = *pOutT2;
 800096c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	617b      	str	r3, [r7, #20]
              *pOutT2++ = *pOutT1;
 8000972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000974:	1d1a      	adds	r2, r3, #4
 8000976:	657a      	str	r2, [r7, #84]	; 0x54
 8000978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	601a      	str	r2, [r3, #0]
              *pOutT1++ = Xchg;
 800097e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000980:	1d1a      	adds	r2, r3, #4
 8000982:	65ba      	str	r2, [r7, #88]	; 0x58
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	601a      	str	r2, [r3, #0]

              /* Decrement the loop counter */
              j--;
 8000988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800098a:	3b01      	subs	r3, #1
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
            while (j > 0U)
 800098e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000990:	2b00      	cmp	r3, #0
 8000992:	d1eb      	bne.n	800096c <arm_mat_inverse_f32+0x21c>
            }

            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8000994:	2301      	movs	r3, #1
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38

            /* Break after exchange is done */
            break;
 8000998:	e008      	b.n	80009ac <arm_mat_inverse_f32+0x25c>
          }

          /* Update the destination pointer modifier */
          k++;
 800099a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800099c:	3301      	adds	r3, #1
 800099e:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* Decrement the loop counter */
          i--;
 80009a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a2:	3b01      	subs	r3, #1
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
        while (i > 0U)
 80009a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d19b      	bne.n	80008e4 <arm_mat_inverse_f32+0x194>
        }
      }

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (in == 0.0f))
 80009ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d009      	beq.n	80009c6 <arm_mat_inverse_f32+0x276>
 80009b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80009b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009be:	d102      	bne.n	80009c6 <arm_mat_inverse_f32+0x276>
      {
        return ARM_MATH_SINGULAR;
 80009c0:	f06f 0304 	mvn.w	r3, #4
 80009c4:	e0f6      	b.n	8000bb4 <arm_mat_inverse_f32+0x464>
      }

      /* Points to the pivot row of input and destination matrices */
      pPivotRowIn = pIn + (l * numCols);
 80009c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	fb02 f303 	mul.w	r3, r2, r3
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80009d2:	4413      	add	r3, r2
 80009d4:	613b      	str	r3, [r7, #16]
      pPivotRowDst = pOut + (l * numCols);
 80009d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d8:	69ba      	ldr	r2, [r7, #24]
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a3a      	ldr	r2, [r7, #32]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]

      /* Temporary pointers to the pivot row pointers */
      pInT1 = pPivotRowIn;
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pPivotRowDst;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* Pivot element of the row */
      in = *pPivotRowIn;
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	647b      	str	r3, [r7, #68]	; 0x44

      /* Loop over number of columns
       * to the right of the pilot element */
      j = (numCols - l);
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 80009fc:	e010      	b.n	8000a20 <arm_mat_inverse_f32+0x2d0>
      {
        /* Divide each element of the row of the input matrix
         * by the pivot element */
        in1 = *pInT1;
 80009fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	60bb      	str	r3, [r7, #8]
        *pInT1++ = in1 / in;
 8000a04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a06:	1d1a      	adds	r2, r3, #4
 8000a08:	663a      	str	r2, [r7, #96]	; 0x60
 8000a0a:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a0e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a16:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1eb      	bne.n	80009fe <arm_mat_inverse_f32+0x2ae>
      }

      /* Loop over number of columns of the destination matrix */
      j = numCols;
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	637b      	str	r3, [r7, #52]	; 0x34

      while (j > 0U)
 8000a2a:	e010      	b.n	8000a4e <arm_mat_inverse_f32+0x2fe>
      {
        /* Divide each element of the row of the destination matrix
         * by the pivot element */
        in1 = *pInT2;
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]
        *pInT2++ = in1 / in;
 8000a32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a34:	1d1a      	adds	r2, r3, #4
 8000a36:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000a38:	edd7 6a02 	vldr	s13, [r7, #8]
 8000a3c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a44:	edc3 7a00 	vstr	s15, [r3]

        /* Decrement the loop counter */
        j--;
 8000a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
      while (j > 0U)
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1eb      	bne.n	8000a2c <arm_mat_inverse_f32+0x2dc>

      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      /* Temporary pointers for input and destination matrices */
      pInT1 = pIn;
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	663b      	str	r3, [r7, #96]	; 0x60
      pInT2 = pOut;
 8000a58:	6a3b      	ldr	r3, [r7, #32]
 8000a5a:	65fb      	str	r3, [r7, #92]	; 0x5c

      /* index used to check for pivot element */
      i = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	643b      	str	r3, [r7, #64]	; 0x40

      /* Loop over number of rows */
      /*  to be replaced by the sum of that row and a multiple of row i */
      k = numRows;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c

      while (k > 0U)
 8000a64:	e060      	b.n	8000b28 <arm_mat_inverse_f32+0x3d8>
      {
        /* Check for the pivot element */
        if (i == l)
 8000a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	d10c      	bne.n	8000a88 <arm_mat_inverse_f32+0x338>
        {
          /* If the processing element is the pivot element,
             only the columns to the right are to be processed */
          pInT1 += numCols - l;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a78:	4413      	add	r3, r2
 8000a7a:	663b      	str	r3, [r7, #96]	; 0x60

          pInT2 += numCols;
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	009b      	lsls	r3, r3, #2
 8000a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000a82:	4413      	add	r3, r2
 8000a84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000a86:	e044      	b.n	8000b12 <arm_mat_inverse_f32+0x3c2>
        }
        else
        {
          /* Element of the reference row */
          in = *pInT1;
 8000a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	647b      	str	r3, [r7, #68]	; 0x44

          /* Working pointers for input and destination pivot rows */
          pPRT_in = pPivotRowIn;
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	653b      	str	r3, [r7, #80]	; 0x50
          pPRT_pDst = pPivotRowDst;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Loop over the number of columns to the right of the pivot element,
             to replace the elements in the input matrix */
          j = (numCols - l);
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000a9e:	e017      	b.n	8000ad0 <arm_mat_inverse_f32+0x380>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT1;
 8000aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60bb      	str	r3, [r7, #8]
            *pInT1++ = in1 - (in * *pPRT_in++);
 8000aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aa8:	1d1a      	adds	r2, r3, #4
 8000aaa:	653a      	str	r2, [r7, #80]	; 0x50
 8000aac:	ed93 7a00 	vldr	s14, [r3]
 8000ab0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ab8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000aba:	1d1a      	adds	r2, r3, #4
 8000abc:	663a      	str	r2, [r7, #96]	; 0x60
 8000abe:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac6:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000acc:	3b01      	subs	r3, #1
 8000ace:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1e4      	bne.n	8000aa0 <arm_mat_inverse_f32+0x350>
          }

          /* Loop over the number of columns to
             replace the elements in the destination matrix */
          j = numCols;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34

          while (j > 0U)
 8000ada:	e017      	b.n	8000b0c <arm_mat_inverse_f32+0x3bc>
          {
            /* Replace the element by the sum of that row
               and a multiple of the reference row  */
            in1 = *pInT2;
 8000adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60bb      	str	r3, [r7, #8]
            *pInT2++ = in1 - (in * *pPRT_pDst++);
 8000ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ae4:	1d1a      	adds	r2, r3, #4
 8000ae6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000ae8:	ed93 7a00 	vldr	s14, [r3]
 8000aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000af6:	1d1a      	adds	r2, r3, #4
 8000af8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8000afa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b02:	edc3 7a00 	vstr	s15, [r3]

            /* Decrement the loop counter */
            j--;
 8000b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	637b      	str	r3, [r7, #52]	; 0x34
          while (j > 0U)
 8000b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <arm_mat_inverse_f32+0x38c>
          }

        }

        /* Increment the temporary input pointer */
        pInT1 = pInT1 + l;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b18:	4413      	add	r3, r2
 8000b1a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Decrement the loop counter */
        k--;
 8000b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Increment the pivot index */
        i++;
 8000b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b24:	3301      	adds	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
      while (k > 0U)
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d19b      	bne.n	8000a66 <arm_mat_inverse_f32+0x316>
      }

      /* Increment the input pointer */
      pIn++;
 8000b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000b30:	3304      	adds	r3, #4
 8000b32:	667b      	str	r3, [r7, #100]	; 0x64

      /* Decrement the loop counter */
      loopCnt--;
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	3b01      	subs	r3, #1
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

      /* Increment the index modifier */
      l++;
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (loopCnt > 0U)
 8000b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	f47f ae51 	bne.w	80007ea <arm_mat_inverse_f32+0x9a>


#endif /* #if defined (ARM_MATH_DSP) */

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((flag != 1U) && (in == 0.0f))
 8000b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d02d      	beq.n	8000bb0 <arm_mat_inverse_f32+0x460>
 8000b54:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000b58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b60:	d126      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
    {
      pIn = pSrc->pData;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	667b      	str	r3, [r7, #100]	; 0x64
      for (i = 0; i < numRows * numCols; i++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8000b6c:	e00d      	b.n	8000b8a <arm_mat_inverse_f32+0x43a>
      {
        if (pIn[i] != 0.0f)
 8000b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000b74:	4413      	add	r3, r2
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	d10a      	bne.n	8000b9a <arm_mat_inverse_f32+0x44a>
      for (i = 0; i < numRows * numCols; i++)
 8000b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b86:	3301      	adds	r3, #1
 8000b88:	643b      	str	r3, [r7, #64]	; 0x40
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d3ea      	bcc.n	8000b6e <arm_mat_inverse_f32+0x41e>
 8000b98:	e000      	b.n	8000b9c <arm_mat_inverse_f32+0x44c>
            break;
 8000b9a:	bf00      	nop
      }

      if (i == numRows * numCols)
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d102      	bne.n	8000bb0 <arm_mat_inverse_f32+0x460>
        status = ARM_MATH_SINGULAR;
 8000baa:	23fb      	movs	r3, #251	; 0xfb
 8000bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  /* Return to application */
  return (status);
 8000bb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	376c      	adds	r7, #108	; 0x6c
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <arm_mat_mult_f32>:

arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b095      	sub	sp, #84	; 0x54
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	885b      	ldrh	r3, [r3, #2]
 8000bee:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  float32_t in1, in2, in3, in4;
  uint16_t col, i = 0U, j, row = numRowsA, colCnt;      /* loop counters */
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	873b      	strh	r3, [r7, #56]	; 0x38
 8000bfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000bfc:	86bb      	strh	r3, [r7, #52]	; 0x34
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of the row being processed */
      px = pOut + i;
 8000bfe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c04:	4413      	add	r3, r2
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40

      /* For every row wise process, the column loop counter is to be initiated */
      col = numColsB;
 8000c08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c0a:	877b      	strh	r3, [r7, #58]	; 0x3a

      /* For every row wise process, the pIn2 pointer is set
       ** to the starting address of the pSrcB data */
      pIn2 = pSrcB->pData;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	64bb      	str	r3, [r7, #72]	; 0x48

      j = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	86fb      	strh	r3, [r7, #54]	; 0x36

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Initiate the pointer pIn1 to point to the starting address of the column being processed */
        pIn1 = pInA;
 8000c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Apply loop unrolling and compute 4 MACs simultaneously. */
        colCnt = numColsA >> 2U;
 8000c20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	867b      	strh	r3, [r7, #50]	; 0x32

        /* matrix multiplication        */
        while (colCnt > 0U)
 8000c26:	e061      	b.n	8000cec <arm_mat_mult_f32+0x12c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          in3 = *pIn2;
 8000c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c34:	4413      	add	r3, r2
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[0];
 8000c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[1];
 8000c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000c44:	ed97 7a07 	vldr	s14, [r7, #28]
 8000c48:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c50:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c58:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c68:	4413      	add	r3, r2
 8000c6a:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000c6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

          in3 = *pIn2;
 8000c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	623b      	str	r3, [r7, #32]
          pIn2 += numColsB;
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000c90:	4413      	add	r3, r2
 8000c92:	64bb      	str	r3, [r7, #72]	; 0x48
          in1 = pIn1[2];
 8000c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	61fb      	str	r3, [r7, #28]
          in2 = pIn1[3];
 8000c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c9c:	68db      	ldr	r3, [r3, #12]
 8000c9e:	61bb      	str	r3, [r7, #24]
          sum += in1 * in3;
 8000ca0:	ed97 7a07 	vldr	s14, [r7, #28]
 8000ca4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          in4 = *pIn2;
 8000cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	617b      	str	r3, [r7, #20]
          pIn2 += numColsB;
 8000cbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cc4:	4413      	add	r3, r2
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
          sum += in2 * in4;
 8000cc8:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ccc:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cd4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cdc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn1 += 4U;
 8000ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce2:	3310      	adds	r3, #16
 8000ce4:	64fb      	str	r3, [r7, #76]	; 0x4c

          /* Decrement the loop count */
          colCnt--;
 8000ce6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000cec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d19a      	bne.n	8000c28 <arm_mat_mult_f32+0x68>
        }

        /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.
         ** No loop unrolling is used. */
        colCnt = numColsA % 0x4U;
 8000cf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000cf4:	f003 0303 	and.w	r3, r3, #3
 8000cf8:	867b      	strh	r3, [r7, #50]	; 0x32

        while (colCnt > 0U)
 8000cfa:	e017      	b.n	8000d2c <arm_mat_mult_f32+0x16c>
        {
          /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
          sum += *pIn1++ * (*pIn2);
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	1d1a      	adds	r2, r3, #4
 8000d00:	64fa      	str	r2, [r7, #76]	; 0x4c
 8000d02:	ed93 7a00 	vldr	s14, [r3]
 8000d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000d14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
          pIn2 += numColsB;
 8000d1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d22:	4413      	add	r3, r2
 8000d24:	64bb      	str	r3, [r7, #72]	; 0x48

          /* Decrement the loop counter */
          colCnt--;
 8000d26:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	867b      	strh	r3, [r7, #50]	; 0x32
        while (colCnt > 0U)
 8000d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1e4      	bne.n	8000cfc <arm_mat_mult_f32+0x13c>
        }

        /* Store the result in the destination buffer */
        *px++ = sum;
 8000d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d34:	1d1a      	adds	r2, r3, #4
 8000d36:	643a      	str	r2, [r7, #64]	; 0x40
 8000d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3a:	601a      	str	r2, [r3, #0]

        /* Update the pointer pIn2 to point to the  starting address of the next column */
        j++;
 8000d3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d3e:	3301      	adds	r3, #1
 8000d40:	86fb      	strh	r3, [r7, #54]	; 0x36
        pIn2 = pSrcB->pData + j;
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Decrement the column loop counter */
        col--;
 8000d4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d50:	3b01      	subs	r3, #1
 8000d52:	877b      	strh	r3, [r7, #58]	; 0x3a

      } while (col > 0U);
 8000d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f af5d 	bne.w	8000c16 <arm_mat_mult_f32+0x56>
      } while (col > 0U);

#endif /* #if defined (ARM_MATH_DSP) */

      /* Update the pointer pInA to point to the  starting address of the next row */
      i = i + numColsB;
 8000d5c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d60:	4413      	add	r3, r2
 8000d62:	873b      	strh	r3, [r7, #56]	; 0x38
      pInA = pInA + numColsA;
 8000d64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d6a:	4413      	add	r3, r2
 8000d6c:	647b      	str	r3, [r7, #68]	; 0x44

      /* Decrement the row loop counter */
      row--;
 8000d6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d70:	3b01      	subs	r3, #1
 8000d72:	86bb      	strh	r3, [r7, #52]	; 0x34

    } while (row > 0U);
 8000d74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f47f af41 	bne.w	8000bfe <arm_mat_mult_f32+0x3e>
    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Return to application */
  return (status);
 8000d82:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3754      	adds	r7, #84	; 0x54
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <arm_mat_sub_f32>:

arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
  arm_matrix_instance_f32 * pDst)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b091      	sub	sp, #68	; 0x44
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	60f8      	str	r0, [r7, #12]
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	63bb      	str	r3, [r7, #56]	; 0x38
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer  */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	637b      	str	r3, [r7, #52]	; 0x34
  }
  else
#endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
  {
    /* Total number of samples in the input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	fb03 f302 	mul.w	r3, r3, r2
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */

    /* Loop Unrolling */
    blkCnt = numSamples >> 2U;
 8000dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
     ** a second loop below computes the remaining 1 to 3 samples. */
    while (blkCnt > 0U)
 8000dc6:	e052      	b.n	8000e6e <arm_mat_sub_f32+0xdc>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      /* Read values from source A */
      inA1 = pIn1[0];
 8000dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read values from source B */
      inB1 = pIn2[0];
 8000dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	623b      	str	r3, [r7, #32]

      /* Read values from source A */
      inA2 = pIn1[1];
 8000dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	61fb      	str	r3, [r7, #28]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000dda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000dde:	edd7 7a08 	vldr	s15, [r7, #32]
 8000de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000de6:	edc7 7a06 	vstr	s15, [r7, #24]

      /* Read values from source B */
      inB2 = pIn2[1];
 8000dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	617b      	str	r3, [r7, #20]

      /* Read values from source A */
      inA1 = pIn1[2];
 8000df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24

      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000df6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Read values from source B */
      inB1 = pIn2[2];
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	623b      	str	r3, [r7, #32]

      /* Store result in destination */
      pOut[0] = out1;
 8000e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	601a      	str	r2, [r3, #0]
      pOut[1] = out2;
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	3304      	adds	r3, #4
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	601a      	str	r2, [r3, #0]

      /* Read values from source A */
      inA2 = pIn1[3];
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	61fb      	str	r3, [r7, #28]

      /* Read values from source B */
      inB2 = pIn2[3];
 8000e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	617b      	str	r3, [r7, #20]

      /* out = sourceA - sourceB */
      out1 = inA1 - inB1;
 8000e26:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e32:	edc7 7a06 	vstr	s15, [r7, #24]


      /* out = sourceA - sourceB */
      out2 = inA2 - inB2;
 8000e36:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e42:	edc7 7a04 	vstr	s15, [r7, #16]

      /* Store result in destination */
      pOut[2] = out1;
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3308      	adds	r3, #8
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	601a      	str	r2, [r3, #0]

      /* Store result in destination */
      pOut[3] = out2;
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	330c      	adds	r3, #12
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	601a      	str	r2, [r3, #0]


      /* update pointers to process next sampels */
      pIn1 += 4U;
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	3310      	adds	r3, #16
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      pIn2 += 4U;
 8000e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e5e:	3310      	adds	r3, #16
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
      pOut += 4U;
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3310      	adds	r3, #16
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decrement the loop counter */
      blkCnt--;
 8000e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1a9      	bne.n	8000dc8 <arm_mat_sub_f32+0x36>
    }

    /* If the numSamples is not a multiple of 4, compute any remaining output samples here.
     ** No loop unrolling is used. */
    blkCnt = numSamples % 0x4U;
 8000e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	633b      	str	r3, [r7, #48]	; 0x30
    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;

#endif /* #if defined (ARM_MATH_DSP) */

    while (blkCnt > 0U)
 8000e7c:	e013      	b.n	8000ea6 <arm_mat_sub_f32+0x114>
    {
      /* C(m,n) = A(m,n) - B(m,n) */
      /* Subtract and then store the results in the destination buffer. */
      *pOut++ = (*pIn1++) - (*pIn2++);
 8000e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e80:	1d1a      	adds	r2, r3, #4
 8000e82:	63fa      	str	r2, [r7, #60]	; 0x3c
 8000e84:	ed93 7a00 	vldr	s14, [r3]
 8000e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e8e:	edd3 7a00 	vldr	s15, [r3]
 8000e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e94:	1d1a      	adds	r2, r3, #4
 8000e96:	637a      	str	r2, [r7, #52]	; 0x34
 8000e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement the loop counter */
      blkCnt--;
 8000ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
    while (blkCnt > 0U)
 8000ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e8      	bne.n	8000e7e <arm_mat_sub_f32+0xec>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }

  /* Return to application */
  return (status);
 8000eb2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3744      	adds	r7, #68	; 0x44
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <arm_mat_trans_f32>:


arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
  arm_matrix_instance_f32 * pDst)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b08b      	sub	sp, #44	; 0x2c
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	827b      	strh	r3, [r7, #18]
  uint16_t nColumns = pSrc->numCols;             /* number of columns */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885b      	ldrh	r3, [r3, #2]
 8000ee2:	823b      	strh	r3, [r7, #16]

#if defined (ARM_MATH_DSP)

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  uint16_t blkCnt, i = 0U, row = nRows;          /* loop counters */
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	83bb      	strh	r3, [r7, #28]
 8000ee8:	8a7b      	ldrh	r3, [r7, #18]
 8000eea:	837b      	strh	r3, [r7, #26]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop     */
    do
    {
      /* Loop Unrolling */
      blkCnt = nColumns >> 2;
 8000eec:	8a3b      	ldrh	r3, [r7, #16]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	83fb      	strh	r3, [r7, #30]

      /* The pointer px is set to starting address of the column being processed */
      px = pOut + i;
 8000ef2:	8bbb      	ldrh	r3, [r7, #28]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]

      /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
       ** a second loop below computes the remaining 1 to 3 samples. */
      while (blkCnt > 0U)        /* column loop */
 8000efc:	e02e      	b.n	8000f5c <arm_mat_trans_f32+0x9a>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	627a      	str	r2, [r7, #36]	; 0x24
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	6a3a      	ldr	r2, [r7, #32]
 8000f10:	4413      	add	r3, r2
 8000f12:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f16:	1d1a      	adds	r2, r3, #4
 8000f18:	627a      	str	r2, [r7, #36]	; 0x24
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	6a3b      	ldr	r3, [r7, #32]
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f20:	8a7b      	ldrh	r3, [r7, #18]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	6a3a      	ldr	r2, [r7, #32]
 8000f26:	4413      	add	r3, r2
 8000f28:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	627a      	str	r2, [r7, #36]	; 0x24
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f36:	8a7b      	ldrh	r3, [r7, #18]
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]

        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	1d1a      	adds	r2, r3, #4
 8000f44:	627a      	str	r2, [r7, #36]	; 0x24
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f4c:	8a7b      	ldrh	r3, [r7, #18]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	6a3a      	ldr	r2, [r7, #32]
 8000f52:	4413      	add	r3, r2
 8000f54:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f56:	8bfb      	ldrh	r3, [r7, #30]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)        /* column loop */
 8000f5c:	8bfb      	ldrh	r3, [r7, #30]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1cd      	bne.n	8000efe <arm_mat_trans_f32+0x3c>
      }

      /* Perform matrix transpose for last 3 samples here. */
      blkCnt = nColumns % 0x4U;
 8000f62:	8a3b      	ldrh	r3, [r7, #16]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	83fb      	strh	r3, [r7, #30]

      while (blkCnt > 0U)
 8000f6a:	e00d      	b.n	8000f88 <arm_mat_trans_f32+0xc6>
      {
        /* Read and store the input element in the destination */
        *px = *pIn++;
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	1d1a      	adds	r2, r3, #4
 8000f70:	627a      	str	r2, [r7, #36]	; 0x24
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	601a      	str	r2, [r3, #0]

        /* Update the pointer px to point to the next row of the transposed matrix */
        px += nRows;
 8000f78:	8a7b      	ldrh	r3, [r7, #18]
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	6a3a      	ldr	r2, [r7, #32]
 8000f7e:	4413      	add	r3, r2
 8000f80:	623b      	str	r3, [r7, #32]

        /* Decrement the column loop counter */
        blkCnt--;
 8000f82:	8bfb      	ldrh	r3, [r7, #30]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	83fb      	strh	r3, [r7, #30]
      while (blkCnt > 0U)
 8000f88:	8bfb      	ldrh	r3, [r7, #30]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1ee      	bne.n	8000f6c <arm_mat_trans_f32+0xaa>
        col--;
      }

#endif /* #if defined (ARM_MATH_DSP) */

      i++;
 8000f8e:	8bbb      	ldrh	r3, [r7, #28]
 8000f90:	3301      	adds	r3, #1
 8000f92:	83bb      	strh	r3, [r7, #28]

      /* Decrement the row loop counter */
      row--;
 8000f94:	8b7b      	ldrh	r3, [r7, #26]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	837b      	strh	r3, [r7, #26]

    } while (row > 0U);          /* row loop end  */
 8000f9a:	8b7b      	ldrh	r3, [r7, #26]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1a5      	bne.n	8000eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return to application */
  return (status);
 8000fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	372c      	adds	r7, #44	; 0x2c
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 fff2 	bl	8001fa2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f008 fb32 	bl	8009628 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f008 fb08 	bl	80095d8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x20>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4413      	add	r3, r2
 8000fe0:	4a04      	ldr	r2, [pc, #16]	; (8000ff4 <HAL_IncTick+0x24>)
 8000fe2:	6013      	str	r3, [r2, #0]
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	20002494 	.word	0x20002494

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	; (800100c <HAL_GetTick+0x14>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20002494 	.word	0x20002494

08001010 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffee 	bl	8000ff8 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b09      	ldr	r3, [pc, #36]	; (8001050 <HAL_Delay+0x40>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ffde 	bl	8000ff8 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e031      	b.n	80010ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f007 f9c0 	bl	80083f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_Init+0x84>)
 8001098:	4013      	ands	r3, r2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f964 	bl	8001370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffffeefd 	.word	0xffffeefd

080010dc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_ADC_ConfigChannel+0x1c>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e12a      	b.n	800134e <HAL_ADC_ConfigChannel+0x272>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b09      	cmp	r3, #9
 8001106:	d93a      	bls.n	800117e <HAL_ADC_ConfigChannel+0xa2>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001110:	d035      	beq.n	800117e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	68d9      	ldr	r1, [r3, #12]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	3b1e      	subs	r3, #30
 8001128:	2207      	movs	r2, #7
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a87      	ldr	r2, [pc, #540]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10a      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68d9      	ldr	r1, [r3, #12]
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	061a      	lsls	r2, r3, #24
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001156:	e035      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	4603      	mov	r3, r0
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4403      	add	r3, r0
 8001170:	3b1e      	subs	r3, #30
 8001172:	409a      	lsls	r2, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	430a      	orrs	r2, r1
 800117a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800117c:	e022      	b.n	80011c4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6919      	ldr	r1, [r3, #16]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	461a      	mov	r2, r3
 800118c:	4613      	mov	r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4413      	add	r3, r2
 8001192:	2207      	movs	r2, #7
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43da      	mvns	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	400a      	ands	r2, r1
 80011a0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6919      	ldr	r1, [r3, #16]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	4603      	mov	r3, r0
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4403      	add	r3, r0
 80011ba:	409a      	lsls	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	430a      	orrs	r2, r1
 80011c2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d824      	bhi.n	8001216 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3b05      	subs	r3, #5
 80011de:	221f      	movs	r2, #31
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43da      	mvns	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	400a      	ands	r2, r1
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	4618      	mov	r0, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	4413      	add	r3, r2
 8001206:	3b05      	subs	r3, #5
 8001208:	fa00 f203 	lsl.w	r2, r0, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	; 0x34
 8001214:	e04c      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b0c      	cmp	r3, #12
 800121c:	d824      	bhi.n	8001268 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3b23      	subs	r3, #35	; 0x23
 8001230:	221f      	movs	r2, #31
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	3b23      	subs	r3, #35	; 0x23
 800125a:	fa00 f203 	lsl.w	r2, r0, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	e023      	b.n	80012b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	4613      	mov	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	3b41      	subs	r3, #65	; 0x41
 800127a:	221f      	movs	r2, #31
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43da      	mvns	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	400a      	ands	r2, r1
 8001288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	4613      	mov	r3, r2
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	3b41      	subs	r3, #65	; 0x41
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10a      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012c2:	d105      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d109      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d105      	bne.n	80012ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 80012e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_ADC_ConfigChannel+0x284>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d125      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a17      	ldr	r2, [pc, #92]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_ADC_ConfigChannel+0x22e>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b11      	cmp	r3, #17
 8001308:	d11c      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_ADC_ConfigChannel+0x288>)
 8001310:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001314:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_ADC_ConfigChannel+0x280>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d111      	bne.n	8001344 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <HAL_ADC_ConfigChannel+0x28c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_ADC_ConfigChannel+0x290>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001336:	e002      	b.n	800133e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f9      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	10000012 	.word	0x10000012
 8001360:	40012000 	.word	0x40012000
 8001364:	40012300 	.word	0x40012300
 8001368:	2000000c 	.word	0x2000000c
 800136c:	431bde83 	.word	0x431bde83

08001370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001378:	4b78      	ldr	r3, [pc, #480]	; (800155c <ADC_Init+0x1ec>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	4a77      	ldr	r2, [pc, #476]	; (800155c <ADC_Init+0x1ec>)
 800137e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001382:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001384:	4b75      	ldr	r3, [pc, #468]	; (800155c <ADC_Init+0x1ec>)
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4973      	ldr	r1, [pc, #460]	; (800155c <ADC_Init+0x1ec>)
 800138e:	4313      	orrs	r3, r2
 8001390:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	021a      	lsls	r2, r3, #8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	4a58      	ldr	r2, [pc, #352]	; (8001560 <ADC_Init+0x1f0>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d022      	beq.n	800144a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e00f      	b.n	800146a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0202 	bic.w	r2, r2, #2
 8001478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	005a      	lsls	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	3b01      	subs	r3, #1
 80014c4:	035a      	lsls	r2, r3, #13
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	e007      	b.n	80014e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	051a      	lsls	r2, r3, #20
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001522:	025a      	lsls	r2, r3, #9
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800153a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	029a      	lsls	r2, r3, #10
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40012300 	.word	0x40012300
 8001560:	0f000001 	.word	0x0f000001

08001564 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0ed      	b.n	8001752 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f007 f816 	bl	80085b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0202 	bic.w	r2, r2, #2
 8001596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001598:	f7ff fd2e 	bl	8000ff8 <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800159e:	e012      	b.n	80015c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015a0:	f7ff fd2a 	bl	8000ff8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b0a      	cmp	r3, #10
 80015ac:	d90b      	bls.n	80015c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2205      	movs	r2, #5
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0c5      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e5      	bne.n	80015a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0201 	orr.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015e4:	f7ff fd08 	bl	8000ff8 <HAL_GetTick>
 80015e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015ea:	e012      	b.n	8001612 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015ec:	f7ff fd04 	bl	8000ff8 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b0a      	cmp	r3, #10
 80015f8:	d90b      	bls.n	8001612 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2205      	movs	r2, #5
 800160a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e09f      	b.n	8001752 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0e5      	beq.n	80015ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7e1b      	ldrb	r3, [r3, #24]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d108      	bne.n	800163a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	e007      	b.n	800164a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7e5b      	ldrb	r3, [r3, #25]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d108      	bne.n	8001664 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e007      	b.n	8001674 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e9b      	ldrb	r3, [r3, #26]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d108      	bne.n	800168e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0220 	orr.w	r2, r2, #32
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e007      	b.n	800169e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0220 	bic.w	r2, r2, #32
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	7edb      	ldrb	r3, [r3, #27]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d108      	bne.n	80016b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0210 	bic.w	r2, r2, #16
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e007      	b.n	80016c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f042 0210 	orr.w	r2, r2, #16
 80016c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	7f1b      	ldrb	r3, [r3, #28]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d108      	bne.n	80016e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0208 	orr.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7f5b      	ldrb	r3, [r3, #29]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0204 	orr.w	r2, r2, #4
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e007      	b.n	800171c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0204 	bic.w	r2, r2, #4
 800171a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	ea42 0103 	orr.w	r1, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	1e5a      	subs	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001772:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001774:	7cfb      	ldrb	r3, [r7, #19]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d003      	beq.n	8001782 <HAL_CAN_ConfigFilter+0x26>
 800177a:	7cfb      	ldrb	r3, [r7, #19]
 800177c:	2b02      	cmp	r3, #2
 800177e:	f040 80c7 	bne.w	8001910 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a69      	ldr	r2, [pc, #420]	; (800192c <HAL_CAN_ConfigFilter+0x1d0>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d001      	beq.n	8001790 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_CAN_ConfigFilter+0x1d4>)
 800178e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4a63      	ldr	r2, [pc, #396]	; (8001930 <HAL_CAN_ConfigFilter+0x1d4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d111      	bne.n	80017cc <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017ae:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	431a      	orrs	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	f003 031f 	and.w	r3, r3, #31
 80017d4:	2201      	movs	r2, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d123      	bne.n	800183e <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	43db      	mvns	r3, r3
 8001800:	401a      	ands	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001818:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3248      	adds	r2, #72	; 0x48
 800181e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001832:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001834:	6979      	ldr	r1, [r7, #20]
 8001836:	3348      	adds	r3, #72	; 0x48
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	440b      	add	r3, r1
 800183c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d122      	bne.n	800188c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	431a      	orrs	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001866:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3248      	adds	r2, #72	; 0x48
 800186c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001880:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	3348      	adds	r3, #72	; 0x48
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	440b      	add	r3, r1
 800188a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018a6:	e007      	b.n	80018b8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	431a      	orrs	r2, r3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	431a      	orrs	r2, r3
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d107      	bne.n	80018fc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	431a      	orrs	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001902:	f023 0201 	bic.w	r2, r3, #1
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e006      	b.n	800191e <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001914:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
  }
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40003400 	.word	0x40003400
 8001930:	40006400 	.word	0x40006400

08001934 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d12e      	bne.n	80019a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f022 0201 	bic.w	r2, r2, #1
 800195e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001960:	f7ff fb4a 	bl	8000ff8 <HAL_GetTick>
 8001964:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001966:	e012      	b.n	800198e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001968:	f7ff fb46 	bl	8000ff8 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b0a      	cmp	r3, #10
 8001974:	d90b      	bls.n	800198e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2205      	movs	r2, #5
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e012      	b.n	80019b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1e5      	bne.n	8001968 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e006      	b.n	80019b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
  }
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019cc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d002      	beq.n	80019da <HAL_CAN_ActivateNotification+0x1e>
 80019d4:	7bfb      	ldrb	r3, [r7, #15]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d109      	bne.n	80019ee <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6959      	ldr	r1, [r3, #20]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e006      	b.n	80019fc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
  }
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d07c      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f97d 	bl	8001d6a <HAL_CAN_TxMailbox0CompleteCallback>
 8001a70:	e016      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	e00c      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d004      	beq.n	8001a9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e002      	b.n	8001aa0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f983 	bl	8001da6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d024      	beq.n	8001af4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ab2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f95d 	bl	8001d7e <HAL_CAN_TxMailbox1CompleteCallback>
 8001ac4:	e016      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d004      	beq.n	8001ada <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	e00c      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d004      	beq.n	8001aee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
 8001aec:	e002      	b.n	8001af4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f963 	bl	8001dba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d024      	beq.n	8001b48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f93d 	bl	8001d92 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b18:	e016      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d004      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e00c      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d004      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b40:	e002      	b.n	8001b48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f943 	bl	8001dce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d00c      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d007      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2210      	movs	r2, #16
 8001b6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2208      	movs	r2, #8
 8001b86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f92a 	bl	8001de2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d009      	beq.n	8001bac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f00c fdb8 	bl	800e71c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2208      	movs	r2, #8
 8001bea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f902 	bl	8001df6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f00c fda4 	bl	800e758 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c10:	6a3b      	ldr	r3, [r7, #32]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d006      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f8ec 	bl	8001e0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00b      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f8e5 	bl	8001e1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d075      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d06c      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d008      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d008      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f043 0302 	orr.w	r3, r3, #2
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d008      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d03d      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d038      	beq.n	8001d42 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd6:	2b30      	cmp	r3, #48	; 0x30
 8001cd8:	d017      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x302>
 8001cda:	2b30      	cmp	r3, #48	; 0x30
 8001cdc:	d804      	bhi.n	8001ce8 <HAL_CAN_IRQHandler+0x2e0>
 8001cde:	2b10      	cmp	r3, #16
 8001ce0:	d009      	beq.n	8001cf6 <HAL_CAN_IRQHandler+0x2ee>
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	d00c      	beq.n	8001d00 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ce6:	e024      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001ce8:	2b50      	cmp	r3, #80	; 0x50
 8001cea:	d018      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x316>
 8001cec:	2b60      	cmp	r3, #96	; 0x60
 8001cee:	d01b      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x320>
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d00f      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001cf4:	e01d      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	f043 0308 	orr.w	r3, r3, #8
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cfe:	e018      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	f043 0310 	orr.w	r3, r3, #16
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d08:	e013      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	f043 0320 	orr.w	r3, r3, #32
 8001d10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d12:	e00e      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d1c:	e009      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d26:	e004      	b.n	8001d32 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d30:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	699a      	ldr	r2, [r3, #24]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d40:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2204      	movs	r2, #4
 8001d48:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f868 	bl	8001e32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b083      	sub	sp, #12
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e64:	4013      	ands	r3, r2
 8001e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x40>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00
 8001e8c:	05fa0000 	.word	0x05fa0000

08001e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	f003 0307 	and.w	r3, r3, #7
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	e000ed00 	.word	0xe000ed00

08001eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	db0b      	blt.n	8001ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 021f 	and.w	r2, r3, #31
 8001ec4:	4907      	ldr	r1, [pc, #28]	; (8001ee4 <__NVIC_EnableIRQ+0x38>)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	2001      	movs	r0, #1
 8001ece:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	e000e100 	.word	0xe000e100

08001ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	6039      	str	r1, [r7, #0]
 8001ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	db0a      	blt.n	8001f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	490c      	ldr	r1, [pc, #48]	; (8001f34 <__NVIC_SetPriority+0x4c>)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	0112      	lsls	r2, r2, #4
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f10:	e00a      	b.n	8001f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	4908      	ldr	r1, [pc, #32]	; (8001f38 <__NVIC_SetPriority+0x50>)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3b04      	subs	r3, #4
 8001f20:	0112      	lsls	r2, r2, #4
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	440b      	add	r3, r1
 8001f26:	761a      	strb	r2, [r3, #24]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f1c3 0307 	rsb	r3, r3, #7
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	bf28      	it	cs
 8001f5a:	2304      	movcs	r3, #4
 8001f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	3304      	adds	r3, #4
 8001f62:	2b06      	cmp	r3, #6
 8001f64:	d902      	bls.n	8001f6c <NVIC_EncodePriority+0x30>
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	3b03      	subs	r3, #3
 8001f6a:	e000      	b.n	8001f6e <NVIC_EncodePriority+0x32>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f70:	f04f 32ff 	mov.w	r2, #4294967295
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	43da      	mvns	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	401a      	ands	r2, r3
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f84:	f04f 31ff 	mov.w	r1, #4294967295
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	43d9      	mvns	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	4313      	orrs	r3, r2
         );
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3724      	adds	r7, #36	; 0x24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ff4c 	bl	8001e48 <__NVIC_SetPriorityGrouping>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fca:	f7ff ff61 	bl	8001e90 <__NVIC_GetPriorityGrouping>
 8001fce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	6978      	ldr	r0, [r7, #20]
 8001fd6:	f7ff ffb1 	bl	8001f3c <NVIC_EncodePriority>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff ff80 	bl	8001ee8 <__NVIC_SetPriority>
}
 8001fe8:	bf00      	nop
 8001fea:	3718      	adds	r7, #24
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff ff54 	bl	8001eac <__NVIC_EnableIRQ>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002018:	f7fe ffee 	bl	8000ff8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e099      	b.n	800215c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2202      	movs	r2, #2
 8002034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f022 0201 	bic.w	r2, r2, #1
 8002046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002048:	e00f      	b.n	800206a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204a:	f7fe ffd5 	bl	8000ff8 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	2b05      	cmp	r3, #5
 8002056:	d908      	bls.n	800206a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2220      	movs	r2, #32
 800205c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2203      	movs	r2, #3
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e078      	b.n	800215c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0301 	and.w	r3, r3, #1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1e8      	bne.n	800204a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4b38      	ldr	r3, [pc, #224]	; (8002164 <HAL_DMA_Init+0x158>)
 8002084:	4013      	ands	r3, r2
 8002086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	4313      	orrs	r3, r2
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f023 0307 	bic.w	r3, r3, #7
 80020ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d117      	bne.n	800212e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fb09 	bl	8002728 <DMA_CheckFifoParam>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800212a:	2301      	movs	r3, #1
 800212c:	e016      	b.n	800215c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fac0 	bl	80026bc <DMA_CalcBaseAndBitshift>
 800213c:	4603      	mov	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	223f      	movs	r2, #63	; 0x3f
 8002146:	409a      	lsls	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	e010803f 	.word	0xe010803f

08002168 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_DMA_Start_IT+0x26>
 800218a:	2302      	movs	r3, #2
 800218c:	e048      	b.n	8002220 <HAL_DMA_Start_IT+0xb8>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d137      	bne.n	8002212 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa52 	bl	8002660 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c0:	223f      	movs	r2, #63	; 0x3f
 80021c2:	409a      	lsls	r2, r3
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0216 	orr.w	r2, r2, #22
 80021d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d007      	beq.n	8002200 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0208 	orr.w	r2, r2, #8
 80021fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e005      	b.n	800221e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800221a:	2302      	movs	r3, #2
 800221c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002220:	4618      	mov	r0, r3
 8002222:	3718      	adds	r7, #24
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002236:	f7fe fedf 	bl	8000ff8 <HAL_GetTick>
 800223a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d008      	beq.n	800225a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2280      	movs	r2, #128	; 0x80
 800224c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e052      	b.n	8002300 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0216 	bic.w	r2, r2, #22
 8002268:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002278:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d103      	bne.n	800228a <HAL_DMA_Abort+0x62>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f022 0208 	bic.w	r2, r2, #8
 8002298:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022aa:	e013      	b.n	80022d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ac:	f7fe fea4 	bl	8000ff8 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d90c      	bls.n	80022d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2220      	movs	r2, #32
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2203      	movs	r2, #3
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e015      	b.n	8002300 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e4      	bne.n	80022ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	223f      	movs	r2, #63	; 0x3f
 80022e8:	409a      	lsls	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d004      	beq.n	8002326 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2280      	movs	r2, #128	; 0x80
 8002320:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00c      	b.n	8002340 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2205      	movs	r2, #5
 800232a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0201 	bic.w	r2, r2, #1
 800233c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002358:	4b92      	ldr	r3, [pc, #584]	; (80025a4 <HAL_DMA_IRQHandler+0x258>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a92      	ldr	r2, [pc, #584]	; (80025a8 <HAL_DMA_IRQHandler+0x25c>)
 800235e:	fba2 2303 	umull	r2, r3, r2, r3
 8002362:	0a9b      	lsrs	r3, r3, #10
 8002364:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	2208      	movs	r2, #8
 8002378:	409a      	lsls	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	4013      	ands	r3, r2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01a      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d013      	beq.n	80023b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a4:	2208      	movs	r2, #8
 80023a6:	409a      	lsls	r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	f043 0201 	orr.w	r2, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023bc:	2201      	movs	r2, #1
 80023be:	409a      	lsls	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00b      	beq.n	80023ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	409a      	lsls	r2, r3
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e6:	f043 0202 	orr.w	r2, r3, #2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f2:	2204      	movs	r2, #4
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d012      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00b      	beq.n	8002424 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2204      	movs	r2, #4
 8002412:	409a      	lsls	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800241c:	f043 0204 	orr.w	r2, r3, #4
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002428:	2210      	movs	r2, #16
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d043      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d03c      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	2210      	movs	r2, #16
 8002448:	409a      	lsls	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d018      	beq.n	800248e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d024      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
 800247a:	e01f      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	4798      	blx	r3
 800248c:	e016      	b.n	80024bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d107      	bne.n	80024ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0208 	bic.w	r2, r2, #8
 80024aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	2220      	movs	r2, #32
 80024c2:	409a      	lsls	r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 808e 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 8086 	beq.w	80025ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e2:	2220      	movs	r2, #32
 80024e4:	409a      	lsls	r2, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d136      	bne.n	8002564 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0216 	bic.w	r2, r2, #22
 8002504:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	2b00      	cmp	r3, #0
 800251c:	d103      	bne.n	8002526 <HAL_DMA_IRQHandler+0x1da>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002522:	2b00      	cmp	r3, #0
 8002524:	d007      	beq.n	8002536 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0208 	bic.w	r2, r2, #8
 8002534:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d07d      	beq.n	8002656 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
        }
        return;
 8002562:	e078      	b.n	8002656 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d01c      	beq.n	80025ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d108      	bne.n	8002592 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	2b00      	cmp	r3, #0
 8002586:	d030      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	4798      	blx	r3
 8002590:	e02b      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d027      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
 80025a2:	e022      	b.n	80025ea <HAL_DMA_IRQHandler+0x29e>
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0210 	bic.w	r2, r2, #16
 80025c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d032      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d022      	beq.n	8002644 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2205      	movs	r2, #5
 8002602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	3301      	adds	r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	429a      	cmp	r2, r3
 8002620:	d307      	bcc.n	8002632 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_DMA_IRQHandler+0x2ca>
 8002630:	e000      	b.n	8002634 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002632:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
 8002654:	e000      	b.n	8002658 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002656:	bf00      	nop
    }
  }
}
 8002658:	3718      	adds	r7, #24
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop

08002660 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800267c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	2b40      	cmp	r3, #64	; 0x40
 800268c:	d108      	bne.n	80026a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800269e:	e007      	b.n	80026b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	3b10      	subs	r3, #16
 80026cc:	4a13      	ldr	r2, [pc, #76]	; (800271c <DMA_CalcBaseAndBitshift+0x60>)
 80026ce:	fba2 2303 	umull	r2, r3, r2, r3
 80026d2:	091b      	lsrs	r3, r3, #4
 80026d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <DMA_CalcBaseAndBitshift+0x64>)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	d908      	bls.n	80026fc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	1d1a      	adds	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	659a      	str	r2, [r3, #88]	; 0x58
 80026fa:	e006      	b.n	800270a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	461a      	mov	r2, r3
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <DMA_CalcBaseAndBitshift+0x68>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800270e:	4618      	mov	r0, r3
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	08015d6c 	.word	0x08015d6c
 8002724:	fffffc00 	.word	0xfffffc00

08002728 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b03      	cmp	r3, #3
 8002746:	d855      	bhi.n	80027f4 <DMA_CheckFifoParam+0xcc>
 8002748:	a201      	add	r2, pc, #4	; (adr r2, 8002750 <DMA_CheckFifoParam+0x28>)
 800274a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274e:	bf00      	nop
 8002750:	08002761 	.word	0x08002761
 8002754:	08002773 	.word	0x08002773
 8002758:	08002761 	.word	0x08002761
 800275c:	080027f5 	.word	0x080027f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d045      	beq.n	80027f8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002770:	e042      	b.n	80027f8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800277a:	d13f      	bne.n	80027fc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e03c      	b.n	80027fc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278a:	d121      	bne.n	80027d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d836      	bhi.n	8002800 <DMA_CheckFifoParam+0xd8>
 8002792:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <DMA_CheckFifoParam+0x70>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027a9 	.word	0x080027a9
 800279c:	080027af 	.word	0x080027af
 80027a0:	080027a9 	.word	0x080027a9
 80027a4:	080027c1 	.word	0x080027c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      break;
 80027ac:	e02f      	b.n	800280e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d024      	beq.n	8002804 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e021      	b.n	8002804 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027c8:	d11e      	bne.n	8002808 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027ce:	e01b      	b.n	8002808 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d902      	bls.n	80027dc <DMA_CheckFifoParam+0xb4>
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d003      	beq.n	80027e2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027da:	e018      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	73fb      	strb	r3, [r7, #15]
      break;
 80027e0:	e015      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00e      	beq.n	800280c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
      break;
 80027f2:	e00b      	b.n	800280c <DMA_CheckFifoParam+0xe4>
      break;
 80027f4:	bf00      	nop
 80027f6:	e00a      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027f8:	bf00      	nop
 80027fa:	e008      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 80027fc:	bf00      	nop
 80027fe:	e006      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002800:	bf00      	nop
 8002802:	e004      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 8002804:	bf00      	nop
 8002806:	e002      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;   
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <DMA_CheckFifoParam+0xe6>
      break;
 800280c:	bf00      	nop
    }
  } 
  
  return status; 
 800280e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800281c:	b480      	push	{r7}
 800281e:	b089      	sub	sp, #36	; 0x24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002832:	2300      	movs	r3, #0
 8002834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	e175      	b.n	8002b28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800283c:	2201      	movs	r2, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4013      	ands	r3, r2
 800284e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	429a      	cmp	r2, r3
 8002856:	f040 8164 	bne.w	8002b22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d00b      	beq.n	800287a <HAL_GPIO_Init+0x5e>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d007      	beq.n	800287a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800286e:	2b11      	cmp	r3, #17
 8002870:	d003      	beq.n	800287a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b12      	cmp	r3, #18
 8002878:	d130      	bne.n	80028dc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	2203      	movs	r2, #3
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028b0:	2201      	movs	r2, #1
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0201 	and.w	r2, r3, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b02      	cmp	r3, #2
 8002912:	d003      	beq.n	800291c <HAL_GPIO_Init+0x100>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b12      	cmp	r3, #18
 800291a:	d123      	bne.n	8002964 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	08da      	lsrs	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3208      	adds	r2, #8
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	220f      	movs	r2, #15
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	08da      	lsrs	r2, r3, #3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3208      	adds	r2, #8
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0203 	and.w	r2, r3, #3
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80be 	beq.w	8002b22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b65      	ldr	r3, [pc, #404]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a64      	ldr	r2, [pc, #400]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b62      	ldr	r3, [pc, #392]	; (8002b3c <HAL_GPIO_Init+0x320>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029be:	4a60      	ldr	r2, [pc, #384]	; (8002b40 <HAL_GPIO_Init+0x324>)
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	089b      	lsrs	r3, r3, #2
 80029c4:	3302      	adds	r3, #2
 80029c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	220f      	movs	r2, #15
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a57      	ldr	r2, [pc, #348]	; (8002b44 <HAL_GPIO_Init+0x328>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d037      	beq.n	8002a5a <HAL_GPIO_Init+0x23e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a56      	ldr	r2, [pc, #344]	; (8002b48 <HAL_GPIO_Init+0x32c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d031      	beq.n	8002a56 <HAL_GPIO_Init+0x23a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a55      	ldr	r2, [pc, #340]	; (8002b4c <HAL_GPIO_Init+0x330>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d02b      	beq.n	8002a52 <HAL_GPIO_Init+0x236>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a54      	ldr	r2, [pc, #336]	; (8002b50 <HAL_GPIO_Init+0x334>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d025      	beq.n	8002a4e <HAL_GPIO_Init+0x232>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a53      	ldr	r2, [pc, #332]	; (8002b54 <HAL_GPIO_Init+0x338>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_GPIO_Init+0x22e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_GPIO_Init+0x33c>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d019      	beq.n	8002a46 <HAL_GPIO_Init+0x22a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_GPIO_Init+0x340>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_GPIO_Init+0x226>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a50      	ldr	r2, [pc, #320]	; (8002b60 <HAL_GPIO_Init+0x344>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00d      	beq.n	8002a3e <HAL_GPIO_Init+0x222>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a4f      	ldr	r2, [pc, #316]	; (8002b64 <HAL_GPIO_Init+0x348>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <HAL_GPIO_Init+0x21e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_GPIO_Init+0x34c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d101      	bne.n	8002a36 <HAL_GPIO_Init+0x21a>
 8002a32:	2309      	movs	r3, #9
 8002a34:	e012      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a36:	230a      	movs	r3, #10
 8002a38:	e010      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	e00e      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a3e:	2307      	movs	r3, #7
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a42:	2306      	movs	r3, #6
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x240>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002a6c:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_GPIO_Init+0x324>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a7a:	4b3c      	ldr	r3, [pc, #240]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9e:	4a33      	ldr	r2, [pc, #204]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa4:	4b31      	ldr	r3, [pc, #196]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac8:	4a28      	ldr	r2, [pc, #160]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b1c      	ldr	r3, [pc, #112]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_GPIO_Init+0x350>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f ae86 	bls.w	800283c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	3724      	adds	r7, #36	; 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40021c00 	.word	0x40021c00
 8002b64:	40022000 	.word	0x40022000
 8002b68:	40022400 	.word	0x40022400
 8002b6c:	40013c00 	.word	0x40013c00

08002b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	460b      	mov	r3, r1
 8002b7a:	807b      	strh	r3, [r7, #2]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b80:	787b      	ldrb	r3, [r7, #1]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002b8c:	e003      	b.n	8002b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002b8e:	887b      	ldrh	r3, [r7, #2]
 8002b90:	041a      	lsls	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	619a      	str	r2, [r3, #24]
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d006      	beq.n	8002bc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bba:	4a05      	ldr	r2, [pc, #20]	; (8002bd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f006 f928 	bl	8008e18 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bc8:	bf00      	nop
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f005 ff6a 	bl	8008ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c4a:	609a      	str	r2, [r3, #8]
 8002c4c:	e006      	b.n	8002c5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d104      	bne.n	8002c6e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <HAL_I2C_Init+0x11c>)
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	ea42 0103 	orr.w	r1, r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	021a      	lsls	r2, r3, #8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69d9      	ldr	r1, [r3, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	02008000 	.word	0x02008000

08002cf4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
  }
}
 8002d20:	bf00      	nop
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	d138      	bne.n	8002db0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e032      	b.n	8002db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2224      	movs	r2, #36	; 0x24
 8002d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 0201 	bic.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0201 	orr.w	r2, r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d139      	bne.n	8002e48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e033      	b.n	8002e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2224      	movs	r2, #36	; 0x24
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e000      	b.n	8002e4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e48:	2302      	movs	r3, #2
  }
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002e7a:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e84:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e86:	f7fe f8b7 	bl	8000ff8 <HAL_GetTick>
 8002e8a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e8c:	e009      	b.n	8002ea2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e8e:	f7fe f8b3 	bl	8000ff8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9c:	d901      	bls.n	8002ea2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e022      	b.n	8002ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eae:	d1ee      	bne.n	8002e8e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ebc:	f7fe f89c 	bl	8000ff8 <HAL_GetTick>
 8002ec0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ec2:	e009      	b.n	8002ed8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ec4:	f7fe f898 	bl	8000ff8 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ed2:	d901      	bls.n	8002ed8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e007      	b.n	8002ee8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee4:	d1ee      	bne.n	8002ec4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40007000 	.word	0x40007000

08002ef8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f00:	2300      	movs	r3, #0
 8002f02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e29b      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8087 	beq.w	800302a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b96      	ldr	r3, [pc, #600]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f28:	4b93      	ldr	r3, [pc, #588]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x62>
 8002f34:	4b90      	ldr	r3, [pc, #576]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b8d      	ldr	r3, [pc, #564]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x130>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e275      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x7a>
 8002f64:	4b84      	ldr	r3, [pc, #528]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a83      	ldr	r2, [pc, #524]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x9c>
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7e      	ldr	r2, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b7c      	ldr	r3, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7b      	ldr	r2, [pc, #492]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xc0>
 8002f9e:	4b76      	ldr	r3, [pc, #472]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a75      	ldr	r2, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b73      	ldr	r3, [pc, #460]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a72      	ldr	r2, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd8>
 8002fb8:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b6c      	ldr	r3, [pc, #432]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a6b      	ldr	r2, [pc, #428]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f80e 	bl	8000ff8 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe f80a 	bl	8000ff8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e229      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b61      	ldr	r3, [pc, #388]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe8>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fffa 	bl	8000ff8 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fd fff6 	bl	8000ff8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e215      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x110>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d069      	beq.n	800310a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b50      	ldr	r3, [pc, #320]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x190>
 800304e:	4b4a      	ldr	r3, [pc, #296]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b47      	ldr	r3, [pc, #284]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x17a>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1e9      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b41      	ldr	r3, [pc, #260]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	493d      	ldr	r1, [pc, #244]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e040      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d023      	beq.n	80030d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a38      	ldr	r2, [pc, #224]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fd ffac 	bl	8000ff8 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fd ffa8 	bl	8000ff8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e1c7      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b6:	4b30      	ldr	r3, [pc, #192]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c2:	4b2d      	ldr	r3, [pc, #180]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4929      	ldr	r1, [pc, #164]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
 80030d6:	e018      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d8:	4b27      	ldr	r3, [pc, #156]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a26      	ldr	r2, [pc, #152]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fd ff88 	bl	8000ff8 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ec:	f7fd ff84 	bl	8000ff8 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e1a3      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d038      	beq.n	8003188 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d019      	beq.n	8003152 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fd ff65 	bl	8000ff8 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7fd ff61 	bl	8000ff8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e180      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x23a>
 8003150:	e01a      	b.n	8003188 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003152:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003156:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x280>)
 8003158:	f023 0301 	bic.w	r3, r3, #1
 800315c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315e:	f7fd ff4b 	bl	8000ff8 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003166:	f7fd ff47 	bl	8000ff8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d903      	bls.n	800317c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e166      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
 8003178:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800317e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1ee      	bne.n	8003166 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a4 	beq.w	80032de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b8c      	ldr	r3, [pc, #560]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b89      	ldr	r3, [pc, #548]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a88      	ldr	r2, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b86      	ldr	r3, [pc, #536]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031be:	4b83      	ldr	r3, [pc, #524]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80031ca:	4b80      	ldr	r3, [pc, #512]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7f      	ldr	r2, [pc, #508]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fd ff0f 	bl	8000ff8 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fd ff0b 	bl	8000ff8 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	; 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e12a      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f0:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x4d4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x31a>
 8003204:	4b70      	ldr	r3, [pc, #448]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a6f      	ldr	r2, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e02d      	b.n	800326e <HAL_RCC_OscConfig+0x376>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x33c>
 800321a:	4b6b      	ldr	r3, [pc, #428]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a6a      	ldr	r2, [pc, #424]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b68      	ldr	r3, [pc, #416]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e01c      	b.n	800326e <HAL_RCC_OscConfig+0x376>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x35e>
 800323c:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4a61      	ldr	r2, [pc, #388]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6713      	str	r3, [r2, #112]	; 0x70
 8003248:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	4a5e      	ldr	r2, [pc, #376]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6713      	str	r3, [r2, #112]	; 0x70
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x376>
 8003256:	4b5c      	ldr	r3, [pc, #368]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	4a5b      	ldr	r2, [pc, #364]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6713      	str	r3, [r2, #112]	; 0x70
 8003262:	4b59      	ldr	r3, [pc, #356]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003266:	4a58      	ldr	r2, [pc, #352]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fd febf 	bl	8000ff8 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fd febb 	bl	8000ff8 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0d8      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b4c      	ldr	r3, [pc, #304]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCC_OscConfig+0x386>
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fea9 	bl	8000ff8 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fd fea5 	bl	8000ff8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e0c2      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b3d      	ldr	r3, [pc, #244]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	4a3c      	ldr	r2, [pc, #240]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 80ae 	beq.w	8003444 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e8:	4b37      	ldr	r3, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d06d      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d14b      	bne.n	8003394 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b32      	ldr	r3, [pc, #200]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a31      	ldr	r2, [pc, #196]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fd fe76 	bl	8000ff8 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fd fe72 	bl	8000ff8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e091      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	431a      	orrs	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	071b      	lsls	r3, r3, #28
 800335a:	491b      	ldr	r1, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800335c:	4313      	orrs	r3, r2
 800335e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a18      	ldr	r2, [pc, #96]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800336a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe44 	bl	8000ff8 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fd fe40 	bl	8000ff8 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e05f      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0x47c>
 8003392:	e057      	b.n	8003444 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a0b      	ldr	r2, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 800339a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a0:	f7fd fe2a 	bl	8000ff8 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fd fe26 	bl	8000ff8 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e045      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ba:	4b03      	ldr	r3, [pc, #12]	; (80033c8 <HAL_RCC_OscConfig+0x4d0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f0      	bne.n	80033a8 <HAL_RCC_OscConfig+0x4b0>
 80033c6:	e03d      	b.n	8003444 <HAL_RCC_OscConfig+0x54c>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80033d0:	4b1f      	ldr	r3, [pc, #124]	; (8003450 <HAL_RCC_OscConfig+0x558>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d030      	beq.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d129      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d122      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003400:	4013      	ands	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003406:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003408:	4293      	cmp	r3, r2
 800340a:	d119      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	3b01      	subs	r3, #1
 800341a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800341c:	429a      	cmp	r2, r3
 800341e:	d10f      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800342c:	429a      	cmp	r2, r3
 800342e:	d107      	bne.n	8003440 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800

08003454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0d0      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d910      	bls.n	800349c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b67      	ldr	r3, [pc, #412]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 020f 	bic.w	r2, r3, #15
 8003482:	4965      	ldr	r1, [pc, #404]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b63      	ldr	r3, [pc, #396]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d001      	beq.n	800349c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e0b8      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d020      	beq.n	80034ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034b4:	4b59      	ldr	r3, [pc, #356]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4a58      	ldr	r2, [pc, #352]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034cc:	4b53      	ldr	r3, [pc, #332]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a52      	ldr	r2, [pc, #328]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	494d      	ldr	r1, [pc, #308]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d040      	beq.n	8003578 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034fe:	4b47      	ldr	r3, [pc, #284]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d115      	bne.n	8003536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07f      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b02      	cmp	r3, #2
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003516:	4b41      	ldr	r3, [pc, #260]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e073      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003526:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06b      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003536:	4b39      	ldr	r3, [pc, #228]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 0203 	bic.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4936      	ldr	r1, [pc, #216]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fd fd56 	bl	8000ff8 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	e00a      	b.n	8003566 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003550:	f7fd fd52 	bl	8000ff8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e053      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	4b2d      	ldr	r3, [pc, #180]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 020c 	and.w	r2, r3, #12
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	429a      	cmp	r2, r3
 8003576:	d1eb      	bne.n	8003550 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d210      	bcs.n	80035a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 020f 	bic.w	r2, r3, #15
 800358e:	4922      	ldr	r1, [pc, #136]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e032      	b.n	800360e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035b4:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	4916      	ldr	r1, [pc, #88]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d009      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	490e      	ldr	r1, [pc, #56]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035e6:	f000 f821 	bl	800362c <HAL_RCC_GetSysClockFreq>
 80035ea:	4601      	mov	r1, r0
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <HAL_RCC_ClockConfig+0x1c8>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4a0a      	ldr	r2, [pc, #40]	; (8003620 <HAL_RCC_ClockConfig+0x1cc>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	fa21 f303 	lsr.w	r3, r1, r3
 80035fe:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_RCC_ClockConfig+0x1d0>)
 8003600:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <HAL_RCC_ClockConfig+0x1d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f006 f80e 	bl	8009628 <HAL_InitTick>

  return HAL_OK;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	3710      	adds	r7, #16
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	40023c00 	.word	0x40023c00
 800361c:	40023800 	.word	0x40023800
 8003620:	08015d74 	.word	0x08015d74
 8003624:	2000000c 	.word	0x2000000c
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	2300      	movs	r3, #0
 800363c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003642:	4b50      	ldr	r3, [pc, #320]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b04      	cmp	r3, #4
 800364c:	d007      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x32>
 800364e:	2b08      	cmp	r3, #8
 8003650:	d008      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x38>
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 808d 	bne.w	8003772 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b4b      	ldr	r3, [pc, #300]	; (8003788 <HAL_RCC_GetSysClockFreq+0x15c>)
 800365a:	60bb      	str	r3, [r7, #8]
      break;
 800365c:	e08c      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365e:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_GetSysClockFreq+0x160>)
 8003660:	60bb      	str	r3, [r7, #8]
      break;
 8003662:	e089      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003664:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800366e:	4b45      	ldr	r3, [pc, #276]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d023      	beq.n	80036c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b42      	ldr	r3, [pc, #264]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	f04f 0400 	mov.w	r4, #0
 8003684:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	ea03 0501 	and.w	r5, r3, r1
 8003690:	ea04 0602 	and.w	r6, r4, r2
 8003694:	4a3d      	ldr	r2, [pc, #244]	; (800378c <HAL_RCC_GetSysClockFreq+0x160>)
 8003696:	fb02 f106 	mul.w	r1, r2, r6
 800369a:	2200      	movs	r2, #0
 800369c:	fb02 f205 	mul.w	r2, r2, r5
 80036a0:	440a      	add	r2, r1
 80036a2:	493a      	ldr	r1, [pc, #232]	; (800378c <HAL_RCC_GetSysClockFreq+0x160>)
 80036a4:	fba5 0101 	umull	r0, r1, r5, r1
 80036a8:	1853      	adds	r3, r2, r1
 80036aa:	4619      	mov	r1, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f04f 0400 	mov.w	r4, #0
 80036b2:	461a      	mov	r2, r3
 80036b4:	4623      	mov	r3, r4
 80036b6:	f7fc fe1b 	bl	80002f0 <__aeabi_uldivmod>
 80036ba:	4603      	mov	r3, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	e049      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036c2:	4b30      	ldr	r3, [pc, #192]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	099b      	lsrs	r3, r3, #6
 80036c8:	f04f 0400 	mov.w	r4, #0
 80036cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	ea03 0501 	and.w	r5, r3, r1
 80036d8:	ea04 0602 	and.w	r6, r4, r2
 80036dc:	4629      	mov	r1, r5
 80036de:	4632      	mov	r2, r6
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	f04f 0400 	mov.w	r4, #0
 80036e8:	0154      	lsls	r4, r2, #5
 80036ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036ee:	014b      	lsls	r3, r1, #5
 80036f0:	4619      	mov	r1, r3
 80036f2:	4622      	mov	r2, r4
 80036f4:	1b49      	subs	r1, r1, r5
 80036f6:	eb62 0206 	sbc.w	r2, r2, r6
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	f04f 0400 	mov.w	r4, #0
 8003702:	0194      	lsls	r4, r2, #6
 8003704:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003708:	018b      	lsls	r3, r1, #6
 800370a:	1a5b      	subs	r3, r3, r1
 800370c:	eb64 0402 	sbc.w	r4, r4, r2
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	f04f 0200 	mov.w	r2, #0
 8003718:	00e2      	lsls	r2, r4, #3
 800371a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800371e:	00d9      	lsls	r1, r3, #3
 8003720:	460b      	mov	r3, r1
 8003722:	4614      	mov	r4, r2
 8003724:	195b      	adds	r3, r3, r5
 8003726:	eb44 0406 	adc.w	r4, r4, r6
 800372a:	f04f 0100 	mov.w	r1, #0
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	02a2      	lsls	r2, r4, #10
 8003734:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003738:	0299      	lsls	r1, r3, #10
 800373a:	460b      	mov	r3, r1
 800373c:	4614      	mov	r4, r2
 800373e:	4618      	mov	r0, r3
 8003740:	4621      	mov	r1, r4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f04f 0400 	mov.w	r4, #0
 8003748:	461a      	mov	r2, r3
 800374a:	4623      	mov	r3, r4
 800374c:	f7fc fdd0 	bl	80002f0 <__aeabi_uldivmod>
 8003750:	4603      	mov	r3, r0
 8003752:	460c      	mov	r4, r1
 8003754:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_GetSysClockFreq+0x158>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	3301      	adds	r3, #1
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	60bb      	str	r3, [r7, #8]
      break;
 8003770:	e002      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003772:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003774:	60bb      	str	r3, [r7, #8]
      break;
 8003776:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003778:	68bb      	ldr	r3, [r7, #8]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	00f42400 	.word	0x00f42400
 800378c:	017d7840 	.word	0x017d7840

08003790 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b03      	ldr	r3, [pc, #12]	; (80037a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	2000000c 	.word	0x2000000c

080037a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037ac:	f7ff fff0 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037b0:	4601      	mov	r1, r0
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	f003 0307 	and.w	r3, r3, #7
 80037bc:	4a03      	ldr	r2, [pc, #12]	; (80037cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037be:	5cd3      	ldrb	r3, [r2, r3]
 80037c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40023800 	.word	0x40023800
 80037cc:	08015d84 	.word	0x08015d84

080037d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d4:	f7ff ffdc 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d8:	4601      	mov	r1, r0
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	0b5b      	lsrs	r3, r3, #13
 80037e0:	f003 0307 	and.w	r3, r3, #7
 80037e4:	4a03      	ldr	r2, [pc, #12]	; (80037f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e6:	5cd3      	ldrb	r3, [r2, r3]
 80037e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40023800 	.word	0x40023800
 80037f4:	08015d84 	.word	0x08015d84

080037f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	220f      	movs	r2, #15
 8003806:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0203 	and.w	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800382c:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_RCC_GetClockConfig+0x5c>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	08db      	lsrs	r3, r3, #3
 8003832:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800383a:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_RCC_GetClockConfig+0x60>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 020f 	and.w	r2, r3, #15
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
 8003858:	40023c00 	.word	0x40023c00

0800385c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d012      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003884:	4b69      	ldr	r3, [pc, #420]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a68      	ldr	r2, [pc, #416]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800388a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800388e:	6093      	str	r3, [r2, #8]
 8003890:	4b66      	ldr	r3, [pc, #408]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003898:	4964      	ldr	r1, [pc, #400]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b6:	4b5d      	ldr	r3, [pc, #372]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	4959      	ldr	r1, [pc, #356]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d4:	d101      	bne.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80038d6:	2301      	movs	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80038e2:	2301      	movs	r3, #1
 80038e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d017      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038f2:	4b4e      	ldr	r3, [pc, #312]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	494a      	ldr	r1, [pc, #296]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003910:	d101      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003912:	2301      	movs	r3, #1
 8003914:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800392e:	2301      	movs	r3, #1
 8003930:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 808b 	beq.w	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	4a39      	ldr	r2, [pc, #228]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394a:	6413      	str	r3, [r2, #64]	; 0x40
 800394c:	4b37      	ldr	r3, [pc, #220]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003958:	4b35      	ldr	r3, [pc, #212]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800395e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003964:	f7fd fb48 	bl	8000ff8 <HAL_GetTick>
 8003968:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800396c:	f7fd fb44 	bl	8000ff8 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e38d      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800397e:	4b2c      	ldr	r3, [pc, #176]	; (8003a30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800398a:	4b28      	ldr	r3, [pc, #160]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003992:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d035      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d02e      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80039a8:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80039b2:	4b1e      	ldr	r3, [pc, #120]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b6:	4a1d      	ldr	r2, [pc, #116]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80039be:	4b1b      	ldr	r3, [pc, #108]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c2:	4a1a      	ldr	r2, [pc, #104]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80039ca:	4a18      	ldr	r2, [pc, #96]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80039d0:	4b16      	ldr	r3, [pc, #88]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d114      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fd fb0c 	bl	8000ff8 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fd fb08 	bl	8000ff8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e34f      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0ee      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a12:	d111      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a20:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003a22:	400b      	ands	r3, r1
 8003a24:	4901      	ldr	r1, [pc, #4]	; (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
 8003a2a:	e00b      	b.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40007000 	.word	0x40007000
 8003a34:	0ffffcff 	.word	0x0ffffcff
 8003a38:	4bb3      	ldr	r3, [pc, #716]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4ab2      	ldr	r2, [pc, #712]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	4bb0      	ldr	r3, [pc, #704]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a50:	49ad      	ldr	r1, [pc, #692]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d010      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a62:	4ba9      	ldr	r3, [pc, #676]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a68:	4aa7      	ldr	r2, [pc, #668]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a72:	4ba5      	ldr	r3, [pc, #660]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	49a2      	ldr	r1, [pc, #648]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a90:	4b9d      	ldr	r3, [pc, #628]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	499a      	ldr	r1, [pc, #616]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00a      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ab2:	4b95      	ldr	r3, [pc, #596]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac0:	4991      	ldr	r1, [pc, #580]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ad4:	4b8c      	ldr	r3, [pc, #560]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ae2:	4989      	ldr	r1, [pc, #548]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003af6:	4b84      	ldr	r3, [pc, #528]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4980      	ldr	r1, [pc, #512]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b18:	4b7b      	ldr	r3, [pc, #492]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1e:	f023 0203 	bic.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	4978      	ldr	r1, [pc, #480]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b3a:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f023 020c 	bic.w	r2, r3, #12
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b48:	496f      	ldr	r1, [pc, #444]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b5c:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	4967      	ldr	r1, [pc, #412]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b7e:	4b62      	ldr	r3, [pc, #392]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	495e      	ldr	r1, [pc, #376]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	4956      	ldr	r1, [pc, #344]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003bc2:	4b51      	ldr	r3, [pc, #324]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	494d      	ldr	r1, [pc, #308]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00a      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003be4:	4b48      	ldr	r3, [pc, #288]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf2:	4945      	ldr	r1, [pc, #276]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003c06:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c14:	493c      	ldr	r1, [pc, #240]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003c28:	4b37      	ldr	r3, [pc, #220]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c36:	4934      	ldr	r1, [pc, #208]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d011      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c58:	492b      	ldr	r1, [pc, #172]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c68:	d101      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c98:	491b      	ldr	r1, [pc, #108]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00b      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cbc:	4912      	ldr	r1, [pc, #72]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ce0:	4909      	ldr	r1, [pc, #36]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00f      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cf4:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cfa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003d06:	bf00      	nop
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	4985      	ldr	r1, [pc, #532]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d20:	4b80      	ldr	r3, [pc, #512]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d30:	497c      	ldr	r1, [pc, #496]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d005      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d46:	f040 80d6 	bne.w	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d4a:	4b76      	ldr	r3, [pc, #472]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a75      	ldr	r2, [pc, #468]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d56:	f7fd f94f 	bl	8000ff8 <HAL_GetTick>
 8003d5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d5e:	f7fd f94b 	bl	8000ff8 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b64      	cmp	r3, #100	; 0x64
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e194      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d70:	4b6c      	ldr	r3, [pc, #432]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1f0      	bne.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d021      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11d      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003d90:	4b64      	ldr	r3, [pc, #400]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d96:	0c1b      	lsrs	r3, r3, #16
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003d9e:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003da4:	0e1b      	lsrs	r3, r3, #24
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	019a      	lsls	r2, r3, #6
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	041b      	lsls	r3, r3, #16
 8003db6:	431a      	orrs	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	061b      	lsls	r3, r3, #24
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	071b      	lsls	r3, r3, #28
 8003dc4:	4957      	ldr	r1, [pc, #348]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d004      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de0:	d00a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d02e      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003df6:	d129      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003df8:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e06:	4b47      	ldr	r3, [pc, #284]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	0f1b      	lsrs	r3, r3, #28
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	019a      	lsls	r2, r3, #6
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	431a      	orrs	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	071b      	lsls	r3, r3, #28
 8003e2c:	493d      	ldr	r1, [pc, #244]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e34:	4b3b      	ldr	r3, [pc, #236]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e3a:	f023 021f 	bic.w	r2, r3, #31
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4937      	ldr	r1, [pc, #220]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01d      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e58:	4b32      	ldr	r3, [pc, #200]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5e:	0e1b      	lsrs	r3, r3, #24
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e66:	4b2f      	ldr	r3, [pc, #188]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e6c:	0f1b      	lsrs	r3, r3, #28
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	019a      	lsls	r2, r3, #6
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	431a      	orrs	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	061b      	lsls	r3, r3, #24
 8003e86:	431a      	orrs	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	071b      	lsls	r3, r3, #28
 8003e8c:	4925      	ldr	r1, [pc, #148]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d011      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	019a      	lsls	r2, r3, #6
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	071b      	lsls	r3, r3, #28
 8003ebc:	4919      	ldr	r1, [pc, #100]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ec4:	4b17      	ldr	r3, [pc, #92]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed0:	f7fd f892 	bl	8000ff8 <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ed6:	e008      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ed8:	f7fd f88e 	bl	8000ff8 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e0d7      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003eea:	4b0e      	ldr	r3, [pc, #56]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 80cd 	bne.w	8004098 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003efe:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f0a:	f7fd f875 	bl	8000ff8 <HAL_GetTick>
 8003f0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f10:	e00a      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f12:	f7fd f871 	bl	8000ff8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d903      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e0ba      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003f24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f28:	4b5e      	ldr	r3, [pc, #376]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f34:	d0ed      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02e      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d12a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003f5e:	4b51      	ldr	r3, [pc, #324]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003f6c:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f72:	0f1b      	lsrs	r3, r3, #28
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	019a      	lsls	r2, r3, #6
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	041b      	lsls	r3, r3, #16
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	061b      	lsls	r3, r3, #24
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	071b      	lsls	r3, r3, #28
 8003f92:	4944      	ldr	r1, [pc, #272]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003f9a:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	021b      	lsls	r3, r3, #8
 8003fac:	493d      	ldr	r1, [pc, #244]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d022      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fc8:	d11d      	bne.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003fca:	4b36      	ldr	r3, [pc, #216]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd0:	0e1b      	lsrs	r3, r3, #24
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	0f1b      	lsrs	r3, r3, #28
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	019a      	lsls	r2, r3, #6
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	061b      	lsls	r3, r3, #24
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	071b      	lsls	r3, r3, #28
 8003ffe:	4929      	ldr	r1, [pc, #164]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004000:	4313      	orrs	r3, r2
 8004002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d028      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004012:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	0e1b      	lsrs	r3, r3, #24
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004026:	0c1b      	lsrs	r3, r3, #16
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	019a      	lsls	r2, r3, #6
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	041b      	lsls	r3, r3, #16
 8004038:	431a      	orrs	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	061b      	lsls	r3, r3, #24
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	071b      	lsls	r3, r3, #28
 8004046:	4917      	ldr	r1, [pc, #92]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004054:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	4911      	ldr	r1, [pc, #68]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800406a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fc ffc2 	bl	8000ff8 <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004078:	f7fc ffbe 	bl	8000ff8 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e007      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004096:	d1ef      	bne.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3720      	adds	r7, #32
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800

080040a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e084      	b.n	80041c4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d106      	bne.n	80040da <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f004 fff1 	bl	80090bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040f0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040fa:	d902      	bls.n	8004102 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	e002      	b.n	8004108 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004106:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004110:	d007      	beq.n	8004122 <HAL_SPI_Init+0x7a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800411a:	d002      	beq.n	8004122 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004132:	d903      	bls.n	800413c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	631a      	str	r2, [r3, #48]	; 0x30
 800413a:	e002      	b.n	8004142 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	431a      	orrs	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	ea42 0103 	orr.w	r1, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	0c1b      	lsrs	r3, r3, #16
 8004182:	f003 0204 	and.w	r2, r3, #4
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	ea42 0103 	orr.w	r1, r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	69da      	ldr	r2, [r3, #28]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	; 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80041da:	2301      	movs	r3, #1
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x26>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e1fb      	b.n	80045ea <HAL_SPI_TransmitReceive+0x41e>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041fa:	f7fc fefd 	bl	8000ff8 <HAL_GetTick>
 80041fe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004206:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800420e:	887b      	ldrh	r3, [r7, #2]
 8004210:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004212:	887b      	ldrh	r3, [r7, #2]
 8004214:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004216:	7efb      	ldrb	r3, [r7, #27]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d00e      	beq.n	800423a <HAL_SPI_TransmitReceive+0x6e>
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004222:	d106      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x66>
 800422c:	7efb      	ldrb	r3, [r7, #27]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d003      	beq.n	800423a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004232:	2302      	movs	r3, #2
 8004234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004238:	e1cd      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_SPI_TransmitReceive+0x80>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d002      	beq.n	800424c <HAL_SPI_TransmitReceive+0x80>
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004252:	e1c0      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b04      	cmp	r3, #4
 800425e:	d003      	beq.n	8004268 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2205      	movs	r2, #5
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	887a      	ldrh	r2, [r7, #2]
 800428e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	887a      	ldrh	r2, [r7, #2]
 8004294:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042aa:	d802      	bhi.n	80042b2 <HAL_SPI_TransmitReceive+0xe6>
 80042ac:	8a3b      	ldrh	r3, [r7, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d908      	bls.n	80042c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042c0:	605a      	str	r2, [r3, #4]
 80042c2:	e007      	b.n	80042d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042de:	2b40      	cmp	r3, #64	; 0x40
 80042e0:	d007      	beq.n	80042f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042fa:	d97c      	bls.n	80043f6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <HAL_SPI_TransmitReceive+0x13e>
 8004304:	8a7b      	ldrh	r3, [r7, #18]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d169      	bne.n	80043de <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	881a      	ldrh	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	1c9a      	adds	r2, r3, #2
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800432e:	e056      	b.n	80043de <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d11b      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x1aa>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	d016      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x1aa>
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	2b01      	cmp	r3, #1
 800434c:	d113      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d11c      	bne.n	80043be <HAL_SPI_TransmitReceive+0x1f2>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d016      	beq.n	80043be <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	b292      	uxth	r2, r2
 800439c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	1c9a      	adds	r2, r3, #2
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043ba:	2301      	movs	r3, #1
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043be:	f7fc fe1b 	bl	8000ff8 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d807      	bhi.n	80043de <HAL_SPI_TransmitReceive+0x212>
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d003      	beq.n	80043de <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80043dc:	e0fb      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1a3      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x164>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d19d      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x164>
 80043f4:	e0df      	b.n	80045b6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_SPI_TransmitReceive+0x23a>
 80043fe:	8a7b      	ldrh	r3, [r7, #18]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 80cb 	bne.w	800459c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800440a:	b29b      	uxth	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d912      	bls.n	8004436 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	881a      	ldrh	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004420:	1c9a      	adds	r2, r3, #2
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b02      	subs	r3, #2
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004434:	e0b2      	b.n	800459c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800445c:	e09e      	b.n	800459c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b02      	cmp	r3, #2
 800446a:	d134      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x30a>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02f      	beq.n	80044d6 <HAL_SPI_TransmitReceive+0x30a>
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	2b01      	cmp	r3, #1
 800447a:	d12c      	bne.n	80044d6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	d912      	bls.n	80044ac <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	881a      	ldrh	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	1c9a      	adds	r2, r3, #2
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b02      	subs	r3, #2
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044aa:	e012      	b.n	80044d2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	7812      	ldrb	r2, [r2, #0]
 80044b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	3b01      	subs	r3, #1
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d148      	bne.n	8004576 <HAL_SPI_TransmitReceive+0x3aa>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d042      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d923      	bls.n	8004544 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	b292      	uxth	r2, r2
 8004508:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800451a:	b29b      	uxth	r3, r3
 800451c:	3b02      	subs	r3, #2
 800451e:	b29a      	uxth	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800452c:	b29b      	uxth	r3, r3
 800452e:	2b01      	cmp	r3, #1
 8004530:	d81f      	bhi.n	8004572 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	e016      	b.n	8004572 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f103 020c 	add.w	r2, r3, #12
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	7812      	ldrb	r2, [r2, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004566:	b29b      	uxth	r3, r3
 8004568:	3b01      	subs	r3, #1
 800456a:	b29a      	uxth	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004572:	2301      	movs	r3, #1
 8004574:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004576:	f7fc fd3f 	bl	8000ff8 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004582:	429a      	cmp	r2, r3
 8004584:	d803      	bhi.n	800458e <HAL_SPI_TransmitReceive+0x3c2>
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	d102      	bne.n	8004594 <HAL_SPI_TransmitReceive+0x3c8>
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d103      	bne.n	800459c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800459a:	e01c      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f47f af5b 	bne.w	800445e <HAL_SPI_TransmitReceive+0x292>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f47f af54 	bne.w	800445e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fcea 	bl	8004f94 <SPI_EndRxTxTransaction>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d006      	beq.n	80045d4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	661a      	str	r2, [r3, #96]	; 0x60
 80045d2:	e000      	b.n	80045d6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80045d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80045e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3728      	adds	r7, #40	; 0x28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
 8004600:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004610:	2302      	movs	r3, #2
 8004612:	e16c      	b.n	80048ee <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004622:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800462a:	7dbb      	ldrb	r3, [r7, #22]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d00d      	beq.n	800464c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004636:	d106      	bne.n	8004646 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d102      	bne.n	8004646 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004640:	7dbb      	ldrb	r3, [r7, #22]
 8004642:	2b04      	cmp	r3, #4
 8004644:	d002      	beq.n	800464c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004646:	2302      	movs	r3, #2
 8004648:	75fb      	strb	r3, [r7, #23]
    goto error;
 800464a:	e14b      	b.n	80048e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004658:	887b      	ldrh	r3, [r7, #2]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004662:	e13f      	b.n	80048e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b04      	cmp	r3, #4
 800466e:	d003      	beq.n	8004678 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2205      	movs	r2, #5
 8004674:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	887a      	ldrh	r2, [r7, #2]
 800468e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	887a      	ldrh	r2, [r7, #2]
 800469a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	887a      	ldrh	r2, [r7, #2]
 80046a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80046c0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046ca:	d908      	bls.n	80046de <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	e06f      	b.n	80047be <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046ec:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f8:	d126      	bne.n	8004748 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004714:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	085b      	lsrs	r3, r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004724:	e010      	b.n	8004748 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004734:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473a:	b29b      	uxth	r3, r3
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	b29b      	uxth	r3, r3
 8004740:	3301      	adds	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004752:	d134      	bne.n	80047be <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004762:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800476a:	b29b      	uxth	r3, r3
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d111      	bne.n	8004798 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004782:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800478a:	b29b      	uxth	r3, r3
 800478c:	085b      	lsrs	r3, r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004796:	e012      	b.n	80047be <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3301      	adds	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d108      	bne.n	80047dc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ce:	4a4a      	ldr	r2, [pc, #296]	; (80048f8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d6:	4a49      	ldr	r2, [pc, #292]	; (80048fc <HAL_SPI_TransmitReceive_DMA+0x308>)
 80047d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80047da:	e007      	b.n	80047ec <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e0:	4a47      	ldr	r2, [pc, #284]	; (8004900 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e8:	4a46      	ldr	r2, [pc, #280]	; (8004904 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80047ea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f0:	4a45      	ldr	r2, [pc, #276]	; (8004908 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80047f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	2200      	movs	r2, #0
 80047fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	4619      	mov	r1, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480c:	461a      	mov	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004814:	b29b      	uxth	r3, r3
 8004816:	f7fd fca7 	bl	8002168 <HAL_DMA_Start_IT>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00c      	beq.n	800483a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004824:	f043 0210 	orr.w	r2, r3, #16
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004838:	e054      	b.n	80048e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	2200      	movs	r2, #0
 8004850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004856:	2200      	movs	r2, #0
 8004858:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	2200      	movs	r2, #0
 8004860:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	2200      	movs	r2, #0
 8004868:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	4619      	mov	r1, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	461a      	mov	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004880:	b29b      	uxth	r3, r3
 8004882:	f7fd fc71 	bl	8002168 <HAL_DMA_Start_IT>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00c      	beq.n	80048a6 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004890:	f043 0210 	orr.w	r2, r3, #16
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80048a4:	e01e      	b.n	80048e4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b0:	2b40      	cmp	r3, #64	; 0x40
 80048b2:	d007      	beq.n	80048c4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0220 	orr.w	r2, r2, #32
 80048d2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685a      	ldr	r2, [r3, #4]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0202 	orr.w	r2, r2, #2
 80048e2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	08004c95 	.word	0x08004c95
 80048fc:	08004b7d 	.word	0x08004b7d
 8004900:	08004cb1 	.word	0x08004cb1
 8004904:	08004c03 	.word	0x08004c03
 8004908:	08004ccd 	.word	0x08004ccd

0800490c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	099b      	lsrs	r3, r3, #6
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10f      	bne.n	8004950 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	2b00      	cmp	r3, #0
 8004944:	d004      	beq.n	8004950 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
    return;
 800494e:	e0d8      	b.n	8004b02 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <HAL_SPI_IRQHandler+0x66>
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	09db      	lsrs	r3, r3, #7
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d004      	beq.n	8004972 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	4798      	blx	r3
    return;
 8004970:	e0c7      	b.n	8004b02 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10c      	bne.n	8004998 <HAL_SPI_IRQHandler+0x8c>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	099b      	lsrs	r3, r3, #6
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_SPI_IRQHandler+0x8c>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	0a1b      	lsrs	r3, r3, #8
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 80b5 	beq.w	8004b02 <HAL_SPI_IRQHandler+0x1f6>
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80ae 	beq.w	8004b02 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	099b      	lsrs	r3, r3, #6
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d023      	beq.n	80049fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d011      	beq.n	80049e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049c2:	f043 0204 	orr.w	r2, r3, #4
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	617b      	str	r3, [r7, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	617b      	str	r3, [r7, #20]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	e00b      	b.n	80049fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	613b      	str	r3, [r7, #16]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	613b      	str	r3, [r7, #16]
 80049f6:	693b      	ldr	r3, [r7, #16]
        return;
 80049f8:	e083      	b.n	8004b02 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d014      	beq.n	8004a30 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004a12:	2300      	movs	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00c      	beq.n	8004a56 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a40:	f043 0208 	orr.w	r2, r3, #8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d050      	beq.n	8004b00 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a6c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2201      	movs	r2, #1
 8004a72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d104      	bne.n	8004a8a <HAL_SPI_IRQHandler+0x17e>
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d034      	beq.n	8004af4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0203 	bic.w	r2, r2, #3
 8004a98:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d011      	beq.n	8004ac6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_SPI_IRQHandler+0x1fc>)
 8004aa8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fd fc2a 	bl	8002308 <HAL_DMA_Abort_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d016      	beq.n	8004afc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	4a0d      	ldr	r2, [pc, #52]	; (8004b08 <HAL_SPI_IRQHandler+0x1fc>)
 8004ad4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fd fc14 	bl	8002308 <HAL_DMA_Abort_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00a      	beq.n	8004afc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004af2:	e003      	b.n	8004afc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f004 f983 	bl	8008e00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004afa:	e000      	b.n	8004afe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004afc:	bf00      	nop
    return;
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
  }
}
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	08004d0d 	.word	0x08004d0d

08004b0c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b56:	b2db      	uxtb	r3, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b8a:	f7fc fa35 	bl	8000ff8 <HAL_GetTick>
 8004b8e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9e:	d02a      	beq.n	8004bf6 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	685a      	ldr	r2, [r3, #4]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0220 	bic.w	r2, r2, #32
 8004bae:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0203 	bic.w	r2, r2, #3
 8004bbe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	2164      	movs	r1, #100	; 0x64
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f98d 	bl	8004ee4 <SPI_EndRxTransaction>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f004 f906 	bl	8008e00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bf4:	e002      	b.n	8004bfc <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ff88 	bl	8004b0c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004bfc:	3710      	adds	r7, #16
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c10:	f7fc f9f2 	bl	8000ff8 <HAL_GetTick>
 8004c14:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c24:	d030      	beq.n	8004c88 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0220 	bic.w	r2, r2, #32
 8004c34:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	2164      	movs	r1, #100	; 0x64
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 f9aa 	bl	8004f94 <SPI_EndRxTxTransaction>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c4a:	f043 0220 	orr.w	r2, r3, #32
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0203 	bic.w	r2, r2, #3
 8004c60:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f004 f8bd 	bl	8008e00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004c86:	e002      	b.n	8004c8e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f004 f8ab 	bl	8008de4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff ff3c 	bl	8004b20 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f7ff ff38 	bl	8004b34 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004cc4:	bf00      	nop
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0203 	bic.w	r2, r2, #3
 8004ce8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cee:	f043 0210 	orr.w	r2, r3, #16
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004cfe:	68f8      	ldr	r0, [r7, #12]
 8004d00:	f004 f87e 	bl	8008e00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d18:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f004 f869 	bl	8008e00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d46:	e04c      	b.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4e:	d048      	beq.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004d50:	f7fc f952 	bl	8000ff8 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d902      	bls.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d13d      	bne.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d7e:	d111      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	d004      	beq.n	8004d94 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d92:	d107      	bne.n	8004da4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004da2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dac:	d10f      	bne.n	8004dce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e00f      	b.n	8004e02 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4013      	ands	r3, r2
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	bf0c      	ite	eq
 8004df2:	2301      	moveq	r3, #1
 8004df4:	2300      	movne	r3, #0
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	461a      	mov	r2, r3
 8004dfa:	79fb      	ldrb	r3, [r7, #7]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d1a3      	bne.n	8004d48 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
 8004e16:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004e18:	e057      	b.n	8004eca <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004e20:	d106      	bne.n	8004e30 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e36:	d048      	beq.n	8004eca <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e38:	f7fc f8de 	bl	8000ff8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d902      	bls.n	8004e4e <SPI_WaitFifoStateUntilTimeout+0x44>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d13d      	bne.n	8004eca <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e66:	d111      	bne.n	8004e8c <SPI_WaitFifoStateUntilTimeout+0x82>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e70:	d004      	beq.n	8004e7c <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e7a:	d107      	bne.n	8004e8c <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e94:	d10f      	bne.n	8004eb6 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e008      	b.n	8004edc <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d19f      	bne.n	8004e1a <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef8:	d111      	bne.n	8004f1e <SPI_EndRxTransaction+0x3a>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f02:	d004      	beq.n	8004f0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0c:	d107      	bne.n	8004f1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2200      	movs	r2, #0
 8004f26:	2180      	movs	r1, #128	; 0x80
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff ff04 	bl	8004d36 <SPI_WaitFlagStateUntilTimeout>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f38:	f043 0220 	orr.w	r2, r3, #32
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e023      	b.n	8004f8c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4c:	d11d      	bne.n	8004f8a <SPI_EndRxTransaction+0xa6>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f56:	d004      	beq.n	8004f62 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f60:	d113      	bne.n	8004f8a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f7ff ff4b 	bl	8004e0a <SPI_WaitFifoStateUntilTimeout>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d007      	beq.n	8004f8a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e000      	b.n	8004f8c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff ff2c 	bl	8004e0a <SPI_WaitFifoStateUntilTimeout>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d007      	beq.n	8004fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fbc:	f043 0220 	orr.w	r2, r3, #32
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e027      	b.n	8005018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	2180      	movs	r1, #128	; 0x80
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f7ff feaf 	bl	8004d36 <SPI_WaitFlagStateUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe2:	f043 0220 	orr.w	r2, r3, #32
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e014      	b.n	8005018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004ffa:	68f8      	ldr	r0, [r7, #12]
 8004ffc:	f7ff ff05 	bl	8004e0a <SPI_WaitFifoStateUntilTimeout>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d007      	beq.n	8005016 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	f043 0220 	orr.w	r2, r3, #32
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e000      	b.n	8005018 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e01d      	b.n	800506e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f005 f920 	bl	800a28c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f000 fc16 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <HAL_TIM_Base_Start_IT+0x50>)
 8005098:	4013      	ands	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b06      	cmp	r3, #6
 80050a0:	d00b      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0x42>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a8:	d007      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0201 	orr.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	00010007 	.word	0x00010007

080050cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e01d      	b.n	800511a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f005 f982 	bl	800a3fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f000 fbc0 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
	...

08005124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2201      	movs	r2, #1
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 ff42 	bl	8005fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <HAL_TIM_PWM_Start+0x7c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d004      	beq.n	8005150 <HAL_TIM_PWM_Start+0x2c>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a16      	ldr	r2, [pc, #88]	; (80051a4 <HAL_TIM_PWM_Start+0x80>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d101      	bne.n	8005154 <HAL_TIM_PWM_Start+0x30>
 8005150:	2301      	movs	r3, #1
 8005152:	e000      	b.n	8005156 <HAL_TIM_PWM_Start+0x32>
 8005154:	2300      	movs	r3, #0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	4b0d      	ldr	r3, [pc, #52]	; (80051a8 <HAL_TIM_PWM_Start+0x84>)
 8005172:	4013      	ands	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2b06      	cmp	r3, #6
 800517a:	d00b      	beq.n	8005194 <HAL_TIM_PWM_Start+0x70>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005182:	d007      	beq.n	8005194 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40010400 	.word	0x40010400
 80051a8:	00010007 	.word	0x00010007

080051ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2200      	movs	r2, #0
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fefe 	bl	8005fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a22      	ldr	r2, [pc, #136]	; (8005254 <HAL_TIM_PWM_Stop+0xa8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIM_PWM_Stop+0x2c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a21      	ldr	r2, [pc, #132]	; (8005258 <HAL_TIM_PWM_Stop+0xac>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_PWM_Stop+0x30>
 80051d8:	2301      	movs	r3, #1
 80051da:	e000      	b.n	80051de <HAL_TIM_PWM_Stop+0x32>
 80051dc:	2300      	movs	r3, #0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d017      	beq.n	8005212 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80051ec:	4013      	ands	r3, r2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <HAL_TIM_PWM_Stop+0x66>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	f240 4344 	movw	r3, #1092	; 0x444
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_TIM_PWM_Stop+0x66>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005210:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	f241 1311 	movw	r3, #4369	; 0x1111
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <HAL_TIM_PWM_Stop+0x96>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	f240 4344 	movw	r3, #1092	; 0x444
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d107      	bne.n	8005242 <HAL_TIM_PWM_Stop+0x96>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	40010000 	.word	0x40010000
 8005258:	40010400 	.word	0x40010400

0800525c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b02      	cmp	r3, #2
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b02      	cmp	r3, #2
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0202 	mvn.w	r2, #2
 8005288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fad8 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 faca 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fadb 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d122      	bne.n	800530c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d11b      	bne.n	800530c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0204 	mvn.w	r2, #4
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2202      	movs	r2, #2
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 faae 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 faa0 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fab1 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0308 	and.w	r3, r3, #8
 8005316:	2b08      	cmp	r3, #8
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0308 	and.w	r3, r3, #8
 8005324:	2b08      	cmp	r3, #8
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0208 	mvn.w	r2, #8
 8005330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2204      	movs	r2, #4
 8005336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	69db      	ldr	r3, [r3, #28]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fa84 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa76 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa87 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0310 	and.w	r3, r3, #16
 800536a:	2b10      	cmp	r3, #16
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b10      	cmp	r3, #16
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0210 	mvn.w	r2, #16
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2208      	movs	r2, #8
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fa5a 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa4c 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fa5d 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0201 	mvn.w	r2, #1
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f003 fd62 	bl	8008ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d10e      	bne.n	800540c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f8:	2b80      	cmp	r3, #128	; 0x80
 80053fa:	d107      	bne.n	800540c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 ff16 	bl	8006238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541a:	d10e      	bne.n	800543a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005426:	2b80      	cmp	r3, #128	; 0x80
 8005428:	d107      	bne.n	800543a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005432:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 ff09 	bl	800624c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d10e      	bne.n	8005466 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005452:	2b40      	cmp	r3, #64	; 0x40
 8005454:	d107      	bne.n	8005466 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800545e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 fa0b 	bl	800587c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b20      	cmp	r3, #32
 8005472:	d10e      	bne.n	8005492 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0320 	and.w	r3, r3, #32
 800547e:	2b20      	cmp	r3, #32
 8005480:	d107      	bne.n	8005492 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0220 	mvn.w	r2, #32
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fec9 	bl	8006224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005492:	bf00      	nop
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e105      	b.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b14      	cmp	r3, #20
 80054ca:	f200 80f0 	bhi.w	80056ae <HAL_TIM_PWM_ConfigChannel+0x212>
 80054ce:	a201      	add	r2, pc, #4	; (adr r2, 80054d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80054d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d4:	08005529 	.word	0x08005529
 80054d8:	080056af 	.word	0x080056af
 80054dc:	080056af 	.word	0x080056af
 80054e0:	080056af 	.word	0x080056af
 80054e4:	08005569 	.word	0x08005569
 80054e8:	080056af 	.word	0x080056af
 80054ec:	080056af 	.word	0x080056af
 80054f0:	080056af 	.word	0x080056af
 80054f4:	080055ab 	.word	0x080055ab
 80054f8:	080056af 	.word	0x080056af
 80054fc:	080056af 	.word	0x080056af
 8005500:	080056af 	.word	0x080056af
 8005504:	080055eb 	.word	0x080055eb
 8005508:	080056af 	.word	0x080056af
 800550c:	080056af 	.word	0x080056af
 8005510:	080056af 	.word	0x080056af
 8005514:	0800562d 	.word	0x0800562d
 8005518:	080056af 	.word	0x080056af
 800551c:	080056af 	.word	0x080056af
 8005520:	080056af 	.word	0x080056af
 8005524:	0800566d 	.word	0x0800566d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68b9      	ldr	r1, [r7, #8]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 fa4e 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699a      	ldr	r2, [r3, #24]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0208 	orr.w	r2, r2, #8
 8005542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699a      	ldr	r2, [r3, #24]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0204 	bic.w	r2, r2, #4
 8005552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6999      	ldr	r1, [r3, #24]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	619a      	str	r2, [r3, #24]
      break;
 8005566:	e0a3      	b.n	80056b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 faa0 	bl	8005ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699a      	ldr	r2, [r3, #24]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6999      	ldr	r1, [r3, #24]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	619a      	str	r2, [r3, #24]
      break;
 80055a8:	e082      	b.n	80056b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68b9      	ldr	r1, [r7, #8]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f000 faf7 	bl	8005ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f042 0208 	orr.w	r2, r2, #8
 80055c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	69da      	ldr	r2, [r3, #28]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 0204 	bic.w	r2, r2, #4
 80055d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69d9      	ldr	r1, [r3, #28]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	61da      	str	r2, [r3, #28]
      break;
 80055e8:	e062      	b.n	80056b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68b9      	ldr	r1, [r7, #8]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fb4d 	bl	8005c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69da      	ldr	r2, [r3, #28]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69da      	ldr	r2, [r3, #28]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69d9      	ldr	r1, [r3, #28]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	021a      	lsls	r2, r3, #8
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	61da      	str	r2, [r3, #28]
      break;
 800562a:	e041      	b.n	80056b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fb84 	bl	8005d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0208 	orr.w	r2, r2, #8
 8005646:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0204 	bic.w	r2, r2, #4
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800566a:	e021      	b.n	80056b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fbb6 	bl	8005de4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	021a      	lsls	r2, r3, #8
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80056ae:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop

080056cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_TIM_ConfigClockSource+0x18>
 80056e0:	2302      	movs	r3, #2
 80056e2:	e0a6      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x166>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4b4f      	ldr	r3, [pc, #316]	; (800583c <HAL_TIM_ConfigClockSource+0x170>)
 8005700:	4013      	ands	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d067      	beq.n	80057ec <HAL_TIM_ConfigClockSource+0x120>
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d80b      	bhi.n	8005738 <HAL_TIM_ConfigClockSource+0x6c>
 8005720:	2b10      	cmp	r3, #16
 8005722:	d073      	beq.n	800580c <HAL_TIM_ConfigClockSource+0x140>
 8005724:	2b10      	cmp	r3, #16
 8005726:	d802      	bhi.n	800572e <HAL_TIM_ConfigClockSource+0x62>
 8005728:	2b00      	cmp	r3, #0
 800572a:	d06f      	beq.n	800580c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800572c:	e078      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800572e:	2b20      	cmp	r3, #32
 8005730:	d06c      	beq.n	800580c <HAL_TIM_ConfigClockSource+0x140>
 8005732:	2b30      	cmp	r3, #48	; 0x30
 8005734:	d06a      	beq.n	800580c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005736:	e073      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005738:	2b70      	cmp	r3, #112	; 0x70
 800573a:	d00d      	beq.n	8005758 <HAL_TIM_ConfigClockSource+0x8c>
 800573c:	2b70      	cmp	r3, #112	; 0x70
 800573e:	d804      	bhi.n	800574a <HAL_TIM_ConfigClockSource+0x7e>
 8005740:	2b50      	cmp	r3, #80	; 0x50
 8005742:	d033      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0xe0>
 8005744:	2b60      	cmp	r3, #96	; 0x60
 8005746:	d041      	beq.n	80057cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005748:	e06a      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800574a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574e:	d066      	beq.n	800581e <HAL_TIM_ConfigClockSource+0x152>
 8005750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005754:	d017      	beq.n	8005786 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005756:	e063      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	6899      	ldr	r1, [r3, #8]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f000 fc0a 	bl	8005f80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800577a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	609a      	str	r2, [r3, #8]
      break;
 8005784:	e04c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	6899      	ldr	r1, [r3, #8]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	f000 fbf3 	bl	8005f80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689a      	ldr	r2, [r3, #8]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a8:	609a      	str	r2, [r3, #8]
      break;
 80057aa:	e039      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	461a      	mov	r2, r3
 80057ba:	f000 fb67 	bl	8005e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2150      	movs	r1, #80	; 0x50
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fbc0 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 80057ca:	e029      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6818      	ldr	r0, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	6859      	ldr	r1, [r3, #4]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	461a      	mov	r2, r3
 80057da:	f000 fb86 	bl	8005eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2160      	movs	r1, #96	; 0x60
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fbb0 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 80057ea:	e019      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6818      	ldr	r0, [r3, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6859      	ldr	r1, [r3, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	461a      	mov	r2, r3
 80057fa:	f000 fb47 	bl	8005e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2140      	movs	r1, #64	; 0x40
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fba0 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 800580a:	e009      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4619      	mov	r1, r3
 8005816:	4610      	mov	r0, r2
 8005818:	f000 fb97 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 800581c:	e000      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800581e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	fffeff88 	.word	0xfffeff88

08005840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a40      	ldr	r2, [pc, #256]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ae:	d00f      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <TIM_Base_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a3c      	ldr	r2, [pc, #240]	; (80059ac <TIM_Base_SetConfig+0x11c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3b      	ldr	r2, [pc, #236]	; (80059b0 <TIM_Base_SetConfig+0x120>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3a      	ldr	r2, [pc, #232]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2f      	ldr	r2, [pc, #188]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d02b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d027      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2c      	ldr	r2, [pc, #176]	; (80059a8 <TIM_Base_SetConfig+0x118>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d023      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2b      	ldr	r2, [pc, #172]	; (80059ac <TIM_Base_SetConfig+0x11c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01f      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <TIM_Base_SetConfig+0x120>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d01b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d017      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a28      	ldr	r2, [pc, #160]	; (80059b8 <TIM_Base_SetConfig+0x128>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a27      	ldr	r2, [pc, #156]	; (80059bc <TIM_Base_SetConfig+0x12c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a26      	ldr	r2, [pc, #152]	; (80059c0 <TIM_Base_SetConfig+0x130>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a25      	ldr	r2, [pc, #148]	; (80059c4 <TIM_Base_SetConfig+0x134>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <TIM_Base_SetConfig+0x138>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a23      	ldr	r2, [pc, #140]	; (80059cc <TIM_Base_SetConfig+0x13c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d108      	bne.n	8005954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0xf8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d103      	bne.n	8005990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	615a      	str	r2, [r3, #20]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40010400 	.word	0x40010400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800
 80059c4:	40001800 	.word	0x40001800
 80059c8:	40001c00 	.word	0x40001c00
 80059cc:	40002000 	.word	0x40002000

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <TIM_OC1_SetConfig+0xd8>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 0302 	bic.w	r3, r3, #2
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a21      	ldr	r2, [pc, #132]	; (8005aac <TIM_OC1_SetConfig+0xdc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC1_SetConfig+0x64>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <TIM_OC1_SetConfig+0xe0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10c      	bne.n	8005a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0308 	bic.w	r3, r3, #8
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <TIM_OC1_SetConfig+0xdc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC1_SetConfig+0x8e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <TIM_OC1_SetConfig+0xe0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d111      	bne.n	8005a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	fffeff8f 	.word	0xfffeff8f
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f023 0210 	bic.w	r2, r3, #16
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4b2e      	ldr	r3, [pc, #184]	; (8005b98 <TIM_OC2_SetConfig+0xe4>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0320 	bic.w	r3, r3, #32
 8005afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <TIM_OC2_SetConfig+0xe8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC2_SetConfig+0x68>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <TIM_OC2_SetConfig+0xec>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10d      	bne.n	8005b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <TIM_OC2_SetConfig+0xe8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC2_SetConfig+0x94>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <TIM_OC2_SetConfig+0xec>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d113      	bne.n	8005b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	feff8fff 	.word	0xfeff8fff
 8005b9c:	40010000 	.word	0x40010000
 8005ba0:	40010400 	.word	0x40010400

08005ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4b2d      	ldr	r3, [pc, #180]	; (8005c84 <TIM_OC3_SetConfig+0xe0>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <TIM_OC3_SetConfig+0xe4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_OC3_SetConfig+0x66>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC3_SetConfig+0xe8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10d      	bne.n	8005c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC3_SetConfig+0xe4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC3_SetConfig+0x92>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC3_SetConfig+0xe8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d113      	bne.n	8005c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	621a      	str	r2, [r3, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	fffeff8f 	.word	0xfffeff8f
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400

08005c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <TIM_OC4_SetConfig+0xa4>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <TIM_OC4_SetConfig+0xa8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC4_SetConfig+0x68>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <TIM_OC4_SetConfig+0xac>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d109      	bne.n	8005d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	feff8fff 	.word	0xfeff8fff
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <TIM_OC5_SetConfig+0x98>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <TIM_OC5_SetConfig+0x9c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC5_SetConfig+0x5e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a11      	ldr	r2, [pc, #68]	; (8005de0 <TIM_OC5_SetConfig+0xa0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d109      	bne.n	8005db2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	621a      	str	r2, [r3, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	fffeff8f 	.word	0xfffeff8f
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <TIM_OC6_SetConfig+0x9c>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	051b      	lsls	r3, r3, #20
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <TIM_OC6_SetConfig+0xa0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC6_SetConfig+0x60>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a12      	ldr	r2, [pc, #72]	; (8005e88 <TIM_OC6_SetConfig+0xa4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d109      	bne.n	8005e58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	feff8fff 	.word	0xfeff8fff
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 030a 	bic.w	r3, r3, #10
 8005ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0210 	bic.w	r2, r3, #16
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	031b      	lsls	r3, r3, #12
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f043 0307 	orr.w	r3, r3, #7
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	609a      	str	r2, [r3, #8]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	021a      	lsls	r2, r3, #8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1a      	ldr	r2, [r3, #32]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006020:	2302      	movs	r3, #2
 8006022:	e06d      	b.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a30      	ldr	r2, [pc, #192]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2f      	ldr	r2, [pc, #188]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d108      	bne.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800605e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a20      	ldr	r2, [pc, #128]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d01d      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10c      	bne.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40014000 	.word	0x40014000
 8006124:	40001800 	.word	0x40001800

08006128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006140:	2302      	movs	r3, #2
 8006142:	e065      	b.n	8006210 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4313      	orrs	r3, r2
 8006174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	041b      	lsls	r3, r3, #16
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a16      	ldr	r2, [pc, #88]	; (800621c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d004      	beq.n	80061d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a14      	ldr	r2, [pc, #80]	; (8006220 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d115      	bne.n	80061fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	051b      	lsls	r3, r3, #20
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	40010000 	.word	0x40010000
 8006220:	40010400 	.word	0x40010400

08006224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e040      	b.n	80062f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f004 fb20 	bl	800a8c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0201 	bic.w	r2, r2, #1
 800629c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 faa4 	bl	80067ec <UART_SetConfig>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d101      	bne.n	80062ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e022      	b.n	80062f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fd42 	bl	8006d40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0201 	orr.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 fdc9 	bl	8006e84 <UART_CheckIdleState>
 80062f2:	4603      	mov	r3, r0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3708      	adds	r7, #8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630e:	2b20      	cmp	r3, #32
 8006310:	d164      	bne.n	80063dc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <HAL_UART_Transmit_DMA+0x22>
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e05d      	b.n	80063de <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_UART_Transmit_DMA+0x34>
 800632c:	2302      	movs	r3, #2
 800632e:	e056      	b.n	80063de <HAL_UART_Transmit_DMA+0xe2>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	88fa      	ldrh	r2, [r7, #6]
 800634a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2221      	movs	r2, #33	; 0x21
 8006358:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800635e:	2b00      	cmp	r3, #0
 8006360:	d02a      	beq.n	80063b8 <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006366:	4a20      	ldr	r2, [pc, #128]	; (80063e8 <HAL_UART_Transmit_DMA+0xec>)
 8006368:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800636e:	4a1f      	ldr	r2, [pc, #124]	; (80063ec <HAL_UART_Transmit_DMA+0xf0>)
 8006370:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006376:	4a1e      	ldr	r2, [pc, #120]	; (80063f0 <HAL_UART_Transmit_DMA+0xf4>)
 8006378:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800637e:	2200      	movs	r2, #0
 8006380:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800638a:	4619      	mov	r1, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	3328      	adds	r3, #40	; 0x28
 8006392:	461a      	mov	r2, r3
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	f7fb fee7 	bl	8002168 <HAL_DMA_Start_IT>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00b      	beq.n	80063b8 <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2210      	movs	r2, #16
 80063a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e012      	b.n	80063de <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2240      	movs	r2, #64	; 0x40
 80063be:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063d6:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	0800706f 	.word	0x0800706f
 80063ec:	080070bf 	.word	0x080070bf
 80063f0:	0800715b 	.word	0x0800715b

080063f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	4613      	mov	r3, r2
 8006400:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006406:	2b20      	cmp	r3, #32
 8006408:	d16c      	bne.n	80064e4 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d002      	beq.n	8006416 <HAL_UART_Receive_DMA+0x22>
 8006410:	88fb      	ldrh	r3, [r7, #6]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e065      	b.n	80064e6 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_UART_Receive_DMA+0x34>
 8006424:	2302      	movs	r3, #2
 8006426:	e05e      	b.n	80064e6 <HAL_UART_Receive_DMA+0xf2>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	68ba      	ldr	r2, [r7, #8]
 8006434:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	88fa      	ldrh	r2, [r7, #6]
 800643a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2222      	movs	r2, #34	; 0x22
 8006448:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800644e:	2b00      	cmp	r3, #0
 8006450:	d02a      	beq.n	80064a8 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006456:	4a26      	ldr	r2, [pc, #152]	; (80064f0 <HAL_UART_Receive_DMA+0xfc>)
 8006458:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800645e:	4a25      	ldr	r2, [pc, #148]	; (80064f4 <HAL_UART_Receive_DMA+0x100>)
 8006460:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006466:	4a24      	ldr	r2, [pc, #144]	; (80064f8 <HAL_UART_Receive_DMA+0x104>)
 8006468:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646e:	2200      	movs	r2, #0
 8006470:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3324      	adds	r3, #36	; 0x24
 800647c:	4619      	mov	r1, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	461a      	mov	r2, r3
 8006484:	88fb      	ldrh	r3, [r7, #6]
 8006486:	f7fb fe6f 	bl	8002168 <HAL_DMA_Start_IT>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2210      	movs	r2, #16
 8006494:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e01e      	b.n	80064e6 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064be:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0201 	orr.w	r2, r2, #1
 80064ce:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064de:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	bf00      	nop
 80064f0:	080070db 	.word	0x080070db
 80064f4:	0800713f 	.word	0x0800713f
 80064f8:	0800715b 	.word	0x0800715b

080064fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b088      	sub	sp, #32
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800651c:	69fa      	ldr	r2, [r7, #28]
 800651e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006522:	4013      	ands	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d113      	bne.n	8006554 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00e      	beq.n	8006554 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f003 0320 	and.w	r3, r3, #32
 800653c:	2b00      	cmp	r3, #0
 800653e:	d009      	beq.n	8006554 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8114 	beq.w	8006772 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
      }
      return;
 8006552:	e10e      	b.n	8006772 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80d6 	beq.w	8006708 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d105      	bne.n	8006572 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80cb 	beq.w	8006708 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00e      	beq.n	800659a <HAL_UART_IRQHandler+0x9e>
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006582:	2b00      	cmp	r3, #0
 8006584:	d009      	beq.n	800659a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006592:	f043 0201 	orr.w	r2, r3, #1
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00e      	beq.n	80065c2 <HAL_UART_IRQHandler+0xc6>
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d009      	beq.n	80065c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2202      	movs	r2, #2
 80065b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ba:	f043 0204 	orr.w	r2, r3, #4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <HAL_UART_IRQHandler+0xee>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2204      	movs	r2, #4
 80065dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e2:	f043 0202 	orr.w	r2, r3, #2
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d013      	beq.n	800661c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d104      	bne.n	8006608 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006604:	2b00      	cmp	r3, #0
 8006606:	d009      	beq.n	800661c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2208      	movs	r2, #8
 800660e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006614:	f043 0208 	orr.w	r2, r3, #8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00f      	beq.n	8006646 <HAL_UART_IRQHandler+0x14a>
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800663e:	f043 0220 	orr.w	r2, r3, #32
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 8093 	beq.w	8006776 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00c      	beq.n	8006674 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	f003 0320 	and.w	r3, r3, #32
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006678:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	d004      	beq.n	8006692 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800668e:	2b00      	cmp	r3, #0
 8006690:	d031      	beq.n	80066f6 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fccb 	bl	800702e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b40      	cmp	r3, #64	; 0x40
 80066a4:	d123      	bne.n	80066ee <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d013      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c2:	4a30      	ldr	r2, [pc, #192]	; (8006784 <HAL_UART_IRQHandler+0x288>)
 80066c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fb fe1c 	bl	8002308 <HAL_DMA_Abort_IT>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d016      	beq.n	8006704 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066e4:	e00e      	b.n	8006704 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f86c 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ec:	e00a      	b.n	8006704 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f868 	bl	80067c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f4:	e006      	b.n	8006704 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f864 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006702:	e038      	b.n	8006776 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	bf00      	nop
    return;
 8006706:	e036      	b.n	8006776 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00d      	beq.n	800672e <HAL_UART_IRQHandler+0x232>
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d008      	beq.n	800672e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f856 	bl	80067d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800672c:	e026      	b.n	800677c <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00d      	beq.n	8006754 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b00      	cmp	r3, #0
 8006740:	d008      	beq.n	8006754 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006746:	2b00      	cmp	r3, #0
 8006748:	d017      	beq.n	800677a <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	4798      	blx	r3
    }
    return;
 8006752:	e012      	b.n	800677a <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00e      	beq.n	800677c <HAL_UART_IRQHandler+0x280>
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006764:	2b00      	cmp	r3, #0
 8006766:	d009      	beq.n	800677c <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fd48 	bl	80071fe <UART_EndTransmit_IT>
    return;
 800676e:	bf00      	nop
 8006770:	e004      	b.n	800677c <HAL_UART_IRQHandler+0x280>
      return;
 8006772:	bf00      	nop
 8006774:	e002      	b.n	800677c <HAL_UART_IRQHandler+0x280>
    return;
 8006776:	bf00      	nop
 8006778:	e000      	b.n	800677c <HAL_UART_IRQHandler+0x280>
    return;
 800677a:	bf00      	nop
  }

}
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	080071d3 	.word	0x080071d3

08006788 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80067a4:	bf00      	nop
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80067f4:	2300      	movs	r3, #0
 80067f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	431a      	orrs	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	69db      	ldr	r3, [r3, #28]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	4bb1      	ldr	r3, [pc, #708]	; (8006ae0 <UART_SetConfig+0x2f4>)
 800681c:	4013      	ands	r3, r2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	6939      	ldr	r1, [r7, #16]
 8006824:	430b      	orrs	r3, r1
 8006826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68da      	ldr	r2, [r3, #12]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a1b      	ldr	r3, [r3, #32]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	430a      	orrs	r2, r1
 8006860:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a9f      	ldr	r2, [pc, #636]	; (8006ae4 <UART_SetConfig+0x2f8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d121      	bne.n	80068b0 <UART_SetConfig+0xc4>
 800686c:	4b9e      	ldr	r3, [pc, #632]	; (8006ae8 <UART_SetConfig+0x2fc>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b03      	cmp	r3, #3
 8006878:	d816      	bhi.n	80068a8 <UART_SetConfig+0xbc>
 800687a:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <UART_SetConfig+0x94>)
 800687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006880:	08006891 	.word	0x08006891
 8006884:	0800689d 	.word	0x0800689d
 8006888:	08006897 	.word	0x08006897
 800688c:	080068a3 	.word	0x080068a3
 8006890:	2301      	movs	r3, #1
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e151      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006896:	2302      	movs	r3, #2
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e14e      	b.n	8006b3a <UART_SetConfig+0x34e>
 800689c:	2304      	movs	r3, #4
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e14b      	b.n	8006b3a <UART_SetConfig+0x34e>
 80068a2:	2308      	movs	r3, #8
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e148      	b.n	8006b3a <UART_SetConfig+0x34e>
 80068a8:	2310      	movs	r3, #16
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	bf00      	nop
 80068ae:	e144      	b.n	8006b3a <UART_SetConfig+0x34e>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a8d      	ldr	r2, [pc, #564]	; (8006aec <UART_SetConfig+0x300>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d134      	bne.n	8006924 <UART_SetConfig+0x138>
 80068ba:	4b8b      	ldr	r3, [pc, #556]	; (8006ae8 <UART_SetConfig+0x2fc>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c0:	f003 030c 	and.w	r3, r3, #12
 80068c4:	2b0c      	cmp	r3, #12
 80068c6:	d829      	bhi.n	800691c <UART_SetConfig+0x130>
 80068c8:	a201      	add	r2, pc, #4	; (adr r2, 80068d0 <UART_SetConfig+0xe4>)
 80068ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ce:	bf00      	nop
 80068d0:	08006905 	.word	0x08006905
 80068d4:	0800691d 	.word	0x0800691d
 80068d8:	0800691d 	.word	0x0800691d
 80068dc:	0800691d 	.word	0x0800691d
 80068e0:	08006911 	.word	0x08006911
 80068e4:	0800691d 	.word	0x0800691d
 80068e8:	0800691d 	.word	0x0800691d
 80068ec:	0800691d 	.word	0x0800691d
 80068f0:	0800690b 	.word	0x0800690b
 80068f4:	0800691d 	.word	0x0800691d
 80068f8:	0800691d 	.word	0x0800691d
 80068fc:	0800691d 	.word	0x0800691d
 8006900:	08006917 	.word	0x08006917
 8006904:	2300      	movs	r3, #0
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e117      	b.n	8006b3a <UART_SetConfig+0x34e>
 800690a:	2302      	movs	r3, #2
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e114      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006910:	2304      	movs	r3, #4
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e111      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006916:	2308      	movs	r3, #8
 8006918:	77fb      	strb	r3, [r7, #31]
 800691a:	e10e      	b.n	8006b3a <UART_SetConfig+0x34e>
 800691c:	2310      	movs	r3, #16
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	bf00      	nop
 8006922:	e10a      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a71      	ldr	r2, [pc, #452]	; (8006af0 <UART_SetConfig+0x304>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d120      	bne.n	8006970 <UART_SetConfig+0x184>
 800692e:	4b6e      	ldr	r3, [pc, #440]	; (8006ae8 <UART_SetConfig+0x2fc>)
 8006930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006934:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006938:	2b10      	cmp	r3, #16
 800693a:	d00f      	beq.n	800695c <UART_SetConfig+0x170>
 800693c:	2b10      	cmp	r3, #16
 800693e:	d802      	bhi.n	8006946 <UART_SetConfig+0x15a>
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <UART_SetConfig+0x164>
 8006944:	e010      	b.n	8006968 <UART_SetConfig+0x17c>
 8006946:	2b20      	cmp	r3, #32
 8006948:	d005      	beq.n	8006956 <UART_SetConfig+0x16a>
 800694a:	2b30      	cmp	r3, #48	; 0x30
 800694c:	d009      	beq.n	8006962 <UART_SetConfig+0x176>
 800694e:	e00b      	b.n	8006968 <UART_SetConfig+0x17c>
 8006950:	2300      	movs	r3, #0
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e0f1      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006956:	2302      	movs	r3, #2
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e0ee      	b.n	8006b3a <UART_SetConfig+0x34e>
 800695c:	2304      	movs	r3, #4
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e0eb      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006962:	2308      	movs	r3, #8
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e0e8      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006968:	2310      	movs	r3, #16
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	bf00      	nop
 800696e:	e0e4      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a5f      	ldr	r2, [pc, #380]	; (8006af4 <UART_SetConfig+0x308>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d120      	bne.n	80069bc <UART_SetConfig+0x1d0>
 800697a:	4b5b      	ldr	r3, [pc, #364]	; (8006ae8 <UART_SetConfig+0x2fc>)
 800697c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006980:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d00f      	beq.n	80069a8 <UART_SetConfig+0x1bc>
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d802      	bhi.n	8006992 <UART_SetConfig+0x1a6>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d005      	beq.n	800699c <UART_SetConfig+0x1b0>
 8006990:	e010      	b.n	80069b4 <UART_SetConfig+0x1c8>
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d005      	beq.n	80069a2 <UART_SetConfig+0x1b6>
 8006996:	2bc0      	cmp	r3, #192	; 0xc0
 8006998:	d009      	beq.n	80069ae <UART_SetConfig+0x1c2>
 800699a:	e00b      	b.n	80069b4 <UART_SetConfig+0x1c8>
 800699c:	2300      	movs	r3, #0
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e0cb      	b.n	8006b3a <UART_SetConfig+0x34e>
 80069a2:	2302      	movs	r3, #2
 80069a4:	77fb      	strb	r3, [r7, #31]
 80069a6:	e0c8      	b.n	8006b3a <UART_SetConfig+0x34e>
 80069a8:	2304      	movs	r3, #4
 80069aa:	77fb      	strb	r3, [r7, #31]
 80069ac:	e0c5      	b.n	8006b3a <UART_SetConfig+0x34e>
 80069ae:	2308      	movs	r3, #8
 80069b0:	77fb      	strb	r3, [r7, #31]
 80069b2:	e0c2      	b.n	8006b3a <UART_SetConfig+0x34e>
 80069b4:	2310      	movs	r3, #16
 80069b6:	77fb      	strb	r3, [r7, #31]
 80069b8:	bf00      	nop
 80069ba:	e0be      	b.n	8006b3a <UART_SetConfig+0x34e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a4d      	ldr	r2, [pc, #308]	; (8006af8 <UART_SetConfig+0x30c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d124      	bne.n	8006a10 <UART_SetConfig+0x224>
 80069c6:	4b48      	ldr	r3, [pc, #288]	; (8006ae8 <UART_SetConfig+0x2fc>)
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069d4:	d012      	beq.n	80069fc <UART_SetConfig+0x210>
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d802      	bhi.n	80069e2 <UART_SetConfig+0x1f6>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <UART_SetConfig+0x204>
 80069e0:	e012      	b.n	8006a08 <UART_SetConfig+0x21c>
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d006      	beq.n	80069f6 <UART_SetConfig+0x20a>
 80069e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ec:	d009      	beq.n	8006a02 <UART_SetConfig+0x216>
 80069ee:	e00b      	b.n	8006a08 <UART_SetConfig+0x21c>
 80069f0:	2300      	movs	r3, #0
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e0a1      	b.n	8006b3a <UART_SetConfig+0x34e>
 80069f6:	2302      	movs	r3, #2
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e09e      	b.n	8006b3a <UART_SetConfig+0x34e>
 80069fc:	2304      	movs	r3, #4
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e09b      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a02:	2308      	movs	r3, #8
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e098      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	bf00      	nop
 8006a0e:	e094      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a39      	ldr	r2, [pc, #228]	; (8006afc <UART_SetConfig+0x310>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d124      	bne.n	8006a64 <UART_SetConfig+0x278>
 8006a1a:	4b33      	ldr	r3, [pc, #204]	; (8006ae8 <UART_SetConfig+0x2fc>)
 8006a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a28:	d012      	beq.n	8006a50 <UART_SetConfig+0x264>
 8006a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a2e:	d802      	bhi.n	8006a36 <UART_SetConfig+0x24a>
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d007      	beq.n	8006a44 <UART_SetConfig+0x258>
 8006a34:	e012      	b.n	8006a5c <UART_SetConfig+0x270>
 8006a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3a:	d006      	beq.n	8006a4a <UART_SetConfig+0x25e>
 8006a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a40:	d009      	beq.n	8006a56 <UART_SetConfig+0x26a>
 8006a42:	e00b      	b.n	8006a5c <UART_SetConfig+0x270>
 8006a44:	2301      	movs	r3, #1
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e077      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e074      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a50:	2304      	movs	r3, #4
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e071      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a56:	2308      	movs	r3, #8
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e06e      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	bf00      	nop
 8006a62:	e06a      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a25      	ldr	r2, [pc, #148]	; (8006b00 <UART_SetConfig+0x314>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d124      	bne.n	8006ab8 <UART_SetConfig+0x2cc>
 8006a6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ae8 <UART_SetConfig+0x2fc>)
 8006a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a74:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a7c:	d012      	beq.n	8006aa4 <UART_SetConfig+0x2b8>
 8006a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a82:	d802      	bhi.n	8006a8a <UART_SetConfig+0x29e>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <UART_SetConfig+0x2ac>
 8006a88:	e012      	b.n	8006ab0 <UART_SetConfig+0x2c4>
 8006a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8e:	d006      	beq.n	8006a9e <UART_SetConfig+0x2b2>
 8006a90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a94:	d009      	beq.n	8006aaa <UART_SetConfig+0x2be>
 8006a96:	e00b      	b.n	8006ab0 <UART_SetConfig+0x2c4>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e04d      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006a9e:	2302      	movs	r3, #2
 8006aa0:	77fb      	strb	r3, [r7, #31]
 8006aa2:	e04a      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006aa4:	2304      	movs	r3, #4
 8006aa6:	77fb      	strb	r3, [r7, #31]
 8006aa8:	e047      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006aaa:	2308      	movs	r3, #8
 8006aac:	77fb      	strb	r3, [r7, #31]
 8006aae:	e044      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006ab0:	2310      	movs	r3, #16
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	bf00      	nop
 8006ab6:	e040      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a11      	ldr	r2, [pc, #68]	; (8006b04 <UART_SetConfig+0x318>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d139      	bne.n	8006b36 <UART_SetConfig+0x34a>
 8006ac2:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <UART_SetConfig+0x2fc>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad0:	d027      	beq.n	8006b22 <UART_SetConfig+0x336>
 8006ad2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ad6:	d817      	bhi.n	8006b08 <UART_SetConfig+0x31c>
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01c      	beq.n	8006b16 <UART_SetConfig+0x32a>
 8006adc:	e027      	b.n	8006b2e <UART_SetConfig+0x342>
 8006ade:	bf00      	nop
 8006ae0:	efff69f3 	.word	0xefff69f3
 8006ae4:	40011000 	.word	0x40011000
 8006ae8:	40023800 	.word	0x40023800
 8006aec:	40004400 	.word	0x40004400
 8006af0:	40004800 	.word	0x40004800
 8006af4:	40004c00 	.word	0x40004c00
 8006af8:	40005000 	.word	0x40005000
 8006afc:	40011400 	.word	0x40011400
 8006b00:	40007800 	.word	0x40007800
 8006b04:	40007c00 	.word	0x40007c00
 8006b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0c:	d006      	beq.n	8006b1c <UART_SetConfig+0x330>
 8006b0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006b12:	d009      	beq.n	8006b28 <UART_SetConfig+0x33c>
 8006b14:	e00b      	b.n	8006b2e <UART_SetConfig+0x342>
 8006b16:	2300      	movs	r3, #0
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e00e      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e00b      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006b22:	2304      	movs	r3, #4
 8006b24:	77fb      	strb	r3, [r7, #31]
 8006b26:	e008      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006b28:	2308      	movs	r3, #8
 8006b2a:	77fb      	strb	r3, [r7, #31]
 8006b2c:	e005      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006b2e:	2310      	movs	r3, #16
 8006b30:	77fb      	strb	r3, [r7, #31]
 8006b32:	bf00      	nop
 8006b34:	e001      	b.n	8006b3a <UART_SetConfig+0x34e>
 8006b36:	2310      	movs	r3, #16
 8006b38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b42:	d17f      	bne.n	8006c44 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006b44:	7ffb      	ldrb	r3, [r7, #31]
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d85c      	bhi.n	8006c04 <UART_SetConfig+0x418>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <UART_SetConfig+0x364>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b95 	.word	0x08006b95
 8006b58:	08006bb5 	.word	0x08006bb5
 8006b5c:	08006c05 	.word	0x08006c05
 8006b60:	08006bcd 	.word	0x08006bcd
 8006b64:	08006c05 	.word	0x08006c05
 8006b68:	08006c05 	.word	0x08006c05
 8006b6c:	08006c05 	.word	0x08006c05
 8006b70:	08006bed 	.word	0x08006bed
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b74:	f7fc fe18 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8006b78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	005a      	lsls	r2, r3, #1
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	61bb      	str	r3, [r7, #24]
        break;
 8006b92:	e03a      	b.n	8006c0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b94:	f7fc fe1c 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8006b98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	005a      	lsls	r2, r3, #1
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	085b      	lsrs	r3, r3, #1
 8006ba4:	441a      	add	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	61bb      	str	r3, [r7, #24]
        break;
 8006bb2:	e02a      	b.n	8006c0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	085a      	lsrs	r2, r3, #1
 8006bba:	4b5f      	ldr	r3, [pc, #380]	; (8006d38 <UART_SetConfig+0x54c>)
 8006bbc:	4413      	add	r3, r2
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	6852      	ldr	r2, [r2, #4]
 8006bc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	61bb      	str	r3, [r7, #24]
        break;
 8006bca:	e01e      	b.n	8006c0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bcc:	f7fc fd2e 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8006bd0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	005a      	lsls	r2, r3, #1
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	441a      	add	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	61bb      	str	r3, [r7, #24]
        break;
 8006bea:	e00e      	b.n	8006c0a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	085b      	lsrs	r3, r3, #1
 8006bf2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	61bb      	str	r3, [r7, #24]
        break;
 8006c02:	e002      	b.n	8006c0a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	75fb      	strb	r3, [r7, #23]
        break;
 8006c08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	2b0f      	cmp	r3, #15
 8006c0e:	d916      	bls.n	8006c3e <UART_SetConfig+0x452>
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c16:	d212      	bcs.n	8006c3e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f023 030f 	bic.w	r3, r3, #15
 8006c20:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	085b      	lsrs	r3, r3, #1
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	897b      	ldrh	r3, [r7, #10]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	897a      	ldrh	r2, [r7, #10]
 8006c3a:	60da      	str	r2, [r3, #12]
 8006c3c:	e070      	b.n	8006d20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
 8006c42:	e06d      	b.n	8006d20 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8006c44:	7ffb      	ldrb	r3, [r7, #31]
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d859      	bhi.n	8006cfe <UART_SetConfig+0x512>
 8006c4a:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0x464>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c75 	.word	0x08006c75
 8006c54:	08006c93 	.word	0x08006c93
 8006c58:	08006cb1 	.word	0x08006cb1
 8006c5c:	08006cff 	.word	0x08006cff
 8006c60:	08006cc9 	.word	0x08006cc9
 8006c64:	08006cff 	.word	0x08006cff
 8006c68:	08006cff 	.word	0x08006cff
 8006c6c:	08006cff 	.word	0x08006cff
 8006c70:	08006ce7 	.word	0x08006ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c74:	f7fc fd98 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8006c78:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	085a      	lsrs	r2, r3, #1
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	441a      	add	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	61bb      	str	r3, [r7, #24]
        break;
 8006c90:	e038      	b.n	8006d04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c92:	f7fc fd9d 	bl	80037d0 <HAL_RCC_GetPCLK2Freq>
 8006c96:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	085a      	lsrs	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	61bb      	str	r3, [r7, #24]
        break;
 8006cae:	e029      	b.n	8006d04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	085a      	lsrs	r2, r3, #1
 8006cb6:	4b21      	ldr	r3, [pc, #132]	; (8006d3c <UART_SetConfig+0x550>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	6852      	ldr	r2, [r2, #4]
 8006cbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	61bb      	str	r3, [r7, #24]
        break;
 8006cc6:	e01d      	b.n	8006d04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc8:	f7fc fcb0 	bl	800362c <HAL_RCC_GetSysClockFreq>
 8006ccc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	085a      	lsrs	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	441a      	add	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	61bb      	str	r3, [r7, #24]
        break;
 8006ce4:	e00e      	b.n	8006d04 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	085b      	lsrs	r3, r3, #1
 8006cec:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	61bb      	str	r3, [r7, #24]
        break;
 8006cfc:	e002      	b.n	8006d04 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	75fb      	strb	r3, [r7, #23]
        break;
 8006d02:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d908      	bls.n	8006d1c <UART_SetConfig+0x530>
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d10:	d204      	bcs.n	8006d1c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e001      	b.n	8006d20 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	01e84800 	.word	0x01e84800
 8006d3c:	00f42400 	.word	0x00f42400

08006d40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	430a      	orrs	r2, r1
 8006d8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00a      	beq.n	8006dae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	f003 0308 	and.w	r3, r3, #8
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00a      	beq.n	8006dd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd4:	f003 0310 	and.w	r3, r3, #16
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00a      	beq.n	8006df2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	430a      	orrs	r2, r1
 8006e12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d01a      	beq.n	8006e56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e3e:	d10a      	bne.n	8006e56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	430a      	orrs	r2, r1
 8006e54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00a      	beq.n	8006e78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	430a      	orrs	r2, r1
 8006e76:	605a      	str	r2, [r3, #4]
  }
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006e92:	f7fa f8b1 	bl	8000ff8 <HAL_GetTick>
 8006e96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d10e      	bne.n	8006ec4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ea6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f82a 	bl	8006f0e <UART_WaitOnFlagUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e020      	b.n	8006f06 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d10e      	bne.n	8006ef0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ed2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f814 	bl	8006f0e <UART_WaitOnFlagUntilTimeout>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e00a      	b.n	8006f06 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1e:	e05d      	b.n	8006fdc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f26:	d059      	beq.n	8006fdc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f28:	f7fa f866 	bl	8000ff8 <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d302      	bcc.n	8006f3e <UART_WaitOnFlagUntilTimeout+0x30>
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d11b      	bne.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f022 0201 	bic.w	r2, r2, #1
 8006f5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2220      	movs	r2, #32
 8006f62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e042      	b.n	8006ffc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0304 	and.w	r3, r3, #4
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02b      	beq.n	8006fdc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f92:	d123      	bne.n	8006fdc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f9c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006fac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0201 	bic.w	r2, r2, #1
 8006fbc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e00f      	b.n	8006ffc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69da      	ldr	r2, [r3, #28]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d092      	beq.n	8006f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800701a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007044:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800707a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	69db      	ldr	r3, [r3, #28]
 8007080:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007084:	d014      	beq.n	80070b0 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800709c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ac:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80070ae:	e002      	b.n	80070b6 <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f006 ff59 	bl	800df68 <HAL_UART_TxCpltCallback>
}
 80070b6:	bf00      	nop
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f7ff fb5b 	bl	8006788 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b084      	sub	sp, #16
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f0:	d01e      	beq.n	8007130 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007108:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	689a      	ldr	r2, [r3, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689a      	ldr	r2, [r3, #8]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007128:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f7ff fb33 	bl	800679c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f7ff fb2f 	bl	80067b0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b086      	sub	sp, #24
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007172:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b80      	cmp	r3, #128	; 0x80
 8007180:	d109      	bne.n	8007196 <UART_DMAError+0x3c>
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2b21      	cmp	r3, #33	; 0x21
 8007186:	d106      	bne.n	8007196 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2200      	movs	r2, #0
 800718c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007190:	6978      	ldr	r0, [r7, #20]
 8007192:	f7ff ff37 	bl	8007004 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b40      	cmp	r3, #64	; 0x40
 80071a2:	d109      	bne.n	80071b8 <UART_DMAError+0x5e>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2b22      	cmp	r3, #34	; 0x22
 80071a8:	d106      	bne.n	80071b8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80071b2:	6978      	ldr	r0, [r7, #20]
 80071b4:	f7ff ff3b 	bl	800702e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071bc:	f043 0210 	orr.w	r2, r3, #16
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071c4:	6978      	ldr	r0, [r7, #20]
 80071c6:	f7ff fafd 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ca:	bf00      	nop
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f7ff fae7 	bl	80067c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071f6:	bf00      	nop
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007214:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f006 fea0 	bl	800df68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007228:	bf00      	nop
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8007230:	b480      	push	{r7}
 8007232:	b085      	sub	sp, #20
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	0a5a      	lsrs	r2, r3, #9
 8007240:	490f      	ldr	r1, [pc, #60]	; (8007280 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007242:	fba1 1202 	umull	r1, r2, r1, r2
 8007246:	09d2      	lsrs	r2, r2, #7
 8007248:	490e      	ldr	r1, [pc, #56]	; (8007284 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800724a:	fb01 f202 	mul.w	r2, r1, r2
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	0a5b      	lsrs	r3, r3, #9
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800725a:	fba2 2303 	umull	r2, r3, r2, r3
 800725e:	09db      	lsrs	r3, r3, #7
 8007260:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	441a      	add	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	601a      	str	r2, [r3, #0]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	00044b83 	.word	0x00044b83
 8007284:	3b9aca00 	.word	0x3b9aca00

08007288 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800729a:	2b84      	cmp	r3, #132	; 0x84
 800729c:	d005      	beq.n	80072aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800729e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4413      	add	r3, r2
 80072a6:	3303      	adds	r3, #3
 80072a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80072aa:	68fb      	ldr	r3, [r7, #12]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80072bc:	f000 fab6 	bl	800782c <vTaskStartScheduler>
  
  return osOK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80072c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072c8:	b089      	sub	sp, #36	; 0x24
 80072ca:	af04      	add	r7, sp, #16
 80072cc:	6078      	str	r0, [r7, #4]
 80072ce:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685c      	ldr	r4, [r3, #4]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681d      	ldr	r5, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691e      	ldr	r6, [r3, #16]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7ff ffd0 	bl	8007288 <makeFreeRtosPriority>
 80072e8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072f2:	9202      	str	r2, [sp, #8]
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	9100      	str	r1, [sp, #0]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	4632      	mov	r2, r6
 80072fc:	4629      	mov	r1, r5
 80072fe:	4620      	mov	r0, r4
 8007300:	f000 f8c5 	bl	800748e <xTaskCreateStatic>
 8007304:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007306:	68fb      	ldr	r3, [r7, #12]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007310 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8007314:	f000 fd6c 	bl	8007df0 <xTaskGetSchedulerState>
 8007318:	4603      	mov	r3, r0
 800731a:	2b01      	cmp	r3, #1
 800731c:	d001      	beq.n	8007322 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800731e:	f000 ff83 	bl	8008228 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8007322:	bf00      	nop
 8007324:	bd80      	pop	{r7, pc}

08007326 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f103 0208 	add.w	r2, r3, #8
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f103 0208 	add.w	r2, r3, #8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f103 0208 	add.w	r2, r3, #8
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007374:	bf00      	nop
 8007376:	370c      	adds	r7, #12
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	1c5a      	adds	r2, r3, #1
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]
}
 80073bc:	bf00      	nop
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073de:	d103      	bne.n	80073e8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e00c      	b.n	8007402 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3308      	adds	r3, #8
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e002      	b.n	80073f6 <vListInsert+0x2e>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d2f6      	bcs.n	80073f0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	601a      	str	r2, [r3, #0]
}
 800742e:	bf00      	nop
 8007430:	3714      	adds	r7, #20
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800743a:	b480      	push	{r7}
 800743c:	b085      	sub	sp, #20
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	6892      	ldr	r2, [r2, #8]
 8007450:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	6852      	ldr	r2, [r2, #4]
 800745a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	429a      	cmp	r2, r3
 8007464:	d103      	bne.n	800746e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	1e5a      	subs	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800748e:	b580      	push	{r7, lr}
 8007490:	b08e      	sub	sp, #56	; 0x38
 8007492:	af04      	add	r7, sp, #16
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800749c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a6:	b672      	cpsid	i
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	b662      	cpsie	i
 80074b6:	623b      	str	r3, [r7, #32]
 80074b8:	e7fe      	b.n	80074b8 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80074ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <xTaskCreateStatic+0x4a>
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	b672      	cpsid	i
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	b662      	cpsie	i
 80074d4:	61fb      	str	r3, [r7, #28]
 80074d6:	e7fe      	b.n	80074d6 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074d8:	2354      	movs	r3, #84	; 0x54
 80074da:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b54      	cmp	r3, #84	; 0x54
 80074e0:	d00b      	beq.n	80074fa <xTaskCreateStatic+0x6c>
 80074e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e6:	b672      	cpsid	i
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	b662      	cpsie	i
 80074f6:	61bb      	str	r3, [r7, #24]
 80074f8:	e7fe      	b.n	80074f8 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d01a      	beq.n	8007538 <xTaskCreateStatic+0xaa>
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	2b00      	cmp	r3, #0
 8007506:	d017      	beq.n	8007538 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800750a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007512:	2300      	movs	r3, #0
 8007514:	9303      	str	r3, [sp, #12]
 8007516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007518:	9302      	str	r3, [sp, #8]
 800751a:	f107 0314 	add.w	r3, r7, #20
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	68b9      	ldr	r1, [r7, #8]
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f000 f80b 	bl	8007546 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007532:	f000 f891 	bl	8007658 <prvAddNewTaskToReadyList>
 8007536:	e001      	b.n	800753c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800753c:	697b      	ldr	r3, [r7, #20]
	}
 800753e:	4618      	mov	r0, r3
 8007540:	3728      	adds	r7, #40	; 0x28
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b088      	sub	sp, #32
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800755e:	440b      	add	r3, r1
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	4413      	add	r3, r2
 8007564:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00b      	beq.n	8007590 <prvInitialiseNewTask+0x4a>
 8007578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757c:	b672      	cpsid	i
 800757e:	f383 8811 	msr	BASEPRI, r3
 8007582:	f3bf 8f6f 	isb	sy
 8007586:	f3bf 8f4f 	dsb	sy
 800758a:	b662      	cpsie	i
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e7fe      	b.n	800758e <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01f      	beq.n	80075d6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007596:	2300      	movs	r3, #0
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	e012      	b.n	80075c2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	7819      	ldrb	r1, [r3, #0]
 80075a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	4413      	add	r3, r2
 80075aa:	3334      	adds	r3, #52	; 0x34
 80075ac:	460a      	mov	r2, r1
 80075ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d006      	beq.n	80075ca <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	3301      	adds	r3, #1
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b0f      	cmp	r3, #15
 80075c6:	d9e9      	bls.n	800759c <prvInitialiseNewTask+0x56>
 80075c8:	e000      	b.n	80075cc <prvInitialiseNewTask+0x86>
			{
				break;
 80075ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80075d4:	e003      	b.n	80075de <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e0:	2b06      	cmp	r3, #6
 80075e2:	d901      	bls.n	80075e8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075e4:	2306      	movs	r3, #6
 80075e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2200      	movs	r2, #0
 80075f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fc:	3304      	adds	r3, #4
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff feb1 	bl	8007366 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	3318      	adds	r3, #24
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff feac 	bl	8007366 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007612:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	f1c3 0207 	rsb	r2, r3, #7
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007622:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	2200      	movs	r2, #0
 8007628:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	69b8      	ldr	r0, [r7, #24]
 8007638:	f000 fc5e 	bl	8007ef8 <pxPortInitialiseStack>
 800763c:	4602      	mov	r2, r0
 800763e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007640:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	2b00      	cmp	r3, #0
 8007646:	d002      	beq.n	800764e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800764c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800764e:	bf00      	nop
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007660:	f000 fd52 	bl	8008108 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007664:	4b2a      	ldr	r3, [pc, #168]	; (8007710 <prvAddNewTaskToReadyList+0xb8>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	4a29      	ldr	r2, [pc, #164]	; (8007710 <prvAddNewTaskToReadyList+0xb8>)
 800766c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800766e:	4b29      	ldr	r3, [pc, #164]	; (8007714 <prvAddNewTaskToReadyList+0xbc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d109      	bne.n	800768a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007676:	4a27      	ldr	r2, [pc, #156]	; (8007714 <prvAddNewTaskToReadyList+0xbc>)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800767c:	4b24      	ldr	r3, [pc, #144]	; (8007710 <prvAddNewTaskToReadyList+0xb8>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d110      	bne.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007684:	f000 fb1e 	bl	8007cc4 <prvInitialiseTaskLists>
 8007688:	e00d      	b.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800768a:	4b23      	ldr	r3, [pc, #140]	; (8007718 <prvAddNewTaskToReadyList+0xc0>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d109      	bne.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007692:	4b20      	ldr	r3, [pc, #128]	; (8007714 <prvAddNewTaskToReadyList+0xbc>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	429a      	cmp	r2, r3
 800769e:	d802      	bhi.n	80076a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076a0:	4a1c      	ldr	r2, [pc, #112]	; (8007714 <prvAddNewTaskToReadyList+0xbc>)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076a6:	4b1d      	ldr	r3, [pc, #116]	; (800771c <prvAddNewTaskToReadyList+0xc4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3301      	adds	r3, #1
 80076ac:	4a1b      	ldr	r2, [pc, #108]	; (800771c <prvAddNewTaskToReadyList+0xc4>)
 80076ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	2201      	movs	r2, #1
 80076b6:	409a      	lsls	r2, r3
 80076b8:	4b19      	ldr	r3, [pc, #100]	; (8007720 <prvAddNewTaskToReadyList+0xc8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4313      	orrs	r3, r2
 80076be:	4a18      	ldr	r2, [pc, #96]	; (8007720 <prvAddNewTaskToReadyList+0xc8>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4a15      	ldr	r2, [pc, #84]	; (8007724 <prvAddNewTaskToReadyList+0xcc>)
 80076d0:	441a      	add	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7ff fe51 	bl	8007380 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076de:	f000 fd45 	bl	800816c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076e2:	4b0d      	ldr	r3, [pc, #52]	; (8007718 <prvAddNewTaskToReadyList+0xc0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00e      	beq.n	8007708 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076ea:	4b0a      	ldr	r3, [pc, #40]	; (8007714 <prvAddNewTaskToReadyList+0xbc>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d207      	bcs.n	8007708 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076f8:	4b0b      	ldr	r3, [pc, #44]	; (8007728 <prvAddNewTaskToReadyList+0xd0>)
 80076fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007708:	bf00      	nop
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20000488 	.word	0x20000488
 8007714:	20000388 	.word	0x20000388
 8007718:	20000494 	.word	0x20000494
 800771c:	200004a4 	.word	0x200004a4
 8007720:	20000490 	.word	0x20000490
 8007724:	2000038c 	.word	0x2000038c
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08a      	sub	sp, #40	; 0x28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007736:	2300      	movs	r3, #0
 8007738:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <vTaskDelayUntil+0x2c>
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	b672      	cpsid	i
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	b662      	cpsie	i
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e7fe      	b.n	8007756 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <vTaskDelayUntil+0x4a>
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	b672      	cpsid	i
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	b662      	cpsie	i
 8007772:	613b      	str	r3, [r7, #16]
 8007774:	e7fe      	b.n	8007774 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8007776:	4b2a      	ldr	r3, [pc, #168]	; (8007820 <vTaskDelayUntil+0xf4>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00b      	beq.n	8007796 <vTaskDelayUntil+0x6a>
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	b672      	cpsid	i
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	b662      	cpsie	i
 8007792:	60fb      	str	r3, [r7, #12]
 8007794:	e7fe      	b.n	8007794 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8007796:	f000 f8ab 	bl	80078f0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800779a:	4b22      	ldr	r3, [pc, #136]	; (8007824 <vTaskDelayUntil+0xf8>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	4413      	add	r3, r2
 80077a8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6a3a      	ldr	r2, [r7, #32]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d20b      	bcs.n	80077cc <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d211      	bcs.n	80077e2 <vTaskDelayUntil+0xb6>
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d90d      	bls.n	80077e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80077c6:	2301      	movs	r3, #1
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
 80077ca:	e00a      	b.n	80077e2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d303      	bcc.n	80077de <vTaskDelayUntil+0xb2>
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d901      	bls.n	80077e2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80077de:	2301      	movs	r3, #1
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	69fa      	ldr	r2, [r7, #28]
 80077e6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d006      	beq.n	80077fc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2100      	movs	r1, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fb18 	bl	8007e2c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80077fc:	f000 f886 	bl	800790c <xTaskResumeAll>
 8007800:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d107      	bne.n	8007818 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8007808:	4b07      	ldr	r3, [pc, #28]	; (8007828 <vTaskDelayUntil+0xfc>)
 800780a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800780e:	601a      	str	r2, [r3, #0]
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007818:	bf00      	nop
 800781a:	3728      	adds	r7, #40	; 0x28
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	200004b0 	.word	0x200004b0
 8007824:	2000048c 	.word	0x2000048c
 8007828:	e000ed04 	.word	0xe000ed04

0800782c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	; 0x28
 8007830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800783a:	463a      	mov	r2, r7
 800783c:	1d39      	adds	r1, r7, #4
 800783e:	f107 0308 	add.w	r3, r7, #8
 8007842:	4618      	mov	r0, r3
 8007844:	f000 ff84 	bl	8008750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	9202      	str	r2, [sp, #8]
 8007850:	9301      	str	r3, [sp, #4]
 8007852:	2300      	movs	r3, #0
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	2300      	movs	r3, #0
 8007858:	460a      	mov	r2, r1
 800785a:	491f      	ldr	r1, [pc, #124]	; (80078d8 <vTaskStartScheduler+0xac>)
 800785c:	481f      	ldr	r0, [pc, #124]	; (80078dc <vTaskStartScheduler+0xb0>)
 800785e:	f7ff fe16 	bl	800748e <xTaskCreateStatic>
 8007862:	4602      	mov	r2, r0
 8007864:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <vTaskStartScheduler+0xb4>)
 8007866:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007868:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <vTaskStartScheduler+0xb4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007870:	2301      	movs	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
 8007874:	e001      	b.n	800787a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d117      	bne.n	80078b0 <vTaskStartScheduler+0x84>
 8007880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007884:	b672      	cpsid	i
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	b662      	cpsie	i
 8007894:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007896:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <vTaskStartScheduler+0xb8>)
 8007898:	f04f 32ff 	mov.w	r2, #4294967295
 800789c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800789e:	4b12      	ldr	r3, [pc, #72]	; (80078e8 <vTaskStartScheduler+0xbc>)
 80078a0:	2201      	movs	r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078a4:	4b11      	ldr	r3, [pc, #68]	; (80078ec <vTaskStartScheduler+0xc0>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078aa:	f000 fbb1 	bl	8008010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078ae:	e00f      	b.n	80078d0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b6:	d10b      	bne.n	80078d0 <vTaskStartScheduler+0xa4>
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	b672      	cpsid	i
 80078be:	f383 8811 	msr	BASEPRI, r3
 80078c2:	f3bf 8f6f 	isb	sy
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	b662      	cpsie	i
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	e7fe      	b.n	80078ce <vTaskStartScheduler+0xa2>
}
 80078d0:	bf00      	nop
 80078d2:	3718      	adds	r7, #24
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	08015968 	.word	0x08015968
 80078dc:	08007c95 	.word	0x08007c95
 80078e0:	200004ac 	.word	0x200004ac
 80078e4:	200004a8 	.word	0x200004a8
 80078e8:	20000494 	.word	0x20000494
 80078ec:	2000048c 	.word	0x2000048c

080078f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <vTaskSuspendAll+0x18>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a03      	ldr	r2, [pc, #12]	; (8007908 <vTaskSuspendAll+0x18>)
 80078fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80078fe:	bf00      	nop
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	200004b0 	.word	0x200004b0

0800790c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007916:	2300      	movs	r3, #0
 8007918:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800791a:	4b42      	ldr	r3, [pc, #264]	; (8007a24 <xTaskResumeAll+0x118>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10b      	bne.n	800793a <xTaskResumeAll+0x2e>
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	b672      	cpsid	i
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	b662      	cpsie	i
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	e7fe      	b.n	8007938 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800793a:	f000 fbe5 	bl	8008108 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800793e:	4b39      	ldr	r3, [pc, #228]	; (8007a24 <xTaskResumeAll+0x118>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3b01      	subs	r3, #1
 8007944:	4a37      	ldr	r2, [pc, #220]	; (8007a24 <xTaskResumeAll+0x118>)
 8007946:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007948:	4b36      	ldr	r3, [pc, #216]	; (8007a24 <xTaskResumeAll+0x118>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d161      	bne.n	8007a14 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007950:	4b35      	ldr	r3, [pc, #212]	; (8007a28 <xTaskResumeAll+0x11c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d05d      	beq.n	8007a14 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007958:	e02e      	b.n	80079b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800795a:	4b34      	ldr	r3, [pc, #208]	; (8007a2c <xTaskResumeAll+0x120>)
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3318      	adds	r3, #24
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff fd67 	bl	800743a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3304      	adds	r3, #4
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff fd62 	bl	800743a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	2201      	movs	r2, #1
 800797c:	409a      	lsls	r2, r3
 800797e:	4b2c      	ldr	r3, [pc, #176]	; (8007a30 <xTaskResumeAll+0x124>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4313      	orrs	r3, r2
 8007984:	4a2a      	ldr	r2, [pc, #168]	; (8007a30 <xTaskResumeAll+0x124>)
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4a27      	ldr	r2, [pc, #156]	; (8007a34 <xTaskResumeAll+0x128>)
 8007996:	441a      	add	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	3304      	adds	r3, #4
 800799c:	4619      	mov	r1, r3
 800799e:	4610      	mov	r0, r2
 80079a0:	f7ff fcee 	bl	8007380 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4b23      	ldr	r3, [pc, #140]	; (8007a38 <xTaskResumeAll+0x12c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d302      	bcc.n	80079b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80079b2:	4b22      	ldr	r3, [pc, #136]	; (8007a3c <xTaskResumeAll+0x130>)
 80079b4:	2201      	movs	r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079b8:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <xTaskResumeAll+0x120>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1cc      	bne.n	800795a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d001      	beq.n	80079ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079c6:	f000 f9f3 	bl	8007db0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079ca:	4b1d      	ldr	r3, [pc, #116]	; (8007a40 <xTaskResumeAll+0x134>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d010      	beq.n	80079f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079d6:	f000 f847 	bl	8007a68 <xTaskIncrementTick>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80079e0:	4b16      	ldr	r3, [pc, #88]	; (8007a3c <xTaskResumeAll+0x130>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d1f1      	bne.n	80079d6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80079f2:	4b13      	ldr	r3, [pc, #76]	; (8007a40 <xTaskResumeAll+0x134>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079f8:	4b10      	ldr	r3, [pc, #64]	; (8007a3c <xTaskResumeAll+0x130>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d009      	beq.n	8007a14 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a04:	4b0f      	ldr	r3, [pc, #60]	; (8007a44 <xTaskResumeAll+0x138>)
 8007a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a0a:	601a      	str	r2, [r3, #0]
 8007a0c:	f3bf 8f4f 	dsb	sy
 8007a10:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a14:	f000 fbaa 	bl	800816c <vPortExitCritical>

	return xAlreadyYielded;
 8007a18:	68bb      	ldr	r3, [r7, #8]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	200004b0 	.word	0x200004b0
 8007a28:	20000488 	.word	0x20000488
 8007a2c:	20000448 	.word	0x20000448
 8007a30:	20000490 	.word	0x20000490
 8007a34:	2000038c 	.word	0x2000038c
 8007a38:	20000388 	.word	0x20000388
 8007a3c:	2000049c 	.word	0x2000049c
 8007a40:	20000498 	.word	0x20000498
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a4e:	4b05      	ldr	r3, [pc, #20]	; (8007a64 <xTaskGetTickCount+0x1c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a54:	687b      	ldr	r3, [r7, #4]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	2000048c 	.word	0x2000048c

08007a68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a72:	4b4f      	ldr	r3, [pc, #316]	; (8007bb0 <xTaskIncrementTick+0x148>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f040 8089 	bne.w	8007b8e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a7c:	4b4d      	ldr	r3, [pc, #308]	; (8007bb4 <xTaskIncrementTick+0x14c>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3301      	adds	r3, #1
 8007a82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a84:	4a4b      	ldr	r2, [pc, #300]	; (8007bb4 <xTaskIncrementTick+0x14c>)
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d121      	bne.n	8007ad4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a90:	4b49      	ldr	r3, [pc, #292]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00b      	beq.n	8007ab2 <xTaskIncrementTick+0x4a>
 8007a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9e:	b672      	cpsid	i
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	b662      	cpsie	i
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	e7fe      	b.n	8007ab0 <xTaskIncrementTick+0x48>
 8007ab2:	4b41      	ldr	r3, [pc, #260]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	4b40      	ldr	r3, [pc, #256]	; (8007bbc <xTaskIncrementTick+0x154>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a3e      	ldr	r2, [pc, #248]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	4a3e      	ldr	r2, [pc, #248]	; (8007bbc <xTaskIncrementTick+0x154>)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	4b3e      	ldr	r3, [pc, #248]	; (8007bc0 <xTaskIncrementTick+0x158>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3301      	adds	r3, #1
 8007acc:	4a3c      	ldr	r2, [pc, #240]	; (8007bc0 <xTaskIncrementTick+0x158>)
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	f000 f96e 	bl	8007db0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ad4:	4b3b      	ldr	r3, [pc, #236]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d348      	bcc.n	8007b70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ade:	4b36      	ldr	r3, [pc, #216]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d104      	bne.n	8007af2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ae8:	4b36      	ldr	r3, [pc, #216]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007aea:	f04f 32ff 	mov.w	r2, #4294967295
 8007aee:	601a      	str	r2, [r3, #0]
					break;
 8007af0:	e03e      	b.n	8007b70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007af2:	4b31      	ldr	r3, [pc, #196]	; (8007bb8 <xTaskIncrementTick+0x150>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d203      	bcs.n	8007b12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b0a:	4a2e      	ldr	r2, [pc, #184]	; (8007bc4 <xTaskIncrementTick+0x15c>)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b10:	e02e      	b.n	8007b70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3304      	adds	r3, #4
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fc8f 	bl	800743a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d004      	beq.n	8007b2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	3318      	adds	r3, #24
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fc86 	bl	800743a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	2201      	movs	r2, #1
 8007b34:	409a      	lsls	r2, r3
 8007b36:	4b24      	ldr	r3, [pc, #144]	; (8007bc8 <xTaskIncrementTick+0x160>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <xTaskIncrementTick+0x160>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	4613      	mov	r3, r2
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <xTaskIncrementTick+0x164>)
 8007b4e:	441a      	add	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4619      	mov	r1, r3
 8007b56:	4610      	mov	r0, r2
 8007b58:	f7ff fc12 	bl	8007380 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	4b1b      	ldr	r3, [pc, #108]	; (8007bd0 <xTaskIncrementTick+0x168>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d3b9      	bcc.n	8007ade <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b6e:	e7b6      	b.n	8007ade <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b70:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <xTaskIncrementTick+0x168>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	4915      	ldr	r1, [pc, #84]	; (8007bcc <xTaskIncrementTick+0x164>)
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	440b      	add	r3, r1
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d907      	bls.n	8007b98 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e004      	b.n	8007b98 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007b8e:	4b11      	ldr	r3, [pc, #68]	; (8007bd4 <xTaskIncrementTick+0x16c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3301      	adds	r3, #1
 8007b94:	4a0f      	ldr	r2, [pc, #60]	; (8007bd4 <xTaskIncrementTick+0x16c>)
 8007b96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007b98:	4b0f      	ldr	r3, [pc, #60]	; (8007bd8 <xTaskIncrementTick+0x170>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ba4:	697b      	ldr	r3, [r7, #20]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	200004b0 	.word	0x200004b0
 8007bb4:	2000048c 	.word	0x2000048c
 8007bb8:	20000440 	.word	0x20000440
 8007bbc:	20000444 	.word	0x20000444
 8007bc0:	200004a0 	.word	0x200004a0
 8007bc4:	200004a8 	.word	0x200004a8
 8007bc8:	20000490 	.word	0x20000490
 8007bcc:	2000038c 	.word	0x2000038c
 8007bd0:	20000388 	.word	0x20000388
 8007bd4:	20000498 	.word	0x20000498
 8007bd8:	2000049c 	.word	0x2000049c

08007bdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007be2:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <vTaskSwitchContext+0xa4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bea:	4b26      	ldr	r3, [pc, #152]	; (8007c84 <vTaskSwitchContext+0xa8>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bf0:	e040      	b.n	8007c74 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <vTaskSwitchContext+0xa8>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bf8:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <vTaskSwitchContext+0xac>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	fab3 f383 	clz	r3, r3
 8007c04:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c06:	7afb      	ldrb	r3, [r7, #11]
 8007c08:	f1c3 031f 	rsb	r3, r3, #31
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	491f      	ldr	r1, [pc, #124]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	440b      	add	r3, r1
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <vTaskSwitchContext+0x5e>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	b672      	cpsid	i
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	b662      	cpsie	i
 8007c36:	607b      	str	r3, [r7, #4]
 8007c38:	e7fe      	b.n	8007c38 <vTaskSwitchContext+0x5c>
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	4a11      	ldr	r2, [pc, #68]	; (8007c8c <vTaskSwitchContext+0xb0>)
 8007c46:	4413      	add	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	605a      	str	r2, [r3, #4]
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d104      	bne.n	8007c6a <vTaskSwitchContext+0x8e>
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	605a      	str	r2, [r3, #4]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <vTaskSwitchContext+0xb4>)
 8007c72:	6013      	str	r3, [r2, #0]
}
 8007c74:	bf00      	nop
 8007c76:	371c      	adds	r7, #28
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	200004b0 	.word	0x200004b0
 8007c84:	2000049c 	.word	0x2000049c
 8007c88:	20000490 	.word	0x20000490
 8007c8c:	2000038c 	.word	0x2000038c
 8007c90:	20000388 	.word	0x20000388

08007c94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c9c:	f000 f852 	bl	8007d44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ca0:	4b06      	ldr	r3, [pc, #24]	; (8007cbc <prvIdleTask+0x28>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d9f9      	bls.n	8007c9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <prvIdleTask+0x2c>)
 8007caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007cb8:	e7f0      	b.n	8007c9c <prvIdleTask+0x8>
 8007cba:	bf00      	nop
 8007cbc:	2000038c 	.word	0x2000038c
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007cca:	2300      	movs	r3, #0
 8007ccc:	607b      	str	r3, [r7, #4]
 8007cce:	e00c      	b.n	8007cea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4a12      	ldr	r2, [pc, #72]	; (8007d24 <prvInitialiseTaskLists+0x60>)
 8007cdc:	4413      	add	r3, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fb21 	bl	8007326 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	607b      	str	r3, [r7, #4]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b06      	cmp	r3, #6
 8007cee:	d9ef      	bls.n	8007cd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007cf0:	480d      	ldr	r0, [pc, #52]	; (8007d28 <prvInitialiseTaskLists+0x64>)
 8007cf2:	f7ff fb18 	bl	8007326 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007cf6:	480d      	ldr	r0, [pc, #52]	; (8007d2c <prvInitialiseTaskLists+0x68>)
 8007cf8:	f7ff fb15 	bl	8007326 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007cfc:	480c      	ldr	r0, [pc, #48]	; (8007d30 <prvInitialiseTaskLists+0x6c>)
 8007cfe:	f7ff fb12 	bl	8007326 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d02:	480c      	ldr	r0, [pc, #48]	; (8007d34 <prvInitialiseTaskLists+0x70>)
 8007d04:	f7ff fb0f 	bl	8007326 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d08:	480b      	ldr	r0, [pc, #44]	; (8007d38 <prvInitialiseTaskLists+0x74>)
 8007d0a:	f7ff fb0c 	bl	8007326 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <prvInitialiseTaskLists+0x78>)
 8007d10:	4a05      	ldr	r2, [pc, #20]	; (8007d28 <prvInitialiseTaskLists+0x64>)
 8007d12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d14:	4b0a      	ldr	r3, [pc, #40]	; (8007d40 <prvInitialiseTaskLists+0x7c>)
 8007d16:	4a05      	ldr	r2, [pc, #20]	; (8007d2c <prvInitialiseTaskLists+0x68>)
 8007d18:	601a      	str	r2, [r3, #0]
}
 8007d1a:	bf00      	nop
 8007d1c:	3708      	adds	r7, #8
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	2000038c 	.word	0x2000038c
 8007d28:	20000418 	.word	0x20000418
 8007d2c:	2000042c 	.word	0x2000042c
 8007d30:	20000448 	.word	0x20000448
 8007d34:	2000045c 	.word	0x2000045c
 8007d38:	20000474 	.word	0x20000474
 8007d3c:	20000440 	.word	0x20000440
 8007d40:	20000444 	.word	0x20000444

08007d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d4a:	e019      	b.n	8007d80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007d4c:	f000 f9dc 	bl	8008108 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d50:	4b0f      	ldr	r3, [pc, #60]	; (8007d90 <prvCheckTasksWaitingTermination+0x4c>)
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7ff fb6c 	bl	800743a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007d62:	4b0c      	ldr	r3, [pc, #48]	; (8007d94 <prvCheckTasksWaitingTermination+0x50>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	4a0a      	ldr	r2, [pc, #40]	; (8007d94 <prvCheckTasksWaitingTermination+0x50>)
 8007d6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <prvCheckTasksWaitingTermination+0x54>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	4a09      	ldr	r2, [pc, #36]	; (8007d98 <prvCheckTasksWaitingTermination+0x54>)
 8007d74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d76:	f000 f9f9 	bl	800816c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f80e 	bl	8007d9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d80:	4b05      	ldr	r3, [pc, #20]	; (8007d98 <prvCheckTasksWaitingTermination+0x54>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1e1      	bne.n	8007d4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	2000045c 	.word	0x2000045c
 8007d94:	20000488 	.word	0x20000488
 8007d98:	20000470 	.word	0x20000470

08007d9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <prvResetNextTaskUnblockTime+0x38>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d104      	bne.n	8007dca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <prvResetNextTaskUnblockTime+0x3c>)
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007dc8:	e008      	b.n	8007ddc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dca:	4b07      	ldr	r3, [pc, #28]	; (8007de8 <prvResetNextTaskUnblockTime+0x38>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4a04      	ldr	r2, [pc, #16]	; (8007dec <prvResetNextTaskUnblockTime+0x3c>)
 8007dda:	6013      	str	r3, [r2, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	20000440 	.word	0x20000440
 8007dec:	200004a8 	.word	0x200004a8

08007df0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007df6:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <xTaskGetSchedulerState+0x34>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d102      	bne.n	8007e04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	607b      	str	r3, [r7, #4]
 8007e02:	e008      	b.n	8007e16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e04:	4b08      	ldr	r3, [pc, #32]	; (8007e28 <xTaskGetSchedulerState+0x38>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	607b      	str	r3, [r7, #4]
 8007e10:	e001      	b.n	8007e16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e12:	2300      	movs	r3, #0
 8007e14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e16:	687b      	ldr	r3, [r7, #4]
	}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20000494 	.word	0x20000494
 8007e28:	200004b0 	.word	0x200004b0

08007e2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e36:	4b29      	ldr	r3, [pc, #164]	; (8007edc <prvAddCurrentTaskToDelayedList+0xb0>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e3c:	4b28      	ldr	r3, [pc, #160]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3304      	adds	r3, #4
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff faf9 	bl	800743a <uxListRemove>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10b      	bne.n	8007e66 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007e4e:	4b24      	ldr	r3, [pc, #144]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	2201      	movs	r2, #1
 8007e56:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5a:	43da      	mvns	r2, r3
 8007e5c:	4b21      	ldr	r3, [pc, #132]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4013      	ands	r3, r2
 8007e62:	4a20      	ldr	r2, [pc, #128]	; (8007ee4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007e64:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d10a      	bne.n	8007e84 <prvAddCurrentTaskToDelayedList+0x58>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d007      	beq.n	8007e84 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e74:	4b1a      	ldr	r3, [pc, #104]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	481a      	ldr	r0, [pc, #104]	; (8007ee8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007e7e:	f7ff fa7f 	bl	8007380 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007e82:	e026      	b.n	8007ed2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4413      	add	r3, r2
 8007e8a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007e8c:	4b14      	ldr	r3, [pc, #80]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d209      	bcs.n	8007eb0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e9c:	4b13      	ldr	r3, [pc, #76]	; (8007eec <prvAddCurrentTaskToDelayedList+0xc0>)
 8007e9e:	681a      	ldr	r2, [r3, #0]
 8007ea0:	4b0f      	ldr	r3, [pc, #60]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3304      	adds	r3, #4
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	f7ff fa8d 	bl	80073c8 <vListInsert>
}
 8007eae:	e010      	b.n	8007ed2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ef0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	4b0a      	ldr	r3, [pc, #40]	; (8007ee0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	f7ff fa83 	bl	80073c8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d202      	bcs.n	8007ed2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007ecc:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6013      	str	r3, [r2, #0]
}
 8007ed2:	bf00      	nop
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	2000048c 	.word	0x2000048c
 8007ee0:	20000388 	.word	0x20000388
 8007ee4:	20000490 	.word	0x20000490
 8007ee8:	20000474 	.word	0x20000474
 8007eec:	20000444 	.word	0x20000444
 8007ef0:	20000440 	.word	0x20000440
 8007ef4:	200004a8 	.word	0x200004a8

08007ef8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	3b04      	subs	r3, #4
 8007f08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3b04      	subs	r3, #4
 8007f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f023 0201 	bic.w	r2, r3, #1
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3b04      	subs	r3, #4
 8007f26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f28:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <pxPortInitialiseStack+0x64>)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3b14      	subs	r3, #20
 8007f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3b04      	subs	r3, #4
 8007f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f06f 0202 	mvn.w	r2, #2
 8007f46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	3b20      	subs	r3, #32
 8007f4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	08007f61 	.word	0x08007f61

08007f60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f6a:	4b13      	ldr	r3, [pc, #76]	; (8007fb8 <prvTaskExitError+0x58>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f72:	d00b      	beq.n	8007f8c <prvTaskExitError+0x2c>
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	b672      	cpsid	i
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	b662      	cpsie	i
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	e7fe      	b.n	8007f8a <prvTaskExitError+0x2a>
 8007f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f90:	b672      	cpsid	i
 8007f92:	f383 8811 	msr	BASEPRI, r3
 8007f96:	f3bf 8f6f 	isb	sy
 8007f9a:	f3bf 8f4f 	dsb	sy
 8007f9e:	b662      	cpsie	i
 8007fa0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fa2:	bf00      	nop
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0fc      	beq.n	8007fa4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	20000008 	.word	0x20000008
 8007fbc:	00000000 	.word	0x00000000

08007fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <pxCurrentTCBConst2>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f380 8809 	msr	PSP, r0
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	4770      	bx	lr
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst2>:
 8007fe0:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fe8:	4808      	ldr	r0, [pc, #32]	; (800800c <prvPortStartFirstTask+0x24>)
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f380 8808 	msr	MSP, r0
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8814 	msr	CONTROL, r0
 8007ffa:	b662      	cpsie	i
 8007ffc:	b661      	cpsie	f
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	df00      	svc	0
 8008008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800800a:	bf00      	nop
 800800c:	e000ed08 	.word	0xe000ed08

08008010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008016:	4b36      	ldr	r3, [pc, #216]	; (80080f0 <xPortStartScheduler+0xe0>)
 8008018:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	22ff      	movs	r2, #255	; 0xff
 8008026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008038:	b2da      	uxtb	r2, r3
 800803a:	4b2e      	ldr	r3, [pc, #184]	; (80080f4 <xPortStartScheduler+0xe4>)
 800803c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800803e:	4b2e      	ldr	r3, [pc, #184]	; (80080f8 <xPortStartScheduler+0xe8>)
 8008040:	2207      	movs	r2, #7
 8008042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008044:	e009      	b.n	800805a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008046:	4b2c      	ldr	r3, [pc, #176]	; (80080f8 <xPortStartScheduler+0xe8>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3b01      	subs	r3, #1
 800804c:	4a2a      	ldr	r2, [pc, #168]	; (80080f8 <xPortStartScheduler+0xe8>)
 800804e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008062:	2b80      	cmp	r3, #128	; 0x80
 8008064:	d0ef      	beq.n	8008046 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008066:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <xPortStartScheduler+0xe8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1c3 0307 	rsb	r3, r3, #7
 800806e:	2b04      	cmp	r3, #4
 8008070:	d00b      	beq.n	800808a <xPortStartScheduler+0x7a>
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	b672      	cpsid	i
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	b662      	cpsie	i
 8008086:	60bb      	str	r3, [r7, #8]
 8008088:	e7fe      	b.n	8008088 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800808a:	4b1b      	ldr	r3, [pc, #108]	; (80080f8 <xPortStartScheduler+0xe8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	021b      	lsls	r3, r3, #8
 8008090:	4a19      	ldr	r2, [pc, #100]	; (80080f8 <xPortStartScheduler+0xe8>)
 8008092:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008094:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <xPortStartScheduler+0xe8>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800809c:	4a16      	ldr	r2, [pc, #88]	; (80080f8 <xPortStartScheduler+0xe8>)
 800809e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080a8:	4b14      	ldr	r3, [pc, #80]	; (80080fc <xPortStartScheduler+0xec>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a13      	ldr	r2, [pc, #76]	; (80080fc <xPortStartScheduler+0xec>)
 80080ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080b4:	4b11      	ldr	r3, [pc, #68]	; (80080fc <xPortStartScheduler+0xec>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a10      	ldr	r2, [pc, #64]	; (80080fc <xPortStartScheduler+0xec>)
 80080ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080c0:	f000 f8d4 	bl	800826c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080c4:	4b0e      	ldr	r3, [pc, #56]	; (8008100 <xPortStartScheduler+0xf0>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080ca:	f000 f8f3 	bl	80082b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080ce:	4b0d      	ldr	r3, [pc, #52]	; (8008104 <xPortStartScheduler+0xf4>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a0c      	ldr	r2, [pc, #48]	; (8008104 <xPortStartScheduler+0xf4>)
 80080d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080da:	f7ff ff85 	bl	8007fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080de:	f7ff fd7d 	bl	8007bdc <vTaskSwitchContext>
	prvTaskExitError();
 80080e2:	f7ff ff3d 	bl	8007f60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3710      	adds	r7, #16
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	e000e400 	.word	0xe000e400
 80080f4:	200004b4 	.word	0x200004b4
 80080f8:	200004b8 	.word	0x200004b8
 80080fc:	e000ed20 	.word	0xe000ed20
 8008100:	20000008 	.word	0x20000008
 8008104:	e000ef34 	.word	0xe000ef34

08008108 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	b672      	cpsid	i
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	b662      	cpsie	i
 8008122:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008124:	4b0f      	ldr	r3, [pc, #60]	; (8008164 <vPortEnterCritical+0x5c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	3301      	adds	r3, #1
 800812a:	4a0e      	ldr	r2, [pc, #56]	; (8008164 <vPortEnterCritical+0x5c>)
 800812c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800812e:	4b0d      	ldr	r3, [pc, #52]	; (8008164 <vPortEnterCritical+0x5c>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b01      	cmp	r3, #1
 8008134:	d110      	bne.n	8008158 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008136:	4b0c      	ldr	r3, [pc, #48]	; (8008168 <vPortEnterCritical+0x60>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <vPortEnterCritical+0x50>
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	b672      	cpsid	i
 8008146:	f383 8811 	msr	BASEPRI, r3
 800814a:	f3bf 8f6f 	isb	sy
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	b662      	cpsie	i
 8008154:	603b      	str	r3, [r7, #0]
 8008156:	e7fe      	b.n	8008156 <vPortEnterCritical+0x4e>
	}
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	20000008 	.word	0x20000008
 8008168:	e000ed04 	.word	0xe000ed04

0800816c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <vPortExitCritical+0x50>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10b      	bne.n	8008192 <vPortExitCritical+0x26>
 800817a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817e:	b672      	cpsid	i
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	b662      	cpsie	i
 800818e:	607b      	str	r3, [r7, #4]
 8008190:	e7fe      	b.n	8008190 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008192:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <vPortExitCritical+0x50>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3b01      	subs	r3, #1
 8008198:	4a08      	ldr	r2, [pc, #32]	; (80081bc <vPortExitCritical+0x50>)
 800819a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800819c:	4b07      	ldr	r3, [pc, #28]	; (80081bc <vPortExitCritical+0x50>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d104      	bne.n	80081ae <vPortExitCritical+0x42>
 80081a4:	2300      	movs	r3, #0
 80081a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	20000008 	.word	0x20000008

080081c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081c0:	f3ef 8009 	mrs	r0, PSP
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	4b15      	ldr	r3, [pc, #84]	; (8008220 <pxCurrentTCBConst>)
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	f01e 0f10 	tst.w	lr, #16
 80081d0:	bf08      	it	eq
 80081d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081da:	6010      	str	r0, [r2, #0]
 80081dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081e4:	b672      	cpsid	i
 80081e6:	f380 8811 	msr	BASEPRI, r0
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	b662      	cpsie	i
 80081f4:	f7ff fcf2 	bl	8007bdc <vTaskSwitchContext>
 80081f8:	f04f 0000 	mov.w	r0, #0
 80081fc:	f380 8811 	msr	BASEPRI, r0
 8008200:	bc09      	pop	{r0, r3}
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	6808      	ldr	r0, [r1, #0]
 8008206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820a:	f01e 0f10 	tst.w	lr, #16
 800820e:	bf08      	it	eq
 8008210:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008214:	f380 8809 	msr	PSP, r0
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop

08008220 <pxCurrentTCBConst>:
 8008220:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
	__asm volatile
 800822e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008232:	b672      	cpsid	i
 8008234:	f383 8811 	msr	BASEPRI, r3
 8008238:	f3bf 8f6f 	isb	sy
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	b662      	cpsie	i
 8008242:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008244:	f7ff fc10 	bl	8007a68 <xTaskIncrementTick>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d003      	beq.n	8008256 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800824e:	4b06      	ldr	r3, [pc, #24]	; (8008268 <xPortSysTickHandler+0x40>)
 8008250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008254:	601a      	str	r2, [r3, #0]
 8008256:	2300      	movs	r3, #0
 8008258:	603b      	str	r3, [r7, #0]
	__asm volatile
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	e000ed04 	.word	0xe000ed04

0800826c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008270:	4b0b      	ldr	r3, [pc, #44]	; (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008276:	4b0b      	ldr	r3, [pc, #44]	; (80082a4 <vPortSetupTimerInterrupt+0x38>)
 8008278:	2200      	movs	r2, #0
 800827a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800827c:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <vPortSetupTimerInterrupt+0x3c>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0a      	ldr	r2, [pc, #40]	; (80082ac <vPortSetupTimerInterrupt+0x40>)
 8008282:	fba2 2303 	umull	r2, r3, r2, r3
 8008286:	099b      	lsrs	r3, r3, #6
 8008288:	4a09      	ldr	r2, [pc, #36]	; (80082b0 <vPortSetupTimerInterrupt+0x44>)
 800828a:	3b01      	subs	r3, #1
 800828c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800828e:	4b04      	ldr	r3, [pc, #16]	; (80082a0 <vPortSetupTimerInterrupt+0x34>)
 8008290:	2207      	movs	r2, #7
 8008292:	601a      	str	r2, [r3, #0]
}
 8008294:	bf00      	nop
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	e000e010 	.word	0xe000e010
 80082a4:	e000e018 	.word	0xe000e018
 80082a8:	2000000c 	.word	0x2000000c
 80082ac:	10624dd3 	.word	0x10624dd3
 80082b0:	e000e014 	.word	0xe000e014

080082b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082c4 <vPortEnableVFP+0x10>
 80082b8:	6801      	ldr	r1, [r0, #0]
 80082ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082be:	6001      	str	r1, [r0, #0]
 80082c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082c2:	bf00      	nop
 80082c4:	e000ed88 	.word	0xe000ed88

080082c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80082ce:	463b      	mov	r3, r7
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	605a      	str	r2, [r3, #4]
 80082d6:	609a      	str	r2, [r3, #8]
 80082d8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80082da:	4b44      	ldr	r3, [pc, #272]	; (80083ec <MX_ADC1_Init+0x124>)
 80082dc:	4a44      	ldr	r2, [pc, #272]	; (80083f0 <MX_ADC1_Init+0x128>)
 80082de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80082e0:	4b42      	ldr	r3, [pc, #264]	; (80083ec <MX_ADC1_Init+0x124>)
 80082e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80082e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80082e8:	4b40      	ldr	r3, [pc, #256]	; (80083ec <MX_ADC1_Init+0x124>)
 80082ea:	2200      	movs	r2, #0
 80082ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80082ee:	4b3f      	ldr	r3, [pc, #252]	; (80083ec <MX_ADC1_Init+0x124>)
 80082f0:	2201      	movs	r2, #1
 80082f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80082f4:	4b3d      	ldr	r3, [pc, #244]	; (80083ec <MX_ADC1_Init+0x124>)
 80082f6:	2201      	movs	r2, #1
 80082f8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80082fa:	4b3c      	ldr	r3, [pc, #240]	; (80083ec <MX_ADC1_Init+0x124>)
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008302:	4b3a      	ldr	r3, [pc, #232]	; (80083ec <MX_ADC1_Init+0x124>)
 8008304:	2200      	movs	r2, #0
 8008306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008308:	4b38      	ldr	r3, [pc, #224]	; (80083ec <MX_ADC1_Init+0x124>)
 800830a:	4a3a      	ldr	r2, [pc, #232]	; (80083f4 <MX_ADC1_Init+0x12c>)
 800830c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800830e:	4b37      	ldr	r3, [pc, #220]	; (80083ec <MX_ADC1_Init+0x124>)
 8008310:	2200      	movs	r2, #0
 8008312:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8008314:	4b35      	ldr	r3, [pc, #212]	; (80083ec <MX_ADC1_Init+0x124>)
 8008316:	2206      	movs	r2, #6
 8008318:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800831a:	4b34      	ldr	r3, [pc, #208]	; (80083ec <MX_ADC1_Init+0x124>)
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008322:	4b32      	ldr	r3, [pc, #200]	; (80083ec <MX_ADC1_Init+0x124>)
 8008324:	2200      	movs	r2, #0
 8008326:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008328:	4830      	ldr	r0, [pc, #192]	; (80083ec <MX_ADC1_Init+0x124>)
 800832a:	f7f8 fe93 	bl	8001054 <HAL_ADC_Init>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8008334:	f000 fdc8 	bl	8008ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008338:	2303      	movs	r3, #3
 800833a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800833c:	2301      	movs	r3, #1
 800833e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008340:	2307      	movs	r3, #7
 8008342:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008344:	463b      	mov	r3, r7
 8008346:	4619      	mov	r1, r3
 8008348:	4828      	ldr	r0, [pc, #160]	; (80083ec <MX_ADC1_Init+0x124>)
 800834a:	f7f8 fec7 	bl	80010dc <HAL_ADC_ConfigChannel>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8008354:	f000 fdb8 	bl	8008ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008358:	2304      	movs	r3, #4
 800835a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800835c:	2302      	movs	r3, #2
 800835e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008360:	463b      	mov	r3, r7
 8008362:	4619      	mov	r1, r3
 8008364:	4821      	ldr	r0, [pc, #132]	; (80083ec <MX_ADC1_Init+0x124>)
 8008366:	f7f8 feb9 	bl	80010dc <HAL_ADC_ConfigChannel>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008370:	f000 fdaa 	bl	8008ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008374:	2309      	movs	r3, #9
 8008376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008378:	2303      	movs	r3, #3
 800837a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800837c:	463b      	mov	r3, r7
 800837e:	4619      	mov	r1, r3
 8008380:	481a      	ldr	r0, [pc, #104]	; (80083ec <MX_ADC1_Init+0x124>)
 8008382:	f7f8 feab 	bl	80010dc <HAL_ADC_ConfigChannel>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800838c:	f000 fd9c 	bl	8008ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008390:	230a      	movs	r3, #10
 8008392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008394:	2304      	movs	r3, #4
 8008396:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008398:	463b      	mov	r3, r7
 800839a:	4619      	mov	r1, r3
 800839c:	4813      	ldr	r0, [pc, #76]	; (80083ec <MX_ADC1_Init+0x124>)
 800839e:	f7f8 fe9d 	bl	80010dc <HAL_ADC_ConfigChannel>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d001      	beq.n	80083ac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80083a8:	f000 fd8e 	bl	8008ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80083ac:	230c      	movs	r3, #12
 80083ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80083b0:	2305      	movs	r3, #5
 80083b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083b4:	463b      	mov	r3, r7
 80083b6:	4619      	mov	r1, r3
 80083b8:	480c      	ldr	r0, [pc, #48]	; (80083ec <MX_ADC1_Init+0x124>)
 80083ba:	f7f8 fe8f 	bl	80010dc <HAL_ADC_ConfigChannel>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80083c4:	f000 fd80 	bl	8008ec8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80083c8:	230d      	movs	r3, #13
 80083ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80083cc:	2306      	movs	r3, #6
 80083ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083d0:	463b      	mov	r3, r7
 80083d2:	4619      	mov	r1, r3
 80083d4:	4805      	ldr	r0, [pc, #20]	; (80083ec <MX_ADC1_Init+0x124>)
 80083d6:	f7f8 fe81 	bl	80010dc <HAL_ADC_ConfigChannel>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d001      	beq.n	80083e4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80083e0:	f000 fd72 	bl	8008ec8 <Error_Handler>
  }

}
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	20002498 	.word	0x20002498
 80083f0:	40012000 	.word	0x40012000
 80083f4:	0f000001 	.word	0x0f000001

080083f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b08c      	sub	sp, #48	; 0x30
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008400:	f107 031c 	add.w	r3, r7, #28
 8008404:	2200      	movs	r2, #0
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	605a      	str	r2, [r3, #4]
 800840a:	609a      	str	r2, [r3, #8]
 800840c:	60da      	str	r2, [r3, #12]
 800840e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a45      	ldr	r2, [pc, #276]	; (800852c <HAL_ADC_MspInit+0x134>)
 8008416:	4293      	cmp	r3, r2
 8008418:	f040 8084 	bne.w	8008524 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800841c:	4b44      	ldr	r3, [pc, #272]	; (8008530 <HAL_ADC_MspInit+0x138>)
 800841e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008420:	4a43      	ldr	r2, [pc, #268]	; (8008530 <HAL_ADC_MspInit+0x138>)
 8008422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008426:	6453      	str	r3, [r2, #68]	; 0x44
 8008428:	4b41      	ldr	r3, [pc, #260]	; (8008530 <HAL_ADC_MspInit+0x138>)
 800842a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008434:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <HAL_ADC_MspInit+0x138>)
 8008436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008438:	4a3d      	ldr	r2, [pc, #244]	; (8008530 <HAL_ADC_MspInit+0x138>)
 800843a:	f043 0304 	orr.w	r3, r3, #4
 800843e:	6313      	str	r3, [r2, #48]	; 0x30
 8008440:	4b3b      	ldr	r3, [pc, #236]	; (8008530 <HAL_ADC_MspInit+0x138>)
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	617b      	str	r3, [r7, #20]
 800844a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800844c:	4b38      	ldr	r3, [pc, #224]	; (8008530 <HAL_ADC_MspInit+0x138>)
 800844e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008450:	4a37      	ldr	r2, [pc, #220]	; (8008530 <HAL_ADC_MspInit+0x138>)
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	6313      	str	r3, [r2, #48]	; 0x30
 8008458:	4b35      	ldr	r3, [pc, #212]	; (8008530 <HAL_ADC_MspInit+0x138>)
 800845a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	613b      	str	r3, [r7, #16]
 8008462:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008464:	4b32      	ldr	r3, [pc, #200]	; (8008530 <HAL_ADC_MspInit+0x138>)
 8008466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008468:	4a31      	ldr	r2, [pc, #196]	; (8008530 <HAL_ADC_MspInit+0x138>)
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	6313      	str	r3, [r2, #48]	; 0x30
 8008470:	4b2f      	ldr	r3, [pc, #188]	; (8008530 <HAL_ADC_MspInit+0x138>)
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	f003 0302 	and.w	r3, r3, #2
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = A3_Pin|A4_Pin|A5_Pin;
 800847c:	230d      	movs	r3, #13
 800847e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008480:	2303      	movs	r3, #3
 8008482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008484:	2300      	movs	r3, #0
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008488:	f107 031c 	add.w	r3, r7, #28
 800848c:	4619      	mov	r1, r3
 800848e:	4829      	ldr	r0, [pc, #164]	; (8008534 <HAL_ADC_MspInit+0x13c>)
 8008490:	f7fa f9c4 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A0_Pin|A1_Pin;
 8008494:	2318      	movs	r3, #24
 8008496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008498:	2303      	movs	r3, #3
 800849a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849c:	2300      	movs	r3, #0
 800849e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084a0:	f107 031c 	add.w	r3, r7, #28
 80084a4:	4619      	mov	r1, r3
 80084a6:	4824      	ldr	r0, [pc, #144]	; (8008538 <HAL_ADC_MspInit+0x140>)
 80084a8:	f7fa f9b8 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2_Pin;
 80084ac:	2302      	movs	r3, #2
 80084ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084b0:	2303      	movs	r3, #3
 80084b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084b4:	2300      	movs	r3, #0
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A2_GPIO_Port, &GPIO_InitStruct);
 80084b8:	f107 031c 	add.w	r3, r7, #28
 80084bc:	4619      	mov	r1, r3
 80084be:	481f      	ldr	r0, [pc, #124]	; (800853c <HAL_ADC_MspInit+0x144>)
 80084c0:	f7fa f9ac 	bl	800281c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80084c4:	4b1e      	ldr	r3, [pc, #120]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084c6:	4a1f      	ldr	r2, [pc, #124]	; (8008544 <HAL_ADC_MspInit+0x14c>)
 80084c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80084ca:	4b1d      	ldr	r3, [pc, #116]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084d0:	4b1b      	ldr	r3, [pc, #108]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80084d6:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084d8:	2200      	movs	r2, #0
 80084da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80084dc:	4b18      	ldr	r3, [pc, #96]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80084e4:	4b16      	ldr	r3, [pc, #88]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80084ec:	4b14      	ldr	r3, [pc, #80]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80084f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80084f4:	4b12      	ldr	r3, [pc, #72]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80084fc:	4b10      	ldr	r3, [pc, #64]	; (8008540 <HAL_ADC_MspInit+0x148>)
 80084fe:	2200      	movs	r2, #0
 8008500:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008502:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <HAL_ADC_MspInit+0x148>)
 8008504:	2200      	movs	r2, #0
 8008506:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008508:	480d      	ldr	r0, [pc, #52]	; (8008540 <HAL_ADC_MspInit+0x148>)
 800850a:	f7f9 fd7f 	bl	800200c <HAL_DMA_Init>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8008514:	f000 fcd8 	bl	8008ec8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a09      	ldr	r2, [pc, #36]	; (8008540 <HAL_ADC_MspInit+0x148>)
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
 800851e:	4a08      	ldr	r2, [pc, #32]	; (8008540 <HAL_ADC_MspInit+0x148>)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008524:	bf00      	nop
 8008526:	3730      	adds	r7, #48	; 0x30
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40012000 	.word	0x40012000
 8008530:	40023800 	.word	0x40023800
 8008534:	40020800 	.word	0x40020800
 8008538:	40020000 	.word	0x40020000
 800853c:	40020400 	.word	0x40020400
 8008540:	200024e0 	.word	0x200024e0
 8008544:	40026470 	.word	0x40026470

08008548 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800854c:	4b17      	ldr	r3, [pc, #92]	; (80085ac <MX_CAN1_Init+0x64>)
 800854e:	4a18      	ldr	r2, [pc, #96]	; (80085b0 <MX_CAN1_Init+0x68>)
 8008550:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8008552:	4b16      	ldr	r3, [pc, #88]	; (80085ac <MX_CAN1_Init+0x64>)
 8008554:	2206      	movs	r2, #6
 8008556:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008558:	4b14      	ldr	r3, [pc, #80]	; (80085ac <MX_CAN1_Init+0x64>)
 800855a:	2200      	movs	r2, #0
 800855c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800855e:	4b13      	ldr	r3, [pc, #76]	; (80085ac <MX_CAN1_Init+0x64>)
 8008560:	2200      	movs	r2, #0
 8008562:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8008564:	4b11      	ldr	r3, [pc, #68]	; (80085ac <MX_CAN1_Init+0x64>)
 8008566:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800856a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <MX_CAN1_Init+0x64>)
 800856e:	2200      	movs	r2, #0
 8008570:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008572:	4b0e      	ldr	r3, [pc, #56]	; (80085ac <MX_CAN1_Init+0x64>)
 8008574:	2200      	movs	r2, #0
 8008576:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8008578:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <MX_CAN1_Init+0x64>)
 800857a:	2200      	movs	r2, #0
 800857c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800857e:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <MX_CAN1_Init+0x64>)
 8008580:	2200      	movs	r2, #0
 8008582:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008584:	4b09      	ldr	r3, [pc, #36]	; (80085ac <MX_CAN1_Init+0x64>)
 8008586:	2201      	movs	r2, #1
 8008588:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <MX_CAN1_Init+0x64>)
 800858c:	2200      	movs	r2, #0
 800858e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <MX_CAN1_Init+0x64>)
 8008592:	2200      	movs	r2, #0
 8008594:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008596:	4805      	ldr	r0, [pc, #20]	; (80085ac <MX_CAN1_Init+0x64>)
 8008598:	f7f8 ffe4 	bl	8001564 <HAL_CAN_Init>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80085a2:	f000 fc91 	bl	8008ec8 <Error_Handler>
  }

}
 80085a6:	bf00      	nop
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	20002540 	.word	0x20002540
 80085b0:	40006400 	.word	0x40006400

080085b4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08a      	sub	sp, #40	; 0x28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085bc:	f107 0314 	add.w	r3, r7, #20
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	60da      	str	r2, [r3, #12]
 80085ca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a1f      	ldr	r2, [pc, #124]	; (8008650 <HAL_CAN_MspInit+0x9c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d137      	bne.n	8008646 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80085d6:	4b1f      	ldr	r3, [pc, #124]	; (8008654 <HAL_CAN_MspInit+0xa0>)
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <HAL_CAN_MspInit+0xa0>)
 80085dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80085e0:	6413      	str	r3, [r2, #64]	; 0x40
 80085e2:	4b1c      	ldr	r3, [pc, #112]	; (8008654 <HAL_CAN_MspInit+0xa0>)
 80085e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80085ee:	4b19      	ldr	r3, [pc, #100]	; (8008654 <HAL_CAN_MspInit+0xa0>)
 80085f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f2:	4a18      	ldr	r2, [pc, #96]	; (8008654 <HAL_CAN_MspInit+0xa0>)
 80085f4:	f043 0308 	orr.w	r3, r3, #8
 80085f8:	6313      	str	r3, [r2, #48]	; 0x30
 80085fa:	4b16      	ldr	r3, [pc, #88]	; (8008654 <HAL_CAN_MspInit+0xa0>)
 80085fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fe:	f003 0308 	and.w	r3, r3, #8
 8008602:	60fb      	str	r3, [r7, #12]
 8008604:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008606:	2303      	movs	r3, #3
 8008608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800860a:	2302      	movs	r3, #2
 800860c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800860e:	2300      	movs	r3, #0
 8008610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008612:	2303      	movs	r3, #3
 8008614:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008616:	2309      	movs	r3, #9
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800861a:	f107 0314 	add.w	r3, r7, #20
 800861e:	4619      	mov	r1, r3
 8008620:	480d      	ldr	r0, [pc, #52]	; (8008658 <HAL_CAN_MspInit+0xa4>)
 8008622:	f7fa f8fb 	bl	800281c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008626:	2200      	movs	r2, #0
 8008628:	2105      	movs	r1, #5
 800862a:	2014      	movs	r0, #20
 800862c:	f7f9 fcc4 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008630:	2014      	movs	r0, #20
 8008632:	f7f9 fcdd 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8008636:	2200      	movs	r2, #0
 8008638:	2105      	movs	r1, #5
 800863a:	2015      	movs	r0, #21
 800863c:	f7f9 fcbc 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8008640:	2015      	movs	r0, #21
 8008642:	f7f9 fcd5 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8008646:	bf00      	nop
 8008648:	3728      	adds	r7, #40	; 0x28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	40006400 	.word	0x40006400
 8008654:	40023800 	.word	0x40023800
 8008658:	40020c00 	.word	0x40020c00

0800865c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008662:	4b3a      	ldr	r3, [pc, #232]	; (800874c <MX_DMA_Init+0xf0>)
 8008664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008666:	4a39      	ldr	r2, [pc, #228]	; (800874c <MX_DMA_Init+0xf0>)
 8008668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800866c:	6313      	str	r3, [r2, #48]	; 0x30
 800866e:	4b37      	ldr	r3, [pc, #220]	; (800874c <MX_DMA_Init+0xf0>)
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	607b      	str	r3, [r7, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800867a:	4b34      	ldr	r3, [pc, #208]	; (800874c <MX_DMA_Init+0xf0>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	4a33      	ldr	r2, [pc, #204]	; (800874c <MX_DMA_Init+0xf0>)
 8008680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008684:	6313      	str	r3, [r2, #48]	; 0x30
 8008686:	4b31      	ldr	r3, [pc, #196]	; (800874c <MX_DMA_Init+0xf0>)
 8008688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800868e:	603b      	str	r3, [r7, #0]
 8008690:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8008692:	2200      	movs	r2, #0
 8008694:	2105      	movs	r1, #5
 8008696:	200b      	movs	r0, #11
 8008698:	f7f9 fc8e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800869c:	200b      	movs	r0, #11
 800869e:	f7f9 fca7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2105      	movs	r1, #5
 80086a6:	200c      	movs	r0, #12
 80086a8:	f7f9 fc86 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80086ac:	200c      	movs	r0, #12
 80086ae:	f7f9 fc9f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80086b2:	2200      	movs	r2, #0
 80086b4:	2105      	movs	r1, #5
 80086b6:	200f      	movs	r0, #15
 80086b8:	f7f9 fc7e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80086bc:	200f      	movs	r0, #15
 80086be:	f7f9 fc97 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80086c2:	2200      	movs	r2, #0
 80086c4:	2105      	movs	r1, #5
 80086c6:	2010      	movs	r0, #16
 80086c8:	f7f9 fc76 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80086cc:	2010      	movs	r0, #16
 80086ce:	f7f9 fc8f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80086d2:	2200      	movs	r2, #0
 80086d4:	2105      	movs	r1, #5
 80086d6:	2038      	movs	r0, #56	; 0x38
 80086d8:	f7f9 fc6e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80086dc:	2038      	movs	r0, #56	; 0x38
 80086de:	f7f9 fc87 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80086e2:	2200      	movs	r2, #0
 80086e4:	2105      	movs	r1, #5
 80086e6:	2039      	movs	r0, #57	; 0x39
 80086e8:	f7f9 fc66 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80086ec:	2039      	movs	r0, #57	; 0x39
 80086ee:	f7f9 fc7f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80086f2:	2200      	movs	r2, #0
 80086f4:	2105      	movs	r1, #5
 80086f6:	203a      	movs	r0, #58	; 0x3a
 80086f8:	f7f9 fc5e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80086fc:	203a      	movs	r0, #58	; 0x3a
 80086fe:	f7f9 fc77 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8008702:	2200      	movs	r2, #0
 8008704:	2105      	movs	r1, #5
 8008706:	203b      	movs	r0, #59	; 0x3b
 8008708:	f7f9 fc56 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800870c:	203b      	movs	r0, #59	; 0x3b
 800870e:	f7f9 fc6f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8008712:	2200      	movs	r2, #0
 8008714:	2105      	movs	r1, #5
 8008716:	203c      	movs	r0, #60	; 0x3c
 8008718:	f7f9 fc4e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800871c:	203c      	movs	r0, #60	; 0x3c
 800871e:	f7f9 fc67 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8008722:	2200      	movs	r2, #0
 8008724:	2105      	movs	r1, #5
 8008726:	2044      	movs	r0, #68	; 0x44
 8008728:	f7f9 fc46 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800872c:	2044      	movs	r0, #68	; 0x44
 800872e:	f7f9 fc5f 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8008732:	2200      	movs	r2, #0
 8008734:	2105      	movs	r1, #5
 8008736:	2046      	movs	r0, #70	; 0x46
 8008738:	f7f9 fc3e 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800873c:	2046      	movs	r0, #70	; 0x46
 800873e:	f7f9 fc57 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	40023800 	.word	0x40023800

08008750 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	4a07      	ldr	r2, [pc, #28]	; (800877c <vApplicationGetIdleTaskMemory+0x2c>)
 8008760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	4a06      	ldr	r2, [pc, #24]	; (8008780 <vApplicationGetIdleTaskMemory+0x30>)
 8008766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2280      	movs	r2, #128	; 0x80
 800876c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800876e:	bf00      	nop
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	200004bc 	.word	0x200004bc
 8008780:	20000510 	.word	0x20000510

08008784 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008784:	b5b0      	push	{r4, r5, r7, lr}
 8008786:	b08e      	sub	sp, #56	; 0x38
 8008788:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of sendTask */
  osThreadStaticDef(sendTask, sendTaskFunc, osPriorityBelowNormal, 0, 4096, sendTaskBuffer, &sendTaskControlBlock);
 800878a:	4b14      	ldr	r3, [pc, #80]	; (80087dc <MX_FREERTOS_Init+0x58>)
 800878c:	f107 041c 	add.w	r4, r7, #28
 8008790:	461d      	mov	r5, r3
 8008792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008796:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800879a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sendTaskHandle = osThreadCreate(osThread(sendTask), NULL);
 800879e:	f107 031c 	add.w	r3, r7, #28
 80087a2:	2100      	movs	r1, #0
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe fd8e 	bl	80072c6 <osThreadCreate>
 80087aa:	4602      	mov	r2, r0
 80087ac:	4b0c      	ldr	r3, [pc, #48]	; (80087e0 <MX_FREERTOS_Init+0x5c>)
 80087ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of controlTask */
  osThreadStaticDef(controlTask, controlTaskFunc, osPriorityAboveNormal, 0, 4096, controlTaskBuffer, &controlTaskControlBlock);
 80087b0:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <MX_FREERTOS_Init+0x60>)
 80087b2:	463c      	mov	r4, r7
 80087b4:	461d      	mov	r5, r3
 80087b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80087be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  controlTaskHandle = osThreadCreate(osThread(controlTask), NULL);
 80087c2:	463b      	mov	r3, r7
 80087c4:	2100      	movs	r1, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fe fd7d 	bl	80072c6 <osThreadCreate>
 80087cc:	4602      	mov	r2, r0
 80087ce:	4b06      	ldr	r3, [pc, #24]	; (80087e8 <MX_FREERTOS_Init+0x64>)
 80087d0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80087d2:	bf00      	nop
 80087d4:	3738      	adds	r7, #56	; 0x38
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bdb0      	pop	{r4, r5, r7, pc}
 80087da:	bf00      	nop
 80087dc:	0801597c 	.word	0x0801597c
 80087e0:	20006568 	.word	0x20006568
 80087e4:	080159a4 	.word	0x080159a4
 80087e8:	200065c0 	.word	0x200065c0

080087ec <sendTaskFunc>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_sendTaskFunc */
void sendTaskFunc(void const * argument)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80087f4:	f7ff f928 	bl	8007a48 <xTaskGetTickCount>
 80087f8:	4603      	mov	r3, r0
 80087fa:	60bb      	str	r3, [r7, #8]
	TickType_t sendTaskPeriod=pdMS_TO_TICKS(1);
 80087fc:	2301      	movs	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
	static int32_t sendTick=0;
	extern int32_t globalPeriodSendLoop;
  /* Infinite loop */
  for(;;)
  {
	  if(++sendTick>=globalPeriodSendLoop)
 8008800:	4b0b      	ldr	r3, [pc, #44]	; (8008830 <sendTaskFunc+0x44>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3301      	adds	r3, #1
 8008806:	4a0a      	ldr	r2, [pc, #40]	; (8008830 <sendTaskFunc+0x44>)
 8008808:	6013      	str	r3, [r2, #0]
 800880a:	4b09      	ldr	r3, [pc, #36]	; (8008830 <sendTaskFunc+0x44>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <sendTaskFunc+0x48>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	429a      	cmp	r2, r3
 8008814:	db04      	blt.n	8008820 <sendTaskFunc+0x34>
	  {
		  sendTick=0;
 8008816:	4b06      	ldr	r3, [pc, #24]	; (8008830 <sendTaskFunc+0x44>)
 8008818:	2200      	movs	r2, #0
 800881a:	601a      	str	r2, [r3, #0]
		  serialDisplay();
 800881c:	f008 fb9a 	bl	8010f54 <serialDisplay>
	  }
	  vTaskDelayUntil(&xLastWakeTime,sendTaskPeriod);
 8008820:	f107 0308 	add.w	r3, r7, #8
 8008824:	68f9      	ldr	r1, [r7, #12]
 8008826:	4618      	mov	r0, r3
 8008828:	f7fe ff80 	bl	800772c <vTaskDelayUntil>
	  if(++sendTick>=globalPeriodSendLoop)
 800882c:	e7e8      	b.n	8008800 <sendTaskFunc+0x14>
 800882e:	bf00      	nop
 8008830:	20000710 	.word	0x20000710
 8008834:	2000003c 	.word	0x2000003c

08008838 <controlTaskFunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlTaskFunc */
void controlTaskFunc(void const * argument)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlTaskFunc */
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8008840:	f7ff f902 	bl	8007a48 <xTaskGetTickCount>
 8008844:	4603      	mov	r3, r0
 8008846:	60bb      	str	r3, [r7, #8]
	TickType_t controlTaskPeriod=pdMS_TO_TICKS(1);
 8008848:	2301      	movs	r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
	 for(;;)
	  {

		//	AnaBuiltInStart();
	#if (ADBOARD_NUM>0)
			ADBoard_updateVoltage();
 800884c:	f002 fb42 	bl	800aed4 <ADBoard_updateVoltage>
	#endif
			//terminal command process
			Usart_ReceivePolling();
 8008850:	f005 fcbe 	bl	800e1d0 <Usart_ReceivePolling>

			//User loop function
	 if(++loopTick>=globalPeriodControlLoop)
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <controlTaskFunc+0x50>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	4a0b      	ldr	r2, [pc, #44]	; (8008888 <controlTaskFunc+0x50>)
 800885c:	6013      	str	r3, [r2, #0]
 800885e:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <controlTaskFunc+0x50>)
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	4b0a      	ldr	r3, [pc, #40]	; (800888c <controlTaskFunc+0x54>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	db04      	blt.n	8008874 <controlTaskFunc+0x3c>
	 {
		loopTick=0;
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <controlTaskFunc+0x50>)
 800886c:	2200      	movs	r2, #0
 800886e:	601a      	str	r2, [r3, #0]
		loop();
 8008870:	f008 fb54 	bl	8010f1c <loop>
	 }

	#if (PWMBOARDSPI_NUM>0)
			PWMBoardSPI_flushDutyAll();
 8008874:	f003 fd40 	bl	800c2f8 <PWMBoardSPI_flushDutyAll>
	#endif
			vTaskDelayUntil(&xLastWakeTime,controlTaskPeriod);
 8008878:	f107 0308 	add.w	r3, r7, #8
 800887c:	68f9      	ldr	r1, [r7, #12]
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe ff54 	bl	800772c <vTaskDelayUntil>
			ADBoard_updateVoltage();
 8008884:	e7e2      	b.n	800884c <controlTaskFunc+0x14>
 8008886:	bf00      	nop
 8008888:	20000714 	.word	0x20000714
 800888c:	20000038 	.word	0x20000038

08008890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08c      	sub	sp, #48	; 0x30
 8008894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008896:	f107 031c 	add.w	r3, r7, #28
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	605a      	str	r2, [r3, #4]
 80088a0:	609a      	str	r2, [r3, #8]
 80088a2:	60da      	str	r2, [r3, #12]
 80088a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80088a6:	4b65      	ldr	r3, [pc, #404]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088aa:	4a64      	ldr	r2, [pc, #400]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088ac:	f043 0310 	orr.w	r3, r3, #16
 80088b0:	6313      	str	r3, [r2, #48]	; 0x30
 80088b2:	4b62      	ldr	r3, [pc, #392]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	f003 0310 	and.w	r3, r3, #16
 80088ba:	61bb      	str	r3, [r7, #24]
 80088bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80088be:	4b5f      	ldr	r3, [pc, #380]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	4a5e      	ldr	r2, [pc, #376]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088c4:	f043 0320 	orr.w	r3, r3, #32
 80088c8:	6313      	str	r3, [r2, #48]	; 0x30
 80088ca:	4b5c      	ldr	r3, [pc, #368]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ce:	f003 0320 	and.w	r3, r3, #32
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80088d6:	4b59      	ldr	r3, [pc, #356]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	4a58      	ldr	r2, [pc, #352]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088dc:	f043 0304 	orr.w	r3, r3, #4
 80088e0:	6313      	str	r3, [r2, #48]	; 0x30
 80088e2:	4b56      	ldr	r3, [pc, #344]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80088ee:	4b53      	ldr	r3, [pc, #332]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f2:	4a52      	ldr	r2, [pc, #328]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088f4:	f043 0301 	orr.w	r3, r3, #1
 80088f8:	6313      	str	r3, [r2, #48]	; 0x30
 80088fa:	4b50      	ldr	r3, [pc, #320]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 80088fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008906:	4b4d      	ldr	r3, [pc, #308]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 8008908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890a:	4a4c      	ldr	r2, [pc, #304]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 800890c:	f043 0302 	orr.w	r3, r3, #2
 8008910:	6313      	str	r3, [r2, #48]	; 0x30
 8008912:	4b4a      	ldr	r3, [pc, #296]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 8008914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	60bb      	str	r3, [r7, #8]
 800891c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800891e:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a46      	ldr	r2, [pc, #280]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 8008924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b44      	ldr	r3, [pc, #272]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008932:	607b      	str	r3, [r7, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008936:	4b41      	ldr	r3, [pc, #260]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 8008938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893a:	4a40      	ldr	r2, [pc, #256]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 800893c:	f043 0308 	orr.w	r3, r3, #8
 8008940:	6313      	str	r3, [r2, #48]	; 0x30
 8008942:	4b3e      	ldr	r3, [pc, #248]	; (8008a3c <MX_GPIO_Init+0x1ac>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin
 800894e:	2200      	movs	r2, #0
 8008950:	f240 119b 	movw	r1, #411	; 0x19b
 8008954:	483a      	ldr	r0, [pc, #232]	; (8008a40 <MX_GPIO_Init+0x1b0>)
 8008956:	f7fa f90b 	bl	8002b70 <HAL_GPIO_WritePin>
                          |DO_10_Pin|DO_11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin
 800895a:	2200      	movs	r2, #0
 800895c:	f64f 5138 	movw	r1, #64824	; 0xfd38
 8008960:	4838      	ldr	r0, [pc, #224]	; (8008a44 <MX_GPIO_Init+0x1b4>)
 8008962:	f7fa f905 	bl	8002b70 <HAL_GPIO_WritePin>
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin
                          |DO_8_Pin|DO_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DO_12_Pin|DO_13_Pin|DO_14_Pin|DO_15_Pin
 8008966:	f240 139b 	movw	r3, #411	; 0x19b
 800896a:	61fb      	str	r3, [r7, #28]
                          |DO_10_Pin|DO_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800896c:	2301      	movs	r3, #1
 800896e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008970:	2302      	movs	r3, #2
 8008972:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008974:	2300      	movs	r3, #0
 8008976:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008978:	f107 031c 	add.w	r3, r7, #28
 800897c:	4619      	mov	r1, r3
 800897e:	4830      	ldr	r0, [pc, #192]	; (8008a40 <MX_GPIO_Init+0x1b0>)
 8008980:	f7f9 ff4c 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin */
  GPIO_InitStruct.Pin = DO_0_Pin|DO_1_Pin|DO_2_Pin|DO_3_Pin
 8008984:	f64f 5338 	movw	r3, #64824	; 0xfd38
 8008988:	61fb      	str	r3, [r7, #28]
                          |DO_4_Pin|DO_5_Pin|DO_6_Pin|DO_7_Pin
                          |DO_8_Pin|DO_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800898a:	2301      	movs	r3, #1
 800898c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800898e:	2302      	movs	r3, #2
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008992:	2300      	movs	r3, #0
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008996:	f107 031c 	add.w	r3, r7, #28
 800899a:	4619      	mov	r1, r3
 800899c:	4829      	ldr	r0, [pc, #164]	; (8008a44 <MX_GPIO_Init+0x1b4>)
 800899e:	f7f9 ff3d 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = E0_Pin|E1_Pin|E2_Pin|E3_Pin
 80089a2:	233f      	movs	r3, #63	; 0x3f
 80089a4:	61fb      	str	r3, [r7, #28]
                          |E4_Pin|E5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80089a6:	4b28      	ldr	r3, [pc, #160]	; (8008a48 <MX_GPIO_Init+0x1b8>)
 80089a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80089aa:	2302      	movs	r3, #2
 80089ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80089ae:	f107 031c 	add.w	r3, r7, #28
 80089b2:	4619      	mov	r1, r3
 80089b4:	4825      	ldr	r0, [pc, #148]	; (8008a4c <MX_GPIO_Init+0x1bc>)
 80089b6:	f7f9 ff31 	bl	800281c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = DI_0_Pin|DI_1_Pin|DI_2_Pin|DI_3_Pin;
 80089ba:	239c      	movs	r3, #156	; 0x9c
 80089bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089be:	2300      	movs	r3, #0
 80089c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80089c6:	f107 031c 	add.w	r3, r7, #28
 80089ca:	4619      	mov	r1, r3
 80089cc:	4820      	ldr	r0, [pc, #128]	; (8008a50 <MX_GPIO_Init+0x1c0>)
 80089ce:	f7f9 ff25 	bl	800281c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80089d2:	2200      	movs	r2, #0
 80089d4:	2105      	movs	r1, #5
 80089d6:	2006      	movs	r0, #6
 80089d8:	f7f9 faee 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80089dc:	2006      	movs	r0, #6
 80089de:	f7f9 fb07 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80089e2:	2200      	movs	r2, #0
 80089e4:	2105      	movs	r1, #5
 80089e6:	2007      	movs	r0, #7
 80089e8:	f7f9 fae6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80089ec:	2007      	movs	r0, #7
 80089ee:	f7f9 faff 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80089f2:	2200      	movs	r2, #0
 80089f4:	2105      	movs	r1, #5
 80089f6:	2008      	movs	r0, #8
 80089f8:	f7f9 fade 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80089fc:	2008      	movs	r0, #8
 80089fe:	f7f9 faf7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8008a02:	2200      	movs	r2, #0
 8008a04:	2105      	movs	r1, #5
 8008a06:	2009      	movs	r0, #9
 8008a08:	f7f9 fad6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8008a0c:	2009      	movs	r0, #9
 8008a0e:	f7f9 faef 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8008a12:	2200      	movs	r2, #0
 8008a14:	2105      	movs	r1, #5
 8008a16:	200a      	movs	r0, #10
 8008a18:	f7f9 face 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8008a1c:	200a      	movs	r0, #10
 8008a1e:	f7f9 fae7 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8008a22:	2200      	movs	r2, #0
 8008a24:	2105      	movs	r1, #5
 8008a26:	2017      	movs	r0, #23
 8008a28:	f7f9 fac6 	bl	8001fb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008a2c:	2017      	movs	r0, #23
 8008a2e:	f7f9 fadf 	bl	8001ff0 <HAL_NVIC_EnableIRQ>

}
 8008a32:	bf00      	nop
 8008a34:	3730      	adds	r7, #48	; 0x30
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	40023800 	.word	0x40023800
 8008a40:	40021000 	.word	0x40021000
 8008a44:	40021400 	.word	0x40021400
 8008a48:	10210000 	.word	0x10210000
 8008a4c:	40021800 	.word	0x40021800
 8008a50:	40020c00 	.word	0x40020c00

08008a54 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008a58:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a5a:	4a1c      	ldr	r2, [pc, #112]	; (8008acc <MX_I2C1_Init+0x78>)
 8008a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8008a5e:	4b1a      	ldr	r3, [pc, #104]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a60:	4a1b      	ldr	r2, [pc, #108]	; (8008ad0 <MX_I2C1_Init+0x7c>)
 8008a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008a64:	4b18      	ldr	r3, [pc, #96]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a66:	2200      	movs	r2, #0
 8008a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a6a:	4b17      	ldr	r3, [pc, #92]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a70:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008a76:	4b14      	ldr	r3, [pc, #80]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008a7c:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a82:	4b11      	ldr	r3, [pc, #68]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a88:	4b0f      	ldr	r3, [pc, #60]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a8e:	480e      	ldr	r0, [pc, #56]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008a90:	f7fa f8a0 	bl	8002bd4 <HAL_I2C_Init>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008a9a:	f000 fa15 	bl	8008ec8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	4809      	ldr	r0, [pc, #36]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008aa2:	f7fa f941 	bl	8002d28 <HAL_I2CEx_ConfigAnalogFilter>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008aac:	f000 fa0c 	bl	8008ec8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008ab0:	2100      	movs	r1, #0
 8008ab2:	4805      	ldr	r0, [pc, #20]	; (8008ac8 <MX_I2C1_Init+0x74>)
 8008ab4:	f7fa f983 	bl	8002dbe <HAL_I2CEx_ConfigDigitalFilter>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008abe:	f000 fa03 	bl	8008ec8 <Error_Handler>
  }

}
 8008ac2:	bf00      	nop
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000a618 	.word	0x2000a618
 8008acc:	40005400 	.word	0x40005400
 8008ad0:	20404768 	.word	0x20404768

08008ad4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08a      	sub	sp, #40	; 0x28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008adc:	f107 0314 	add.w	r3, r7, #20
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	605a      	str	r2, [r3, #4]
 8008ae6:	609a      	str	r2, [r3, #8]
 8008ae8:	60da      	str	r2, [r3, #12]
 8008aea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a1b      	ldr	r2, [pc, #108]	; (8008b60 <HAL_I2C_MspInit+0x8c>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d130      	bne.n	8008b58 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008af6:	4b1b      	ldr	r3, [pc, #108]	; (8008b64 <HAL_I2C_MspInit+0x90>)
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <HAL_I2C_MspInit+0x90>)
 8008afc:	f043 0302 	orr.w	r3, r3, #2
 8008b00:	6313      	str	r3, [r2, #48]	; 0x30
 8008b02:	4b18      	ldr	r3, [pc, #96]	; (8008b64 <HAL_I2C_MspInit+0x90>)
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f003 0302 	and.w	r3, r3, #2
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008b0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b14:	2312      	movs	r3, #18
 8008b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b1c:	2303      	movs	r3, #3
 8008b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008b20:	2304      	movs	r3, #4
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b24:	f107 0314 	add.w	r3, r7, #20
 8008b28:	4619      	mov	r1, r3
 8008b2a:	480f      	ldr	r0, [pc, #60]	; (8008b68 <HAL_I2C_MspInit+0x94>)
 8008b2c:	f7f9 fe76 	bl	800281c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008b30:	4b0c      	ldr	r3, [pc, #48]	; (8008b64 <HAL_I2C_MspInit+0x90>)
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	4a0b      	ldr	r2, [pc, #44]	; (8008b64 <HAL_I2C_MspInit+0x90>)
 8008b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8008b3c:	4b09      	ldr	r3, [pc, #36]	; (8008b64 <HAL_I2C_MspInit+0x90>)
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b44:	60fb      	str	r3, [r7, #12]
 8008b46:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8008b48:	2200      	movs	r2, #0
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	201f      	movs	r0, #31
 8008b4e:	f7f9 fa33 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8008b52:	201f      	movs	r0, #31
 8008b54:	f7f9 fa4c 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008b58:	bf00      	nop
 8008b5a:	3728      	adds	r7, #40	; 0x28
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	40005400 	.word	0x40005400
 8008b64:	40023800 	.word	0x40023800
 8008b68:	40020400 	.word	0x40020400

08008b6c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008b70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b74:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008b78:	4b0b      	ldr	r3, [pc, #44]	; (8008ba8 <SCB_EnableICache+0x3c>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8008b88:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <SCB_EnableICache+0x3c>)
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	4a06      	ldr	r2, [pc, #24]	; (8008ba8 <SCB_EnableICache+0x3c>)
 8008b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b92:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008b94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008b98:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8008b9c:	bf00      	nop
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	e000ed00 	.word	0xe000ed00

08008bac <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8008bb2:	4b1d      	ldr	r3, [pc, #116]	; (8008c28 <SCB_EnableDCache+0x7c>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8008bba:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8008bbe:	4b1a      	ldr	r3, [pc, #104]	; (8008c28 <SCB_EnableDCache+0x7c>)
 8008bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc4:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	0b5b      	lsrs	r3, r3, #13
 8008bca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8008bce:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	08db      	lsrs	r3, r3, #3
 8008bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bd8:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8008be2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008be8:	490f      	ldr	r1, [pc, #60]	; (8008c28 <SCB_EnableDCache+0x7c>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	1e5a      	subs	r2, r3, #1
 8008bf4:	60ba      	str	r2, [r7, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1ef      	bne.n	8008bda <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	1e5a      	subs	r2, r3, #1
 8008bfe:	60fa      	str	r2, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e5      	bne.n	8008bd0 <SCB_EnableDCache+0x24>
 8008c04:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008c08:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <SCB_EnableDCache+0x7c>)
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	4a06      	ldr	r2, [pc, #24]	; (8008c28 <SCB_EnableDCache+0x7c>)
 8008c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c12:	6153      	str	r3, [r2, #20]
 8008c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008c18:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8008c1c:	bf00      	nop
 8008c1e:	3714      	adds	r7, #20
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	e000ed00 	.word	0xe000ed00

08008c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8008c30:	f7ff ff9c 	bl	8008b6c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8008c34:	f7ff ffba 	bl	8008bac <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c38:	f7f8 f9bc 	bl	8000fb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c3c:	f000 f83c 	bl	8008cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c40:	f7ff fe26 	bl	8008890 <MX_GPIO_Init>
  MX_DMA_Init();
 8008c44:	f7ff fd0a 	bl	800865c <MX_DMA_Init>
  MX_ADC1_Init();
 8008c48:	f7ff fb3e 	bl	80082c8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8008c4c:	f000 fe96 	bl	800997c <MX_TIM1_Init>
  MX_TIM2_Init();
 8008c50:	f000 ff4e 	bl	8009af0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008c54:	f000 ffda 	bl	8009c0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8008c58:	f001 f854 	bl	8009d04 <MX_TIM4_Init>
  MX_TIM7_Init();
 8008c5c:	f001 f8ce 	bl	8009dfc <MX_TIM7_Init>
  MX_TIM8_Init();
 8008c60:	f001 f902 	bl	8009e68 <MX_TIM8_Init>
  MX_TIM9_Init();
 8008c64:	f001 f9ba 	bl	8009fdc <MX_TIM9_Init>
  MX_TIM10_Init();
 8008c68:	f001 fa26 	bl	800a0b8 <MX_TIM10_Init>
  MX_TIM11_Init();
 8008c6c:	f001 fa72 	bl	800a154 <MX_TIM11_Init>
  MX_TIM14_Init();
 8008c70:	f001 fabe 	bl	800a1f0 <MX_TIM14_Init>
  MX_SPI1_Init();
 8008c74:	f000 f930 	bl	8008ed8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8008c78:	f000 f966 	bl	8008f48 <MX_SPI3_Init>
  MX_SPI4_Init();
 8008c7c:	f000 f9a2 	bl	8008fc4 <MX_SPI4_Init>
  MX_SPI6_Init();
 8008c80:	f000 f9de 	bl	8009040 <MX_SPI6_Init>
  MX_USART1_UART_Init();
 8008c84:	f001 fd90 	bl	800a7a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8008c88:	f001 fdee 	bl	800a868 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8008c8c:	f7ff fee2 	bl	8008a54 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8008c90:	f001 fdba 	bl	800a808 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8008c94:	f7ff fc58 	bl	8008548 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
	/*******************************Usart1 and Usart3**************************/
	my_UsartInit();
 8008c98:	f005 f81a 	bl	800dcd0 <my_UsartInit>

	/*******************************Analog init***************************/
	//AnaBuiltInStart();

#if (ADBOARD_NUM>0)
	ADBoard_Init();
 8008c9c:	f002 f96a 	bl	800af74 <ADBoard_Init>
#endif

	/******************************  PWM  init***************************/
	PWMBuiltIn_init();
 8008ca0:	f004 f93c 	bl	800cf1c <PWMBuiltIn_init>

#if (PWMBOARDSPI_NUM>0)
	PWMBoardSPI_init();
 8008ca4:	f003 fb4a 	bl	800c33c <PWMBoardSPI_init>
#if (PWMBOARDI2C_NUM>0)
	PWMBoardI2C_init();
#endif

	/******************************* setup() function**************************/
	setup();
 8008ca8:	f008 f918 	bl	8010edc <setup>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8008cac:	f7ff fd6a 	bl	8008784 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8008cb0:	f7fe fb02 	bl	80072b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008cb4:	e7fe      	b.n	8008cb4 <main+0x88>
	...

08008cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b0b8      	sub	sp, #224	; 0xe0
 8008cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008cbe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008cc2:	2234      	movs	r2, #52	; 0x34
 8008cc4:	2100      	movs	r1, #0
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f008 fc3f 	bl	801154a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ccc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
 8008cd6:	609a      	str	r2, [r3, #8]
 8008cd8:	60da      	str	r2, [r3, #12]
 8008cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cdc:	f107 0308 	add.w	r3, r7, #8
 8008ce0:	2290      	movs	r2, #144	; 0x90
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f008 fc30 	bl	801154a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008cea:	4b3c      	ldr	r3, [pc, #240]	; (8008ddc <SystemClock_Config+0x124>)
 8008cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cee:	4a3b      	ldr	r2, [pc, #236]	; (8008ddc <SystemClock_Config+0x124>)
 8008cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8008cf6:	4b39      	ldr	r3, [pc, #228]	; (8008ddc <SystemClock_Config+0x124>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d02:	4b37      	ldr	r3, [pc, #220]	; (8008de0 <SystemClock_Config+0x128>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a36      	ldr	r2, [pc, #216]	; (8008de0 <SystemClock_Config+0x128>)
 8008d08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d0c:	6013      	str	r3, [r2, #0]
 8008d0e:	4b34      	ldr	r3, [pc, #208]	; (8008de0 <SystemClock_Config+0x128>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008d1a:	2302      	movs	r3, #2
 8008d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d26:	2310      	movs	r3, #16
 8008d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d38:	2308      	movs	r3, #8
 8008d3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008d3e:	23d8      	movs	r3, #216	; 0xd8
 8008d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d44:	2302      	movs	r3, #2
 8008d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7fa f8cf 	bl	8002ef8 <HAL_RCC_OscConfig>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008d60:	f000 f8b2 	bl	8008ec8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008d64:	f7fa f878 	bl	8002e58 <HAL_PWREx_EnableOverDrive>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008d6e:	f000 f8ab 	bl	8008ec8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d72:	230f      	movs	r3, #15
 8008d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d78:	2302      	movs	r3, #2
 8008d7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008d88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008d94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008d98:	2107      	movs	r1, #7
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fa fb5a 	bl	8003454 <HAL_RCC_ClockConfig>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008da6:	f000 f88f 	bl	8008ec8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008daa:	f244 13c0 	movw	r3, #16832	; 0x41c0
 8008dae:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008db0:	2300      	movs	r3, #0
 8008db2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008db4:	2300      	movs	r3, #0
 8008db6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8008db8:	2300      	movs	r3, #0
 8008dba:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dc0:	f107 0308 	add.w	r3, r7, #8
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fa fd49 	bl	800385c <HAL_RCCEx_PeriphCLKConfig>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d001      	beq.n	8008dd4 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8008dd0:	f000 f87a 	bl	8008ec8 <Error_Handler>
  }
}
 8008dd4:	bf00      	nop
 8008dd6:	37e0      	adds	r7, #224	; 0xe0
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	40023800 	.word	0x40023800
 8008de0:	40007000 	.word	0x40007000

08008de4 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */
/*-----------------------Call back functions----------------------*/
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

#if (ADBOARD_NUM>0)
	ADBoard_SPICallback(hspi);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 ffbd 	bl	800ad6c <ADBoard_SPICallback>
#endif
	slaveSPITxRxCpltCallback(hspi);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f008 fa3a 	bl	801126c <slaveSPITxRxCpltCallback>

}
 8008df8:	bf00      	nop
 8008dfa:	3708      	adds	r7, #8
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_SPI_ErrorCallback>:
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
	slaveSPIErrorCallback(hspi);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f008 fa59 	bl	80112c0 <slaveSPIErrorCallback>

}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	4603      	mov	r3, r0
 8008e20:	80fb      	strh	r3, [r7, #6]
	int ret = 1;
 8008e22:	2301      	movs	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]
	static int INTChannel=0;
	if(GPIO_Pin==E0_Pin){
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d103      	bne.n	8008e34 <HAL_GPIO_EXTI_Callback+0x1c>
		INTChannel=0;
 8008e2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	e021      	b.n	8008e78 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E1_Pin){
 8008e34:	88fb      	ldrh	r3, [r7, #6]
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d103      	bne.n	8008e42 <HAL_GPIO_EXTI_Callback+0x2a>
		INTChannel=1;
 8008e3a:	4b19      	ldr	r3, [pc, #100]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	e01a      	b.n	8008e78 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E2_Pin){
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	2b04      	cmp	r3, #4
 8008e46:	d103      	bne.n	8008e50 <HAL_GPIO_EXTI_Callback+0x38>
		INTChannel=2;
 8008e48:	4b15      	ldr	r3, [pc, #84]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e013      	b.n	8008e78 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E3_Pin){
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	2b08      	cmp	r3, #8
 8008e54:	d103      	bne.n	8008e5e <HAL_GPIO_EXTI_Callback+0x46>
		INTChannel=3;
 8008e56:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e58:	2203      	movs	r2, #3
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e00c      	b.n	8008e78 <HAL_GPIO_EXTI_Callback+0x60>
	}else if(GPIO_Pin==E4_Pin){
 8008e5e:	88fb      	ldrh	r3, [r7, #6]
 8008e60:	2b10      	cmp	r3, #16
 8008e62:	d103      	bne.n	8008e6c <HAL_GPIO_EXTI_Callback+0x54>
		INTChannel=4;
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e66:	2204      	movs	r2, #4
 8008e68:	601a      	str	r2, [r3, #0]
 8008e6a:	e005      	b.n	8008e78 <HAL_GPIO_EXTI_Callback+0x60>
	}
	else if(GPIO_Pin==E5_Pin){
 8008e6c:	88fb      	ldrh	r3, [r7, #6]
 8008e6e:	2b20      	cmp	r3, #32
 8008e70:	d102      	bne.n	8008e78 <HAL_GPIO_EXTI_Callback+0x60>
		INTChannel=5;
 8008e72:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e74:	2205      	movs	r2, #5
 8008e76:	601a      	str	r2, [r3, #0]
	}
#if (ADBOARD_NUM>0)
	ret = ADBoard_BUSYCallback(INTChannel);
 8008e78:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f001 ff38 	bl	800acf4 <ADBoard_BUSYCallback>
 8008e84:	60f8      	str	r0, [r7, #12]
#endif
	if (ret)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d004      	beq.n	8008e96 <HAL_GPIO_EXTI_Callback+0x7e>
		interruptCallback(INTChannel);
 8008e8c:	4b04      	ldr	r3, [pc, #16]	; (8008ea0 <HAL_GPIO_EXTI_Callback+0x88>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4618      	mov	r0, r3
 8008e92:	f003 fb7f 	bl	800c594 <interruptCallback>
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000718 	.word	0x20000718

08008ea4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a04      	ldr	r2, [pc, #16]	; (8008ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d101      	bne.n	8008eba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8008eb6:	f7f8 f88b 	bl	8000fd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008eba:	bf00      	nop
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	40000c00 	.word	0x40000c00

08008ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008ecc:	bf00      	nop
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
	...

08008ed8 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8008edc:	4b18      	ldr	r3, [pc, #96]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008ede:	4a19      	ldr	r2, [pc, #100]	; (8008f44 <MX_SPI1_Init+0x6c>)
 8008ee0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8008ee2:	4b17      	ldr	r3, [pc, #92]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008ee8:	4b15      	ldr	r3, [pc, #84]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008eea:	2200      	movs	r2, #0
 8008eec:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008eee:	4b14      	ldr	r3, [pc, #80]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008ef0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008ef4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008ef6:	4b12      	ldr	r3, [pc, #72]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008efc:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008f02:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f08:	4b0d      	ldr	r3, [pc, #52]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f14:	4b0a      	ldr	r3, [pc, #40]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f16:	2200      	movs	r2, #0
 8008f18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f1c:	2207      	movs	r2, #7
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008f26:	4b06      	ldr	r3, [pc, #24]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008f2c:	4804      	ldr	r0, [pc, #16]	; (8008f40 <MX_SPI1_Init+0x68>)
 8008f2e:	f7fb f8bb 	bl	80040a8 <HAL_SPI_Init>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d001      	beq.n	8008f3c <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8008f38:	f7ff ffc6 	bl	8008ec8 <Error_Handler>
  }

}
 8008f3c:	bf00      	nop
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	2000a8b0 	.word	0x2000a8b0
 8008f44:	40013000 	.word	0x40013000

08008f48 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008f4c:	4b1b      	ldr	r3, [pc, #108]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f4e:	4a1c      	ldr	r2, [pc, #112]	; (8008fc0 <MX_SPI3_Init+0x78>)
 8008f50:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008f52:	4b1a      	ldr	r3, [pc, #104]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008f58:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008f60:	4b16      	ldr	r3, [pc, #88]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8008f66:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f68:	4b14      	ldr	r3, [pc, #80]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f6e:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f70:	2200      	movs	r2, #0
 8008f72:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008f74:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f7a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008f7c:	4b0f      	ldr	r3, [pc, #60]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008f82:	4b0e      	ldr	r3, [pc, #56]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f88:	4b0c      	ldr	r3, [pc, #48]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f8e:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f90:	2200      	movs	r2, #0
 8008f92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8008f94:	4b09      	ldr	r3, [pc, #36]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f96:	2207      	movs	r2, #7
 8008f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008f9a:	4b08      	ldr	r3, [pc, #32]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008fa0:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008fa2:	2208      	movs	r2, #8
 8008fa4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008fa6:	4805      	ldr	r0, [pc, #20]	; (8008fbc <MX_SPI3_Init+0x74>)
 8008fa8:	f7fb f87e 	bl	80040a8 <HAL_SPI_Init>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8008fb2:	f7ff ff89 	bl	8008ec8 <Error_Handler>
  }

}
 8008fb6:	bf00      	nop
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	2000a728 	.word	0x2000a728
 8008fc0:	40003c00 	.word	0x40003c00

08008fc4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0

  hspi4.Instance = SPI4;
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <MX_SPI4_Init+0x74>)
 8008fca:	4a1c      	ldr	r2, [pc, #112]	; (800903c <MX_SPI4_Init+0x78>)
 8008fcc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8008fce:	4b1a      	ldr	r3, [pc, #104]	; (8009038 <MX_SPI4_Init+0x74>)
 8008fd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008fd4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <MX_SPI4_Init+0x74>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8008fdc:	4b16      	ldr	r3, [pc, #88]	; (8009038 <MX_SPI4_Init+0x74>)
 8008fde:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8008fe2:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008fe4:	4b14      	ldr	r3, [pc, #80]	; (8009038 <MX_SPI4_Init+0x74>)
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008fea:	4b13      	ldr	r3, [pc, #76]	; (8009038 <MX_SPI4_Init+0x74>)
 8008fec:	2200      	movs	r2, #0
 8008fee:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8008ff0:	4b11      	ldr	r3, [pc, #68]	; (8009038 <MX_SPI4_Init+0x74>)
 8008ff2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ff6:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008ff8:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <MX_SPI4_Init+0x74>)
 8008ffa:	2210      	movs	r2, #16
 8008ffc:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008ffe:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <MX_SPI4_Init+0x74>)
 8009000:	2200      	movs	r2, #0
 8009002:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8009004:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <MX_SPI4_Init+0x74>)
 8009006:	2200      	movs	r2, #0
 8009008:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800900a:	4b0b      	ldr	r3, [pc, #44]	; (8009038 <MX_SPI4_Init+0x74>)
 800900c:	2200      	movs	r2, #0
 800900e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8009010:	4b09      	ldr	r3, [pc, #36]	; (8009038 <MX_SPI4_Init+0x74>)
 8009012:	2207      	movs	r2, #7
 8009014:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009016:	4b08      	ldr	r3, [pc, #32]	; (8009038 <MX_SPI4_Init+0x74>)
 8009018:	2200      	movs	r2, #0
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800901c:	4b06      	ldr	r3, [pc, #24]	; (8009038 <MX_SPI4_Init+0x74>)
 800901e:	2208      	movs	r2, #8
 8009020:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8009022:	4805      	ldr	r0, [pc, #20]	; (8009038 <MX_SPI4_Init+0x74>)
 8009024:	f7fb f840 	bl	80040a8 <HAL_SPI_Init>
 8009028:	4603      	mov	r3, r0
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 800902e:	f7ff ff4b 	bl	8008ec8 <Error_Handler>
  }

}
 8009032:	bf00      	nop
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	2000a84c 	.word	0x2000a84c
 800903c:	40013400 	.word	0x40013400

08009040 <MX_SPI6_Init>:
/* SPI6 init function */
void MX_SPI6_Init(void)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0

  hspi6.Instance = SPI6;
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009046:	4a1c      	ldr	r2, [pc, #112]	; (80090b8 <MX_SPI6_Init+0x78>)
 8009048:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 800904a:	4b1a      	ldr	r3, [pc, #104]	; (80090b4 <MX_SPI6_Init+0x74>)
 800904c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009050:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8009052:	4b18      	ldr	r3, [pc, #96]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009054:	2200      	movs	r2, #0
 8009056:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_16BIT;
 8009058:	4b16      	ldr	r3, [pc, #88]	; (80090b4 <MX_SPI6_Init+0x74>)
 800905a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800905e:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009060:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009062:	2200      	movs	r2, #0
 8009064:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009066:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009068:	2200      	movs	r2, #0
 800906a:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_SOFT;
 800906c:	4b11      	ldr	r3, [pc, #68]	; (80090b4 <MX_SPI6_Init+0x74>)
 800906e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009072:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8009074:	4b0f      	ldr	r3, [pc, #60]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009076:	2230      	movs	r2, #48	; 0x30
 8009078:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800907a:	4b0e      	ldr	r3, [pc, #56]	; (80090b4 <MX_SPI6_Init+0x74>)
 800907c:	2200      	movs	r2, #0
 800907e:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8009080:	4b0c      	ldr	r3, [pc, #48]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009082:	2200      	movs	r2, #0
 8009084:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009088:	2200      	movs	r2, #0
 800908a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 7;
 800908c:	4b09      	ldr	r3, [pc, #36]	; (80090b4 <MX_SPI6_Init+0x74>)
 800908e:	2207      	movs	r2, #7
 8009090:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009092:	4b08      	ldr	r3, [pc, #32]	; (80090b4 <MX_SPI6_Init+0x74>)
 8009094:	2200      	movs	r2, #0
 8009096:	631a      	str	r2, [r3, #48]	; 0x30
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009098:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <MX_SPI6_Init+0x74>)
 800909a:	2208      	movs	r2, #8
 800909c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800909e:	4805      	ldr	r0, [pc, #20]	; (80090b4 <MX_SPI6_Init+0x74>)
 80090a0:	f7fb f802 	bl	80040a8 <HAL_SPI_Init>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d001      	beq.n	80090ae <MX_SPI6_Init+0x6e>
  {
    Error_Handler();
 80090aa:	f7ff ff0d 	bl	8008ec8 <Error_Handler>
  }

}
 80090ae:	bf00      	nop
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	2000a6c4 	.word	0x2000a6c4
 80090b8:	40015400 	.word	0x40015400

080090bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b092      	sub	sp, #72	; 0x48
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]
 80090cc:	605a      	str	r2, [r3, #4]
 80090ce:	609a      	str	r2, [r3, #8]
 80090d0:	60da      	str	r2, [r3, #12]
 80090d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a5b      	ldr	r2, [pc, #364]	; (8009248 <HAL_SPI_MspInit+0x18c>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	f040 80c4 	bne.w	8009268 <HAL_SPI_MspInit+0x1ac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80090e0:	4b5a      	ldr	r3, [pc, #360]	; (800924c <HAL_SPI_MspInit+0x190>)
 80090e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090e4:	4a59      	ldr	r2, [pc, #356]	; (800924c <HAL_SPI_MspInit+0x190>)
 80090e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80090ea:	6453      	str	r3, [r2, #68]	; 0x44
 80090ec:	4b57      	ldr	r3, [pc, #348]	; (800924c <HAL_SPI_MspInit+0x190>)
 80090ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090f4:	633b      	str	r3, [r7, #48]	; 0x30
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090f8:	4b54      	ldr	r3, [pc, #336]	; (800924c <HAL_SPI_MspInit+0x190>)
 80090fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090fc:	4a53      	ldr	r2, [pc, #332]	; (800924c <HAL_SPI_MspInit+0x190>)
 80090fe:	f043 0301 	orr.w	r3, r3, #1
 8009102:	6313      	str	r3, [r2, #48]	; 0x30
 8009104:	4b51      	ldr	r3, [pc, #324]	; (800924c <HAL_SPI_MspInit+0x190>)
 8009106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800910e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009110:	4b4e      	ldr	r3, [pc, #312]	; (800924c <HAL_SPI_MspInit+0x190>)
 8009112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009114:	4a4d      	ldr	r2, [pc, #308]	; (800924c <HAL_SPI_MspInit+0x190>)
 8009116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800911a:	6313      	str	r3, [r2, #48]	; 0x30
 800911c:	4b4b      	ldr	r3, [pc, #300]	; (800924c <HAL_SPI_MspInit+0x190>)
 800911e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
 8009126:	6abb      	ldr	r3, [r7, #40]	; 0x28
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PG10     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009128:	2360      	movs	r3, #96	; 0x60
 800912a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800912c:	2302      	movs	r3, #2
 800912e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009130:	2300      	movs	r3, #0
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009134:	2303      	movs	r3, #3
 8009136:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009138:	2305      	movs	r3, #5
 800913a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800913c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009140:	4619      	mov	r1, r3
 8009142:	4843      	ldr	r0, [pc, #268]	; (8009250 <HAL_SPI_MspInit+0x194>)
 8009144:	f7f9 fb6a 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009148:	2380      	movs	r3, #128	; 0x80
 800914a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800914c:	2302      	movs	r3, #2
 800914e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009150:	2301      	movs	r3, #1
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009154:	2303      	movs	r3, #3
 8009156:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009158:	2305      	movs	r3, #5
 800915a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800915c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009160:	4619      	mov	r1, r3
 8009162:	483b      	ldr	r0, [pc, #236]	; (8009250 <HAL_SPI_MspInit+0x194>)
 8009164:	f7f9 fb5a 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800916c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800916e:	2302      	movs	r3, #2
 8009170:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009172:	2300      	movs	r3, #0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009176:	2303      	movs	r3, #3
 8009178:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800917a:	2305      	movs	r3, #5
 800917c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800917e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009182:	4619      	mov	r1, r3
 8009184:	4833      	ldr	r0, [pc, #204]	; (8009254 <HAL_SPI_MspInit+0x198>)
 8009186:	f7f9 fb49 	bl	800281c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800918a:	4b33      	ldr	r3, [pc, #204]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 800918c:	4a33      	ldr	r2, [pc, #204]	; (800925c <HAL_SPI_MspInit+0x1a0>)
 800918e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8009190:	4b31      	ldr	r3, [pc, #196]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 8009192:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009196:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009198:	4b2f      	ldr	r3, [pc, #188]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 800919a:	2200      	movs	r2, #0
 800919c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800919e:	4b2e      	ldr	r3, [pc, #184]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80091a4:	4b2c      	ldr	r3, [pc, #176]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80091aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80091ac:	4b2a      	ldr	r3, [pc, #168]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80091b2:	4b29      	ldr	r3, [pc, #164]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091b4:	2200      	movs	r2, #0
 80091b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80091b8:	4b27      	ldr	r3, [pc, #156]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80091be:	4b26      	ldr	r3, [pc, #152]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80091c4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80091c6:	4b24      	ldr	r3, [pc, #144]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091c8:	2200      	movs	r2, #0
 80091ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80091cc:	4822      	ldr	r0, [pc, #136]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091ce:	f7f8 ff1d 	bl	800200c <HAL_DMA_Init>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 80091d8:	f7ff fe76 	bl	8008ec8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091e0:	659a      	str	r2, [r3, #88]	; 0x58
 80091e2:	4a1d      	ldr	r2, [pc, #116]	; (8009258 <HAL_SPI_MspInit+0x19c>)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80091e8:	4b1d      	ldr	r3, [pc, #116]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 80091ea:	4a1e      	ldr	r2, [pc, #120]	; (8009264 <HAL_SPI_MspInit+0x1a8>)
 80091ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80091ee:	4b1c      	ldr	r3, [pc, #112]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 80091f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80091f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80091f6:	4b1a      	ldr	r3, [pc, #104]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 80091f8:	2240      	movs	r2, #64	; 0x40
 80091fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80091fc:	4b18      	ldr	r3, [pc, #96]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 80091fe:	2200      	movs	r2, #0
 8009200:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009202:	4b17      	ldr	r3, [pc, #92]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 8009204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009208:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800920a:	4b15      	ldr	r3, [pc, #84]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 800920c:	2200      	movs	r2, #0
 800920e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009210:	4b13      	ldr	r3, [pc, #76]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 8009212:	2200      	movs	r2, #0
 8009214:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8009216:	4b12      	ldr	r3, [pc, #72]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 8009218:	2200      	movs	r2, #0
 800921a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800921c:	4b10      	ldr	r3, [pc, #64]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 800921e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009222:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009224:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 8009226:	2200      	movs	r2, #0
 8009228:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800922a:	480d      	ldr	r0, [pc, #52]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 800922c:	f7f8 feee 	bl	800200c <HAL_DMA_Init>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 8009236:	f7ff fe47 	bl	8008ec8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a08      	ldr	r2, [pc, #32]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 800923e:	655a      	str	r2, [r3, #84]	; 0x54
 8009240:	4a07      	ldr	r2, [pc, #28]	; (8009260 <HAL_SPI_MspInit+0x1a4>)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }
}
 8009246:	e1bb      	b.n	80095c0 <HAL_SPI_MspInit+0x504>
 8009248:	40013000 	.word	0x40013000
 800924c:	40023800 	.word	0x40023800
 8009250:	40020000 	.word	0x40020000
 8009254:	40021800 	.word	0x40021800
 8009258:	2000a914 	.word	0x2000a914
 800925c:	40026440 	.word	0x40026440
 8009260:	2000a974 	.word	0x2000a974
 8009264:	40026458 	.word	0x40026458
  else if(spiHandle->Instance==SPI3)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a9d      	ldr	r2, [pc, #628]	; (80094e4 <HAL_SPI_MspInit+0x428>)
 800926e:	4293      	cmp	r3, r2
 8009270:	f040 80a6 	bne.w	80093c0 <HAL_SPI_MspInit+0x304>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009274:	4b9c      	ldr	r3, [pc, #624]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 8009276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009278:	4a9b      	ldr	r2, [pc, #620]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 800927a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800927e:	6413      	str	r3, [r2, #64]	; 0x40
 8009280:	4b99      	ldr	r3, [pc, #612]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 8009282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009288:	627b      	str	r3, [r7, #36]	; 0x24
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800928c:	4b96      	ldr	r3, [pc, #600]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 800928e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009290:	4a95      	ldr	r2, [pc, #596]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 8009292:	f043 0302 	orr.w	r3, r3, #2
 8009296:	6313      	str	r3, [r2, #48]	; 0x30
 8009298:	4b93      	ldr	r3, [pc, #588]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	f003 0302 	and.w	r3, r3, #2
 80092a0:	623b      	str	r3, [r7, #32]
 80092a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80092a4:	4b90      	ldr	r3, [pc, #576]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	4a8f      	ldr	r2, [pc, #572]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80092aa:	f043 0304 	orr.w	r3, r3, #4
 80092ae:	6313      	str	r3, [r2, #48]	; 0x30
 80092b0:	4b8d      	ldr	r3, [pc, #564]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	f003 0304 	and.w	r3, r3, #4
 80092b8:	61fb      	str	r3, [r7, #28]
 80092ba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80092bc:	2304      	movs	r3, #4
 80092be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092c0:	2302      	movs	r3, #2
 80092c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092c8:	2303      	movs	r3, #3
 80092ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80092cc:	2307      	movs	r3, #7
 80092ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092d4:	4619      	mov	r1, r3
 80092d6:	4885      	ldr	r0, [pc, #532]	; (80094ec <HAL_SPI_MspInit+0x430>)
 80092d8:	f7f9 faa0 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80092dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092e2:	2302      	movs	r3, #2
 80092e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092ea:	2303      	movs	r3, #3
 80092ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80092ee:	2306      	movs	r3, #6
 80092f0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092f6:	4619      	mov	r1, r3
 80092f8:	487d      	ldr	r0, [pc, #500]	; (80094f0 <HAL_SPI_MspInit+0x434>)
 80092fa:	f7f9 fa8f 	bl	800281c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80092fe:	4b7d      	ldr	r3, [pc, #500]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009300:	4a7d      	ldr	r2, [pc, #500]	; (80094f8 <HAL_SPI_MspInit+0x43c>)
 8009302:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8009304:	4b7b      	ldr	r3, [pc, #492]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009306:	2200      	movs	r2, #0
 8009308:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800930a:	4b7a      	ldr	r3, [pc, #488]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 800930c:	2200      	movs	r2, #0
 800930e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009310:	4b78      	ldr	r3, [pc, #480]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009312:	2200      	movs	r2, #0
 8009314:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009316:	4b77      	ldr	r3, [pc, #476]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800931c:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800931e:	4b75      	ldr	r3, [pc, #468]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009324:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009326:	4b73      	ldr	r3, [pc, #460]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009328:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800932c:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800932e:	4b71      	ldr	r3, [pc, #452]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009330:	2200      	movs	r2, #0
 8009332:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009334:	4b6f      	ldr	r3, [pc, #444]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009336:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800933a:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800933c:	4b6d      	ldr	r3, [pc, #436]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 800933e:	2200      	movs	r2, #0
 8009340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8009342:	486c      	ldr	r0, [pc, #432]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009344:	f7f8 fe62 	bl	800200c <HAL_DMA_Init>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d001      	beq.n	8009352 <HAL_SPI_MspInit+0x296>
      Error_Handler();
 800934e:	f7ff fdbb 	bl	8008ec8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a67      	ldr	r2, [pc, #412]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 8009356:	659a      	str	r2, [r3, #88]	; 0x58
 8009358:	4a66      	ldr	r2, [pc, #408]	; (80094f4 <HAL_SPI_MspInit+0x438>)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800935e:	4b67      	ldr	r3, [pc, #412]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009360:	4a67      	ldr	r2, [pc, #412]	; (8009500 <HAL_SPI_MspInit+0x444>)
 8009362:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8009364:	4b65      	ldr	r3, [pc, #404]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009366:	2200      	movs	r2, #0
 8009368:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800936a:	4b64      	ldr	r3, [pc, #400]	; (80094fc <HAL_SPI_MspInit+0x440>)
 800936c:	2240      	movs	r2, #64	; 0x40
 800936e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009370:	4b62      	ldr	r3, [pc, #392]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009372:	2200      	movs	r2, #0
 8009374:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009376:	4b61      	ldr	r3, [pc, #388]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009378:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800937c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800937e:	4b5f      	ldr	r3, [pc, #380]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009380:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009384:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009386:	4b5d      	ldr	r3, [pc, #372]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800938c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800938e:	4b5b      	ldr	r3, [pc, #364]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009390:	2200      	movs	r2, #0
 8009392:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009394:	4b59      	ldr	r3, [pc, #356]	; (80094fc <HAL_SPI_MspInit+0x440>)
 8009396:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800939a:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800939c:	4b57      	ldr	r3, [pc, #348]	; (80094fc <HAL_SPI_MspInit+0x440>)
 800939e:	2200      	movs	r2, #0
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80093a2:	4856      	ldr	r0, [pc, #344]	; (80094fc <HAL_SPI_MspInit+0x440>)
 80093a4:	f7f8 fe32 	bl	800200c <HAL_DMA_Init>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <HAL_SPI_MspInit+0x2f6>
      Error_Handler();
 80093ae:	f7ff fd8b 	bl	8008ec8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a51      	ldr	r2, [pc, #324]	; (80094fc <HAL_SPI_MspInit+0x440>)
 80093b6:	655a      	str	r2, [r3, #84]	; 0x54
 80093b8:	4a50      	ldr	r2, [pc, #320]	; (80094fc <HAL_SPI_MspInit+0x440>)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80093be:	e0ff      	b.n	80095c0 <HAL_SPI_MspInit+0x504>
  else if(spiHandle->Instance==SPI4)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a4f      	ldr	r2, [pc, #316]	; (8009504 <HAL_SPI_MspInit+0x448>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	f040 80a8 	bne.w	800951c <HAL_SPI_MspInit+0x460>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80093cc:	4b46      	ldr	r3, [pc, #280]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80093ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d0:	4a45      	ldr	r2, [pc, #276]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80093d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80093d6:	6453      	str	r3, [r2, #68]	; 0x44
 80093d8:	4b43      	ldr	r3, [pc, #268]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80093da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093e0:	61bb      	str	r3, [r7, #24]
 80093e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80093e4:	4b40      	ldr	r3, [pc, #256]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80093e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e8:	4a3f      	ldr	r2, [pc, #252]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80093ea:	f043 0310 	orr.w	r3, r3, #16
 80093ee:	6313      	str	r3, [r2, #48]	; 0x30
 80093f0:	4b3d      	ldr	r3, [pc, #244]	; (80094e8 <HAL_SPI_MspInit+0x42c>)
 80093f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_13|GPIO_PIN_14;
 80093fc:	f246 0304 	movw	r3, #24580	; 0x6004
 8009400:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009402:	2302      	movs	r3, #2
 8009404:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009406:	2300      	movs	r3, #0
 8009408:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800940a:	2303      	movs	r3, #3
 800940c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800940e:	2305      	movs	r3, #5
 8009410:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009412:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009416:	4619      	mov	r1, r3
 8009418:	483b      	ldr	r0, [pc, #236]	; (8009508 <HAL_SPI_MspInit+0x44c>)
 800941a:	f7f9 f9ff 	bl	800281c <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 800941e:	4b3b      	ldr	r3, [pc, #236]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009420:	4a3b      	ldr	r2, [pc, #236]	; (8009510 <HAL_SPI_MspInit+0x454>)
 8009422:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8009424:	4b39      	ldr	r3, [pc, #228]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009426:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800942a:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800942c:	4b37      	ldr	r3, [pc, #220]	; (800950c <HAL_SPI_MspInit+0x450>)
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009432:	4b36      	ldr	r3, [pc, #216]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009434:	2200      	movs	r2, #0
 8009436:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009438:	4b34      	ldr	r3, [pc, #208]	; (800950c <HAL_SPI_MspInit+0x450>)
 800943a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800943e:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8009440:	4b32      	ldr	r3, [pc, #200]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009446:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8009448:	4b30      	ldr	r3, [pc, #192]	; (800950c <HAL_SPI_MspInit+0x450>)
 800944a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800944e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8009450:	4b2e      	ldr	r3, [pc, #184]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009452:	2200      	movs	r2, #0
 8009454:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8009456:	4b2d      	ldr	r3, [pc, #180]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800945c:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800945e:	4b2b      	ldr	r3, [pc, #172]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009460:	2200      	movs	r2, #0
 8009462:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8009464:	4829      	ldr	r0, [pc, #164]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009466:	f7f8 fdd1 	bl	800200c <HAL_DMA_Init>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <HAL_SPI_MspInit+0x3b8>
      Error_Handler();
 8009470:	f7ff fd2a 	bl	8008ec8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a25      	ldr	r2, [pc, #148]	; (800950c <HAL_SPI_MspInit+0x450>)
 8009478:	659a      	str	r2, [r3, #88]	; 0x58
 800947a:	4a24      	ldr	r2, [pc, #144]	; (800950c <HAL_SPI_MspInit+0x450>)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8009480:	4b24      	ldr	r3, [pc, #144]	; (8009514 <HAL_SPI_MspInit+0x458>)
 8009482:	4a25      	ldr	r2, [pc, #148]	; (8009518 <HAL_SPI_MspInit+0x45c>)
 8009484:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8009486:	4b23      	ldr	r3, [pc, #140]	; (8009514 <HAL_SPI_MspInit+0x458>)
 8009488:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800948c:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800948e:	4b21      	ldr	r3, [pc, #132]	; (8009514 <HAL_SPI_MspInit+0x458>)
 8009490:	2240      	movs	r2, #64	; 0x40
 8009492:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009494:	4b1f      	ldr	r3, [pc, #124]	; (8009514 <HAL_SPI_MspInit+0x458>)
 8009496:	2200      	movs	r2, #0
 8009498:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800949a:	4b1e      	ldr	r3, [pc, #120]	; (8009514 <HAL_SPI_MspInit+0x458>)
 800949c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80094a0:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094a2:	4b1c      	ldr	r3, [pc, #112]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094a8:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80094aa:	4b1a      	ldr	r3, [pc, #104]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80094b0:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80094b2:	4b18      	ldr	r3, [pc, #96]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80094b8:	4b16      	ldr	r3, [pc, #88]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80094be:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80094c0:	4b14      	ldr	r3, [pc, #80]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80094c6:	4813      	ldr	r0, [pc, #76]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094c8:	f7f8 fda0 	bl	800200c <HAL_DMA_Init>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <HAL_SPI_MspInit+0x41a>
      Error_Handler();
 80094d2:	f7ff fcf9 	bl	8008ec8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a0e      	ldr	r2, [pc, #56]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094da:	655a      	str	r2, [r3, #84]	; 0x54
 80094dc:	4a0d      	ldr	r2, [pc, #52]	; (8009514 <HAL_SPI_MspInit+0x458>)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80094e2:	e06d      	b.n	80095c0 <HAL_SPI_MspInit+0x504>
 80094e4:	40003c00 	.word	0x40003c00
 80094e8:	40023800 	.word	0x40023800
 80094ec:	40020400 	.word	0x40020400
 80094f0:	40020800 	.word	0x40020800
 80094f4:	2000a9d4 	.word	0x2000a9d4
 80094f8:	40026010 	.word	0x40026010
 80094fc:	2000a78c 	.word	0x2000a78c
 8009500:	40026088 	.word	0x40026088
 8009504:	40013400 	.word	0x40013400
 8009508:	40021000 	.word	0x40021000
 800950c:	2000a664 	.word	0x2000a664
 8009510:	40026410 	.word	0x40026410
 8009514:	2000a7ec 	.word	0x2000a7ec
 8009518:	40026428 	.word	0x40026428
  else if(spiHandle->Instance==SPI6)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a29      	ldr	r2, [pc, #164]	; (80095c8 <HAL_SPI_MspInit+0x50c>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d14c      	bne.n	80095c0 <HAL_SPI_MspInit+0x504>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8009526:	4b29      	ldr	r3, [pc, #164]	; (80095cc <HAL_SPI_MspInit+0x510>)
 8009528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800952a:	4a28      	ldr	r2, [pc, #160]	; (80095cc <HAL_SPI_MspInit+0x510>)
 800952c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009530:	6453      	str	r3, [r2, #68]	; 0x44
 8009532:	4b26      	ldr	r3, [pc, #152]	; (80095cc <HAL_SPI_MspInit+0x510>)
 8009534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800953a:	613b      	str	r3, [r7, #16]
 800953c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800953e:	4b23      	ldr	r3, [pc, #140]	; (80095cc <HAL_SPI_MspInit+0x510>)
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	4a22      	ldr	r2, [pc, #136]	; (80095cc <HAL_SPI_MspInit+0x510>)
 8009544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009548:	6313      	str	r3, [r2, #48]	; 0x30
 800954a:	4b20      	ldr	r3, [pc, #128]	; (80095cc <HAL_SPI_MspInit+0x510>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009556:	4b1d      	ldr	r3, [pc, #116]	; (80095cc <HAL_SPI_MspInit+0x510>)
 8009558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955a:	4a1c      	ldr	r2, [pc, #112]	; (80095cc <HAL_SPI_MspInit+0x510>)
 800955c:	f043 0302 	orr.w	r3, r3, #2
 8009560:	6313      	str	r3, [r2, #48]	; 0x30
 8009562:	4b1a      	ldr	r3, [pc, #104]	; (80095cc <HAL_SPI_MspInit+0x510>)
 8009564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009566:	f003 0302 	and.w	r3, r3, #2
 800956a:	60bb      	str	r3, [r7, #8]
 800956c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800956e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8009572:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009574:	2302      	movs	r3, #2
 8009576:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009578:	2300      	movs	r3, #0
 800957a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800957c:	2303      	movs	r3, #3
 800957e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8009580:	2305      	movs	r3, #5
 8009582:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009588:	4619      	mov	r1, r3
 800958a:	4811      	ldr	r0, [pc, #68]	; (80095d0 <HAL_SPI_MspInit+0x514>)
 800958c:	f7f9 f946 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009590:	2308      	movs	r3, #8
 8009592:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009594:	2302      	movs	r3, #2
 8009596:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009598:	2300      	movs	r3, #0
 800959a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800959c:	2303      	movs	r3, #3
 800959e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80095a0:	2308      	movs	r3, #8
 80095a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095a8:	4619      	mov	r1, r3
 80095aa:	480a      	ldr	r0, [pc, #40]	; (80095d4 <HAL_SPI_MspInit+0x518>)
 80095ac:	f7f9 f936 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI6_IRQn, 5, 0);
 80095b0:	2200      	movs	r2, #0
 80095b2:	2105      	movs	r1, #5
 80095b4:	2056      	movs	r0, #86	; 0x56
 80095b6:	f7f8 fcff 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI6_IRQn);
 80095ba:	2056      	movs	r0, #86	; 0x56
 80095bc:	f7f8 fd18 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 80095c0:	bf00      	nop
 80095c2:	3748      	adds	r7, #72	; 0x48
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40015400 	.word	0x40015400
 80095cc:	40023800 	.word	0x40023800
 80095d0:	40021800 	.word	0x40021800
 80095d4:	40020400 	.word	0x40020400

080095d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <HAL_MspInit+0x4c>)
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	4a10      	ldr	r2, [pc, #64]	; (8009624 <HAL_MspInit+0x4c>)
 80095e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095e8:	6413      	str	r3, [r2, #64]	; 0x40
 80095ea:	4b0e      	ldr	r3, [pc, #56]	; (8009624 <HAL_MspInit+0x4c>)
 80095ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095f6:	4b0b      	ldr	r3, [pc, #44]	; (8009624 <HAL_MspInit+0x4c>)
 80095f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fa:	4a0a      	ldr	r2, [pc, #40]	; (8009624 <HAL_MspInit+0x4c>)
 80095fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009600:	6453      	str	r3, [r2, #68]	; 0x44
 8009602:	4b08      	ldr	r3, [pc, #32]	; (8009624 <HAL_MspInit+0x4c>)
 8009604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800960a:	603b      	str	r3, [r7, #0]
 800960c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800960e:	2200      	movs	r2, #0
 8009610:	210f      	movs	r1, #15
 8009612:	f06f 0001 	mvn.w	r0, #1
 8009616:	f7f8 fccf 	bl	8001fb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	40023800 	.word	0x40023800

08009628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b08c      	sub	sp, #48	; 0x30
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8009634:	2300      	movs	r3, #0
 8009636:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8009638:	2200      	movs	r2, #0
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	2032      	movs	r0, #50	; 0x32
 800963e:	f7f8 fcbb 	bl	8001fb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8009642:	2032      	movs	r0, #50	; 0x32
 8009644:	f7f8 fcd4 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8009648:	4b1f      	ldr	r3, [pc, #124]	; (80096c8 <HAL_InitTick+0xa0>)
 800964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964c:	4a1e      	ldr	r2, [pc, #120]	; (80096c8 <HAL_InitTick+0xa0>)
 800964e:	f043 0308 	orr.w	r3, r3, #8
 8009652:	6413      	str	r3, [r2, #64]	; 0x40
 8009654:	4b1c      	ldr	r3, [pc, #112]	; (80096c8 <HAL_InitTick+0xa0>)
 8009656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009658:	f003 0308 	and.w	r3, r3, #8
 800965c:	60fb      	str	r3, [r7, #12]
 800965e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009660:	f107 0210 	add.w	r2, r7, #16
 8009664:	f107 0314 	add.w	r3, r7, #20
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f7fa f8c4 	bl	80037f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009670:	f7fa f89a 	bl	80037a8 <HAL_RCC_GetPCLK1Freq>
 8009674:	4603      	mov	r3, r0
 8009676:	005b      	lsls	r3, r3, #1
 8009678:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800967a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967c:	4a13      	ldr	r2, [pc, #76]	; (80096cc <HAL_InitTick+0xa4>)
 800967e:	fba2 2303 	umull	r2, r3, r2, r3
 8009682:	0c9b      	lsrs	r3, r3, #18
 8009684:	3b01      	subs	r3, #1
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8009688:	4b11      	ldr	r3, [pc, #68]	; (80096d0 <HAL_InitTick+0xa8>)
 800968a:	4a12      	ldr	r2, [pc, #72]	; (80096d4 <HAL_InitTick+0xac>)
 800968c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000 / 1000) - 1;
 800968e:	4b10      	ldr	r3, [pc, #64]	; (80096d0 <HAL_InitTick+0xa8>)
 8009690:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009694:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8009696:	4a0e      	ldr	r2, [pc, #56]	; (80096d0 <HAL_InitTick+0xa8>)
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800969c:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <HAL_InitTick+0xa8>)
 800969e:	2200      	movs	r2, #0
 80096a0:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096a2:	4b0b      	ldr	r3, [pc, #44]	; (80096d0 <HAL_InitTick+0xa8>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80096a8:	4809      	ldr	r0, [pc, #36]	; (80096d0 <HAL_InitTick+0xa8>)
 80096aa:	f7fb fcb9 	bl	8005020 <HAL_TIM_Base_Init>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d104      	bne.n	80096be <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80096b4:	4806      	ldr	r0, [pc, #24]	; (80096d0 <HAL_InitTick+0xa8>)
 80096b6:	f7fb fcdf 	bl	8005078 <HAL_TIM_Base_Start_IT>
 80096ba:	4603      	mov	r3, r0
 80096bc:	e000      	b.n	80096c0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3730      	adds	r7, #48	; 0x30
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	40023800 	.word	0x40023800
 80096cc:	431bde83 	.word	0x431bde83
 80096d0:	2000aa34 	.word	0x2000aa34
 80096d4:	40000c00 	.word	0x40000c00

080096d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80096d8:	b480      	push	{r7}
 80096da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80096dc:	bf00      	nop
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80096e6:	b480      	push	{r7}
 80096e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80096ea:	e7fe      	b.n	80096ea <HardFault_Handler+0x4>

080096ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80096f0:	e7fe      	b.n	80096f0 <MemManage_Handler+0x4>

080096f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80096f2:	b480      	push	{r7}
 80096f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80096f6:	e7fe      	b.n	80096f6 <BusFault_Handler+0x4>

080096f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80096fc:	e7fe      	b.n	80096fc <UsageFault_Handler+0x4>

080096fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80096fe:	b480      	push	{r7}
 8009700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009702:	bf00      	nop
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009710:	2001      	movs	r0, #1
 8009712:	f7f9 fa47 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009716:	bf00      	nop
 8009718:	bd80      	pop	{r7, pc}

0800971a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800971e:	2002      	movs	r0, #2
 8009720:	f7f9 fa40 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8009724:	bf00      	nop
 8009726:	bd80      	pop	{r7, pc}

08009728 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800972c:	2004      	movs	r0, #4
 800972e:	f7f9 fa39 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8009732:	bf00      	nop
 8009734:	bd80      	pop	{r7, pc}

08009736 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800973a:	2008      	movs	r0, #8
 800973c:	f7f9 fa32 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8009740:	bf00      	nop
 8009742:	bd80      	pop	{r7, pc}

08009744 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8009748:	2010      	movs	r0, #16
 800974a:	f7f9 fa2b 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800974e:	bf00      	nop
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8009758:	4802      	ldr	r0, [pc, #8]	; (8009764 <DMA1_Stream0_IRQHandler+0x10>)
 800975a:	f7f8 fdf7 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800975e:	bf00      	nop
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	2000a9d4 	.word	0x2000a9d4

08009768 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800976c:	4802      	ldr	r0, [pc, #8]	; (8009778 <DMA1_Stream1_IRQHandler+0x10>)
 800976e:	f7f8 fded 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009772:	bf00      	nop
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	2000acf4 	.word	0x2000acf4

0800977c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8009780:	4802      	ldr	r0, [pc, #8]	; (800978c <DMA1_Stream4_IRQHandler+0x10>)
 8009782:	f7f8 fde3 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8009786:	bf00      	nop
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	2000add4 	.word	0x2000add4

08009790 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8009794:	4802      	ldr	r0, [pc, #8]	; (80097a0 <DMA1_Stream5_IRQHandler+0x10>)
 8009796:	f7f8 fdd9 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800979a:	bf00      	nop
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	2000a78c 	.word	0x2000a78c

080097a4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80097a8:	4802      	ldr	r0, [pc, #8]	; (80097b4 <CAN1_RX0_IRQHandler+0x10>)
 80097aa:	f7f8 f92d 	bl	8001a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80097ae:	bf00      	nop
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20002540 	.word	0x20002540

080097b8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80097bc:	4802      	ldr	r0, [pc, #8]	; (80097c8 <CAN1_RX1_IRQHandler+0x10>)
 80097be:	f7f8 f923 	bl	8001a08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80097c2:	bf00      	nop
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20002540 	.word	0x20002540

080097cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80097d0:	2020      	movs	r0, #32
 80097d2:	f7f9 f9e7 	bl	8002ba4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80097d6:	bf00      	nop
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80097e0:	4803      	ldr	r0, [pc, #12]	; (80097f0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80097e2:	f7fb fd3b 	bl	800525c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80097e6:	4803      	ldr	r0, [pc, #12]	; (80097f4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80097e8:	f7fb fd38 	bl	800525c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80097ec:	bf00      	nop
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	2000abb4 	.word	0x2000abb4
 80097f4:	2000aaf4 	.word	0x2000aaf4

080097f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80097fc:	4802      	ldr	r0, [pc, #8]	; (8009808 <I2C1_EV_IRQHandler+0x10>)
 80097fe:	f7f9 fa79 	bl	8002cf4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009802:	bf00      	nop
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	2000a618 	.word	0x2000a618

0800980c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009810:	4802      	ldr	r0, [pc, #8]	; (800981c <USART1_IRQHandler+0x10>)
 8009812:	f7fc fe73 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009816:	bf00      	nop
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	2000aef4 	.word	0x2000aef4

08009820 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	myUsartIntIRQ(&huart2);
 8009824:	4803      	ldr	r0, [pc, #12]	; (8009834 <USART2_IRQHandler+0x14>)
 8009826:	f004 fc6f 	bl	800e108 <myUsartIntIRQ>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800982a:	4802      	ldr	r0, [pc, #8]	; (8009834 <USART2_IRQHandler+0x14>)
 800982c:	f7fc fe66 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009830:	bf00      	nop
 8009832:	bd80      	pop	{r7, pc}
 8009834:	2000af74 	.word	0x2000af74

08009838 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	myUsartDMAIdleIRQ(&huart3);
 800983c:	4803      	ldr	r0, [pc, #12]	; (800984c <USART3_IRQHandler+0x14>)
 800983e:	f004 fc31 	bl	800e0a4 <myUsartDMAIdleIRQ>
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009842:	4802      	ldr	r0, [pc, #8]	; (800984c <USART3_IRQHandler+0x14>)
 8009844:	f7fc fe5a 	bl	80064fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009848:	bf00      	nop
 800984a:	bd80      	pop	{r7, pc}
 800984c:	2000ad54 	.word	0x2000ad54

08009850 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8009854:	4802      	ldr	r0, [pc, #8]	; (8009860 <TIM5_IRQHandler+0x10>)
 8009856:	f7fb fd01 	bl	800525c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800985a:	bf00      	nop
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	2000aa34 	.word	0x2000aa34

08009864 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8009868:	4802      	ldr	r0, [pc, #8]	; (8009874 <DMA2_Stream0_IRQHandler+0x10>)
 800986a:	f7f8 fd6f 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800986e:	bf00      	nop
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	2000a664 	.word	0x2000a664

08009878 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800987c:	4802      	ldr	r0, [pc, #8]	; (8009888 <DMA2_Stream1_IRQHandler+0x10>)
 800987e:	f7f8 fd65 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009882:	bf00      	nop
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	2000a7ec 	.word	0x2000a7ec

0800988c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8009890:	4802      	ldr	r0, [pc, #8]	; (800989c <DMA2_Stream2_IRQHandler+0x10>)
 8009892:	f7f8 fd5b 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8009896:	bf00      	nop
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	2000a914 	.word	0x2000a914

080098a0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80098a4:	4802      	ldr	r0, [pc, #8]	; (80098b0 <DMA2_Stream3_IRQHandler+0x10>)
 80098a6:	f7f8 fd51 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80098aa:	bf00      	nop
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	2000a974 	.word	0x2000a974

080098b4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80098b8:	4802      	ldr	r0, [pc, #8]	; (80098c4 <DMA2_Stream4_IRQHandler+0x10>)
 80098ba:	f7f8 fd47 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80098be:	bf00      	nop
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200024e0 	.word	0x200024e0

080098c8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80098cc:	4802      	ldr	r0, [pc, #8]	; (80098d8 <DMA2_Stream5_IRQHandler+0x10>)
 80098ce:	f7f8 fd3d 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80098d2:	bf00      	nop
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	2000ae94 	.word	0x2000ae94

080098dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80098e0:	4802      	ldr	r0, [pc, #8]	; (80098ec <DMA2_Stream7_IRQHandler+0x10>)
 80098e2:	f7f8 fd33 	bl	800234c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80098e6:	bf00      	nop
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	2000ae34 	.word	0x2000ae34

080098f0 <SPI6_IRQHandler>:

/**
  * @brief This function handles SPI6 global interrupt.
  */
void SPI6_IRQHandler(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI6_IRQn 0 */

  /* USER CODE END SPI6_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi6);
 80098f4:	4802      	ldr	r0, [pc, #8]	; (8009900 <SPI6_IRQHandler+0x10>)
 80098f6:	f7fb f809 	bl	800490c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI6_IRQn 1 */

  /* USER CODE END SPI6_IRQn 1 */
}
 80098fa:	bf00      	nop
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	2000a6c4 	.word	0x2000a6c4

08009904 <SysTick_Handler>:

/* USER CODE BEGIN 1 */
void SysTick_Handler(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8009908:	f7fd fd02 	bl	8007310 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800990c:	bf00      	nop
 800990e:	bd80      	pop	{r7, pc}

08009910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009914:	4b15      	ldr	r3, [pc, #84]	; (800996c <SystemInit+0x5c>)
 8009916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991a:	4a14      	ldr	r2, [pc, #80]	; (800996c <SystemInit+0x5c>)
 800991c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009924:	4b12      	ldr	r3, [pc, #72]	; (8009970 <SystemInit+0x60>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a11      	ldr	r2, [pc, #68]	; (8009970 <SystemInit+0x60>)
 800992a:	f043 0301 	orr.w	r3, r3, #1
 800992e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009930:	4b0f      	ldr	r3, [pc, #60]	; (8009970 <SystemInit+0x60>)
 8009932:	2200      	movs	r2, #0
 8009934:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009936:	4b0e      	ldr	r3, [pc, #56]	; (8009970 <SystemInit+0x60>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	490d      	ldr	r1, [pc, #52]	; (8009970 <SystemInit+0x60>)
 800993c:	4b0d      	ldr	r3, [pc, #52]	; (8009974 <SystemInit+0x64>)
 800993e:	4013      	ands	r3, r2
 8009940:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009942:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <SystemInit+0x60>)
 8009944:	4a0c      	ldr	r2, [pc, #48]	; (8009978 <SystemInit+0x68>)
 8009946:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009948:	4b09      	ldr	r3, [pc, #36]	; (8009970 <SystemInit+0x60>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a08      	ldr	r2, [pc, #32]	; (8009970 <SystemInit+0x60>)
 800994e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009952:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009954:	4b06      	ldr	r3, [pc, #24]	; (8009970 <SystemInit+0x60>)
 8009956:	2200      	movs	r2, #0
 8009958:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800995a:	4b04      	ldr	r3, [pc, #16]	; (800996c <SystemInit+0x5c>)
 800995c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009960:	609a      	str	r2, [r3, #8]
#endif
}
 8009962:	bf00      	nop
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr
 800996c:	e000ed00 	.word	0xe000ed00
 8009970:	40023800 	.word	0x40023800
 8009974:	fef6ffff 	.word	0xfef6ffff
 8009978:	24003010 	.word	0x24003010

0800997c <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b09a      	sub	sp, #104	; 0x68
 8009980:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009982:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009986:	2200      	movs	r2, #0
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	605a      	str	r2, [r3, #4]
 800998c:	609a      	str	r2, [r3, #8]
 800998e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009990:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800999c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	605a      	str	r2, [r3, #4]
 80099a6:	609a      	str	r2, [r3, #8]
 80099a8:	60da      	str	r2, [r3, #12]
 80099aa:	611a      	str	r2, [r3, #16]
 80099ac:	615a      	str	r2, [r3, #20]
 80099ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80099b0:	1d3b      	adds	r3, r7, #4
 80099b2:	222c      	movs	r2, #44	; 0x2c
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f007 fdc7 	bl	801154a <memset>

  htim1.Instance = TIM1;
 80099bc:	4b4a      	ldr	r3, [pc, #296]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099be:	4a4b      	ldr	r2, [pc, #300]	; (8009aec <MX_TIM1_Init+0x170>)
 80099c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80099c2:	4b49      	ldr	r3, [pc, #292]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099c4:	f245 425f 	movw	r2, #21599	; 0x545f
 80099c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80099ca:	4b47      	ldr	r3, [pc, #284]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80099d0:	4b45      	ldr	r3, [pc, #276]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80099d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80099d8:	4b43      	ldr	r3, [pc, #268]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099da:	2200      	movs	r2, #0
 80099dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80099de:	4b42      	ldr	r3, [pc, #264]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80099e4:	4b40      	ldr	r3, [pc, #256]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099e6:	2200      	movs	r2, #0
 80099e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80099ea:	483f      	ldr	r0, [pc, #252]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 80099ec:	f7fb fb18 	bl	8005020 <HAL_TIM_Base_Init>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80099f6:	f7ff fa67 	bl	8008ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099fe:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009a00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009a04:	4619      	mov	r1, r3
 8009a06:	4838      	ldr	r0, [pc, #224]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 8009a08:	f7fb fe60 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8009a12:	f7ff fa59 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009a16:	4834      	ldr	r0, [pc, #208]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 8009a18:	f7fb fb58 	bl	80050cc <HAL_TIM_PWM_Init>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8009a22:	f7ff fa51 	bl	8008ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a26:	2300      	movs	r3, #0
 8009a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009a32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009a36:	4619      	mov	r1, r3
 8009a38:	482b      	ldr	r0, [pc, #172]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 8009a3a:	f7fc fae7 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8009a44:	f7ff fa40 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a48:	2360      	movs	r3, #96	; 0x60
 8009a4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a50:	2300      	movs	r3, #0
 8009a52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009a54:	2300      	movs	r3, #0
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009a60:	2300      	movs	r3, #0
 8009a62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	481e      	ldr	r0, [pc, #120]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 8009a6e:	f7fb fd15 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009a72:	4603      	mov	r3, r0
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d001      	beq.n	8009a7c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8009a78:	f7ff fa26 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009a80:	2204      	movs	r2, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4818      	ldr	r0, [pc, #96]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 8009a86:	f7fb fd09 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8009a90:	f7ff fa1a 	bl	8008ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009a94:	2300      	movs	r3, #0
 8009a96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009aa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009aac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009ab6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009aba:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009ac4:	1d3b      	adds	r3, r7, #4
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	4807      	ldr	r0, [pc, #28]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 8009aca:	f7fc fb2d 	bl	8006128 <HAL_TIMEx_ConfigBreakDeadTime>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8009ad4:	f7ff f9f8 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8009ad8:	4803      	ldr	r0, [pc, #12]	; (8009ae8 <MX_TIM1_Init+0x16c>)
 8009ada:	f000 fcc3 	bl	800a464 <HAL_TIM_MspPostInit>

}
 8009ade:	bf00      	nop
 8009ae0:	3768      	adds	r7, #104	; 0x68
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	2000abb4 	.word	0x2000abb4
 8009aec:	40010000 	.word	0x40010000

08009af0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08e      	sub	sp, #56	; 0x38
 8009af4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
 8009afe:	605a      	str	r2, [r3, #4]
 8009b00:	609a      	str	r2, [r3, #8]
 8009b02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b04:	f107 031c 	add.w	r3, r7, #28
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	605a      	str	r2, [r3, #4]
 8009b0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b10:	463b      	mov	r3, r7
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
 8009b16:	605a      	str	r2, [r3, #4]
 8009b18:	609a      	str	r2, [r3, #8]
 8009b1a:	60da      	str	r2, [r3, #12]
 8009b1c:	611a      	str	r2, [r3, #16]
 8009b1e:	615a      	str	r2, [r3, #20]
 8009b20:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8009b22:	4b39      	ldr	r3, [pc, #228]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009b28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8009b2a:	4b37      	ldr	r3, [pc, #220]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b2c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009b30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b32:	4b35      	ldr	r3, [pc, #212]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8009b38:	4b33      	ldr	r3, [pc, #204]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b3e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b40:	4b31      	ldr	r3, [pc, #196]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b46:	4b30      	ldr	r3, [pc, #192]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009b4c:	482e      	ldr	r0, [pc, #184]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b4e:	f7fb fa67 	bl	8005020 <HAL_TIM_Base_Init>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009b58:	f7ff f9b6 	bl	8008ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009b62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009b66:	4619      	mov	r1, r3
 8009b68:	4827      	ldr	r0, [pc, #156]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b6a:	f7fb fdaf 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d001      	beq.n	8009b78 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009b74:	f7ff f9a8 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009b78:	4823      	ldr	r0, [pc, #140]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b7a:	f7fb faa7 	bl	80050cc <HAL_TIM_PWM_Init>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d001      	beq.n	8009b88 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009b84:	f7ff f9a0 	bl	8008ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009b90:	f107 031c 	add.w	r3, r7, #28
 8009b94:	4619      	mov	r1, r3
 8009b96:	481c      	ldr	r0, [pc, #112]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009b98:	f7fc fa38 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8009ba2:	f7ff f991 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ba6:	2360      	movs	r3, #96	; 0x60
 8009ba8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009baa:	2300      	movs	r3, #0
 8009bac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4812      	ldr	r0, [pc, #72]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009bbe:	f7fb fc6d 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009bc8:	f7ff f97e 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009bcc:	463b      	mov	r3, r7
 8009bce:	2208      	movs	r2, #8
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	480d      	ldr	r0, [pc, #52]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009bd4:	f7fb fc62 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8009bde:	f7ff f973 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009be2:	463b      	mov	r3, r7
 8009be4:	220c      	movs	r2, #12
 8009be6:	4619      	mov	r1, r3
 8009be8:	4807      	ldr	r0, [pc, #28]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009bea:	f7fb fc57 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d001      	beq.n	8009bf8 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8009bf4:	f7ff f968 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 8009bf8:	4803      	ldr	r0, [pc, #12]	; (8009c08 <MX_TIM2_Init+0x118>)
 8009bfa:	f000 fc33 	bl	800a464 <HAL_TIM_MspPostInit>

}
 8009bfe:	bf00      	nop
 8009c00:	3738      	adds	r7, #56	; 0x38
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	2000ac34 	.word	0x2000ac34

08009c0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08a      	sub	sp, #40	; 0x28
 8009c10:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c12:	f107 031c 	add.w	r3, r7, #28
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	605a      	str	r2, [r3, #4]
 8009c1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009c1e:	463b      	mov	r3, r7
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	605a      	str	r2, [r3, #4]
 8009c26:	609a      	str	r2, [r3, #8]
 8009c28:	60da      	str	r2, [r3, #12]
 8009c2a:	611a      	str	r2, [r3, #16]
 8009c2c:	615a      	str	r2, [r3, #20]
 8009c2e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009c30:	4b32      	ldr	r3, [pc, #200]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c32:	4a33      	ldr	r2, [pc, #204]	; (8009d00 <MX_TIM3_Init+0xf4>)
 8009c34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10800-1;
 8009c36:	4b31      	ldr	r3, [pc, #196]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c38:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009c3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c3e:	4b2f      	ldr	r3, [pc, #188]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8009c44:	4b2d      	ldr	r3, [pc, #180]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c46:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009c4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c4c:	4b2b      	ldr	r3, [pc, #172]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c52:	4b2a      	ldr	r3, [pc, #168]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c54:	2200      	movs	r2, #0
 8009c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009c58:	4828      	ldr	r0, [pc, #160]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c5a:	f7fb fa37 	bl	80050cc <HAL_TIM_PWM_Init>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8009c64:	f7ff f930 	bl	8008ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009c70:	f107 031c 	add.w	r3, r7, #28
 8009c74:	4619      	mov	r1, r3
 8009c76:	4821      	ldr	r0, [pc, #132]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c78:	f7fc f9c8 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8009c82:	f7ff f921 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c86:	2360      	movs	r3, #96	; 0x60
 8009c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c92:	2300      	movs	r3, #0
 8009c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c96:	463b      	mov	r3, r7
 8009c98:	2200      	movs	r2, #0
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	4817      	ldr	r0, [pc, #92]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009c9e:	f7fb fbfd 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8009ca8:	f7ff f90e 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009cac:	463b      	mov	r3, r7
 8009cae:	2204      	movs	r2, #4
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4812      	ldr	r0, [pc, #72]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009cb4:	f7fb fbf2 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8009cbe:	f7ff f903 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009cc2:	463b      	mov	r3, r7
 8009cc4:	2208      	movs	r2, #8
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	480c      	ldr	r0, [pc, #48]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009cca:	f7fb fbe7 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8009cd4:	f7ff f8f8 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009cd8:	463b      	mov	r3, r7
 8009cda:	220c      	movs	r2, #12
 8009cdc:	4619      	mov	r1, r3
 8009cde:	4807      	ldr	r0, [pc, #28]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009ce0:	f7fb fbdc 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <MX_TIM3_Init+0xe2>
  {
    Error_Handler();
 8009cea:	f7ff f8ed 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009cee:	4803      	ldr	r0, [pc, #12]	; (8009cfc <MX_TIM3_Init+0xf0>)
 8009cf0:	f000 fbb8 	bl	800a464 <HAL_TIM_MspPostInit>

}
 8009cf4:	bf00      	nop
 8009cf6:	3728      	adds	r7, #40	; 0x28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	2000ab34 	.word	0x2000ab34
 8009d00:	40000400 	.word	0x40000400

08009d04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08a      	sub	sp, #40	; 0x28
 8009d08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d0a:	f107 031c 	add.w	r3, r7, #28
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
 8009d12:	605a      	str	r2, [r3, #4]
 8009d14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d16:	463b      	mov	r3, r7
 8009d18:	2200      	movs	r2, #0
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	605a      	str	r2, [r3, #4]
 8009d1e:	609a      	str	r2, [r3, #8]
 8009d20:	60da      	str	r2, [r3, #12]
 8009d22:	611a      	str	r2, [r3, #16]
 8009d24:	615a      	str	r2, [r3, #20]
 8009d26:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8009d28:	4b32      	ldr	r3, [pc, #200]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d2a:	4a33      	ldr	r2, [pc, #204]	; (8009df8 <MX_TIM4_Init+0xf4>)
 8009d2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10800-1;
 8009d2e:	4b31      	ldr	r3, [pc, #196]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d30:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8009d34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d36:	4b2f      	ldr	r3, [pc, #188]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8009d3c:	4b2d      	ldr	r3, [pc, #180]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009d42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d44:	4b2b      	ldr	r3, [pc, #172]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d46:	2200      	movs	r2, #0
 8009d48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d4a:	4b2a      	ldr	r3, [pc, #168]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009d50:	4828      	ldr	r0, [pc, #160]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d52:	f7fb f9bb 	bl	80050cc <HAL_TIM_PWM_Init>
 8009d56:	4603      	mov	r3, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d001      	beq.n	8009d60 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8009d5c:	f7ff f8b4 	bl	8008ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d60:	2300      	movs	r3, #0
 8009d62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d64:	2300      	movs	r3, #0
 8009d66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009d68:	f107 031c 	add.w	r3, r7, #28
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	4821      	ldr	r0, [pc, #132]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d70:	f7fc f94c 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8009d7a:	f7ff f8a5 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d7e:	2360      	movs	r3, #96	; 0x60
 8009d80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d8e:	463b      	mov	r3, r7
 8009d90:	2200      	movs	r2, #0
 8009d92:	4619      	mov	r1, r3
 8009d94:	4817      	ldr	r0, [pc, #92]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009d96:	f7fb fb81 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d001      	beq.n	8009da4 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8009da0:	f7ff f892 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009da4:	463b      	mov	r3, r7
 8009da6:	2204      	movs	r2, #4
 8009da8:	4619      	mov	r1, r3
 8009daa:	4812      	ldr	r0, [pc, #72]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009dac:	f7fb fb76 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 8009db6:	f7ff f887 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009dba:	463b      	mov	r3, r7
 8009dbc:	2208      	movs	r2, #8
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	480c      	ldr	r0, [pc, #48]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009dc2:	f7fb fb6b 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d001      	beq.n	8009dd0 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8009dcc:	f7ff f87c 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009dd0:	463b      	mov	r3, r7
 8009dd2:	220c      	movs	r2, #12
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4807      	ldr	r0, [pc, #28]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009dd8:	f7fb fb60 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d001      	beq.n	8009de6 <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8009de2:	f7ff f871 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8009de6:	4803      	ldr	r0, [pc, #12]	; (8009df4 <MX_TIM4_Init+0xf0>)
 8009de8:	f000 fb3c 	bl	800a464 <HAL_TIM_MspPostInit>

}
 8009dec:	bf00      	nop
 8009dee:	3728      	adds	r7, #40	; 0x28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	2000aab4 	.word	0x2000aab4
 8009df8:	40000800 	.word	0x40000800

08009dfc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e02:	1d3b      	adds	r3, r7, #4
 8009e04:	2200      	movs	r2, #0
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	605a      	str	r2, [r3, #4]
 8009e0a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8009e0c:	4b14      	ldr	r3, [pc, #80]	; (8009e60 <MX_TIM7_Init+0x64>)
 8009e0e:	4a15      	ldr	r2, [pc, #84]	; (8009e64 <MX_TIM7_Init+0x68>)
 8009e10:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8009e12:	4b13      	ldr	r3, [pc, #76]	; (8009e60 <MX_TIM7_Init+0x64>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e18:	4b11      	ldr	r3, [pc, #68]	; (8009e60 <MX_TIM7_Init+0x64>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8009e1e:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <MX_TIM7_Init+0x64>)
 8009e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e24:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e26:	4b0e      	ldr	r3, [pc, #56]	; (8009e60 <MX_TIM7_Init+0x64>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009e2c:	480c      	ldr	r0, [pc, #48]	; (8009e60 <MX_TIM7_Init+0x64>)
 8009e2e:	f7fb f8f7 	bl	8005020 <HAL_TIM_Base_Init>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009e38:	f7ff f846 	bl	8008ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e40:	2300      	movs	r3, #0
 8009e42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009e44:	1d3b      	adds	r3, r7, #4
 8009e46:	4619      	mov	r1, r3
 8009e48:	4805      	ldr	r0, [pc, #20]	; (8009e60 <MX_TIM7_Init+0x64>)
 8009e4a:	f7fc f8df 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009e54:	f7ff f838 	bl	8008ec8 <Error_Handler>
  }

}
 8009e58:	bf00      	nop
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	2000acb4 	.word	0x2000acb4
 8009e64:	40001400 	.word	0x40001400

08009e68 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b09a      	sub	sp, #104	; 0x68
 8009e6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009e72:	2200      	movs	r2, #0
 8009e74:	601a      	str	r2, [r3, #0]
 8009e76:	605a      	str	r2, [r3, #4]
 8009e78:	609a      	str	r2, [r3, #8]
 8009e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	605a      	str	r2, [r3, #4]
 8009e92:	609a      	str	r2, [r3, #8]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	611a      	str	r2, [r3, #16]
 8009e98:	615a      	str	r2, [r3, #20]
 8009e9a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009e9c:	1d3b      	adds	r3, r7, #4
 8009e9e:	222c      	movs	r2, #44	; 0x2c
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f007 fb51 	bl	801154a <memset>

  htim8.Instance = TIM8;
 8009ea8:	4b4a      	ldr	r3, [pc, #296]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009eaa:	4a4b      	ldr	r2, [pc, #300]	; (8009fd8 <MX_TIM8_Init+0x170>)
 8009eac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 21600-1;
 8009eae:	4b49      	ldr	r3, [pc, #292]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009eb0:	f245 425f 	movw	r2, #21599	; 0x545f
 8009eb4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009eb6:	4b47      	ldr	r3, [pc, #284]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8009ebc:	4b45      	ldr	r3, [pc, #276]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009ebe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009ec2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ec4:	4b43      	ldr	r3, [pc, #268]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009eca:	4b42      	ldr	r3, [pc, #264]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ed0:	4b40      	ldr	r3, [pc, #256]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009ed6:	483f      	ldr	r0, [pc, #252]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009ed8:	f7fb f8a2 	bl	8005020 <HAL_TIM_Base_Init>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009ee2:	f7fe fff1 	bl	8008ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eea:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009eec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	4838      	ldr	r0, [pc, #224]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009ef4:	f7fb fbea 	bl	80056cc <HAL_TIM_ConfigClockSource>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009efe:	f7fe ffe3 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009f02:	4834      	ldr	r0, [pc, #208]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009f04:	f7fb f8e2 	bl	80050cc <HAL_TIM_PWM_Init>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009f0e:	f7fe ffdb 	bl	8008ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f12:	2300      	movs	r3, #0
 8009f14:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009f16:	2300      	movs	r3, #0
 8009f18:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009f1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009f22:	4619      	mov	r1, r3
 8009f24:	482b      	ldr	r0, [pc, #172]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009f26:	f7fc f871 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009f30:	f7fe ffca 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f34:	2360      	movs	r3, #96	; 0x60
 8009f36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009f40:	2300      	movs	r3, #0
 8009f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f54:	2200      	movs	r2, #0
 8009f56:	4619      	mov	r1, r3
 8009f58:	481e      	ldr	r0, [pc, #120]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009f5a:	f7fb fa9f 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d001      	beq.n	8009f68 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009f64:	f7fe ffb0 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009f68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f6c:	2204      	movs	r2, #4
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4818      	ldr	r0, [pc, #96]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009f72:	f7fb fa93 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d001      	beq.n	8009f80 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009f7c:	f7fe ffa4 	bl	8008ec8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009f80:	2300      	movs	r3, #0
 8009f82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009fac:	2300      	movs	r3, #0
 8009fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009fb0:	1d3b      	adds	r3, r7, #4
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4807      	ldr	r0, [pc, #28]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009fb6:	f7fc f8b7 	bl	8006128 <HAL_TIMEx_ConfigBreakDeadTime>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <MX_TIM8_Init+0x15c>
  {
    Error_Handler();
 8009fc0:	f7fe ff82 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8009fc4:	4803      	ldr	r0, [pc, #12]	; (8009fd4 <MX_TIM8_Init+0x16c>)
 8009fc6:	f000 fa4d 	bl	800a464 <HAL_TIM_MspPostInit>

}
 8009fca:	bf00      	nop
 8009fcc:	3768      	adds	r7, #104	; 0x68
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	2000aa74 	.word	0x2000aa74
 8009fd8:	40010400 	.word	0x40010400

08009fdc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08c      	sub	sp, #48	; 0x30
 8009fe0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fe2:	f107 0320 	add.w	r3, r7, #32
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	605a      	str	r2, [r3, #4]
 8009fec:	609a      	str	r2, [r3, #8]
 8009fee:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ff0:	1d3b      	adds	r3, r7, #4
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	609a      	str	r2, [r3, #8]
 8009ffa:	60da      	str	r2, [r3, #12]
 8009ffc:	611a      	str	r2, [r3, #16]
 8009ffe:	615a      	str	r2, [r3, #20]
 800a000:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 800a002:	4b2b      	ldr	r3, [pc, #172]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a004:	4a2b      	ldr	r2, [pc, #172]	; (800a0b4 <MX_TIM9_Init+0xd8>)
 800a006:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 21600-1;
 800a008:	4b29      	ldr	r3, [pc, #164]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a00a:	f245 425f 	movw	r2, #21599	; 0x545f
 800a00e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a010:	4b27      	ldr	r3, [pc, #156]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a012:	2200      	movs	r2, #0
 800a014:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800a016:	4b26      	ldr	r3, [pc, #152]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a018:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a01c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a01e:	4b24      	ldr	r3, [pc, #144]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a020:	2200      	movs	r2, #0
 800a022:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a024:	4b22      	ldr	r3, [pc, #136]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a026:	2200      	movs	r2, #0
 800a028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800a02a:	4821      	ldr	r0, [pc, #132]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a02c:	f7fa fff8 	bl	8005020 <HAL_TIM_Base_Init>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800a036:	f7fe ff47 	bl	8008ec8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a03a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a03e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800a040:	f107 0320 	add.w	r3, r7, #32
 800a044:	4619      	mov	r1, r3
 800a046:	481a      	ldr	r0, [pc, #104]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a048:	f7fb fb40 	bl	80056cc <HAL_TIM_ConfigClockSource>
 800a04c:	4603      	mov	r3, r0
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 800a052:	f7fe ff39 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800a056:	4816      	ldr	r0, [pc, #88]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a058:	f7fb f838 	bl	80050cc <HAL_TIM_PWM_Init>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800a062:	f7fe ff31 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a066:	2360      	movs	r3, #96	; 0x60
 800a068:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a06a:	2300      	movs	r3, #0
 800a06c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a06e:	2300      	movs	r3, #0
 800a070:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a072:	2300      	movs	r3, #0
 800a074:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a076:	1d3b      	adds	r3, r7, #4
 800a078:	2200      	movs	r2, #0
 800a07a:	4619      	mov	r1, r3
 800a07c:	480c      	ldr	r0, [pc, #48]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a07e:	f7fb fa0d 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800a088:	f7fe ff1e 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a08c:	1d3b      	adds	r3, r7, #4
 800a08e:	2204      	movs	r2, #4
 800a090:	4619      	mov	r1, r3
 800a092:	4807      	ldr	r0, [pc, #28]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a094:	f7fb fa02 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 800a098:	4603      	mov	r3, r0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d001      	beq.n	800a0a2 <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 800a09e:	f7fe ff13 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 800a0a2:	4803      	ldr	r0, [pc, #12]	; (800a0b0 <MX_TIM9_Init+0xd4>)
 800a0a4:	f000 f9de 	bl	800a464 <HAL_TIM_MspPostInit>

}
 800a0a8:	bf00      	nop
 800a0aa:	3730      	adds	r7, #48	; 0x30
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	2000abf4 	.word	0x2000abf4
 800a0b4:	40014000 	.word	0x40014000

0800a0b8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0be:	1d3b      	adds	r3, r7, #4
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	605a      	str	r2, [r3, #4]
 800a0c6:	609a      	str	r2, [r3, #8]
 800a0c8:	60da      	str	r2, [r3, #12]
 800a0ca:	611a      	str	r2, [r3, #16]
 800a0cc:	615a      	str	r2, [r3, #20]
 800a0ce:	619a      	str	r2, [r3, #24]

  htim10.Instance = TIM10;
 800a0d0:	4b1e      	ldr	r3, [pc, #120]	; (800a14c <MX_TIM10_Init+0x94>)
 800a0d2:	4a1f      	ldr	r2, [pc, #124]	; (800a150 <MX_TIM10_Init+0x98>)
 800a0d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 21600-1;
 800a0d6:	4b1d      	ldr	r3, [pc, #116]	; (800a14c <MX_TIM10_Init+0x94>)
 800a0d8:	f245 425f 	movw	r2, #21599	; 0x545f
 800a0dc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0de:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <MX_TIM10_Init+0x94>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 800a0e4:	4b19      	ldr	r3, [pc, #100]	; (800a14c <MX_TIM10_Init+0x94>)
 800a0e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a0ea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0ec:	4b17      	ldr	r3, [pc, #92]	; (800a14c <MX_TIM10_Init+0x94>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0f2:	4b16      	ldr	r3, [pc, #88]	; (800a14c <MX_TIM10_Init+0x94>)
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a0f8:	4814      	ldr	r0, [pc, #80]	; (800a14c <MX_TIM10_Init+0x94>)
 800a0fa:	f7fa ff91 	bl	8005020 <HAL_TIM_Base_Init>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d001      	beq.n	800a108 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 800a104:	f7fe fee0 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800a108:	4810      	ldr	r0, [pc, #64]	; (800a14c <MX_TIM10_Init+0x94>)
 800a10a:	f7fa ffdf 	bl	80050cc <HAL_TIM_PWM_Init>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 800a114:	f7fe fed8 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a118:	2360      	movs	r3, #96	; 0x60
 800a11a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a120:	2300      	movs	r3, #0
 800a122:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a124:	2300      	movs	r3, #0
 800a126:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a128:	1d3b      	adds	r3, r7, #4
 800a12a:	2200      	movs	r2, #0
 800a12c:	4619      	mov	r1, r3
 800a12e:	4807      	ldr	r0, [pc, #28]	; (800a14c <MX_TIM10_Init+0x94>)
 800a130:	f7fb f9b4 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800a13a:	f7fe fec5 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim10);
 800a13e:	4803      	ldr	r0, [pc, #12]	; (800a14c <MX_TIM10_Init+0x94>)
 800a140:	f000 f990 	bl	800a464 <HAL_TIM_MspPostInit>

}
 800a144:	bf00      	nop
 800a146:	3720      	adds	r7, #32
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	2000aaf4 	.word	0x2000aaf4
 800a150:	40014400 	.word	0x40014400

0800a154 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b088      	sub	sp, #32
 800a158:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a15a:	1d3b      	adds	r3, r7, #4
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	609a      	str	r2, [r3, #8]
 800a164:	60da      	str	r2, [r3, #12]
 800a166:	611a      	str	r2, [r3, #16]
 800a168:	615a      	str	r2, [r3, #20]
 800a16a:	619a      	str	r2, [r3, #24]

  htim11.Instance = TIM11;
 800a16c:	4b1e      	ldr	r3, [pc, #120]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a16e:	4a1f      	ldr	r2, [pc, #124]	; (800a1ec <MX_TIM11_Init+0x98>)
 800a170:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 21600-1;
 800a172:	4b1d      	ldr	r3, [pc, #116]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a174:	f245 425f 	movw	r2, #21599	; 0x545f
 800a178:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a17a:	4b1b      	ldr	r3, [pc, #108]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 800a180:	4b19      	ldr	r3, [pc, #100]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a182:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a186:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a188:	4b17      	ldr	r3, [pc, #92]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a18e:	4b16      	ldr	r3, [pc, #88]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a190:	2200      	movs	r2, #0
 800a192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800a194:	4814      	ldr	r0, [pc, #80]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a196:	f7fa ff43 	bl	8005020 <HAL_TIM_Base_Init>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <MX_TIM11_Init+0x50>
  {
    Error_Handler();
 800a1a0:	f7fe fe92 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800a1a4:	4810      	ldr	r0, [pc, #64]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a1a6:	f7fa ff91 	bl	80050cc <HAL_TIM_PWM_Init>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d001      	beq.n	800a1b4 <MX_TIM11_Init+0x60>
  {
    Error_Handler();
 800a1b0:	f7fe fe8a 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a1b4:	2360      	movs	r3, #96	; 0x60
 800a1b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a1c4:	1d3b      	adds	r3, r7, #4
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4807      	ldr	r0, [pc, #28]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a1cc:	f7fb f966 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <MX_TIM11_Init+0x86>
  {
    Error_Handler();
 800a1d6:	f7fe fe77 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim11);
 800a1da:	4803      	ldr	r0, [pc, #12]	; (800a1e8 <MX_TIM11_Init+0x94>)
 800a1dc:	f000 f942 	bl	800a464 <HAL_TIM_MspPostInit>

}
 800a1e0:	bf00      	nop
 800a1e2:	3720      	adds	r7, #32
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	2000ab74 	.word	0x2000ab74
 800a1ec:	40014800 	.word	0x40014800

0800a1f0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1f6:	1d3b      	adds	r3, r7, #4
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
 800a1fc:	605a      	str	r2, [r3, #4]
 800a1fe:	609a      	str	r2, [r3, #8]
 800a200:	60da      	str	r2, [r3, #12]
 800a202:	611a      	str	r2, [r3, #16]
 800a204:	615a      	str	r2, [r3, #20]
 800a206:	619a      	str	r2, [r3, #24]

  htim14.Instance = TIM14;
 800a208:	4b1e      	ldr	r3, [pc, #120]	; (800a284 <MX_TIM14_Init+0x94>)
 800a20a:	4a1f      	ldr	r2, [pc, #124]	; (800a288 <MX_TIM14_Init+0x98>)
 800a20c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10800-1;
 800a20e:	4b1d      	ldr	r3, [pc, #116]	; (800a284 <MX_TIM14_Init+0x94>)
 800a210:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800a214:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a216:	4b1b      	ldr	r3, [pc, #108]	; (800a284 <MX_TIM14_Init+0x94>)
 800a218:	2200      	movs	r2, #0
 800a21a:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 800a21c:	4b19      	ldr	r3, [pc, #100]	; (800a284 <MX_TIM14_Init+0x94>)
 800a21e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a222:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a224:	4b17      	ldr	r3, [pc, #92]	; (800a284 <MX_TIM14_Init+0x94>)
 800a226:	2200      	movs	r2, #0
 800a228:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a22a:	4b16      	ldr	r3, [pc, #88]	; (800a284 <MX_TIM14_Init+0x94>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800a230:	4814      	ldr	r0, [pc, #80]	; (800a284 <MX_TIM14_Init+0x94>)
 800a232:	f7fa fef5 	bl	8005020 <HAL_TIM_Base_Init>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 800a23c:	f7fe fe44 	bl	8008ec8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800a240:	4810      	ldr	r0, [pc, #64]	; (800a284 <MX_TIM14_Init+0x94>)
 800a242:	f7fa ff43 	bl	80050cc <HAL_TIM_PWM_Init>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d001      	beq.n	800a250 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 800a24c:	f7fe fe3c 	bl	8008ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a250:	2360      	movs	r3, #96	; 0x60
 800a252:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a254:	2300      	movs	r3, #0
 800a256:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a258:	2300      	movs	r3, #0
 800a25a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a25c:	2300      	movs	r3, #0
 800a25e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a260:	1d3b      	adds	r3, r7, #4
 800a262:	2200      	movs	r2, #0
 800a264:	4619      	mov	r1, r3
 800a266:	4807      	ldr	r0, [pc, #28]	; (800a284 <MX_TIM14_Init+0x94>)
 800a268:	f7fb f918 	bl	800549c <HAL_TIM_PWM_ConfigChannel>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800a272:	f7fe fe29 	bl	8008ec8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim14);
 800a276:	4803      	ldr	r0, [pc, #12]	; (800a284 <MX_TIM14_Init+0x94>)
 800a278:	f000 f8f4 	bl	800a464 <HAL_TIM_MspPostInit>

}
 800a27c:	bf00      	nop
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	2000ac74 	.word	0x2000ac74
 800a288:	40002000 	.word	0x40002000

0800a28c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08a      	sub	sp, #40	; 0x28
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a50      	ldr	r2, [pc, #320]	; (800a3dc <HAL_TIM_Base_MspInit+0x150>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d114      	bne.n	800a2c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a29e:	4b50      	ldr	r3, [pc, #320]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a2:	4a4f      	ldr	r2, [pc, #316]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2a4:	f043 0301 	orr.w	r3, r3, #1
 800a2a8:	6453      	str	r3, [r2, #68]	; 0x44
 800a2aa:	4b4d      	ldr	r3, [pc, #308]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ae:	f003 0301 	and.w	r3, r3, #1
 800a2b2:	627b      	str	r3, [r7, #36]	; 0x24
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	2105      	movs	r1, #5
 800a2ba:	2019      	movs	r0, #25
 800a2bc:	f7f7 fe7c 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a2c0:	2019      	movs	r0, #25
 800a2c2:	f7f7 fe95 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800a2c6:	e084      	b.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM2)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d0:	d10c      	bne.n	800a2ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a2d2:	4b43      	ldr	r3, [pc, #268]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d6:	4a42      	ldr	r2, [pc, #264]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2d8:	f043 0301 	orr.w	r3, r3, #1
 800a2dc:	6413      	str	r3, [r2, #64]	; 0x40
 800a2de:	4b40      	ldr	r3, [pc, #256]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	f003 0301 	and.w	r3, r3, #1
 800a2e6:	623b      	str	r3, [r7, #32]
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
}
 800a2ea:	e072      	b.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM7)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a3c      	ldr	r2, [pc, #240]	; (800a3e4 <HAL_TIM_Base_MspInit+0x158>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d10c      	bne.n	800a310 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a2f6:	4b3a      	ldr	r3, [pc, #232]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	4a39      	ldr	r2, [pc, #228]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a2fc:	f043 0320 	orr.w	r3, r3, #32
 800a300:	6413      	str	r3, [r2, #64]	; 0x40
 800a302:	4b37      	ldr	r3, [pc, #220]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a306:	f003 0320 	and.w	r3, r3, #32
 800a30a:	61fb      	str	r3, [r7, #28]
 800a30c:	69fb      	ldr	r3, [r7, #28]
}
 800a30e:	e060      	b.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM8)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a34      	ldr	r2, [pc, #208]	; (800a3e8 <HAL_TIM_Base_MspInit+0x15c>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d10c      	bne.n	800a334 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a31a:	4b31      	ldr	r3, [pc, #196]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31e:	4a30      	ldr	r2, [pc, #192]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a320:	f043 0302 	orr.w	r3, r3, #2
 800a324:	6453      	str	r3, [r2, #68]	; 0x44
 800a326:	4b2e      	ldr	r3, [pc, #184]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	61bb      	str	r3, [r7, #24]
 800a330:	69bb      	ldr	r3, [r7, #24]
}
 800a332:	e04e      	b.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a2c      	ldr	r2, [pc, #176]	; (800a3ec <HAL_TIM_Base_MspInit+0x160>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d10c      	bne.n	800a358 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800a33e:	4b28      	ldr	r3, [pc, #160]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a342:	4a27      	ldr	r2, [pc, #156]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a348:	6453      	str	r3, [r2, #68]	; 0x44
 800a34a:	4b25      	ldr	r3, [pc, #148]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a34e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a352:	617b      	str	r3, [r7, #20]
 800a354:	697b      	ldr	r3, [r7, #20]
}
 800a356:	e03c      	b.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a24      	ldr	r2, [pc, #144]	; (800a3f0 <HAL_TIM_Base_MspInit+0x164>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d114      	bne.n	800a38c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a362:	4b1f      	ldr	r3, [pc, #124]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a366:	4a1e      	ldr	r2, [pc, #120]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a36c:	6453      	str	r3, [r2, #68]	; 0x44
 800a36e:	4b1c      	ldr	r3, [pc, #112]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a376:	613b      	str	r3, [r7, #16]
 800a378:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800a37a:	2200      	movs	r2, #0
 800a37c:	2105      	movs	r1, #5
 800a37e:	2019      	movs	r0, #25
 800a380:	f7f7 fe1a 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a384:	2019      	movs	r0, #25
 800a386:	f7f7 fe33 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800a38a:	e022      	b.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a18      	ldr	r2, [pc, #96]	; (800a3f4 <HAL_TIM_Base_MspInit+0x168>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d10c      	bne.n	800a3b0 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800a396:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a39a:	4a11      	ldr	r2, [pc, #68]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a39c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3a0:	6453      	str	r3, [r2, #68]	; 0x44
 800a3a2:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
}
 800a3ae:	e010      	b.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a10      	ldr	r2, [pc, #64]	; (800a3f8 <HAL_TIM_Base_MspInit+0x16c>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d10b      	bne.n	800a3d2 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800a3ba:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3be:	4a08      	ldr	r2, [pc, #32]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a3c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a3c6:	4b06      	ldr	r3, [pc, #24]	; (800a3e0 <HAL_TIM_Base_MspInit+0x154>)
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ce:	60bb      	str	r3, [r7, #8]
 800a3d0:	68bb      	ldr	r3, [r7, #8]
}
 800a3d2:	bf00      	nop
 800a3d4:	3728      	adds	r7, #40	; 0x28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	40010000 	.word	0x40010000
 800a3e0:	40023800 	.word	0x40023800
 800a3e4:	40001400 	.word	0x40001400
 800a3e8:	40010400 	.word	0x40010400
 800a3ec:	40014000 	.word	0x40014000
 800a3f0:	40014400 	.word	0x40014400
 800a3f4:	40014800 	.word	0x40014800
 800a3f8:	40002000 	.word	0x40002000

0800a3fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a13      	ldr	r2, [pc, #76]	; (800a458 <HAL_TIM_PWM_MspInit+0x5c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d10c      	bne.n	800a428 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a40e:	4b13      	ldr	r3, [pc, #76]	; (800a45c <HAL_TIM_PWM_MspInit+0x60>)
 800a410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a412:	4a12      	ldr	r2, [pc, #72]	; (800a45c <HAL_TIM_PWM_MspInit+0x60>)
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	6413      	str	r3, [r2, #64]	; 0x40
 800a41a:	4b10      	ldr	r3, [pc, #64]	; (800a45c <HAL_TIM_PWM_MspInit+0x60>)
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a426:	e010      	b.n	800a44a <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a0c      	ldr	r2, [pc, #48]	; (800a460 <HAL_TIM_PWM_MspInit+0x64>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d10b      	bne.n	800a44a <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a432:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <HAL_TIM_PWM_MspInit+0x60>)
 800a434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a436:	4a09      	ldr	r2, [pc, #36]	; (800a45c <HAL_TIM_PWM_MspInit+0x60>)
 800a438:	f043 0304 	orr.w	r3, r3, #4
 800a43c:	6413      	str	r3, [r2, #64]	; 0x40
 800a43e:	4b07      	ldr	r3, [pc, #28]	; (800a45c <HAL_TIM_PWM_MspInit+0x60>)
 800a440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	60bb      	str	r3, [r7, #8]
 800a448:	68bb      	ldr	r3, [r7, #8]
}
 800a44a:	bf00      	nop
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr
 800a456:	bf00      	nop
 800a458:	40000400 	.word	0x40000400
 800a45c:	40023800 	.word	0x40023800
 800a460:	40000800 	.word	0x40000800

0800a464 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b092      	sub	sp, #72	; 0x48
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a46c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a470:	2200      	movs	r2, #0
 800a472:	601a      	str	r2, [r3, #0]
 800a474:	605a      	str	r2, [r3, #4]
 800a476:	609a      	str	r2, [r3, #8]
 800a478:	60da      	str	r2, [r3, #12]
 800a47a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4aa5      	ldr	r2, [pc, #660]	; (800a718 <HAL_TIM_MspPostInit+0x2b4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d11d      	bne.n	800a4c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a486:	4ba5      	ldr	r3, [pc, #660]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48a:	4aa4      	ldr	r2, [pc, #656]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a48c:	f043 0310 	orr.w	r3, r3, #16
 800a490:	6313      	str	r3, [r2, #48]	; 0x30
 800a492:	4ba2      	ldr	r3, [pc, #648]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a496:	f003 0310 	and.w	r3, r3, #16
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_0_Pin|PWM_1_Pin;
 800a49e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a4a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a4:	2302      	movs	r3, #2
 800a4a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a4b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4899      	ldr	r0, [pc, #612]	; (800a720 <HAL_TIM_MspPostInit+0x2bc>)
 800a4bc:	f7f8 f9ae 	bl	800281c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800a4c0:	e168      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM2)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4ca:	d13a      	bne.n	800a542 <HAL_TIM_MspPostInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a4cc:	4b93      	ldr	r3, [pc, #588]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a4ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d0:	4a92      	ldr	r2, [pc, #584]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a4d2:	f043 0302 	orr.w	r3, r3, #2
 800a4d6:	6313      	str	r3, [r2, #48]	; 0x30
 800a4d8:	4b90      	ldr	r3, [pc, #576]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4e4:	4b8d      	ldr	r3, [pc, #564]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e8:	4a8c      	ldr	r2, [pc, #560]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a4ea:	f043 0301 	orr.w	r3, r3, #1
 800a4ee:	6313      	str	r3, [r2, #48]	; 0x30
 800a4f0:	4b8a      	ldr	r3, [pc, #552]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = PWM_3_Pin|PWM_4_Pin;
 800a4fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a500:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a502:	2302      	movs	r3, #2
 800a504:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a506:	2300      	movs	r3, #0
 800a508:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a50a:	2300      	movs	r3, #0
 800a50c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a50e:	2301      	movs	r3, #1
 800a510:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a516:	4619      	mov	r1, r3
 800a518:	4882      	ldr	r0, [pc, #520]	; (800a724 <HAL_TIM_MspPostInit+0x2c0>)
 800a51a:	f7f8 f97f 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_2_Pin;
 800a51e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a522:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a524:	2302      	movs	r3, #2
 800a526:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a528:	2300      	movs	r3, #0
 800a52a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a52c:	2300      	movs	r3, #0
 800a52e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a530:	2301      	movs	r3, #1
 800a532:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_2_GPIO_Port, &GPIO_InitStruct);
 800a534:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a538:	4619      	mov	r1, r3
 800a53a:	487b      	ldr	r0, [pc, #492]	; (800a728 <HAL_TIM_MspPostInit+0x2c4>)
 800a53c:	f7f8 f96e 	bl	800281c <HAL_GPIO_Init>
}
 800a540:	e128      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM3)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a79      	ldr	r2, [pc, #484]	; (800a72c <HAL_TIM_MspPostInit+0x2c8>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d139      	bne.n	800a5c0 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a54c:	4b73      	ldr	r3, [pc, #460]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a550:	4a72      	ldr	r2, [pc, #456]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a552:	f043 0304 	orr.w	r3, r3, #4
 800a556:	6313      	str	r3, [r2, #48]	; 0x30
 800a558:	4b70      	ldr	r3, [pc, #448]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	627b      	str	r3, [r7, #36]	; 0x24
 800a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a564:	4b6d      	ldr	r3, [pc, #436]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a568:	4a6c      	ldr	r2, [pc, #432]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a56a:	f043 0302 	orr.w	r3, r3, #2
 800a56e:	6313      	str	r3, [r2, #48]	; 0x30
 800a570:	4b6a      	ldr	r3, [pc, #424]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	623b      	str	r3, [r7, #32]
 800a57a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = PWM_7_Pin|PWM_8_Pin;
 800a57c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a580:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a582:	2302      	movs	r3, #2
 800a584:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a586:	2300      	movs	r3, #0
 800a588:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a58a:	2300      	movs	r3, #0
 800a58c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a58e:	2302      	movs	r3, #2
 800a590:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a592:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a596:	4619      	mov	r1, r3
 800a598:	4865      	ldr	r0, [pc, #404]	; (800a730 <HAL_TIM_MspPostInit+0x2cc>)
 800a59a:	f7f8 f93f 	bl	800281c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PWM_5_Pin|PWM_6_Pin;
 800a59e:	2330      	movs	r3, #48	; 0x30
 800a5a0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5a2:	2302      	movs	r3, #2
 800a5a4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a5b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	485a      	ldr	r0, [pc, #360]	; (800a724 <HAL_TIM_MspPostInit+0x2c0>)
 800a5ba:	f7f8 f92f 	bl	800281c <HAL_GPIO_Init>
}
 800a5be:	e0e9      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM4)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a5b      	ldr	r2, [pc, #364]	; (800a734 <HAL_TIM_MspPostInit+0x2d0>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d11d      	bne.n	800a606 <HAL_TIM_MspPostInit+0x1a2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a5ca:	4b54      	ldr	r3, [pc, #336]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	4a53      	ldr	r2, [pc, #332]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a5d0:	f043 0308 	orr.w	r3, r3, #8
 800a5d4:	6313      	str	r3, [r2, #48]	; 0x30
 800a5d6:	4b51      	ldr	r3, [pc, #324]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f003 0308 	and.w	r3, r3, #8
 800a5de:	61fb      	str	r3, [r7, #28]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = PWM_9_Pin|PWM_10_Pin|PWM_11_Pin|PWM_12_Pin;
 800a5e2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a5e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a5f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	484e      	ldr	r0, [pc, #312]	; (800a738 <HAL_TIM_MspPostInit+0x2d4>)
 800a600:	f7f8 f90c 	bl	800281c <HAL_GPIO_Init>
}
 800a604:	e0c6      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM8)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a4c      	ldr	r2, [pc, #304]	; (800a73c <HAL_TIM_MspPostInit+0x2d8>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d11c      	bne.n	800a64a <HAL_TIM_MspPostInit+0x1e6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a610:	4b42      	ldr	r3, [pc, #264]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a614:	4a41      	ldr	r2, [pc, #260]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a616:	f043 0304 	orr.w	r3, r3, #4
 800a61a:	6313      	str	r3, [r2, #48]	; 0x30
 800a61c:	4b3f      	ldr	r3, [pc, #252]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	61bb      	str	r3, [r7, #24]
 800a626:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = PWM_13_Pin|PWM_14_Pin;
 800a628:	23c0      	movs	r3, #192	; 0xc0
 800a62a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a62c:	2302      	movs	r3, #2
 800a62e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a630:	2300      	movs	r3, #0
 800a632:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a634:	2300      	movs	r3, #0
 800a636:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a638:	2303      	movs	r3, #3
 800a63a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a63c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a640:	4619      	mov	r1, r3
 800a642:	483b      	ldr	r0, [pc, #236]	; (800a730 <HAL_TIM_MspPostInit+0x2cc>)
 800a644:	f7f8 f8ea 	bl	800281c <HAL_GPIO_Init>
}
 800a648:	e0a4      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM9)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a3c      	ldr	r2, [pc, #240]	; (800a740 <HAL_TIM_MspPostInit+0x2dc>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d11c      	bne.n	800a68e <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a654:	4b31      	ldr	r3, [pc, #196]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a658:	4a30      	ldr	r2, [pc, #192]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a65a:	f043 0310 	orr.w	r3, r3, #16
 800a65e:	6313      	str	r3, [r2, #48]	; 0x30
 800a660:	4b2e      	ldr	r3, [pc, #184]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a664:	f003 0310 	and.w	r3, r3, #16
 800a668:	617b      	str	r3, [r7, #20]
 800a66a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_15_Pin|PWM_16_Pin;
 800a66c:	2360      	movs	r3, #96	; 0x60
 800a66e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a670:	2302      	movs	r3, #2
 800a672:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a674:	2300      	movs	r3, #0
 800a676:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a678:	2300      	movs	r3, #0
 800a67a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800a67c:	2303      	movs	r3, #3
 800a67e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a680:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a684:	4619      	mov	r1, r3
 800a686:	4826      	ldr	r0, [pc, #152]	; (800a720 <HAL_TIM_MspPostInit+0x2bc>)
 800a688:	f7f8 f8c8 	bl	800281c <HAL_GPIO_Init>
}
 800a68c:	e082      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM10)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a2c      	ldr	r2, [pc, #176]	; (800a744 <HAL_TIM_MspPostInit+0x2e0>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d11c      	bne.n	800a6d2 <HAL_TIM_MspPostInit+0x26e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a698:	4b20      	ldr	r3, [pc, #128]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a69a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a69c:	4a1f      	ldr	r2, [pc, #124]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a69e:	f043 0320 	orr.w	r3, r3, #32
 800a6a2:	6313      	str	r3, [r2, #48]	; 0x30
 800a6a4:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a6a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a8:	f003 0320 	and.w	r3, r3, #32
 800a6ac:	613b      	str	r3, [r7, #16]
 800a6ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_17_Pin;
 800a6b0:	2340      	movs	r3, #64	; 0x40
 800a6b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b4:	2302      	movs	r3, #2
 800a6b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_17_GPIO_Port, &GPIO_InitStruct);
 800a6c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	481f      	ldr	r0, [pc, #124]	; (800a748 <HAL_TIM_MspPostInit+0x2e4>)
 800a6cc:	f7f8 f8a6 	bl	800281c <HAL_GPIO_Init>
}
 800a6d0:	e060      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
  else if(timHandle->Instance==TIM11)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1d      	ldr	r2, [pc, #116]	; (800a74c <HAL_TIM_MspPostInit+0x2e8>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d139      	bne.n	800a750 <HAL_TIM_MspPostInit+0x2ec>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a6dc:	4b0f      	ldr	r3, [pc, #60]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a6de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e0:	4a0e      	ldr	r2, [pc, #56]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a6e2:	f043 0320 	orr.w	r3, r3, #32
 800a6e6:	6313      	str	r3, [r2, #48]	; 0x30
 800a6e8:	4b0c      	ldr	r3, [pc, #48]	; (800a71c <HAL_TIM_MspPostInit+0x2b8>)
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ec:	f003 0320 	and.w	r3, r3, #32
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_18_Pin;
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a700:	2300      	movs	r3, #0
 800a702:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800a704:	2303      	movs	r3, #3
 800a706:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_18_GPIO_Port, &GPIO_InitStruct);
 800a708:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a70c:	4619      	mov	r1, r3
 800a70e:	480e      	ldr	r0, [pc, #56]	; (800a748 <HAL_TIM_MspPostInit+0x2e4>)
 800a710:	f7f8 f884 	bl	800281c <HAL_GPIO_Init>
}
 800a714:	e03e      	b.n	800a794 <HAL_TIM_MspPostInit+0x330>
 800a716:	bf00      	nop
 800a718:	40010000 	.word	0x40010000
 800a71c:	40023800 	.word	0x40023800
 800a720:	40021000 	.word	0x40021000
 800a724:	40020400 	.word	0x40020400
 800a728:	40020000 	.word	0x40020000
 800a72c:	40000400 	.word	0x40000400
 800a730:	40020800 	.word	0x40020800
 800a734:	40000800 	.word	0x40000800
 800a738:	40020c00 	.word	0x40020c00
 800a73c:	40010400 	.word	0x40010400
 800a740:	40014000 	.word	0x40014000
 800a744:	40014400 	.word	0x40014400
 800a748:	40021400 	.word	0x40021400
 800a74c:	40014800 	.word	0x40014800
  else if(timHandle->Instance==TIM14)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a11      	ldr	r2, [pc, #68]	; (800a79c <HAL_TIM_MspPostInit+0x338>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d11c      	bne.n	800a794 <HAL_TIM_MspPostInit+0x330>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a75a:	4b11      	ldr	r3, [pc, #68]	; (800a7a0 <HAL_TIM_MspPostInit+0x33c>)
 800a75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75e:	4a10      	ldr	r2, [pc, #64]	; (800a7a0 <HAL_TIM_MspPostInit+0x33c>)
 800a760:	f043 0320 	orr.w	r3, r3, #32
 800a764:	6313      	str	r3, [r2, #48]	; 0x30
 800a766:	4b0e      	ldr	r3, [pc, #56]	; (800a7a0 <HAL_TIM_MspPostInit+0x33c>)
 800a768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	60bb      	str	r3, [r7, #8]
 800a770:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWM_19_Pin;
 800a772:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a776:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a778:	2302      	movs	r3, #2
 800a77a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a780:	2300      	movs	r3, #0
 800a782:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800a784:	2309      	movs	r3, #9
 800a786:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(PWM_19_GPIO_Port, &GPIO_InitStruct);
 800a788:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a78c:	4619      	mov	r1, r3
 800a78e:	4805      	ldr	r0, [pc, #20]	; (800a7a4 <HAL_TIM_MspPostInit+0x340>)
 800a790:	f7f8 f844 	bl	800281c <HAL_GPIO_Init>
}
 800a794:	bf00      	nop
 800a796:	3748      	adds	r7, #72	; 0x48
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	40002000 	.word	0x40002000
 800a7a0:	40023800 	.word	0x40023800
 800a7a4:	40021400 	.word	0x40021400

0800a7a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800a7ac:	4b14      	ldr	r3, [pc, #80]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7ae:	4a15      	ldr	r2, [pc, #84]	; (800a804 <MX_USART1_UART_Init+0x5c>)
 800a7b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800a7b2:	4b13      	ldr	r3, [pc, #76]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a7b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a7ba:	4b11      	ldr	r3, [pc, #68]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a7c0:	4b0f      	ldr	r3, [pc, #60]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a7c6:	4b0e      	ldr	r3, [pc, #56]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a7cc:	4b0c      	ldr	r3, [pc, #48]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7ce:	220c      	movs	r2, #12
 800a7d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a7d2:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a7d8:	4b09      	ldr	r3, [pc, #36]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a7de:	4b08      	ldr	r3, [pc, #32]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a7ea:	4805      	ldr	r0, [pc, #20]	; (800a800 <MX_USART1_UART_Init+0x58>)
 800a7ec:	f7fb fd38 	bl	8006260 <HAL_UART_Init>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800a7f6:	f7fe fb67 	bl	8008ec8 <Error_Handler>
  }

}
 800a7fa:	bf00      	nop
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	2000aef4 	.word	0x2000aef4
 800a804:	40011000 	.word	0x40011000

0800a808 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800a80c:	4b14      	ldr	r3, [pc, #80]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a80e:	4a15      	ldr	r2, [pc, #84]	; (800a864 <MX_USART2_UART_Init+0x5c>)
 800a810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a812:	4b13      	ldr	r3, [pc, #76]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a81a:	4b11      	ldr	r3, [pc, #68]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a822:	2200      	movs	r2, #0
 800a824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a826:	4b0e      	ldr	r3, [pc, #56]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a828:	2200      	movs	r2, #0
 800a82a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a82c:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a82e:	220c      	movs	r2, #12
 800a830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a832:	4b0b      	ldr	r3, [pc, #44]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a834:	2200      	movs	r2, #0
 800a836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a838:	4b09      	ldr	r3, [pc, #36]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a83a:	2200      	movs	r2, #0
 800a83c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a83e:	4b08      	ldr	r3, [pc, #32]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a840:	2200      	movs	r2, #0
 800a842:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a846:	2200      	movs	r2, #0
 800a848:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a84a:	4805      	ldr	r0, [pc, #20]	; (800a860 <MX_USART2_UART_Init+0x58>)
 800a84c:	f7fb fd08 	bl	8006260 <HAL_UART_Init>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d001      	beq.n	800a85a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a856:	f7fe fb37 	bl	8008ec8 <Error_Handler>
  }

}
 800a85a:	bf00      	nop
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	2000af74 	.word	0x2000af74
 800a864:	40004400 	.word	0x40004400

0800a868 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800a86c:	4b14      	ldr	r3, [pc, #80]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a86e:	4a15      	ldr	r2, [pc, #84]	; (800a8c4 <MX_USART3_UART_Init+0x5c>)
 800a870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800a872:	4b13      	ldr	r3, [pc, #76]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a874:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800a878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a87a:	4b11      	ldr	r3, [pc, #68]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a880:	4b0f      	ldr	r3, [pc, #60]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a882:	2200      	movs	r2, #0
 800a884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a886:	4b0e      	ldr	r3, [pc, #56]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a888:	2200      	movs	r2, #0
 800a88a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a88c:	4b0c      	ldr	r3, [pc, #48]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a88e:	220c      	movs	r2, #12
 800a890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a892:	4b0b      	ldr	r3, [pc, #44]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a894:	2200      	movs	r2, #0
 800a896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a898:	4b09      	ldr	r3, [pc, #36]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a89e:	4b08      	ldr	r3, [pc, #32]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a8a4:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a8aa:	4805      	ldr	r0, [pc, #20]	; (800a8c0 <MX_USART3_UART_Init+0x58>)
 800a8ac:	f7fb fcd8 	bl	8006260 <HAL_UART_Init>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a8b6:	f7fe fb07 	bl	8008ec8 <Error_Handler>
  }

}
 800a8ba:	bf00      	nop
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	2000ad54 	.word	0x2000ad54
 800a8c4:	40004800 	.word	0x40004800

0800a8c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08e      	sub	sp, #56	; 0x38
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	605a      	str	r2, [r3, #4]
 800a8da:	609a      	str	r2, [r3, #8]
 800a8dc:	60da      	str	r2, [r3, #12]
 800a8de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a6c      	ldr	r2, [pc, #432]	; (800aa98 <HAL_UART_MspInit+0x1d0>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	f040 809f 	bne.w	800aa2a <HAL_UART_MspInit+0x162>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a8ec:	4b6b      	ldr	r3, [pc, #428]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800a8ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f0:	4a6a      	ldr	r2, [pc, #424]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800a8f2:	f043 0310 	orr.w	r3, r3, #16
 800a8f6:	6453      	str	r3, [r2, #68]	; 0x44
 800a8f8:	4b68      	ldr	r3, [pc, #416]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800a8fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	623b      	str	r3, [r7, #32]
 800a902:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a904:	4b65      	ldr	r3, [pc, #404]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800a906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a908:	4a64      	ldr	r2, [pc, #400]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800a90a:	f043 0302 	orr.w	r3, r3, #2
 800a90e:	6313      	str	r3, [r2, #48]	; 0x30
 800a910:	4b62      	ldr	r3, [pc, #392]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800a912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	61fb      	str	r3, [r7, #28]
 800a91a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800a91c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a922:	2302      	movs	r3, #2
 800a924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a926:	2302      	movs	r3, #2
 800a928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a92a:	2303      	movs	r3, #3
 800a92c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800a92e:	2304      	movs	r3, #4
 800a930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a936:	4619      	mov	r1, r3
 800a938:	4859      	ldr	r0, [pc, #356]	; (800aaa0 <HAL_UART_MspInit+0x1d8>)
 800a93a:	f7f7 ff6f 	bl	800281c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800a93e:	2340      	movs	r3, #64	; 0x40
 800a940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a942:	2302      	movs	r3, #2
 800a944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a946:	2302      	movs	r3, #2
 800a948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a94a:	2303      	movs	r3, #3
 800a94c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a94e:	2307      	movs	r3, #7
 800a950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a956:	4619      	mov	r1, r3
 800a958:	4851      	ldr	r0, [pc, #324]	; (800aaa0 <HAL_UART_MspInit+0x1d8>)
 800a95a:	f7f7 ff5f 	bl	800281c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800a95e:	4b51      	ldr	r3, [pc, #324]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a960:	4a51      	ldr	r2, [pc, #324]	; (800aaa8 <HAL_UART_MspInit+0x1e0>)
 800a962:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a964:	4b4f      	ldr	r3, [pc, #316]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a96a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a96c:	4b4d      	ldr	r3, [pc, #308]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a96e:	2200      	movs	r2, #0
 800a970:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a972:	4b4c      	ldr	r3, [pc, #304]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a974:	2200      	movs	r2, #0
 800a976:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a978:	4b4a      	ldr	r3, [pc, #296]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a97a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a97e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a980:	4b48      	ldr	r3, [pc, #288]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a982:	2200      	movs	r2, #0
 800a984:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a986:	4b47      	ldr	r3, [pc, #284]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a988:	2200      	movs	r2, #0
 800a98a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a98c:	4b45      	ldr	r3, [pc, #276]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a98e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a992:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a994:	4b43      	ldr	r3, [pc, #268]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a996:	2200      	movs	r2, #0
 800a998:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a99a:	4b42      	ldr	r3, [pc, #264]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a9a0:	4840      	ldr	r0, [pc, #256]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a9a2:	f7f7 fb33 	bl	800200c <HAL_DMA_Init>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 800a9ac:	f7fe fa8c 	bl	8008ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a3c      	ldr	r2, [pc, #240]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a9b4:	66da      	str	r2, [r3, #108]	; 0x6c
 800a9b6:	4a3b      	ldr	r2, [pc, #236]	; (800aaa4 <HAL_UART_MspInit+0x1dc>)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a9bc:	4b3b      	ldr	r3, [pc, #236]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9be:	4a3c      	ldr	r2, [pc, #240]	; (800aab0 <HAL_UART_MspInit+0x1e8>)
 800a9c0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a9c2:	4b3a      	ldr	r3, [pc, #232]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a9c8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9ca:	4b38      	ldr	r3, [pc, #224]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9cc:	2240      	movs	r2, #64	; 0x40
 800a9ce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9d0:	4b36      	ldr	r3, [pc, #216]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a9d6:	4b35      	ldr	r3, [pc, #212]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9dc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9de:	4b33      	ldr	r3, [pc, #204]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9e4:	4b31      	ldr	r3, [pc, #196]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a9ea:	4b30      	ldr	r3, [pc, #192]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a9f0:	4b2e      	ldr	r3, [pc, #184]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9f6:	4b2d      	ldr	r3, [pc, #180]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a9fc:	482b      	ldr	r0, [pc, #172]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800a9fe:	f7f7 fb05 	bl	800200c <HAL_DMA_Init>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d001      	beq.n	800aa0c <HAL_UART_MspInit+0x144>
    {
      Error_Handler();
 800aa08:	f7fe fa5e 	bl	8008ec8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a27      	ldr	r2, [pc, #156]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800aa10:	669a      	str	r2, [r3, #104]	; 0x68
 800aa12:	4a26      	ldr	r2, [pc, #152]	; (800aaac <HAL_UART_MspInit+0x1e4>)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2105      	movs	r1, #5
 800aa1c:	2025      	movs	r0, #37	; 0x25
 800aa1e:	f7f7 facb 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800aa22:	2025      	movs	r0, #37	; 0x25
 800aa24:	f7f7 fae4 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800aa28:	e0dd      	b.n	800abe6 <HAL_UART_MspInit+0x31e>
  else if(uartHandle->Instance==USART2)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a21      	ldr	r2, [pc, #132]	; (800aab4 <HAL_UART_MspInit+0x1ec>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d143      	bne.n	800aabc <HAL_UART_MspInit+0x1f4>
    __HAL_RCC_USART2_CLK_ENABLE();
 800aa34:	4b19      	ldr	r3, [pc, #100]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	4a18      	ldr	r2, [pc, #96]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800aa3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa3e:	6413      	str	r3, [r2, #64]	; 0x40
 800aa40:	4b16      	ldr	r3, [pc, #88]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800aa42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa4c:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800aa4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa50:	4a12      	ldr	r2, [pc, #72]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800aa52:	f043 0308 	orr.w	r3, r3, #8
 800aa56:	6313      	str	r3, [r2, #48]	; 0x30
 800aa58:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <HAL_UART_MspInit+0x1d4>)
 800aa5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa5c:	f003 0308 	and.w	r3, r3, #8
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800aa64:	2360      	movs	r3, #96	; 0x60
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa68:	2302      	movs	r3, #2
 800aa6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa70:	2303      	movs	r3, #3
 800aa72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aa74:	2307      	movs	r3, #7
 800aa76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800aa78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	480e      	ldr	r0, [pc, #56]	; (800aab8 <HAL_UART_MspInit+0x1f0>)
 800aa80:	f7f7 fecc 	bl	800281c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800aa84:	2200      	movs	r2, #0
 800aa86:	2105      	movs	r1, #5
 800aa88:	2026      	movs	r0, #38	; 0x26
 800aa8a:	f7f7 fa95 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800aa8e:	2026      	movs	r0, #38	; 0x26
 800aa90:	f7f7 faae 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800aa94:	e0a7      	b.n	800abe6 <HAL_UART_MspInit+0x31e>
 800aa96:	bf00      	nop
 800aa98:	40011000 	.word	0x40011000
 800aa9c:	40023800 	.word	0x40023800
 800aaa0:	40020400 	.word	0x40020400
 800aaa4:	2000ae94 	.word	0x2000ae94
 800aaa8:	40026488 	.word	0x40026488
 800aaac:	2000ae34 	.word	0x2000ae34
 800aab0:	400264b8 	.word	0x400264b8
 800aab4:	40004400 	.word	0x40004400
 800aab8:	40020c00 	.word	0x40020c00
  else if(uartHandle->Instance==USART3)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a4b      	ldr	r2, [pc, #300]	; (800abf0 <HAL_UART_MspInit+0x328>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	f040 808f 	bne.w	800abe6 <HAL_UART_MspInit+0x31e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800aac8:	4b4a      	ldr	r3, [pc, #296]	; (800abf4 <HAL_UART_MspInit+0x32c>)
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	4a49      	ldr	r2, [pc, #292]	; (800abf4 <HAL_UART_MspInit+0x32c>)
 800aace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aad2:	6413      	str	r3, [r2, #64]	; 0x40
 800aad4:	4b47      	ldr	r3, [pc, #284]	; (800abf4 <HAL_UART_MspInit+0x32c>)
 800aad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aadc:	613b      	str	r3, [r7, #16]
 800aade:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800aae0:	4b44      	ldr	r3, [pc, #272]	; (800abf4 <HAL_UART_MspInit+0x32c>)
 800aae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae4:	4a43      	ldr	r2, [pc, #268]	; (800abf4 <HAL_UART_MspInit+0x32c>)
 800aae6:	f043 0308 	orr.w	r3, r3, #8
 800aaea:	6313      	str	r3, [r2, #48]	; 0x30
 800aaec:	4b41      	ldr	r3, [pc, #260]	; (800abf4 <HAL_UART_MspInit+0x32c>)
 800aaee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaf0:	f003 0308 	and.w	r3, r3, #8
 800aaf4:	60fb      	str	r3, [r7, #12]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800aaf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aafe:	2302      	movs	r3, #2
 800ab00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800ab02:	2302      	movs	r3, #2
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab06:	2303      	movs	r3, #3
 800ab08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ab0a:	2307      	movs	r3, #7
 800ab0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab12:	4619      	mov	r1, r3
 800ab14:	4838      	ldr	r0, [pc, #224]	; (800abf8 <HAL_UART_MspInit+0x330>)
 800ab16:	f7f7 fe81 	bl	800281c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800ab1a:	4b38      	ldr	r3, [pc, #224]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab1c:	4a38      	ldr	r2, [pc, #224]	; (800ac00 <HAL_UART_MspInit+0x338>)
 800ab1e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800ab20:	4b36      	ldr	r3, [pc, #216]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab26:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ab28:	4b34      	ldr	r3, [pc, #208]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab2e:	4b33      	ldr	r3, [pc, #204]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab30:	2200      	movs	r2, #0
 800ab32:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ab34:	4b31      	ldr	r3, [pc, #196]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab3a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab3c:	4b2f      	ldr	r3, [pc, #188]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab42:	4b2e      	ldr	r3, [pc, #184]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800ab48:	4b2c      	ldr	r3, [pc, #176]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800ab4e:	4b2b      	ldr	r3, [pc, #172]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ab54:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ab56:	4b29      	ldr	r3, [pc, #164]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800ab5c:	4827      	ldr	r0, [pc, #156]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab5e:	f7f7 fa55 	bl	800200c <HAL_DMA_Init>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <HAL_UART_MspInit+0x2a4>
      Error_Handler();
 800ab68:	f7fe f9ae 	bl	8008ec8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a23      	ldr	r2, [pc, #140]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab70:	66da      	str	r2, [r3, #108]	; 0x6c
 800ab72:	4a22      	ldr	r2, [pc, #136]	; (800abfc <HAL_UART_MspInit+0x334>)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream4;
 800ab78:	4b22      	ldr	r3, [pc, #136]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800ab7a:	4a23      	ldr	r2, [pc, #140]	; (800ac08 <HAL_UART_MspInit+0x340>)
 800ab7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_7;
 800ab7e:	4b21      	ldr	r3, [pc, #132]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800ab80:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ab84:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab86:	4b1f      	ldr	r3, [pc, #124]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800ab88:	2240      	movs	r2, #64	; 0x40
 800ab8a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab8c:	4b1d      	ldr	r3, [pc, #116]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ab92:	4b1c      	ldr	r3, [pc, #112]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800ab94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab98:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ab9a:	4b1a      	ldr	r3, [pc, #104]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800aba0:	4b18      	ldr	r3, [pc, #96]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800aba6:	4b17      	ldr	r3, [pc, #92]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800abac:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800abae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800abb2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800abb4:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800abba:	4812      	ldr	r0, [pc, #72]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800abbc:	f7f7 fa26 	bl	800200c <HAL_DMA_Init>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <HAL_UART_MspInit+0x302>
      Error_Handler();
 800abc6:	f7fe f97f 	bl	8008ec8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a0d      	ldr	r2, [pc, #52]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800abce:	669a      	str	r2, [r3, #104]	; 0x68
 800abd0:	4a0c      	ldr	r2, [pc, #48]	; (800ac04 <HAL_UART_MspInit+0x33c>)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800abd6:	2200      	movs	r2, #0
 800abd8:	2105      	movs	r1, #5
 800abda:	2027      	movs	r0, #39	; 0x27
 800abdc:	f7f7 f9ec 	bl	8001fb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800abe0:	2027      	movs	r0, #39	; 0x27
 800abe2:	f7f7 fa05 	bl	8001ff0 <HAL_NVIC_EnableIRQ>
}
 800abe6:	bf00      	nop
 800abe8:	3738      	adds	r7, #56	; 0x38
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	40004800 	.word	0x40004800
 800abf4:	40023800 	.word	0x40023800
 800abf8:	40020c00 	.word	0x40020c00
 800abfc:	2000acf4 	.word	0x2000acf4
 800ac00:	40026028 	.word	0x40026028
 800ac04:	2000add4 	.word	0x2000add4
 800ac08:	40026070 	.word	0x40026070

0800ac0c <AD_CS_LOW>:
AD_BOARDS *ptADBoardDevices=&ADBoardDevices;


/******************************AD7616 Device**********************************/
static void AD_CS_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,LOW);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac1a:	2100      	movs	r1, #0
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	f001 fc84 	bl	800c52a <DigitalWrite>
}
 800ac22:	bf00      	nop
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <AD_CS_HIGH>:

static void AD_CS_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b082      	sub	sp, #8
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CS_DO_x,HIGH);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac38:	2101      	movs	r1, #1
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 fc75 	bl	800c52a <DigitalWrite>
}
 800ac40:	bf00      	nop
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <AD_CONV_LOW>:
static void AD_CONV_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,LOW);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac56:	2100      	movs	r1, #0
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f001 fc66 	bl	800c52a <DigitalWrite>
}
 800ac5e:	bf00      	nop
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}

0800ac66 <AD_CONV_HIGH>:

static void AD_CONV_HIGH(AD7616_DEVICE *ptADDevice)
{
 800ac66:	b580      	push	{r7, lr}
 800ac68:	b082      	sub	sp, #8
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->CONV_DO_x,HIGH);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac74:	2101      	movs	r1, #1
 800ac76:	4618      	mov	r0, r3
 800ac78:	f001 fc57 	bl	800c52a <DigitalWrite>
}
 800ac7c:	bf00      	nop
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <AD_RESET_LOW>:

static void AD_RESET_LOW(AD7616_DEVICE *ptADDevice)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,LOW);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ac92:	2100      	movs	r1, #0
 800ac94:	4618      	mov	r0, r3
 800ac96:	f001 fc48 	bl	800c52a <DigitalWrite>
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <AD_RESET_HIGH>:

static void AD_RESET_HIGH(AD7616_DEVICE *ptADDevice)
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b082      	sub	sp, #8
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
	DigitalWrite(ptADDevice->RESET_DO_x,HIGH);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800acb0:	2101      	movs	r1, #1
 800acb2:	4618      	mov	r0, r3
 800acb4:	f001 fc39 	bl	800c52a <DigitalWrite>
}
 800acb8:	bf00      	nop
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <AD7616_getVoltage>:


static void AD7616_getVoltage(AD7616_DEVICE *ptADDev)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	ptADDev->chosen = 1;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	 if (ADBOARD_TYPE==AD7616){
	AD_CONV_HIGH(ptADDev);
	delay_ns(200);
	AD_CONV_LOW(ptADDev);}
	else if (ADBOARD_TYPE==AD7606){
	AD_CONV_LOW(ptADDev);
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f7ff ffb9 	bl	800ac48 <AD_CONV_LOW>
	delay_ns(200);
 800acd6:	20c8      	movs	r0, #200	; 0xc8
 800acd8:	f001 fcac 	bl	800c634 <delay_ns>
	AD_CONV_HIGH(ptADDev);}
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ffc2 	bl	800ac66 <AD_CONV_HIGH>
	ptADDev->ucDataFlag = 0;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
}
 800acea:	bf00      	nop
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <ADBoard_BUSYCallback>:
static uint16_t ulDummyWord[16]={0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF,0xFFFF};

int ADBoard_BUSYCallback(uint16_t Int_x)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	80fb      	strh	r3, [r7, #6]
	int ret=1;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]
	for(int i=0;i<ADBOARD_NUM;i++)
 800ad02:	2300      	movs	r3, #0
 800ad04:	613b      	str	r3, [r7, #16]
 800ad06:	e024      	b.n	800ad52 <ADBoard_BUSYCallback+0x5e>
	{
		AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ad08:	4b16      	ldr	r3, [pc, #88]	; (800ad64 <ADBoard_BUSYCallback+0x70>)
 800ad0a:	6819      	ldr	r1, [r3, #0]
 800ad0c:	693a      	ldr	r2, [r7, #16]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	011b      	lsls	r3, r3, #4
 800ad16:	440b      	add	r3, r1
 800ad18:	60fb      	str	r3, [r7, #12]
		if (Int_x == ptADDev->BUSY_INT_x)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ad20:	88fa      	ldrh	r2, [r7, #6]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d112      	bne.n	800ad4c <ADBoard_BUSYCallback+0x58>
			{
				ptADBoardDevices->curADBoardNum=i;
 800ad26:	4b0f      	ldr	r3, [pc, #60]	; (800ad64 <ADBoard_BUSYCallback+0x70>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	693a      	ldr	r2, [r7, #16]
 800ad2c:	b292      	uxth	r2, r2
 800ad2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				AD_CS_LOW(ptADDev);
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff ff6a 	bl	800ac0c <AD_CS_LOW>
				HAL_SPI_TransmitReceive_DMA(ptADDev->AD_spi,(uint8_t *)ulDummyWord,(uint8_t *)ptADDev->uChannel, AD76x6_CHANNELNUM);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	2308      	movs	r3, #8
 800ad40:	4909      	ldr	r1, [pc, #36]	; (800ad68 <ADBoard_BUSYCallback+0x74>)
 800ad42:	f7f9 fc57 	bl	80045f4 <HAL_SPI_TransmitReceive_DMA>
				ret=0;
 800ad46:	2300      	movs	r3, #0
 800ad48:	617b      	str	r3, [r7, #20]
				break;
 800ad4a:	e005      	b.n	800ad58 <ADBoard_BUSYCallback+0x64>
	for(int i=0;i<ADBOARD_NUM;i++)
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	3301      	adds	r3, #1
 800ad50:	613b      	str	r3, [r7, #16]
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	ddd7      	ble.n	800ad08 <ADBoard_BUSYCallback+0x14>
			}
	}
	return ret;
 800ad58:	697b      	ldr	r3, [r7, #20]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000010 	.word	0x20000010
 800ad68:	20000014 	.word	0x20000014

0800ad6c <ADBoard_SPICallback>:

int ADBoard_SPICallback(SPI_HandleTypeDef *hspi)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b086      	sub	sp, #24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
	int ret=1;
 800ad74:	2301      	movs	r3, #1
 800ad76:	617b      	str	r3, [r7, #20]
		for(int i=0;i<ADBOARD_NUM;i++)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	613b      	str	r3, [r7, #16]
 800ad7c:	e081      	b.n	800ae82 <ADBoard_SPICallback+0x116>
		{
			AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[i]);
 800ad7e:	4b45      	ldr	r3, [pc, #276]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ad80:	6819      	ldr	r1, [r3, #0]
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	4613      	mov	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4413      	add	r3, r2
 800ad8a:	011b      	lsls	r3, r3, #4
 800ad8c:	440b      	add	r3, r1
 800ad8e:	60bb      	str	r3, [r7, #8]
			if (hspi == ptADDev->AD_spi)
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d170      	bne.n	800ae7c <ADBoard_SPICallback+0x110>
				{
					ptADBoardDevices->curADBoardNum=i;
 800ad9a:	4b3e      	ldr	r3, [pc, #248]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	b292      	uxth	r2, r2
 800ada2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
					AD_CS_HIGH(ptADDev);
 800ada6:	68b8      	ldr	r0, [r7, #8]
 800ada8:	f7ff ff3f 	bl	800ac2a <AD_CS_HIGH>
					ptADDev->ucDataFlag = 1;
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	2201      	movs	r2, #1
 800adb0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					ptADDev->chosen = 0;
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800adbc:	2300      	movs	r3, #0
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	e01a      	b.n	800adf8 <ADBoard_SPICallback+0x8c>
						ptADDev->fChannel[j]=((int16_t)ptADDev->uChannel[j])/65536.0f*ptADDev->fRange;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	68fa      	ldr	r2, [r7, #12]
 800adc6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800add2:	eddf 6a31 	vldr	s13, [pc, #196]	; 800ae98 <ADBoard_SPICallback+0x12c>
 800add6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800ade0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3304      	adds	r3, #4
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	edc3 7a00 	vstr	s15, [r3]
					for(int j=0;j<AD76x6_CHANNELNUM;j++)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3301      	adds	r3, #1
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2b07      	cmp	r3, #7
 800adfc:	dde1      	ble.n	800adc2 <ADBoard_SPICallback+0x56>
					if(ptADBoardDevices->curADBoardNum + 1 <ADBOARD_NUM)
 800adfe:	4b25      	ldr	r3, [pc, #148]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae06:	3301      	adds	r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	dc19      	bgt.n	800ae40 <ADBoard_SPICallback+0xd4>
					{
						ptADBoardDevices->curADBoardNum +=1;
 800ae0c:	4b21      	ldr	r3, [pc, #132]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800ae14:	4b1f      	ldr	r3, [pc, #124]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3201      	adds	r2, #1
 800ae1a:	b292      	uxth	r2, r2
 800ae1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

						AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800ae20:	4b1c      	ldr	r3, [pc, #112]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	4b1b      	ldr	r3, [pc, #108]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	460b      	mov	r3, r1
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	4413      	add	r3, r2
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff ff41 	bl	800acc0 <AD7616_getVoltage>
 800ae3e:	e01a      	b.n	800ae76 <ADBoard_SPICallback+0x10a>
					}
					else
					{
						ptADBoardDevices->curADBoardNum = -1;
 800ae40:	4b14      	ldr	r3, [pc, #80]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae48:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
						ptADBoardDevices->ucDataFlag = 1;
 800ae4c:	4b11      	ldr	r3, [pc, #68]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
						ptADBoardDevices->ADTimeEnd=micros();
 800ae56:	f001 fbbd 	bl	800c5d4 <micros>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	4b0d      	ldr	r3, [pc, #52]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	65da      	str	r2, [r3, #92]	; 0x5c
						ptADBoardDevices->ADTime=ptADBoardDevices->ADTimeEnd-ptADBoardDevices->ADTimeStart;
 800ae62:	4b0c      	ldr	r3, [pc, #48]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ae68:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ae6e:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <ADBoard_SPICallback+0x128>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	1a8a      	subs	r2, r1, r2
 800ae74:	655a      	str	r2, [r3, #84]	; 0x54
					}
					ret=0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	617b      	str	r3, [r7, #20]
					break;
 800ae7a:	e006      	b.n	800ae8a <ADBoard_SPICallback+0x11e>
		for(int i=0;i<ADBOARD_NUM;i++)
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	613b      	str	r3, [r7, #16]
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f77f af7a 	ble.w	800ad7e <ADBoard_SPICallback+0x12>
				}

		}
	return ret;
 800ae8a:	697b      	ldr	r3, [r7, #20]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3718      	adds	r7, #24
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20000010 	.word	0x20000010
 800ae98:	47800000 	.word	0x47800000

0800ae9c <ADBoard_Reset>:

void ADBoard_Reset()
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b082      	sub	sp, #8
 800aea0:	af00      	add	r7, sp, #0
	delay_us(5);
	AD_RESET_LOW(ptADDev);
	delay_us(5);
	AD_RESET_HIGH(ptADDev);}
 else if (ADBOARD_TYPE==AD7606){
	AD7616_DEVICE *ptADDev=&(ptADBoardDevices->ADBoards[0]);
 800aea2:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <ADBoard_Reset+0x34>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	607b      	str	r3, [r7, #4]
	AD_RESET_LOW(ptADDev);
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff feeb 	bl	800ac84 <AD_RESET_LOW>
	delay_us(5);
 800aeae:	2005      	movs	r0, #5
 800aeb0:	f001 fba6 	bl	800c600 <delay_us>
	AD_RESET_HIGH(ptADDev);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7ff fef4 	bl	800aca2 <AD_RESET_HIGH>
	delay_us(5);
 800aeba:	2005      	movs	r0, #5
 800aebc:	f001 fba0 	bl	800c600 <delay_us>
	AD_RESET_LOW(ptADDev);}
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff fedf 	bl	800ac84 <AD_RESET_LOW>

}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	20000010 	.word	0x20000010

0800aed4 <ADBoard_updateVoltage>:

void ADBoard_updateVoltage()
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	af00      	add	r7, sp, #0
	ptADBoardDevices->ucDataFlag=0;
 800aed8:	4b10      	ldr	r3, [pc, #64]	; (800af1c <ADBoard_updateVoltage+0x48>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2200      	movs	r2, #0
 800aede:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->curADBoardNum = 0;
 800aee2:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <ADBoard_updateVoltage+0x48>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2200      	movs	r2, #0
 800aee8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ADTimeStart=micros();
 800aeec:	f001 fb72 	bl	800c5d4 <micros>
 800aef0:	4602      	mov	r2, r0
 800aef2:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <ADBoard_updateVoltage+0x48>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	659a      	str	r2, [r3, #88]	; 0x58
	AD7616_getVoltage(&(ptADBoardDevices->ADBoards[ptADBoardDevices->curADBoardNum]));
 800aef8:	4b08      	ldr	r3, [pc, #32]	; (800af1c <ADBoard_updateVoltage+0x48>)
 800aefa:	681a      	ldr	r2, [r3, #0]
 800aefc:	4b07      	ldr	r3, [pc, #28]	; (800af1c <ADBoard_updateVoltage+0x48>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af04:	4619      	mov	r1, r3
 800af06:	460b      	mov	r3, r1
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	440b      	add	r3, r1
 800af0c:	011b      	lsls	r3, r3, #4
 800af0e:	4413      	add	r3, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff fed5 	bl	800acc0 <AD7616_getVoltage>
}
 800af16:	bf00      	nop
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	20000010 	.word	0x20000010

0800af20 <AnalogRead_External>:

float AnalogRead_External(uint16_t num) {
 800af20:	b480      	push	{r7}
 800af22:	b085      	sub	sp, #20
 800af24:	af00      	add	r7, sp, #0
 800af26:	4603      	mov	r3, r0
 800af28:	80fb      	strh	r3, [r7, #6]
	if (0<=num && num<EXTERNAL_ANA_IN_NUM)
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	2b07      	cmp	r3, #7
 800af2e:	d814      	bhi.n	800af5a <AnalogRead_External+0x3a>
	{
		uint16_t boardnum=num/AD76x6_CHANNELNUM;
 800af30:	88fb      	ldrh	r3, [r7, #6]
 800af32:	08db      	lsrs	r3, r3, #3
 800af34:	81fb      	strh	r3, [r7, #14]
		uint16_t channelnum=num%AD76x6_CHANNELNUM;
 800af36:	88fb      	ldrh	r3, [r7, #6]
 800af38:	f003 0307 	and.w	r3, r3, #7
 800af3c:	81bb      	strh	r3, [r7, #12]
		return ptADBoardDevices->ADBoards[boardnum].fChannel[channelnum];
 800af3e:	4b0c      	ldr	r3, [pc, #48]	; (800af70 <AnalogRead_External+0x50>)
 800af40:	6819      	ldr	r1, [r3, #0]
 800af42:	89fa      	ldrh	r2, [r7, #14]
 800af44:	89b8      	ldrh	r0, [r7, #12]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4403      	add	r3, r0
 800af50:	3304      	adds	r3, #4
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	440b      	add	r3, r1
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	e001      	b.n	800af5e <AnalogRead_External+0x3e>
	}
	else
		return 0;
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	ee07 3a90 	vmov	s15, r3
}
 800af62:	eeb0 0a67 	vmov.f32	s0, s15
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	20000010 	.word	0x20000010

0800af74 <ADBoard_Init>:

void ADBoard_Init()
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
	uint8_t CONV_DO_x=11;
 800af7a:	230b      	movs	r3, #11
 800af7c:	71fb      	strb	r3, [r7, #7]
	uint8_t RESET_DO_x=12;
 800af7e:	230c      	movs	r3, #12
 800af80:	71bb      	strb	r3, [r7, #6]
	uint8_t CS_DO_x=13;
 800af82:	230d      	movs	r3, #13
 800af84:	717b      	strb	r3, [r7, #5]
	uint8_t BUSY_INT_x=3;
 800af86:	2303      	movs	r3, #3
 800af88:	713b      	strb	r3, [r7, #4]
	ptADBoardDevices->curADBoardNum=-1;
 800af8a:	4b28      	ldr	r3, [pc, #160]	; (800b02c <ADBoard_Init+0xb8>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af92:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	ptADBoardDevices->ucDataFlag = 0;
 800af96:	4b25      	ldr	r3, [pc, #148]	; (800b02c <ADBoard_Init+0xb8>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	ptADBoardDevices->ADTime=0;
 800afa0:	4b22      	ldr	r3, [pc, #136]	; (800b02c <ADBoard_Init+0xb8>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2200      	movs	r2, #0
 800afa6:	655a      	str	r2, [r3, #84]	; 0x54
	ptADBoardDevices->ADTimeStart=0;
 800afa8:	4b20      	ldr	r3, [pc, #128]	; (800b02c <ADBoard_Init+0xb8>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	2200      	movs	r2, #0
 800afae:	659a      	str	r2, [r3, #88]	; 0x58
	ptADBoardDevices->ADTimeEnd=0;
 800afb0:	4b1e      	ldr	r3, [pc, #120]	; (800b02c <ADBoard_Init+0xb8>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	2200      	movs	r2, #0
 800afb6:	65da      	str	r2, [r3, #92]	; 0x5c

	ptADBoardDevices->ADBoards[0].fMinVoltage = -10;
 800afb8:	4b1c      	ldr	r3, [pc, #112]	; (800b02c <ADBoard_Init+0xb8>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a1c      	ldr	r2, [pc, #112]	; (800b030 <ADBoard_Init+0xbc>)
 800afbe:	631a      	str	r2, [r3, #48]	; 0x30
	ptADBoardDevices->ADBoards[0].fMaxVoltage = 10;
 800afc0:	4b1a      	ldr	r3, [pc, #104]	; (800b02c <ADBoard_Init+0xb8>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a1b      	ldr	r2, [pc, #108]	; (800b034 <ADBoard_Init+0xc0>)
 800afc6:	635a      	str	r2, [r3, #52]	; 0x34
	ptADBoardDevices->ADBoards[0].fRange = ptADBoardDevices->ADBoards[0].fMaxVoltage-ptADBoardDevices->ADBoards[0].fMinVoltage;
 800afc8:	4b18      	ldr	r3, [pc, #96]	; (800b02c <ADBoard_Init+0xb8>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800afd0:	4b16      	ldr	r3, [pc, #88]	; (800b02c <ADBoard_Init+0xb8>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800afd8:	4b14      	ldr	r3, [pc, #80]	; (800b02c <ADBoard_Init+0xb8>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afe0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	ptADBoardDevices->ADBoards[0].AD_spi = &hspi4;
 800afe4:	4b11      	ldr	r3, [pc, #68]	; (800b02c <ADBoard_Init+0xb8>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a13      	ldr	r2, [pc, #76]	; (800b038 <ADBoard_Init+0xc4>)
 800afea:	641a      	str	r2, [r3, #64]	; 0x40
	ptADBoardDevices->ADBoards[0].CONV_DO_x=CONV_DO_x;
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <ADBoard_Init+0xb8>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	79fa      	ldrb	r2, [r7, #7]
 800aff2:	b292      	uxth	r2, r2
 800aff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	ptADBoardDevices->ADBoards[0].CS_DO_x = CS_DO_x;
 800aff8:	4b0c      	ldr	r3, [pc, #48]	; (800b02c <ADBoard_Init+0xb8>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	797a      	ldrb	r2, [r7, #5]
 800affe:	b292      	uxth	r2, r2
 800b000:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptADBoardDevices->ADBoards[0].RESET_DO_x = RESET_DO_x;
 800b004:	4b09      	ldr	r3, [pc, #36]	; (800b02c <ADBoard_Init+0xb8>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	79ba      	ldrb	r2, [r7, #6]
 800b00a:	b292      	uxth	r2, r2
 800b00c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	ptADBoardDevices->ADBoards[0].BUSY_INT_x = BUSY_INT_x;
 800b010:	4b06      	ldr	r3, [pc, #24]	; (800b02c <ADBoard_Init+0xb8>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	793a      	ldrb	r2, [r7, #4]
 800b016:	b292      	uxth	r2, r2
 800b018:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	ADBoard_Reset();
 800b01c:	f7ff ff3e 	bl	800ae9c <ADBoard_Reset>

	ADBoard_updateVoltage();
 800b020:	f7ff ff58 	bl	800aed4 <ADBoard_updateVoltage>
}
 800b024:	bf00      	nop
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	20000010 	.word	0x20000010
 800b030:	c1200000 	.word	0xc1200000
 800b034:	41200000 	.word	0x41200000
 800b038:	2000a84c 	.word	0x2000a84c

0800b03c <_ZN7CHAMBERC1Eiii>:
const float CHAMBER::effectiveArea=M_PI*effectiveRadius*effectiveRadius;
const float CHAMBER::pressureMin= -70000;
const float CHAMBER::pressureMax=70000;


CHAMBER::CHAMBER(int PWMPort1,int PWMPort2,int PressurePort):
 800b03c:	b5b0      	push	{r4, r5, r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
valves{PWMPort1,PWMPort2},
pressureSensor(PressurePort),
pressureTable{0,27000,48600,65600,79000,90000,100000,109000,119000,130400,145000,163000,180000},
positionTable{0,10,20,30,40,50,60,70,80,90,100,110,120}
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3304      	adds	r3, #4
 800b04e:	68b9      	ldr	r1, [r7, #8]
 800b050:	4618      	mov	r0, r3
 800b052:	f001 fb57 	bl	800c704 <_ZN14SOLENOID_VALVEC1Ei>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	331c      	adds	r3, #28
 800b05a:	6879      	ldr	r1, [r7, #4]
 800b05c:	4618      	mov	r0, r3
 800b05e:	f001 fb51 	bl	800c704 <_ZN14SOLENOID_VALVEC1Ei>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	3334      	adds	r3, #52	; 0x34
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	4618      	mov	r0, r3
 800b06a:	f000 fd09 	bl	800ba80 <_ZN15PRESSURE_SENSORC1Ei>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3350      	adds	r3, #80	; 0x50
 800b072:	4618      	mov	r0, r3
 800b074:	f003 fa74 	bl	800e560 <_ZN18PRESSURE_SENSORSPIC1Ev>
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	f241 0374 	movw	r3, #4212	; 0x1074
 800b07e:	4413      	add	r3, r2
 800b080:	4a57      	ldr	r2, [pc, #348]	; (800b1e0 <_ZN7CHAMBERC1Eiii+0x1a4>)
 800b082:	461c      	mov	r4, r3
 800b084:	4615      	mov	r5, r2
 800b086:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b088:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b08a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b08c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b08e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b092:	682b      	ldr	r3, [r5, #0]
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	f241 03a8 	movw	r3, #4264	; 0x10a8
 800b09c:	4413      	add	r3, r2
 800b09e:	4a51      	ldr	r2, [pc, #324]	; (800b1e4 <_ZN7CHAMBERC1Eiii+0x1a8>)
 800b0a0:	461c      	mov	r4, r3
 800b0a2:	4615      	mov	r5, r2
 800b0a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	6023      	str	r3, [r4, #0]
{

	filterBeta=0.01;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	4a4c      	ldr	r2, [pc, #304]	; (800b1e8 <_ZN7CHAMBERC1Eiii+0x1ac>)
 800b0b8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	pressure=0;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pressureFil=0;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f04f 0200 	mov.w	r2, #0
 800b0cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pressureRaw=0;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f04f 0200 	mov.w	r2, #0
 800b0d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	pressuredot=0;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f04f 0200 	mov.w	r2, #0
 800b0e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pressureCommand=pressure;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	pressureDeadZone = 1000;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4a3e      	ldr	r2, [pc, #248]	; (800b1ec <_ZN7CHAMBERC1Eiii+0x1b0>)
 800b0f4:	679a      	str	r2, [r3, #120]	; 0x78
	pressureMaxP=4000;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	4a3d      	ldr	r2, [pc, #244]	; (800b1f0 <_ZN7CHAMBERC1Eiii+0x1b4>)
 800b0fa:	67da      	str	r2, [r3, #124]	; 0x7c
	pressureMinN=-4000;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4a3d      	ldr	r2, [pc, #244]	; (800b1f4 <_ZN7CHAMBERC1Eiii+0x1b8>)
 800b100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	fulOpening=1;
 800b104:	68fa      	ldr	r2, [r7, #12]
 800b106:	f241 0364 	movw	r3, #4196	; 0x1064
 800b10a:	4413      	add	r3, r2
 800b10c:	2201      	movs	r2, #1
 800b10e:	601a      	str	r2, [r3, #0]
	opening = 0;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f04f 0200 	mov.w	r2, #0
 800b116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	pressureOffset=0;
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	f04f 0200 	mov.w	r2, #0
 800b120:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	position=0;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
	positionOffset=0;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2200      	movs	r2, #0
 800b130:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	positionRaw=0;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	inflatingFlag=1;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2201      	movs	r2, #1
 800b140:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
//	openingMinN = valveOpeningLimArray[PWMPort1/2][0];
//	openingMaxN = valveOpeningLimArray[PWMPort1/2][1];
//	openingMinP = valveOpeningLimArray[PWMPort1/2][2];
//	openingMaxP = valveOpeningLimArray[PWMPort1/2][3];
	openingMinN = -0.95;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4a2c      	ldr	r2, [pc, #176]	; (800b1f8 <_ZN7CHAMBERC1Eiii+0x1bc>)
 800b148:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	openingMaxN = -0.85;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4a2b      	ldr	r2, [pc, #172]	; (800b1fc <_ZN7CHAMBERC1Eiii+0x1c0>)
 800b150:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	openingMinP = 0.2;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4a2a      	ldr	r2, [pc, #168]	; (800b200 <_ZN7CHAMBERC1Eiii+0x1c4>)
 800b158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	openingMaxP = 0.53;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	4a29      	ldr	r2, [pc, #164]	; (800b204 <_ZN7CHAMBERC1Eiii+0x1c8>)
 800b160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	inflateVelocity=1;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800b16a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	pressureController = NewPressureController(200000,0,DEFAULTCONTROLLDT,1e10,40000,2e-5,0,0,6e-5,0.3);
 800b16e:	eddf 4a26 	vldr	s9, [pc, #152]	; 800b208 <_ZN7CHAMBERC1Eiii+0x1cc>
 800b172:	ed9f 4a26 	vldr	s8, [pc, #152]	; 800b20c <_ZN7CHAMBERC1Eiii+0x1d0>
 800b176:	eddf 3a26 	vldr	s7, [pc, #152]	; 800b210 <_ZN7CHAMBERC1Eiii+0x1d4>
 800b17a:	ed9f 3a25 	vldr	s6, [pc, #148]	; 800b210 <_ZN7CHAMBERC1Eiii+0x1d4>
 800b17e:	eddf 2a25 	vldr	s5, [pc, #148]	; 800b214 <_ZN7CHAMBERC1Eiii+0x1d8>
 800b182:	ed9f 2a25 	vldr	s4, [pc, #148]	; 800b218 <_ZN7CHAMBERC1Eiii+0x1dc>
 800b186:	eddf 1a25 	vldr	s3, [pc, #148]	; 800b21c <_ZN7CHAMBERC1Eiii+0x1e0>
 800b18a:	ed9f 1a25 	vldr	s2, [pc, #148]	; 800b220 <_ZN7CHAMBERC1Eiii+0x1e4>
 800b18e:	eddf 0a20 	vldr	s1, [pc, #128]	; 800b210 <_ZN7CHAMBERC1Eiii+0x1d4>
 800b192:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800b224 <_ZN7CHAMBERC1Eiii+0x1e8>
 800b196:	f000 fc11 	bl	800b9bc <NewPressureController>
 800b19a:	4602      	mov	r2, r0
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	601a      	str	r2, [r3, #0]
	//pressureController = NewPressureController(200000,0,CONTROLLDT,1e13,1000,2e-5,0,0,6e-5,0.3);
	curOpeningNum=0;
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	f241 036c 	movw	r3, #4204	; 0x106c
 800b1a6:	4413      	add	r3, r2
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	601a      	str	r2, [r3, #0]
	endOpeningNum=0;
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	f241 0368 	movw	r3, #4200	; 0x1068
 800b1b2:	4413      	add	r3, r2
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	601a      	str	r2, [r3, #0]
	inOpeningSequence = 0;
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	f241 0370 	movw	r3, #4208	; 0x1070
 800b1be:	4413      	add	r3, r2
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	601a      	str	r2, [r3, #0]
	memset(openingSequence,0,sizeof(openingSequence));
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	33c4      	adds	r3, #196	; 0xc4
 800b1c8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f006 f9bb 	bl	801154a <memset>

}
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bdb0      	pop	{r4, r5, r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	080159c0 	.word	0x080159c0
 800b1e4:	080159f4 	.word	0x080159f4
 800b1e8:	3c23d70a 	.word	0x3c23d70a
 800b1ec:	447a0000 	.word	0x447a0000
 800b1f0:	457a0000 	.word	0x457a0000
 800b1f4:	c57a0000 	.word	0xc57a0000
 800b1f8:	bf733333 	.word	0xbf733333
 800b1fc:	bf59999a 	.word	0xbf59999a
 800b200:	3e4ccccd 	.word	0x3e4ccccd
 800b204:	3f07ae14 	.word	0x3f07ae14
 800b208:	3e99999a 	.word	0x3e99999a
 800b20c:	387ba882 	.word	0x387ba882
 800b210:	00000000 	.word	0x00000000
 800b214:	37a7c5ac 	.word	0x37a7c5ac
 800b218:	471c4000 	.word	0x471c4000
 800b21c:	501502f9 	.word	0x501502f9
 800b220:	3a83126f 	.word	0x3a83126f
 800b224:	48435000 	.word	0x48435000

0800b228 <_ZN7CHAMBER6attachEiii>:


void CHAMBER::attach(int PWMPort1,int PWMPort2,int AnalogPort)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	603b      	str	r3, [r7, #0]
	valves[0].attach(PWMPort1);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3304      	adds	r3, #4
 800b23a:	68b9      	ldr	r1, [r7, #8]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f001 fa8b 	bl	800c758 <_ZN14SOLENOID_VALVE6attachEi>
	valves[1].attach(PWMPort2);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	331c      	adds	r3, #28
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4618      	mov	r0, r3
 800b24a:	f001 fa85 	bl	800c758 <_ZN14SOLENOID_VALVE6attachEi>
	pressureSensor.attach(AnalogPort);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3334      	adds	r3, #52	; 0x34
 800b252:	6839      	ldr	r1, [r7, #0]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 fc75 	bl	800bb44 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800b25a:	bf00      	nop
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <_ZN7CHAMBER12zeroPressureEv>:
}
void CHAMBER::attachSensor(int AnalogPort)
{
	pressureSensor.attach(AnalogPort);
}
void CHAMBER::zeroPressure(){
 800b262:	b480      	push	{r7}
 800b264:	b083      	sub	sp, #12
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
	pressureOffset = pressureRaw;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 800b276:	bf00      	nop
 800b278:	370c      	adds	r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <_ZN7CHAMBER15readPressureCanEs>:
	pressure=pressureRaw-pressureOffset;

	return pressure;
}

float CHAMBER::readPressureCan(int16_t pressureCan){
 800b282:	b480      	push	{r7}
 800b284:	b083      	sub	sp, #12
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	460b      	mov	r3, r1
 800b28c:	807b      	strh	r3, [r7, #2]

	/************************read from external pressure source CAN bus**********/
	pressureRaw=pressureCan*100;
 800b28e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b292:	2264      	movs	r2, #100	; 0x64
 800b294:	fb02 f303 	mul.w	r3, r2, r3
 800b298:	ee07 3a90 	vmov	s15, r3
 800b29c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	pressure=pressureRaw-pressureOffset;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800b2b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	edc3 7a27 	vstr	s15, [r3, #156]	; 0x9c
	return pressure;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b2c2:	ee07 3a90 	vmov	s15, r3
}
 800b2c6:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <_ZN7CHAMBER13writePressureEf>:
	return pressureFil;
}


void CHAMBER::writePressure(float pNom)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	ed87 0a00 	vstr	s0, [r7]

	pressureCommand = CONSTRAIN(pNom,pressureMin,pressureMax);
 800b2e0:	edd7 7a00 	vldr	s15, [r7]
 800b2e4:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 800b62c <_ZN7CHAMBER13writePressureEf+0x358>
 800b2e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2f0:	d501      	bpl.n	800b2f6 <_ZN7CHAMBER13writePressureEf+0x22>
 800b2f2:	4bcf      	ldr	r3, [pc, #828]	; (800b630 <_ZN7CHAMBER13writePressureEf+0x35c>)
 800b2f4:	e00b      	b.n	800b30e <_ZN7CHAMBER13writePressureEf+0x3a>
 800b2f6:	edd7 7a00 	vldr	s15, [r7]
 800b2fa:	ed9f 7ace 	vldr	s14, [pc, #824]	; 800b634 <_ZN7CHAMBER13writePressureEf+0x360>
 800b2fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b306:	dd01      	ble.n	800b30c <_ZN7CHAMBER13writePressureEf+0x38>
 800b308:	4bcb      	ldr	r3, [pc, #812]	; (800b638 <_ZN7CHAMBER13writePressureEf+0x364>)
 800b30a:	e000      	b.n	800b30e <_ZN7CHAMBER13writePressureEf+0x3a>
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

	float pErr = pressureCommand-pressure;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 800b320:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b324:	edc7 7a03 	vstr	s15, [r7, #12]
	if(pErr>pressureDeadZone)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800b32e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33a:	f140 80d7 	bpl.w	800b4ec <_ZN7CHAMBER13writePressureEf+0x218>
	{
		if(pErr<pressureMaxP*inflateVelocity)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b34a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b34e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35a:	dd4e      	ble.n	800b3fa <_ZN7CHAMBER13writePressureEf+0x126>
			opening=MAPCONSTRAIN(pErr,pressureDeadZone,pressureMaxP*inflateVelocity,openingMinP,openingMaxP);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b368:	edd7 7a03 	vldr	s15, [r7, #12]
 800b36c:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b374:	dd03      	ble.n	800b37e <_ZN7CHAMBER13writePressureEf+0xaa>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b37c:	e019      	b.n	800b3b2 <_ZN7CHAMBER13writePressureEf+0xde>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b38a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b38e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b392:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39a:	d508      	bpl.n	800b3ae <_ZN7CHAMBER13writePressureEf+0xda>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b3a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3ac:	e001      	b.n	800b3b2 <_ZN7CHAMBER13writePressureEf+0xde>
 800b3ae:	edd7 7a03 	vldr	s15, [r7, #12]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	edd3 6a1e 	vldr	s13, [r3, #120]	; 0x78
 800b3b8:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	ed93 6a23 	vldr	s12, [r3, #140]	; 0x8c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800b3c8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b3cc:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	edd3 6a1f 	vldr	s13, [r3, #124]	; 0x7c
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b3dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b3e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b3ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b3ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b3f8:	e18a      	b.n	800b710 <_ZN7CHAMBER13writePressureEf+0x43c>
		else
			opening=MAPCONSTRAIN(pErr,pressureMaxP*inflateVelocity,pressureMaxP*1.5, openingMaxP,1);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800b400:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b410:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b414:	edd7 7a03 	vldr	s15, [r7, #12]
 800b418:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b420:	dd0a      	ble.n	800b438 <_ZN7CHAMBER13writePressureEf+0x164>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b42e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b432:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b436:	e01f      	b.n	800b478 <_ZN7CHAMBER13writePressureEf+0x1a4>
 800b438:	edd7 7a03 	vldr	s15, [r7, #12]
 800b43c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800b446:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b44a:	eeb7 4b08 	vmov.f64	d4, #120	; 0x3fc00000  1.5
 800b44e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b452:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b45a:	dd09      	ble.n	800b470 <_ZN7CHAMBER13writePressureEf+0x19c>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800b462:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b466:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800b46a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b46e:	e003      	b.n	800b478 <_ZN7CHAMBER13writePressureEf+0x1a4>
 800b470:	edd7 7a03 	vldr	s15, [r7, #12]
 800b474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	ed93 5a1f 	vldr	s10, [r3, #124]	; 0x7c
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	edd3 5a26 	vldr	s11, [r3, #152]	; 0x98
 800b484:	ee65 5a25 	vmul.f32	s11, s10, s11
 800b488:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800b48c:	ee37 5b45 	vsub.f64	d5, d7, d5
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800b496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b49a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b49e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b4a2:	ee25 4b07 	vmul.f64	d4, d5, d7
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800b4ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b4b0:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800b4b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b4cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b4d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b4d4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b4d8:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800b4dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b4ea:	e111      	b.n	800b710 <_ZN7CHAMBER13writePressureEf+0x43c>
			//opening=1;
	}
	else if(pErr<-pressureDeadZone)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b4f2:	eeb1 7a67 	vneg.f32	s14, s15
 800b4f6:	edd7 7a03 	vldr	s15, [r7, #12]
 800b4fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b502:	f340 8100 	ble.w	800b706 <_ZN7CHAMBER13writePressureEf+0x432>
	{

		//opening=pressureController->controlPressure(pressureController,pressureFil,pressureCommand);
		if(pErr>pressureMinN*inflateVelocity)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b512:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b516:	edd7 7a03 	vldr	s15, [r7, #12]
 800b51a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b522:	d559      	bpl.n	800b5d8 <_ZN7CHAMBER13writePressureEf+0x304>
			opening=MAPCONSTRAIN(pErr,pressureMinN*inflateVelocity,-pressureDeadZone,openingMinN,openingMaxN);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b536:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b53a:	edd7 7a03 	vldr	s15, [r7, #12]
 800b53e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b546:	dd08      	ble.n	800b55a <_ZN7CHAMBER13writePressureEf+0x286>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b554:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b558:	e013      	b.n	800b582 <_ZN7CHAMBER13writePressureEf+0x2ae>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b560:	eef1 6a67 	vneg.f32	s13, s15
 800b564:	edd7 7a03 	vldr	s15, [r7, #12]
 800b568:	eef4 6ae7 	vcmpe.f32	s13, s15
 800b56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b570:	d505      	bpl.n	800b57e <_ZN7CHAMBER13writePressureEf+0x2aa>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b578:	eef1 7a67 	vneg.f32	s15, s15
 800b57c:	e001      	b.n	800b582 <_ZN7CHAMBER13writePressureEf+0x2ae>
 800b57e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b58e:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b592:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	ed93 6a25 	vldr	s12, [r3, #148]	; 0x94
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b5a2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b5a6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800b5b0:	eef1 6a67 	vneg.f32	s13, s15
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	edd3 5a20 	vldr	s11, [r3, #128]	; 0x80
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b5c0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800b5c4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b5c8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b5cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b5d6:	e09b      	b.n	800b710 <_ZN7CHAMBER13writePressureEf+0x43c>
		else
			opening=MAPCONSTRAIN(pErr,1.5*pressureMinN*inflateVelocity,pressureMinN*inflateVelocity,-1,openingMinN);
 800b5d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800b5dc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800b5e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b5ea:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800b5ee:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b5f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b5fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b600:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b608:	d518      	bpl.n	800b63c <_ZN7CHAMBER13writePressureEf+0x368>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800b610:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b614:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b618:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b622:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b626:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b62a:	e023      	b.n	800b674 <_ZN7CHAMBER13writePressureEf+0x3a0>
 800b62c:	c788b800 	.word	0xc788b800
 800b630:	c788b800 	.word	0xc788b800
 800b634:	4788b800 	.word	0x4788b800
 800b638:	4788b800 	.word	0x4788b800
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b648:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b64c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b658:	d508      	bpl.n	800b66c <_ZN7CHAMBER13writePressureEf+0x398>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b66a:	e001      	b.n	800b670 <_ZN7CHAMBER13writePressureEf+0x39c>
 800b66c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b670:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	edd3 6a20 	vldr	s13, [r3, #128]	; 0x80
 800b67a:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800b67e:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800b682:	ee26 5b05 	vmul.f64	d5, d6, d5
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 800b68c:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800b690:	ee25 6b06 	vmul.f64	d6, d5, d6
 800b694:	ee37 6b46 	vsub.f64	d6, d7, d6
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800b69e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b6a6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6aa:	ee26 5b07 	vmul.f64	d5, d6, d7
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6be:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 800b6c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6cc:	eeb7 4b08 	vmov.f64	d4, #120	; 0x3fc00000  1.5
 800b6d0:	ee27 4b04 	vmul.f64	d4, d7, d4
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	edd3 7a26 	vldr	s15, [r3, #152]	; 0x98
 800b6da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b6de:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b6e2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b6ea:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800b6ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b6f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b6f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b6fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
 800b704:	e004      	b.n	800b710 <_ZN7CHAMBER13writePressureEf+0x43c>

			//opening=-1;
	}
	else
	{
		opening=0;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f04f 0200 	mov.w	r2, #0
 800b70c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	}

	writeOpening(opening);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b716:	eeb0 0a67 	vmov.f32	s0, s15
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f836 	bl	800b78c <_ZN7CHAMBER12writeOpeningEf>
}
 800b720:	bf00      	nop
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <_ZN7CHAMBER12zeroPositionEv>:




//mm position
void CHAMBER::zeroPosition(){
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
	positionOffset = positionRaw;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f9b3 20b2 	ldrsh.w	r2, [r3, #178]	; 0xb2
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
}
 800b73c:	bf00      	nop
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <_ZN7CHAMBER15readPositionCanEs>:
int16_t CHAMBER::readPosition(){
	position=positionRaw-positionOffset;
	return position;
}

int16_t CHAMBER::readPositionCan(int16_t positionCan){
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	460b      	mov	r3, r1
 800b752:	807b      	strh	r3, [r7, #2]
	/************************read from external position source CAN bus**********/

	positionRaw=positionCan;//mm
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	887a      	ldrh	r2, [r7, #2]
 800b758:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
	position=positionRaw-positionOffset;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f9b3 30b2 	ldrsh.w	r3, [r3, #178]	; 0xb2
 800b762:	b29a      	uxth	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	b29b      	uxth	r3, r3
 800b770:	b21a      	sxth	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	return position;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
}
 800b77e:	4618      	mov	r0, r3
 800b780:	370c      	adds	r7, #12
 800b782:	46bd      	mov	sp, r7
 800b784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b788:	4770      	bx	lr
	...

0800b78c <_ZN7CHAMBER12writeOpeningEf>:

float CHAMBER::readOpening()
{
	return opening;
}
void CHAMBER::writeOpening(float op){
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	ed87 0a00 	vstr	s0, [r7]

	if(op>0){
 800b798:	edd7 7a00 	vldr	s15, [r7]
 800b79c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a4:	dd2b      	ble.n	800b7fe <_ZN7CHAMBER12writeOpeningEf+0x72>
		opening=CONSTRAIN(op,0,1);
 800b7a6:	edd7 7a00 	vldr	s15, [r7]
 800b7aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7b2:	d502      	bpl.n	800b7ba <_ZN7CHAMBER12writeOpeningEf+0x2e>
 800b7b4:	f04f 0300 	mov.w	r3, #0
 800b7b8:	e00c      	b.n	800b7d4 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b7ba:	edd7 7a00 	vldr	s15, [r7]
 800b7be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7ca:	dd02      	ble.n	800b7d2 <_ZN7CHAMBER12writeOpeningEf+0x46>
 800b7cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b7d0:	e000      	b.n	800b7d4 <_ZN7CHAMBER12writeOpeningEf+0x48>
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(opening);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	1d1a      	adds	r2, r3, #4
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b7e4:	eeb0 0a67 	vmov.f32	s0, s15
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	f000 ffc3 	bl	800c774 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(0);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	331c      	adds	r3, #28
 800b7f2:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800b860 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 ffbc 	bl	800c774 <_ZN14SOLENOID_VALVE9writeDutyEf>
		opening=CONSTRAIN(op,-1,0);
		valves[0].writeDuty(0);
		valves[1].writeDuty(-opening);
	}

}
 800b7fc:	e02c      	b.n	800b858 <_ZN7CHAMBER12writeOpeningEf+0xcc>
		opening=CONSTRAIN(op,-1,0);
 800b7fe:	edd7 7a00 	vldr	s15, [r7]
 800b802:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b806:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b80e:	d501      	bpl.n	800b814 <_ZN7CHAMBER12writeOpeningEf+0x88>
 800b810:	4b14      	ldr	r3, [pc, #80]	; (800b864 <_ZN7CHAMBER12writeOpeningEf+0xd8>)
 800b812:	e00a      	b.n	800b82a <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b814:	edd7 7a00 	vldr	s15, [r7]
 800b818:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b820:	dd02      	ble.n	800b828 <_ZN7CHAMBER12writeOpeningEf+0x9c>
 800b822:	f04f 0300 	mov.w	r3, #0
 800b826:	e000      	b.n	800b82a <_ZN7CHAMBER12writeOpeningEf+0x9e>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	687a      	ldr	r2, [r7, #4]
 800b82c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		valves[0].writeDuty(0);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	3304      	adds	r3, #4
 800b834:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800b860 <_ZN7CHAMBER12writeOpeningEf+0xd4>
 800b838:	4618      	mov	r0, r3
 800b83a:	f000 ff9b 	bl	800c774 <_ZN14SOLENOID_VALVE9writeDutyEf>
		valves[1].writeDuty(-opening);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f103 021c 	add.w	r2, r3, #28
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800b84a:	eef1 7a67 	vneg.f32	s15, s15
 800b84e:	eeb0 0a67 	vmov.f32	s0, s15
 800b852:	4610      	mov	r0, r2
 800b854:	f000 ff8e 	bl	800c774 <_ZN14SOLENOID_VALVE9writeDutyEf>
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	00000000 	.word	0x00000000
 800b864:	bf800000 	.word	0xbf800000

0800b868 <mySAT>:
#include "Controller.h"
#include "valveFlowFunc.h"
#include "stdlib.h"
#include "string.h"
static float mySAT(float u)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	ed87 0a01 	vstr	s0, [r7, #4]
	return u/(fabs(u)+0.01);
 800b872:	edd7 7a01 	vldr	s15, [r7, #4]
 800b876:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 800b87a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b87e:	eef0 7ae7 	vabs.f32	s15, s15
 800b882:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800b886:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800b8a8 <mySAT+0x40>
 800b88a:	ee37 6b06 	vadd.f64	d6, d7, d6
 800b88e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800b892:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 800b896:	eeb0 0a67 	vmov.f32	s0, s15
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	f3af 8000 	nop.w
 800b8a8:	47ae147b 	.word	0x47ae147b
 800b8ac:	3f847ae1 	.word	0x3f847ae1

0800b8b0 <superTwisting2rdSMCUpdate>:
static float superTwisting2rdSMCUpdate(SUPER_TWISTING_SMC *pSMC, float err , float errdot)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b08a      	sub	sp, #40	; 0x28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	ed87 0a02 	vstr	s0, [r7, #8]
 800b8bc:	edc7 0a01 	vstr	s1, [r7, #4]
	pSMC->err=err;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	601a      	str	r2, [r3, #0]
	pSMC->errdot = errdot;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	605a      	str	r2, [r3, #4]
	pSMC->s = (pSMC->lamdadot * errdot + pSMC->lamda*err)/1000;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	ed93 7a08 	vldr	s14, [r3, #32]
 800b8d2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b8d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	edd3 6a07 	vldr	s13, [r3, #28]
 800b8e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b8e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b8ec:	eddf 6a25 	vldr	s13, [pc, #148]	; 800b984 <superTwisting2rdSMCUpdate+0xd4>
 800b8f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	edc3 7a02 	vstr	s15, [r3, #8]

	float sgnS=mySAT(pSMC->s);
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	edd3 7a02 	vldr	s15, [r3, #8]
 800b900:	eeb0 0a67 	vmov.f32	s0, s15
 800b904:	f7ff ffb0 	bl	800b868 <mySAT>
 800b908:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float absSK=fabs(pSMC->s)*pSMC->k;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	edd3 7a02 	vldr	s15, [r3, #8]
 800b912:	eeb0 7ae7 	vabs.f32	s14, s15
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	edd3 7a04 	vldr	s15, [r3, #16]
 800b91c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b920:	edc7 7a08 	vstr	s15, [r7, #32]

	float sqrSK=0;
 800b924:	f04f 0300 	mov.w	r3, #0
 800b928:	617b      	str	r3, [r7, #20]
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	61fb      	str	r3, [r7, #28]
 800b92e:	f107 0314 	add.w	r3, r7, #20
 800b932:	61bb      	str	r3, [r7, #24]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b934:	edd7 7a07 	vldr	s15, [r7, #28]
 800b938:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b93c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b940:	db09      	blt.n	800b956 <superTwisting2rdSMCUpdate+0xa6>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 800b942:	ed97 0a07 	vldr	s0, [r7, #28]
 800b946:	f005 fd5f 	bl	8011408 <sqrtf>
 800b94a:	eef0 7a40 	vmov.f32	s15, s0
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	edc3 7a00 	vstr	s15, [r3]
 800b954:	e003      	b.n	800b95e <superTwisting2rdSMCUpdate+0xae>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	f04f 0200 	mov.w	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]

	arm_sqrt_f32(absSK,&sqrSK);

	//pSMC->ystate = pSMC->ystate + pSMC->dt*1.1f*pSMC->k*sgnS;

	pSMC->y= sqrSK*sgnS;// + pSMC->ystate;
 800b95e:	ed97 7a05 	vldr	s14, [r7, #20]
 800b962:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	edc3 7a03 	vstr	s15, [r3, #12]

	return pSMC->y;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	ee07 3a90 	vmov	s15, r3
}
 800b978:	eeb0 0a67 	vmov.f32	s0, s15
 800b97c:	3728      	adds	r7, #40	; 0x28
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
 800b982:	bf00      	nop
 800b984:	447a0000 	.word	0x447a0000

0800b988 <controlPressure>:
//including direction.  -1<u<1
//u>0  inflating
//u=0  hold
//u<0  deflating
static float controlPressure(struct BASIC_PRESSURE_CONTROLLER_STRUCT *bpc,float e,float edot)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	ed87 0a02 	vstr	s0, [r7, #8]
 800b994:	edc7 0a01 	vstr	s1, [r7, #4]

	superTwisting2rdSMCUpdate(&(bpc->SUPER_TWISTING_SMC),e,edot);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	3324      	adds	r3, #36	; 0x24
 800b99c:	edd7 0a01 	vldr	s1, [r7, #4]
 800b9a0:	ed97 0a02 	vldr	s0, [r7, #8]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff ff83 	bl	800b8b0 <superTwisting2rdSMCUpdate>

		//bpc->voltage= -flowrate2Voltage(p,bpc->psink,-bpc->flow );
	}*/


	return bpc->SUPER_TWISTING_SMC.y;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9ae:	ee07 3a90 	vmov	s15, r3
}
 800b9b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <NewPressureController>:


BASIC_PRESSURE_CONTROLLER *NewPressureController(float psource,float psink,float dt,float kalmanQ,float kalmanR,
		float pidKp,float pidKi,float pidKd,float pidilim,float pidulim)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08c      	sub	sp, #48	; 0x30
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 800b9c6:	edc7 0a08 	vstr	s1, [r7, #32]
 800b9ca:	ed87 1a07 	vstr	s2, [r7, #28]
 800b9ce:	edc7 1a06 	vstr	s3, [r7, #24]
 800b9d2:	ed87 2a05 	vstr	s4, [r7, #20]
 800b9d6:	edc7 2a04 	vstr	s5, [r7, #16]
 800b9da:	ed87 3a03 	vstr	s6, [r7, #12]
 800b9de:	edc7 3a02 	vstr	s7, [r7, #8]
 800b9e2:	ed87 4a01 	vstr	s8, [r7, #4]
 800b9e6:	edc7 4a00 	vstr	s9, [r7]
	pidKi=0;
	pidKd=1e-10;
	pidilim=6e-5;
	pidulim=5e-4;*/

	BASIC_PRESSURE_CONTROLLER *pController = (BASIC_PRESSURE_CONTROLLER *)malloc(sizeof(BASIC_PRESSURE_CONTROLLER));
 800b9ea:	204c      	movs	r0, #76	; 0x4c
 800b9ec:	f005 fd9a 	bl	8011524 <malloc>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(pController,0,sizeof(BASIC_PRESSURE_CONTROLLER));
 800b9f4:	224c      	movs	r2, #76	; 0x4c
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b9fa:	f005 fda6 	bl	801154a <memset>
	pController->psource = psource;
 800b9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba02:	609a      	str	r2, [r3, #8]
	pController->psink = psink;
 800ba04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba06:	6a3a      	ldr	r2, [r7, #32]
 800ba08:	60da      	str	r2, [r3, #12]
	pController->dt = dt;
 800ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0c:	69fa      	ldr	r2, [r7, #28]
 800ba0e:	619a      	str	r2, [r3, #24]
	pController->pKalmanFilter = newSimpleKalmanFilter(kalmanQ,kalmanR,dt);
 800ba10:	ed97 1a07 	vldr	s2, [r7, #28]
 800ba14:	edd7 0a05 	vldr	s1, [r7, #20]
 800ba18:	ed97 0a06 	vldr	s0, [r7, #24]
 800ba1c:	f001 fce6 	bl	800d3ec <newSimpleKalmanFilter>
 800ba20:	4602      	mov	r2, r0
 800ba22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba24:	61da      	str	r2, [r3, #28]
	pController->pPID = newPID(pidKp,pidKi,pidKd,dt,pidilim,pidulim);
 800ba26:	edd7 2a00 	vldr	s5, [r7]
 800ba2a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ba2e:	edd7 1a07 	vldr	s3, [r7, #28]
 800ba32:	ed97 1a02 	vldr	s2, [r7, #8]
 800ba36:	edd7 0a03 	vldr	s1, [r7, #12]
 800ba3a:	ed97 0a04 	vldr	s0, [r7, #16]
 800ba3e:	f002 f915 	bl	800dc6c <newPID>
 800ba42:	4602      	mov	r2, r0
 800ba44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba46:	621a      	str	r2, [r3, #32]
	pController->SUPER_TWISTING_SMC.dt=dt;
 800ba48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba4a:	69fa      	ldr	r2, [r7, #28]
 800ba4c:	63da      	str	r2, [r3, #60]	; 0x3c
	pController->SUPER_TWISTING_SMC.k=2.5e-6;
 800ba4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba50:	4a08      	ldr	r2, [pc, #32]	; (800ba74 <NewPressureController+0xb8>)
 800ba52:	635a      	str	r2, [r3, #52]	; 0x34
	pController->SUPER_TWISTING_SMC.lamdadot=1;
 800ba54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ba5a:	645a      	str	r2, [r3, #68]	; 0x44
	pController->SUPER_TWISTING_SMC.lamda=20;
 800ba5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba5e:	4a06      	ldr	r2, [pc, #24]	; (800ba78 <NewPressureController+0xbc>)
 800ba60:	641a      	str	r2, [r3, #64]	; 0x40
	pController->controlPressure = controlPressure;
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	4a05      	ldr	r2, [pc, #20]	; (800ba7c <NewPressureController+0xc0>)
 800ba66:	649a      	str	r2, [r3, #72]	; 0x48
	return pController;
 800ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3730      	adds	r7, #48	; 0x30
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	3627c5ac 	.word	0x3627c5ac
 800ba78:	41a00000 	.word	0x41a00000
 800ba7c:	0800b989 	.word	0x0800b989

0800ba80 <_ZN15PRESSURE_SENSORC1Ei>:
const float pressureSensorType1_vMax =  4.5;
const float pressureSensorType1_pMin =   0;
const float pressureSensorType1_pMax =  300000;


PRESSURE_SENSOR::PRESSURE_SENSOR(int num):
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
voltage(0),
pressure(0)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f04f 0200 	mov.w	r2, #0
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	609a      	str	r2, [r3, #8]
{
	attach(num);
 800ba9a:	6839      	ldr	r1, [r7, #0]
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f851 	bl	800bb44 <_ZN15PRESSURE_SENSOR6attachEi>
	setSensorRange_GaugePa(pressureSensorType1_vMin,pressureSensorType1_vMax,pressureSensorType1_pMin,pressureSensorType1_pMax);
 800baa2:	eddf 1a08 	vldr	s3, [pc, #32]	; 800bac4 <_ZN15PRESSURE_SENSORC1Ei+0x44>
 800baa6:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800bac8 <_ZN15PRESSURE_SENSORC1Ei+0x48>
 800baaa:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 800baae:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f854 	bl	800bb60 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>
}
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	48927c00 	.word	0x48927c00
 800bac8:	00000000 	.word	0x00000000

0800bacc <_ZN15PRESSURE_SENSOR4readEv>:

float PRESSURE_SENSOR::read()
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	voltage = AnalogRead(AnalogPort);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	b29b      	uxth	r3, r3
 800bada:	4618      	mov	r0, r3
 800badc:	f000 fd02 	bl	800c4e4 <AnalogRead>
 800bae0:	eef0 7a40 	vmov.f32	s15, s0
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	edc3 7a01 	vstr	s15, [r3, #4]
	pressure = MAP(voltage,vMin,vMax,pMin,pMax);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	ed93 7a05 	vldr	s14, [r3, #20]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	edd3 6a01 	vldr	s13, [r3, #4]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	edd3 7a03 	vldr	s15, [r3, #12]
 800bafc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	ed93 6a06 	vldr	s12, [r3, #24]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	edd3 7a05 	vldr	s15, [r3, #20]
 800bb0c:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bb10:	ee26 6aa7 	vmul.f32	s12, s13, s15
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	edd3 6a04 	vldr	s13, [r3, #16]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	edd3 7a03 	vldr	s15, [r3, #12]
 800bb20:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800bb24:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800bb28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	edc3 7a02 	vstr	s15, [r3, #8]
	return pressure;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	689b      	ldr	r3, [r3, #8]
 800bb36:	ee07 3a90 	vmov	s15, r3
}
 800bb3a:	eeb0 0a67 	vmov.f32	s0, s15
 800bb3e:	3708      	adds	r7, #8
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <_ZN15PRESSURE_SENSOR6attachEi>:

void PRESSURE_SENSOR::attach(int num)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	6039      	str	r1, [r7, #0]
	AnalogPort = num;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	601a      	str	r2, [r3, #0]

}
 800bb54:	bf00      	nop
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <_ZN15PRESSURE_SENSOR22setSensorRange_GaugePaEffff>:

void PRESSURE_SENSOR::setSensorRange_GaugePa(float vmin,float vmax,float pmin,float pmax)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6178      	str	r0, [r7, #20]
 800bb68:	ed87 0a04 	vstr	s0, [r7, #16]
 800bb6c:	edc7 0a03 	vstr	s1, [r7, #12]
 800bb70:	ed87 1a02 	vstr	s2, [r7, #8]
 800bb74:	edc7 1a01 	vstr	s3, [r7, #4]
	vMin=vmin;
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	693a      	ldr	r2, [r7, #16]
 800bb7c:	60da      	str	r2, [r3, #12]
	vMax=vmax;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	611a      	str	r2, [r3, #16]
	pMin=pmin;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	615a      	str	r2, [r3, #20]
	pMax=pmax;
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	619a      	str	r2, [r3, #24]
}
 800bb90:	bf00      	nop
 800bb92:	371c      	adds	r7, #28
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <_ZN15PRESSURE_SOURCEC1Eii>:

#include <PRESSURESOURCE.h>



PRESSURE_SOURCE::PRESSURE_SOURCE(int DigitalPort, int AnalogPort) {
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	3304      	adds	r3, #4
 800bbac:	2100      	movs	r1, #0
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 f8bc 	bl	800bd2c <_ZN4PUMPC1Ei>
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	330c      	adds	r3, #12
 800bbb8:	2100      	movs	r1, #0
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff ff60 	bl	800ba80 <_ZN15PRESSURE_SENSORC1Ei>
	attach(DigitalPort,AnalogPort);
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	f000 f817 	bl	800bbf8 <_ZN15PRESSURE_SOURCE6attachEii>
	sourceType = 0;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	601a      	str	r2, [r3, #0]
	direction=0;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	629a      	str	r2, [r3, #40]	; 0x28
	pressure=0;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f04f 0200 	mov.w	r2, #0
 800bbdc:	62da      	str	r2, [r3, #44]	; 0x2c
	pressureLower=0;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f04f 0200 	mov.w	r2, #0
 800bbe4:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=0;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f04f 0200 	mov.w	r2, #0
 800bbec:	635a      	str	r2, [r3, #52]	; 0x34
}
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <_ZN15PRESSURE_SOURCE6attachEii>:


void PRESSURE_SOURCE::attach(int DigitalPort, int AnalogPort) {
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
	attachPump(DigitalPort);
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	f000 f808 	bl	800bc1c <_ZN15PRESSURE_SOURCE10attachPumpEi>
	attachSensor(AnalogPort);
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	68f8      	ldr	r0, [r7, #12]
 800bc10:	f000 f813 	bl	800bc3a <_ZN15PRESSURE_SOURCE12attachSensorEi>
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_ZN15PRESSURE_SOURCE10attachPumpEi>:

void PRESSURE_SOURCE::attachPump(int DigitalPort) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	pump.attach(DigitalPort);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3304      	adds	r3, #4
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 f88e 	bl	800bd4e <_ZN4PUMP6attachEi>
}
 800bc32:	bf00      	nop
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <_ZN15PRESSURE_SOURCE12attachSensorEi>:

void PRESSURE_SOURCE::attachSensor(int AnalogPort) {
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b082      	sub	sp, #8
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
	pressureSensor.attach(AnalogPort);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	330c      	adds	r3, #12
 800bc48:	6839      	ldr	r1, [r7, #0]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff ff7a 	bl	800bb44 <_ZN15PRESSURE_SENSOR6attachEi>
}
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <_ZN15PRESSURE_SOURCE16maintainPressureEff>:

void PRESSURE_SOURCE::maintainPressure(float p_low,float p_high) {
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	ed87 0a02 	vstr	s0, [r7, #8]
 800bc64:	edc7 0a01 	vstr	s1, [r7, #4]

	pressureLower=p_low;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	68ba      	ldr	r2, [r7, #8]
 800bc6c:	631a      	str	r2, [r3, #48]	; 0x30
	pressureUpper=p_high;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	635a      	str	r2, [r3, #52]	; 0x34
	readPressure();
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 f842 	bl	800bcfe <_ZN15PRESSURE_SOURCE12readPressureEv>

	if(pressure<pressureLower)
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800bc86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8e:	d513      	bpl.n	800bcb8 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x60>
	{
		if(pressureLower>0)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800bc96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc9e:	dd05      	ble.n	800bcac <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x54>
			pump.start();
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3304      	adds	r3, #4
 800bca4:	4618      	mov	r0, r3
 800bca6:	f000 f860 	bl	800bd6a <_ZN4PUMP5startEv>
			pump.start();
		else
			pump.stop();
	}

}
 800bcaa:	e024      	b.n	800bcf6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
			pump.stop();
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3304      	adds	r3, #4
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 f86c 	bl	800bd8e <_ZN4PUMP4stopEv>
}
 800bcb6:	e01e      	b.n	800bcf6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
	else if(pressure>pressureUpper)
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bcc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bcc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bccc:	dc00      	bgt.n	800bcd0 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x78>
}
 800bcce:	e012      	b.n	800bcf6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
		if(pressureUpper<0)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800bcd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcde:	d505      	bpl.n	800bcec <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x94>
			pump.start();
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3304      	adds	r3, #4
 800bce4:	4618      	mov	r0, r3
 800bce6:	f000 f840 	bl	800bd6a <_ZN4PUMP5startEv>
}
 800bcea:	e004      	b.n	800bcf6 <_ZN15PRESSURE_SOURCE16maintainPressureEff+0x9e>
			pump.stop();
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	3304      	adds	r3, #4
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 f84c 	bl	800bd8e <_ZN4PUMP4stopEv>
}
 800bcf6:	bf00      	nop
 800bcf8:	3710      	adds	r7, #16
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <_ZN15PRESSURE_SOURCE12readPressureEv>:
{
	pump.stop();
}


float PRESSURE_SOURCE::readPressure() {
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
	pressure=pressureSensor.read();
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	330c      	adds	r3, #12
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff fede 	bl	800bacc <_ZN15PRESSURE_SENSOR4readEv>
 800bd10:	eef0 7a40 	vmov.f32	s15, s0
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	return pressure;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd1e:	ee07 3a90 	vmov	s15, r3
}
 800bd22:	eeb0 0a67 	vmov.f32	s0, s15
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <_ZN4PUMPC1Ei>:

#include <PneuDriveLL.h>
#include <PUMP.h>


PUMP::PUMP(int num) {
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
	status=0;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	605a      	str	r2, [r3, #4]
	attach(num);
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 f805 	bl	800bd4e <_ZN4PUMP6attachEi>
}
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <_ZN4PUMP6attachEi>:

void PUMP::attach(int num)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b083      	sub	sp, #12
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	6039      	str	r1, [r7, #0]
	DigitalPort = num;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	683a      	ldr	r2, [r7, #0]
 800bd5c:	601a      	str	r2, [r3, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <_ZN4PUMP5startEv>:

void PUMP::start()
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b082      	sub	sp, #8
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]

	DigitalWrite(DigitalPort,1-PWM_DIGITAL_OUTPUT_REVERSED);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	2100      	movs	r1, #0
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fbd5 	bl	800c52a <DigitalWrite>
	status=1;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	605a      	str	r2, [r3, #4]

}
 800bd86:	bf00      	nop
 800bd88:	3708      	adds	r7, #8
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}

0800bd8e <_ZN4PUMP4stopEv>:

void PUMP::stop()
{
 800bd8e:	b580      	push	{r7, lr}
 800bd90:	b082      	sub	sp, #8
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
	DigitalWrite(DigitalPort,PWM_DIGITAL_OUTPUT_REVERSED);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	b29b      	uxth	r3, r3
 800bd9c:	2101      	movs	r1, #1
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f000 fbc3 	bl	800c52a <DigitalWrite>
	status=0;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	605a      	str	r2, [r3, #4]

}
 800bdaa:	bf00      	nop
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <PWM_CS_LOW>:
static void PWMBoardSPI_setCorrectionEnable(uint8_t flag);
static void PWMBoardSPI_startPWMCK(float fre);
static void PWMBoardSPI_reset();

static void PWM_CS_LOW()
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin<<16U;
 800bdb8:	4b07      	ldr	r3, [pc, #28]	; (800bdd8 <PWM_CS_LOW+0x24>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f8b3 31c0 	ldrh.w	r3, [r3, #448]	; 0x1c0
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <PWM_CS_LOW+0x24>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800bdca:	0412      	lsls	r2, r2, #16
 800bdcc:	619a      	str	r2, [r3, #24]
}
 800bdce:	bf00      	nop
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr
 800bdd8:	20000034 	.word	0x20000034

0800bddc <PWM_CS_HIGH>:

static void PWM_CS_HIGH()
{
 800bddc:	b480      	push	{r7}
 800bdde:	af00      	add	r7, sp, #0
	ptPWMBoardSPI->CS_Port->BSRR=(uint32_t)ptPWMBoardSPI->CS_Pin;
 800bde0:	4b06      	ldr	r3, [pc, #24]	; (800bdfc <PWM_CS_HIGH+0x20>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f8b3 21c0 	ldrh.w	r2, [r3, #448]	; 0x1c0
 800bde8:	4b04      	ldr	r3, [pc, #16]	; (800bdfc <PWM_CS_HIGH+0x20>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800bdf0:	619a      	str	r2, [r3, #24]
}
 800bdf2:	bf00      	nop
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	20000034 	.word	0x20000034

0800be00 <PWMBoardSPI_Callback>:

static void PWMBoardSPI_Callback()
{
 800be00:	b580      	push	{r7, lr}
 800be02:	af00      	add	r7, sp, #0
	//the high pulse duration should be less than 5us to maintain the LDI functionality, larger than 8ns
	PWM_CS_HIGH();
 800be04:	f7ff ffea 	bl	800bddc <PWM_CS_HIGH>
	__NOP();
 800be08:	bf00      	nop
	__NOP();
 800be0a:	bf00      	nop
	__NOP();
 800be0c:	bf00      	nop
	__NOP();
 800be0e:	bf00      	nop
	PWM_CS_LOW();
 800be10:	f7ff ffd0 	bl	800bdb4 <PWM_CS_LOW>
}
 800be14:	bf00      	nop
 800be16:	bd80      	pop	{r7, pc}

0800be18 <PWMBoardSPI_sendFrame>:

static void PWMBoardSPI_sendFrame()
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af02      	add	r7, sp, #8
	HAL_SPI_TransmitReceive(ptPWMBoardSPI->PWM_spi,(uint8_t *)(ptPWMBoardSPI->CMDBuffer),(uint8_t *)(ptPWMBoardSPI->StatusBuffer),PWMBoardSPI_FrameLength,2);
 800be1e:	4b0a      	ldr	r3, [pc, #40]	; (800be48 <PWMBoardSPI_sendFrame+0x30>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 800be26:	4b08      	ldr	r3, [pc, #32]	; (800be48 <PWMBoardSPI_sendFrame+0x30>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4619      	mov	r1, r3
 800be2c:	4b06      	ldr	r3, [pc, #24]	; (800be48 <PWMBoardSPI_sendFrame+0x30>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f103 02db 	add.w	r2, r3, #219	; 0xdb
 800be34:	2302      	movs	r3, #2
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	23db      	movs	r3, #219	; 0xdb
 800be3a:	f7f8 f9c7 	bl	80041cc <HAL_SPI_TransmitReceive>
	PWMBoardSPI_Callback();
 800be3e:	f7ff ffdf 	bl	800be00 <PWMBoardSPI_Callback>
}
 800be42:	bf00      	nop
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	20000034 	.word	0x20000034

0800be4c <PWMBoardSPI_bufferCMD>:
	}
	return (uint8_t)(ret&0x01);
}

static void PWMBoardSPI_bufferCMD(uint8_t cmd)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	4603      	mov	r3, r0
 800be54:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800be56:	2300      	movs	r3, #0
 800be58:	60fb      	str	r3, [r7, #12]
 800be5a:	e00e      	b.n	800be7a <PWMBoardSPI_bufferCMD+0x2e>
		ptPWMBoardSPI->CMDBuffer[i][LT8500_FrameLength-1]=cmd;
 800be5c:	4b0b      	ldr	r3, [pc, #44]	; (800be8c <PWMBoardSPI_bufferCMD+0x40>)
 800be5e:	6819      	ldr	r1, [r3, #0]
 800be60:	68fa      	ldr	r2, [r7, #12]
 800be62:	4613      	mov	r3, r2
 800be64:	00db      	lsls	r3, r3, #3
 800be66:	4413      	add	r3, r2
 800be68:	00db      	lsls	r3, r3, #3
 800be6a:	4413      	add	r3, r2
 800be6c:	440b      	add	r3, r1
 800be6e:	3348      	adds	r3, #72	; 0x48
 800be70:	79fa      	ldrb	r2, [r7, #7]
 800be72:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	3301      	adds	r3, #1
 800be78:	60fb      	str	r3, [r7, #12]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	dded      	ble.n	800be5c <PWMBoardSPI_bufferCMD+0x10>
}
 800be80:	bf00      	nop
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	20000034 	.word	0x20000034

0800be90 <PWMBoardSPI_bufferDutyChannel>:

static void PWMBoardSPI_bufferDutyChannel(uint16_t num, float fduty)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	4603      	mov	r3, r0
 800be98:	ed87 0a00 	vstr	s0, [r7]
 800be9c:	80fb      	strh	r3, [r7, #6]

	uint16_t on;

	on = round(4096 * fduty);
 800be9e:	edd7 7a00 	vldr	s15, [r7]
 800bea2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bfd4 <PWMBoardSPI_bufferDutyChannel+0x144>
 800bea6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800beaa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800beae:	eeb0 0b47 	vmov.f64	d0, d7
 800beb2:	f005 fa61 	bl	8011378 <round>
 800beb6:	eeb0 7b40 	vmov.f64	d7, d0
 800beba:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800bebe:	ee17 3a90 	vmov	r3, s15
 800bec2:	83fb      	strh	r3, [r7, #30]
	on=CONSTRAIN(on,0,4095);
 800bec4:	8bfb      	ldrh	r3, [r7, #30]
 800bec6:	f640 72ff 	movw	r2, #4095	; 0xfff
 800beca:	4293      	cmp	r3, r2
 800becc:	bf28      	it	cs
 800bece:	4613      	movcs	r3, r2
 800bed0:	83fb      	strh	r3, [r7, #30]
	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800bed2:	88fb      	ldrh	r3, [r7, #6]
 800bed4:	2b8f      	cmp	r3, #143	; 0x8f
 800bed6:	bf28      	it	cs
 800bed8:	238f      	movcs	r3, #143	; 0x8f
 800beda:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800bedc:	88fb      	ldrh	r3, [r7, #6]
 800bede:	4a3e      	ldr	r2, [pc, #248]	; (800bfd8 <PWMBoardSPI_bufferDutyChannel+0x148>)
 800bee0:	fba2 2303 	umull	r2, r3, r2, r3
 800bee4:	095b      	lsrs	r3, r3, #5
 800bee6:	83bb      	strh	r3, [r7, #28]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800bee8:	88fa      	ldrh	r2, [r7, #6]
 800beea:	4b3b      	ldr	r3, [pc, #236]	; (800bfd8 <PWMBoardSPI_bufferDutyChannel+0x148>)
 800beec:	fba3 1302 	umull	r1, r3, r3, r2
 800bef0:	0959      	lsrs	r1, r3, #5
 800bef2:	460b      	mov	r3, r1
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	440b      	add	r3, r1
 800bef8:	011b      	lsls	r3, r3, #4
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	837b      	strh	r3, [r7, #26]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800befe:	8b7b      	ldrh	r3, [r7, #26]
 800bf00:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800bf04:	837b      	strh	r3, [r7, #26]

	uint16_t quo=(boardNum/2);
 800bf06:	8b7b      	ldrh	r3, [r7, #26]
 800bf08:	085b      	lsrs	r3, r3, #1
 800bf0a:	833b      	strh	r3, [r7, #24]
	uint16_t rem=(boardNum%2);
 800bf0c:	8b7b      	ldrh	r3, [r7, #26]
 800bf0e:	f003 0301 	and.w	r3, r3, #1
 800bf12:	82fb      	strh	r3, [r7, #22]
	uint16_t startingBytesNum=quo*3;
 800bf14:	8b3b      	ldrh	r3, [r7, #24]
 800bf16:	461a      	mov	r2, r3
 800bf18:	0052      	lsls	r2, r2, #1
 800bf1a:	4413      	add	r3, r2
 800bf1c:	82bb      	strh	r3, [r7, #20]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800bf1e:	4b2f      	ldr	r3, [pc, #188]	; (800bfdc <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800bf20:	6819      	ldr	r1, [r3, #0]
 800bf22:	8bba      	ldrh	r2, [r7, #28]
 800bf24:	8ab8      	ldrh	r0, [r7, #20]
 800bf26:	4613      	mov	r3, r2
 800bf28:	00db      	lsls	r3, r3, #3
 800bf2a:	4413      	add	r3, r2
 800bf2c:	00db      	lsls	r3, r3, #3
 800bf2e:	4413      	add	r3, r2
 800bf30:	4403      	add	r3, r0
 800bf32:	440b      	add	r3, r1
 800bf34:	613b      	str	r3, [r7, #16]

	if(rem==0){
 800bf36:	8afb      	ldrh	r3, [r7, #22]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d11c      	bne.n	800bf76 <PWMBoardSPI_bufferDutyChannel+0xe6>
			*pt++=(uint8_t)((on>>4)&0xFF);
 800bf3c:	8bfb      	ldrh	r3, [r7, #30]
 800bf3e:	091b      	lsrs	r3, r3, #4
 800bf40:	b299      	uxth	r1, r3
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	1c5a      	adds	r2, r3, #1
 800bf46:	613a      	str	r2, [r7, #16]
 800bf48:	b2ca      	uxtb	r2, r1
 800bf4a:	701a      	strb	r2, [r3, #0]
			uint8_t ori=*pt;
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	781b      	ldrb	r3, [r3, #0]
 800bf50:	73bb      	strb	r3, [r7, #14]
			ori&=0x0F;
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	f003 030f 	and.w	r3, r3, #15
 800bf58:	73bb      	strb	r3, [r7, #14]
			ori|= ((uint8_t)(on<<4) & 0xF0);
 800bf5a:	8bfb      	ldrh	r3, [r7, #30]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	011b      	lsls	r3, r3, #4
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	b25a      	sxtb	r2, r3
 800bf64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf68:	4313      	orrs	r3, r2
 800bf6a:	b25b      	sxtb	r3, r3
 800bf6c:	73bb      	strb	r3, [r7, #14]
			*pt=ori;
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	7bba      	ldrb	r2, [r7, #14]
 800bf72:	701a      	strb	r2, [r3, #0]
 800bf74:	e01e      	b.n	800bfb4 <PWMBoardSPI_bufferDutyChannel+0x124>
		//	*pt=(uint8_t)(((*pt)&0x0F)|((uint8_t)(on&0x0F)<<4));
	}
	else
	{
		pt++;
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	613b      	str	r3, [r7, #16]
		uint8_t ori=*pt;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	73fb      	strb	r3, [r7, #15]
		ori&=0xF0;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
 800bf84:	f023 030f 	bic.w	r3, r3, #15
 800bf88:	73fb      	strb	r3, [r7, #15]
		ori|= ((uint8_t)(on>>8) & 0x0F);
 800bf8a:	8bfb      	ldrh	r3, [r7, #30]
 800bf8c:	0a1b      	lsrs	r3, r3, #8
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	b25b      	sxtb	r3, r3
 800bf92:	f003 030f 	and.w	r3, r3, #15
 800bf96:	b25a      	sxtb	r2, r3
 800bf98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	b25b      	sxtb	r3, r3
 800bfa0:	73fb      	strb	r3, [r7, #15]
		*pt++=ori;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	1c5a      	adds	r2, r3, #1
 800bfa6:	613a      	str	r2, [r7, #16]
 800bfa8:	7bfa      	ldrb	r2, [r7, #15]
 800bfaa:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(on);
 800bfac:	8bfb      	ldrh	r3, [r7, #30]
 800bfae:	b2da      	uxtb	r2, r3
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	701a      	strb	r2, [r3, #0]
//		*pt=(uint8_t)(((*pt)&0xF0)|((uint8_t)(on>>8)));
//		pt++;
//		*pt=(uint8_t)(on&0xFF);

	}
	ptPWMBoardSPI->dirtyDuty=1;
 800bfb4:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2201      	movs	r2, #1
 800bfba:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	PWMBoardSPI_bufferCMD(ptPWMBoardSPI->syncMode);
 800bfbe:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <PWMBoardSPI_bufferDutyChannel+0x14c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff ff40 	bl	800be4c <PWMBoardSPI_bufferCMD>
}
 800bfcc:	bf00      	nop
 800bfce:	3720      	adds	r7, #32
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	45800000 	.word	0x45800000
 800bfd8:	aaaaaaab 	.word	0xaaaaaaab
 800bfdc:	20000034 	.word	0x20000034

0800bfe0 <PWMBoardSPI_bufferCorrection>:

static void PWMBoardSPI_bufferCorrection(uint16_t num,uint8_t value)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	460a      	mov	r2, r1
 800bfea:	80fb      	strh	r3, [r7, #6]
 800bfec:	4613      	mov	r3, r2
 800bfee:	717b      	strb	r3, [r7, #5]

	num=CONSTRAIN(num,0,PWMBOARDSPI_CHANNELNUM-1);
 800bff0:	88fb      	ldrh	r3, [r7, #6]
 800bff2:	2b8f      	cmp	r3, #143	; 0x8f
 800bff4:	bf28      	it	cs
 800bff6:	238f      	movcs	r3, #143	; 0x8f
 800bff8:	80fb      	strh	r3, [r7, #6]
	uint16_t boards=num/LT8500_CHANNELNUM;
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	4a27      	ldr	r2, [pc, #156]	; (800c09c <PWMBoardSPI_bufferCorrection+0xbc>)
 800bffe:	fba2 2303 	umull	r2, r3, r2, r3
 800c002:	095b      	lsrs	r3, r3, #5
 800c004:	82fb      	strh	r3, [r7, #22]
	uint16_t boardNum=num%LT8500_CHANNELNUM;
 800c006:	88fa      	ldrh	r2, [r7, #6]
 800c008:	4b24      	ldr	r3, [pc, #144]	; (800c09c <PWMBoardSPI_bufferCorrection+0xbc>)
 800c00a:	fba3 1302 	umull	r1, r3, r3, r2
 800c00e:	0959      	lsrs	r1, r3, #5
 800c010:	460b      	mov	r3, r1
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	440b      	add	r3, r1
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	82bb      	strh	r3, [r7, #20]
	uint16_t quo=(boardNum/2);
 800c01c:	8abb      	ldrh	r3, [r7, #20]
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	827b      	strh	r3, [r7, #18]
	uint16_t rem=(boardNum%2);
 800c022:	8abb      	ldrh	r3, [r7, #20]
 800c024:	f003 0301 	and.w	r3, r3, #1
 800c028:	823b      	strh	r3, [r7, #16]
	boardNum = LT8500_CHANNELNUM-1 - boardNum;
 800c02a:	8abb      	ldrh	r3, [r7, #20]
 800c02c:	f1c3 032f 	rsb	r3, r3, #47	; 0x2f
 800c030:	82bb      	strh	r3, [r7, #20]

	uint16_t startingBytesNum=quo*3;
 800c032:	8a7b      	ldrh	r3, [r7, #18]
 800c034:	461a      	mov	r2, r3
 800c036:	0052      	lsls	r2, r2, #1
 800c038:	4413      	add	r3, r2
 800c03a:	81fb      	strh	r3, [r7, #14]
	uint8_t *pt=&(ptPWMBoardSPI->CMDBuffer[boards][startingBytesNum]);
 800c03c:	4b18      	ldr	r3, [pc, #96]	; (800c0a0 <PWMBoardSPI_bufferCorrection+0xc0>)
 800c03e:	6819      	ldr	r1, [r3, #0]
 800c040:	8afa      	ldrh	r2, [r7, #22]
 800c042:	89f8      	ldrh	r0, [r7, #14]
 800c044:	4613      	mov	r3, r2
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	4413      	add	r3, r2
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	4413      	add	r3, r2
 800c04e:	4403      	add	r3, r0
 800c050:	440b      	add	r3, r1
 800c052:	60bb      	str	r3, [r7, #8]
	if(rem==0){
 800c054:	8a3b      	ldrh	r3, [r7, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <PWMBoardSPI_bufferCorrection+0x86>
		*pt=(uint8_t)(value<<2);
 800c05a:	797b      	ldrb	r3, [r7, #5]
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	701a      	strb	r2, [r3, #0]
 800c064:	e00e      	b.n	800c084 <PWMBoardSPI_bufferCorrection+0xa4>
	}
	else
	{
		pt++;
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	3301      	adds	r3, #1
 800c06a:	60bb      	str	r3, [r7, #8]
		*pt++=(uint8_t)(value>>2);
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	60ba      	str	r2, [r7, #8]
 800c072:	797a      	ldrb	r2, [r7, #5]
 800c074:	0892      	lsrs	r2, r2, #2
 800c076:	b2d2      	uxtb	r2, r2
 800c078:	701a      	strb	r2, [r3, #0]
		*pt=(uint8_t)(value<<6);
 800c07a:	797b      	ldrb	r3, [r7, #5]
 800c07c:	019b      	lsls	r3, r3, #6
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	701a      	strb	r2, [r3, #0]
	}
	ptPWMBoardSPI->dirtyCOR=1;
 800c084:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <PWMBoardSPI_bufferCorrection+0xc0>)
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2201      	movs	r2, #1
 800c08a:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	PWMBoardSPI_bufferCMD(LT8500_CMD_Correction);
 800c08e:	2020      	movs	r0, #32
 800c090:	f7ff fedc 	bl	800be4c <PWMBoardSPI_bufferCMD>
}
 800c094:	bf00      	nop
 800c096:	3718      	adds	r7, #24
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	aaaaaaab 	.word	0xaaaaaaab
 800c0a0:	20000034 	.word	0x20000034

0800c0a4 <PWMBoardSPI_setOutputEnable>:



static void PWMBoardSPI_setOutputEnable(uint8_t flag)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b082      	sub	sp, #8
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	71fb      	strb	r3, [r7, #7]
	PWMBoardSPI_bufferCMD((flag?LT8500_CMD_OutputEnable:LT8500_CMD_OutputDisable));
 800c0ae:	79fb      	ldrb	r3, [r7, #7]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d001      	beq.n	800c0b8 <PWMBoardSPI_setOutputEnable+0x14>
 800c0b4:	2330      	movs	r3, #48	; 0x30
 800c0b6:	e000      	b.n	800c0ba <PWMBoardSPI_setOutputEnable+0x16>
 800c0b8:	2340      	movs	r3, #64	; 0x40
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f7ff fec6 	bl	800be4c <PWMBoardSPI_bufferCMD>
	PWMBoardSPI_sendFrame();
 800c0c0:	f7ff feaa 	bl	800be18 <PWMBoardSPI_sendFrame>
	HAL_Delay(500);//THis delay is important, otherwise the enabling funciton may not take effective. I don't know why...
 800c0c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c0c8:	f7f4 ffa2 	bl	8001010 <HAL_Delay>
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <PWMBoardSPI_setCorrectionEnable>:

static void PWMBoardSPI_setCorrectionEnable(uint8_t flag)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	4603      	mov	r3, r0
 800c0dc:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800c0de:	2300      	movs	r3, #0
 800c0e0:	60fb      	str	r3, [r7, #12]
 800c0e2:	e01b      	b.n	800c11c <PWMBoardSPI_setCorrectionEnable+0x48>
		{
		if((ptPWMBoardSPI->StatusBuffer[i][LT8500_FrameLength-1]&0x01)!=(1-flag))
 800c0e4:	4b11      	ldr	r3, [pc, #68]	; (800c12c <PWMBoardSPI_setCorrectionEnable+0x58>)
 800c0e6:	6819      	ldr	r1, [r3, #0]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	4413      	add	r3, r2
 800c0f0:	00db      	lsls	r3, r3, #3
 800c0f2:	4413      	add	r3, r2
 800c0f4:	440b      	add	r3, r1
 800c0f6:	f203 1323 	addw	r3, r3, #291	; 0x123
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	f003 0201 	and.w	r2, r3, #1
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	f1c3 0301 	rsb	r3, r3, #1
 800c106:	429a      	cmp	r2, r3
 800c108:	d005      	beq.n	800c116 <PWMBoardSPI_setCorrectionEnable+0x42>
			{
			PWMBoardSPI_bufferCMD(LT8500_CMD_CorrentionToggle);
 800c10a:	2070      	movs	r0, #112	; 0x70
 800c10c:	f7ff fe9e 	bl	800be4c <PWMBoardSPI_bufferCMD>
			PWMBoardSPI_sendFrame();
 800c110:	f7ff fe82 	bl	800be18 <PWMBoardSPI_sendFrame>
			break;
 800c114:	e005      	b.n	800c122 <PWMBoardSPI_setCorrectionEnable+0x4e>
	for(int i=0;i<PWMBOARDSPI_NUM;i++)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	3301      	adds	r3, #1
 800c11a:	60fb      	str	r3, [r7, #12]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	dde0      	ble.n	800c0e4 <PWMBoardSPI_setCorrectionEnable+0x10>
			}
		}
}
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	20000034 	.word	0x20000034

0800c130 <PWMBoardSPI_startPWMCK>:

static void PWMBoardSPI_startPWMCK(float fre)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b082      	sub	sp, #8
 800c134:	af00      	add	r7, sp, #0
 800c136:	ed87 0a01 	vstr	s0, [r7, #4]
	PWMBuiltIn_writeDuty(ptPWMBoardSPI->Frequency_PWMPortNum,0.5);
 800c13a:	4b0c      	ldr	r3, [pc, #48]	; (800c16c <PWMBoardSPI_startPWMCK+0x3c>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800c142:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800c146:	4618      	mov	r0, r3
 800c148:	f000 fc28 	bl	800c99c <PWMBuiltIn_writeDuty>
	PWMBoardSPI_writeFrequency(fre);
 800c14c:	ed97 0a01 	vldr	s0, [r7, #4]
 800c150:	f000 f80e 	bl	800c170 <PWMBoardSPI_writeFrequency>
	PWMBuiltInStartChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800c154:	4b05      	ldr	r3, [pc, #20]	; (800c16c <PWMBoardSPI_startPWMCK+0x3c>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800c15c:	4618      	mov	r0, r3
 800c15e:	f000 fe99 	bl	800ce94 <PWMBuiltInStartChannel>
}
 800c162:	bf00      	nop
 800c164:	3708      	adds	r7, #8
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
 800c16a:	bf00      	nop
 800c16c:	20000034 	.word	0x20000034

0800c170 <PWMBoardSPI_writeFrequency>:


void PWMBoardSPI_writeFrequency(float fre)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	ed87 0a01 	vstr	s0, [r7, #4]
	fre = CONSTRAIN(fre,EXTERNAL_PWMBOARDSPI_FREMIN,EXTERNAL_PWMBOARDSPI_FREMAX);
 800c17a:	edd7 7a01 	vldr	s15, [r7, #4]
 800c17e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c182:	ed9f 6b39 	vldr	d6, [pc, #228]	; 800c268 <PWMBoardSPI_writeFrequency+0xf8>
 800c186:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18e:	d501      	bpl.n	800c194 <PWMBoardSPI_writeFrequency+0x24>
 800c190:	4b3b      	ldr	r3, [pc, #236]	; (800c280 <PWMBoardSPI_writeFrequency+0x110>)
 800c192:	e00b      	b.n	800c1ac <PWMBoardSPI_writeFrequency+0x3c>
 800c194:	edd7 7a01 	vldr	s15, [r7, #4]
 800c198:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800c284 <PWMBoardSPI_writeFrequency+0x114>
 800c19c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a4:	dd01      	ble.n	800c1aa <PWMBoardSPI_writeFrequency+0x3a>
 800c1a6:	4b38      	ldr	r3, [pc, #224]	; (800c288 <PWMBoardSPI_writeFrequency+0x118>)
 800c1a8:	e000      	b.n	800c1ac <PWMBoardSPI_writeFrequency+0x3c>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	607b      	str	r3, [r7, #4]
	float newClkFrequency=fre*4096;
 800c1ae:	edd7 7a01 	vldr	s15, [r7, #4]
 800c1b2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800c28c <PWMBoardSPI_writeFrequency+0x11c>
 800c1b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1ba:	edc7 7a03 	vstr	s15, [r7, #12]
	if(fabs(newClkFrequency-ptPWMBoardSPI->clkFrequency)>1e-6)
 800c1be:	4b34      	ldr	r3, [pc, #208]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800c1c6:	ed97 7a03 	vldr	s14, [r7, #12]
 800c1ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1ce:	eef0 7ae7 	vabs.f32	s15, s15
 800c1d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c1d6:	ed9f 6b26 	vldr	d6, [pc, #152]	; 800c270 <PWMBoardSPI_writeFrequency+0x100>
 800c1da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e2:	dc00      	bgt.n	800c1e6 <PWMBoardSPI_writeFrequency+0x76>
		ptPWMBoardSPI->frequency=fre;
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
	}
}
 800c1e4:	e03a      	b.n	800c25c <PWMBoardSPI_writeFrequency+0xec>
		ptPWMBoardSPI->frequency=fre;
 800c1e6:	4b2a      	ldr	r3, [pc, #168]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
		ptPWMBoardSPI->clkFrequency= newClkFrequency;
 800c1f0:	4b27      	ldr	r3, [pc, #156]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
		ptPWMBoardSPI->clkFrequency = CONSTRAIN(ptPWMBoardSPI->clkFrequency, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800c1fa:	4b25      	ldr	r3, [pc, #148]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800c202:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c206:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 800c278 <PWMBoardSPI_writeFrequency+0x108>
 800c20a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	d501      	bpl.n	800c218 <PWMBoardSPI_writeFrequency+0xa8>
 800c214:	4b1f      	ldr	r3, [pc, #124]	; (800c294 <PWMBoardSPI_writeFrequency+0x124>)
 800c216:	e010      	b.n	800c23a <PWMBoardSPI_writeFrequency+0xca>
 800c218:	4b1d      	ldr	r3, [pc, #116]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800c220:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800c298 <PWMBoardSPI_writeFrequency+0x128>
 800c224:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22c:	dd01      	ble.n	800c232 <PWMBoardSPI_writeFrequency+0xc2>
 800c22e:	4b1b      	ldr	r3, [pc, #108]	; (800c29c <PWMBoardSPI_writeFrequency+0x12c>)
 800c230:	e003      	b.n	800c23a <PWMBoardSPI_writeFrequency+0xca>
 800c232:	4b17      	ldr	r3, [pc, #92]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800c23a:	4a15      	ldr	r2, [pc, #84]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c23c:	6812      	ldr	r2, [r2, #0]
 800c23e:	f8c2 31cc 	str.w	r3, [r2, #460]	; 0x1cc
		PWMBuiltIn_writeFrequency(ptPWMBoardSPI->Frequency_PWMPortNum,ptPWMBoardSPI->clkFrequency);
 800c242:	4b13      	ldr	r3, [pc, #76]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f8b3 21c6 	ldrh.w	r2, [r3, #454]	; 0x1c6
 800c24a:	4b11      	ldr	r3, [pc, #68]	; (800c290 <PWMBoardSPI_writeFrequency+0x120>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	edd3 7a73 	vldr	s15, [r3, #460]	; 0x1cc
 800c252:	eeb0 0a67 	vmov.f32	s0, s15
 800c256:	4610      	mov	r0, r2
 800c258:	f000 fc3e 	bl	800cad8 <PWMBuiltIn_writeFrequency>
}
 800c25c:	bf00      	nop
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	f3af 8000 	nop.w
 800c268:	88e368f1 	.word	0x88e368f1
 800c26c:	3ee4f8b5 	.word	0x3ee4f8b5
 800c270:	a0b5ed8d 	.word	0xa0b5ed8d
 800c274:	3eb0c6f7 	.word	0x3eb0c6f7
 800c278:	eb851eb8 	.word	0xeb851eb8
 800c27c:	3f9eb851 	.word	0x3f9eb851
 800c280:	3727c5ac 	.word	0x3727c5ac
 800c284:	459c4000 	.word	0x459c4000
 800c288:	459c4000 	.word	0x459c4000
 800c28c:	45800000 	.word	0x45800000
 800c290:	20000034 	.word	0x20000034
 800c294:	3cf5c28f 	.word	0x3cf5c28f
 800c298:	4bcdfe60 	.word	0x4bcdfe60
 800c29c:	4bcdfe60 	.word	0x4bcdfe60

0800c2a0 <PWMBoardSPI_writeDuty>:
void PWMBoardSPI_writeDuty(uint16_t num, float fduty)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b082      	sub	sp, #8
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	ed87 0a00 	vstr	s0, [r7]
 800c2ac:	80fb      	strh	r3, [r7, #6]
	PWMBoardSPI_bufferDutyChannel(num,fduty);
 800c2ae:	88fb      	ldrh	r3, [r7, #6]
 800c2b0:	ed97 0a00 	vldr	s0, [r7]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f7ff fdeb 	bl	800be90 <PWMBoardSPI_bufferDutyChannel>
}
 800c2ba:	bf00      	nop
 800c2bc:	3708      	adds	r7, #8
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}

0800c2c2 <PWMBoardSPI_writeCorrectionAll>:
void PWMBoardSPI_writeCorrectionAll(uint8_t value)
{
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	60fb      	str	r3, [r7, #12]
 800c2d0:	e009      	b.n	800c2e6 <PWMBoardSPI_writeCorrectionAll+0x24>
		{
			PWMBoardSPI_bufferCorrection(i,value);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	79fa      	ldrb	r2, [r7, #7]
 800c2d8:	4611      	mov	r1, r2
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff fe80 	bl	800bfe0 <PWMBoardSPI_bufferCorrection>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	2b8f      	cmp	r3, #143	; 0x8f
 800c2ea:	ddf2      	ble.n	800c2d2 <PWMBoardSPI_writeCorrectionAll+0x10>
		}
	PWMBoardSPI_sendFrame();
 800c2ec:	f7ff fd94 	bl	800be18 <PWMBoardSPI_sendFrame>
}
 800c2f0:	bf00      	nop
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <PWMBoardSPI_flushDutyAll>:

void PWMBoardSPI_flushDutyAll()
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
	uint32_t c1=micros();
 800c2fe:	f000 f969 	bl	800c5d4 <micros>
 800c302:	6078      	str	r0, [r7, #4]
	if(ptPWMBoardSPI->dirtyDuty==1)
 800c304:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <PWMBoardSPI_flushDutyAll+0x40>)
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f893 31c3 	ldrb.w	r3, [r3, #451]	; 0x1c3
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d106      	bne.n	800c31e <PWMBoardSPI_flushDutyAll+0x26>
	{
		ptPWMBoardSPI->dirtyDuty=0;
 800c310:	4b09      	ldr	r3, [pc, #36]	; (800c338 <PWMBoardSPI_flushDutyAll+0x40>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
		PWMBoardSPI_sendFrame();
 800c31a:	f7ff fd7d 	bl	800be18 <PWMBoardSPI_sendFrame>

	//If cor is enabled, meaning that the board has been reset accidentally. we need to reinit it.
//	if(PWMBoardSPI_getCorEnabled()==0){
//		PWMBoardSPI_reset();
//	}
	ptPWMBoardSPI->lastUpdateTime=micros()-c1;
 800c31e:	f000 f959 	bl	800c5d4 <micros>
 800c322:	4601      	mov	r1, r0
 800c324:	4b04      	ldr	r3, [pc, #16]	; (800c338 <PWMBoardSPI_flushDutyAll+0x40>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	1a8a      	subs	r2, r1, r2
 800c32c:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	20000034 	.word	0x20000034

0800c33c <PWMBoardSPI_init>:

void PWMBoardSPI_init()
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
	memset(ptPWMBoardSPI,0,sizeof(PWM_BOARDSPI));
 800c342:	4b36      	ldr	r3, [pc, #216]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c34a:	2100      	movs	r1, #0
 800c34c:	4618      	mov	r0, r3
 800c34e:	f005 f8fc 	bl	801154a <memset>

	ptPWMBoardSPI->PWM_spi=&hspi_PWM;
 800c352:	4b32      	ldr	r3, [pc, #200]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a32      	ldr	r2, [pc, #200]	; (800c420 <PWMBoardSPI_init+0xe4>)
 800c358:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	ptPWMBoardSPI->CS_Port=DO_15_GPIO_Port;
 800c35c:	4b2f      	ldr	r3, [pc, #188]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	4a30      	ldr	r2, [pc, #192]	; (800c424 <PWMBoardSPI_init+0xe8>)
 800c362:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
	ptPWMBoardSPI->CS_Pin=DO_15_Pin;
 800c366:	4b2d      	ldr	r3, [pc, #180]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c36e:	f8a3 21c0 	strh.w	r2, [r3, #448]	; 0x1c0

	ptPWMBoardSPI->Frequency_PWMPortNum=BUILTIN_PWM_NUM-1;
 800c372:	4b2a      	ldr	r3, [pc, #168]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2213      	movs	r2, #19
 800c378:	f8a3 21c6 	strh.w	r2, [r3, #454]	; 0x1c6
	ptPWMBoardSPI->syncMode=LT8500_CMD_AsyUpdate;
 800c37c:	4b27      	ldr	r3, [pc, #156]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2210      	movs	r2, #16
 800c382:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
	ptPWMBoardSPI->dirtyCOR=0;
 800c386:	4b25      	ldr	r3, [pc, #148]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f883 21c4 	strb.w	r2, [r3, #452]	; 0x1c4
	ptPWMBoardSPI->dirtyDuty=0;
 800c390:	4b22      	ldr	r3, [pc, #136]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2200      	movs	r2, #0
 800c396:	f883 21c3 	strb.w	r2, [r3, #451]	; 0x1c3
	ptPWMBoardSPI->lastUpdateTime=0;
 800c39a:	4b20      	ldr	r3, [pc, #128]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	ptPWMBoardSPI->PWMTime=0;
 800c3a4:	4b1d      	ldr	r3, [pc, #116]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
	ptPWMBoardSPI->PWMTimeEnd=0;
 800c3ae:	4b1b      	ldr	r3, [pc, #108]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
	ptPWMBoardSPI->PWMTimeStart=0;
 800c3b8:	4b18      	ldr	r3, [pc, #96]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4

	PWMBuiltInStopChannel(ptPWMBoardSPI->Frequency_PWMPortNum);
 800c3c2:	4b16      	ldr	r3, [pc, #88]	; (800c41c <PWMBoardSPI_init+0xe0>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f8b3 31c6 	ldrh.w	r3, [r3, #454]	; 0x1c6
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 fd7a 	bl	800cec4 <PWMBuiltInStopChannel>

	//initialization
	//1. Apply power and drive LDIBLANK low. SDO will go low when the on-chip power-on-reset (POR) de-asserts.
	PWM_CS_LOW();
 800c3d0:	f7ff fcf0 	bl	800bdb4 <PWM_CS_LOW>

	//2.Send a correction register frame (CMD = 0x20) on the serial interface. This sets the correction factor on each channel.
	PWMBoardSPI_writeCorrectionAll(63);
 800c3d4:	203f      	movs	r0, #63	; 0x3f
 800c3d6:	f7ff ff74 	bl	800c2c2 <PWMBoardSPI_writeCorrectionAll>

	//3. Send an update frame (CMD = 0x00 or CMD = 0x10) on the serial interface. This sets the pulse width of each channel.
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800c3da:	2300      	movs	r3, #0
 800c3dc:	607b      	str	r3, [r7, #4]
 800c3de:	e009      	b.n	800c3f4 <PWMBoardSPI_init+0xb8>
	{
		PWMBoardSPI_bufferDutyChannel(i,0);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c428 <PWMBoardSPI_init+0xec>
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7ff fd51 	bl	800be90 <PWMBoardSPI_bufferDutyChannel>
	for(int i=0;i<PWMBOARDSPI_CHANNELNUM;i++)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	607b      	str	r3, [r7, #4]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b8f      	cmp	r3, #143	; 0x8f
 800c3f8:	ddf2      	ble.n	800c3e0 <PWMBoardSPI_init+0xa4>
	}
	PWMBoardSPI_sendFrame();
 800c3fa:	f7ff fd0d 	bl	800be18 <PWMBoardSPI_sendFrame>

	//4. start PWM clock (PWMCK)
	PWMBoardSPI_startPWMCK(40);
 800c3fe:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800c42c <PWMBoardSPI_init+0xf0>
 800c402:	f7ff fe95 	bl	800c130 <PWMBoardSPI_startPWMCK>

	PWMBoardSPI_setCorrectionEnable(0);
 800c406:	2000      	movs	r0, #0
 800c408:	f7ff fe64 	bl	800c0d4 <PWMBoardSPI_setCorrectionEnable>

	//5. Send an output enable frame (CMD = 0x30) on the serial interface. This enables the modulated pulses on the PWM[48:1] outputs
	PWMBoardSPI_setOutputEnable(1);
 800c40c:	2001      	movs	r0, #1
 800c40e:	f7ff fe49 	bl	800c0a4 <PWMBoardSPI_setOutputEnable>

}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	20000034 	.word	0x20000034
 800c420:	2000a728 	.word	0x2000a728
 800c424:	40021000 	.word	0x40021000
 800c428:	00000000 	.word	0x00000000
 800c42c:	42200000 	.word	0x42200000

0800c430 <_ZN9PNEUDRIVEC1Ei>:
 */

#include <PneuDrive.h>
#include "stdlib.h"

PNEUDRIVE::PNEUDRIVE(int chambernum)
 800c430:	b590      	push	{r4, r7, lr}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	330c      	adds	r3, #12
 800c43e:	2200      	movs	r2, #0
 800c440:	2100      	movs	r1, #0
 800c442:	4618      	mov	r0, r3
 800c444:	f7ff fbaa 	bl	800bb9c <_ZN15PRESSURE_SOURCEC1Eii>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	3344      	adds	r3, #68	; 0x44
 800c44c:	2200      	movs	r2, #0
 800c44e:	2100      	movs	r1, #0
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff fba3 	bl	800bb9c <_ZN15PRESSURE_SOURCEC1Eii>
{
	NumChambers=chambernum;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	b29a      	uxth	r2, r3
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	809a      	strh	r2, [r3, #4]
	chambers =(CHAMBER **)calloc(chambernum,sizeof(CHAMBER *));
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	2104      	movs	r1, #4
 800c462:	4618      	mov	r0, r3
 800c464:	f005 f82c 	bl	80114c0 <calloc>
 800c468:	4603      	mov	r3, r0
 800c46a:	461a      	mov	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	609a      	str	r2, [r3, #8]
	pressureCommands = (float *)calloc(chambernum,sizeof(float));
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2104      	movs	r1, #4
 800c474:	4618      	mov	r0, r3
 800c476:	f005 f823 	bl	80114c0 <calloc>
 800c47a:	4603      	mov	r3, r0
 800c47c:	461a      	mov	r2, r3
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	601a      	str	r2, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800c482:	2300      	movs	r3, #0
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	889b      	ldrh	r3, [r3, #4]
 800c48a:	461a      	mov	r2, r3
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4293      	cmp	r3, r2
 800c490:	da18      	bge.n	800c4c4 <_ZN9PNEUDRIVEC1Ei+0x94>
	{
		chambers[i]=new CHAMBER(2*i,2*i+1,i);
 800c492:	f241 00dc 	movw	r0, #4316	; 0x10dc
 800c496:	f004 ff44 	bl	8011322 <_Znwj>
 800c49a:	4603      	mov	r3, r0
 800c49c:	461c      	mov	r4, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	0059      	lsls	r1, r3, #1
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	005b      	lsls	r3, r3, #1
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	4620      	mov	r0, r4
 800c4ac:	f7fe fdc6 	bl	800b03c <_ZN7CHAMBERC1Eiii>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689a      	ldr	r2, [r3, #8]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	009b      	lsls	r3, r3, #2
 800c4b8:	4413      	add	r3, r2
 800c4ba:	601c      	str	r4, [r3, #0]
	for(int i=0;i<NumChambers;i++)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	60fb      	str	r3, [r7, #12]
 800c4c2:	e7e0      	b.n	800c486 <_ZN9PNEUDRIVEC1Ei+0x56>
	}
	pressureDeadZone = 2000;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a05      	ldr	r2, [pc, #20]	; (800c4dc <_ZN9PNEUDRIVEC1Ei+0xac>)
 800c4c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    frequency = 40;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	4a04      	ldr	r2, [pc, #16]	; (800c4e0 <_ZN9PNEUDRIVEC1Ei+0xb0>)
 800c4d0:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3714      	adds	r7, #20
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd90      	pop	{r4, r7, pc}
 800c4dc:	44fa0000 	.word	0x44fa0000
 800c4e0:	42200000 	.word	0x42200000

0800c4e4 <AnalogRead>:
extern TIM_HandleTypeDef htim5;
int32_t globalPeriodControlLoop=1;
int32_t globalPeriodSendLoop=1;

float AnalogRead(uint16_t num)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	80fb      	strh	r3, [r7, #6]
	float value=0;
 800c4ee:	f04f 0300 	mov.w	r3, #0
 800c4f2:	60fb      	str	r3, [r7, #12]
	if(0<=num && num<BUILTIN_ANA_IN_NUM)
 800c4f4:	88fb      	ldrh	r3, [r7, #6]
 800c4f6:	2b05      	cmp	r3, #5
 800c4f8:	d806      	bhi.n	800c508 <AnalogRead+0x24>
		value=AnalogRead_BuiltIn(num);
 800c4fa:	88fb      	ldrh	r3, [r7, #6]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 f977 	bl	800c7f0 <AnalogRead_BuiltIn>
 800c502:	ed87 0a03 	vstr	s0, [r7, #12]
 800c506:	e008      	b.n	800c51a <AnalogRead+0x36>
	else
	{
#if (ADBOARD_NUM>0)
		num-=BUILTIN_ANA_IN_NUM;
 800c508:	88fb      	ldrh	r3, [r7, #6]
 800c50a:	3b06      	subs	r3, #6
 800c50c:	80fb      	strh	r3, [r7, #6]
		value=AnalogRead_External(num);
 800c50e:	88fb      	ldrh	r3, [r7, #6]
 800c510:	4618      	mov	r0, r3
 800c512:	f7fe fd05 	bl	800af20 <AnalogRead_External>
 800c516:	ed87 0a03 	vstr	s0, [r7, #12]
#endif
	}
	return value;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	ee07 3a90 	vmov	s15, r3

}
 800c520:	eeb0 0a67 	vmov.f32	s0, s15
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <DigitalWrite>:
#if (DABOARD_NUM>0)
	DABoard_writeVoltage(num,voltage);
#endif
}
void DigitalWrite(uint16_t num, uint16_t state)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b082      	sub	sp, #8
 800c52e:	af00      	add	r7, sp, #0
 800c530:	4603      	mov	r3, r0
 800c532:	460a      	mov	r2, r1
 800c534:	80fb      	strh	r3, [r7, #6]
 800c536:	4613      	mov	r3, r2
 800c538:	80bb      	strh	r3, [r7, #4]
	DigitalBuiltIn_Write(num,state);
 800c53a:	88ba      	ldrh	r2, [r7, #4]
 800c53c:	88fb      	ldrh	r3, [r7, #6]
 800c53e:	4611      	mov	r1, r2
 800c540:	4618      	mov	r0, r3
 800c542:	f000 f98f 	bl	800c864 <DigitalBuiltIn_Write>
}
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <PWMWriteDuty>:
{
	DigitalBuiltIn_Toggle(num);
}

void PWMWriteDuty(uint16_t num, float fduty)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b084      	sub	sp, #16
 800c552:	af00      	add	r7, sp, #0
 800c554:	4603      	mov	r3, r0
 800c556:	ed87 0a00 	vstr	s0, [r7]
 800c55a:	80fb      	strh	r3, [r7, #6]
	uint16_t numori=num;
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	81fb      	strh	r3, [r7, #14]
	if(0<=num && num<BUILTIN_PWM_NUM){
 800c560:	88fb      	ldrh	r3, [r7, #6]
 800c562:	2b13      	cmp	r3, #19
 800c564:	d806      	bhi.n	800c574 <PWMWriteDuty+0x26>
		PWMBuiltIn_writeDuty(num,fduty);
 800c566:	88fb      	ldrh	r3, [r7, #6]
 800c568:	ed97 0a00 	vldr	s0, [r7]
 800c56c:	4618      	mov	r0, r3
 800c56e:	f000 fa15 	bl	800c99c <PWMBuiltIn_writeDuty>
		if(0<=num && num<PWMBOARDI2C_CHANNELNUM){
		 PWMBoardI2C_writeDuty(num,fduty);
		}
#endif
	}
}
 800c572:	e00b      	b.n	800c58c <PWMWriteDuty+0x3e>
		num= numori - BUILTIN_PWM_NUM;
 800c574:	89fb      	ldrh	r3, [r7, #14]
 800c576:	3b14      	subs	r3, #20
 800c578:	80fb      	strh	r3, [r7, #6]
		if(0<=num && num<PWMBOARDSPI_CHANNELNUM){
 800c57a:	88fb      	ldrh	r3, [r7, #6]
 800c57c:	2b8f      	cmp	r3, #143	; 0x8f
 800c57e:	d805      	bhi.n	800c58c <PWMWriteDuty+0x3e>
			PWMBoardSPI_writeDuty(num,fduty);
 800c580:	88fb      	ldrh	r3, [r7, #6]
 800c582:	ed97 0a00 	vldr	s0, [r7]
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fe8a 	bl	800c2a0 <PWMBoardSPI_writeDuty>
}
 800c58c:	bf00      	nop
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <interruptCallback>:
  * @note   This function is called  when uprising change occurs on the interrupt port
  * @param  interrupt_Pin : the number of port where interrupt took place
  * @retval None
  */
__weak  void interruptCallback(int Button_Interrupt_Pin)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
};
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <serial2Callback>:
	printf("Running default serial1Callback()\r\n");
}
;

__weak  void serial2Callback(char *pSerialPort4Buffer)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	printf("Running default serial2Callback()\r\n");
 800c5b0:	4803      	ldr	r0, [pc, #12]	; (800c5c0 <serial2Callback+0x18>)
 800c5b2:	f005 ff11 	bl	80123d8 <puts>
};
 800c5b6:	bf00      	nop
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	08015ac8 	.word	0x08015ac8

0800c5c4 <millis>:
/*-------------------Delay Function needs modification--------------------------------*/



uint32_t millis()
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 800c5c8:	f7f4 fd16 	bl	8000ff8 <HAL_GetTick>
 800c5cc:	4603      	mov	r3, r0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	bd80      	pop	{r7, pc}
	...

0800c5d4 <micros>:

uint32_t micros()
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
	uint32_t t=(millis()*1000) + htim5.Instance->CNT;
 800c5da:	f7ff fff3 	bl	800c5c4 <millis>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c5e4:	fb03 f202 	mul.w	r2, r3, r2
 800c5e8:	4b04      	ldr	r3, [pc, #16]	; (800c5fc <micros+0x28>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ee:	4413      	add	r3, r2
 800c5f0:	607b      	str	r3, [r7, #4]
	return t;
 800c5f2:	687b      	ldr	r3, [r7, #4]
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3708      	adds	r7, #8
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	2000aa34 	.word	0x2000aa34

0800c600 <delay_us>:

void delay_us(int32_t t)  //1MHz 1us
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
	uint32_t ts=micros();
 800c608:	f7ff ffe4 	bl	800c5d4 <micros>
 800c60c:	60f8      	str	r0, [r7, #12]
	while((int32_t)(micros()-ts)<t);
 800c60e:	f7ff ffe1 	bl	800c5d4 <micros>
 800c612:	4602      	mov	r2, r0
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	461a      	mov	r2, r3
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	4293      	cmp	r3, r2
 800c61e:	bfcc      	ite	gt
 800c620:	2301      	movgt	r3, #1
 800c622:	2300      	movle	r3, #0
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b00      	cmp	r3, #0
 800c628:	d000      	beq.n	800c62c <delay_us+0x2c>
 800c62a:	e7f0      	b.n	800c60e <delay_us+0xe>
}
 800c62c:	bf00      	nop
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <delay_ns>:
void delay_ns(int32_t t)  ////20MHz 50ns
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_ENABLE(&htim7);
 800c63c:	4b20      	ldr	r3, [pc, #128]	; (800c6c0 <delay_ns+0x8c>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	4b1f      	ldr	r3, [pc, #124]	; (800c6c0 <delay_ns+0x8c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f042 0201 	orr.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]
   while((int32_t)(htim7.Instance->CNT)<t);
 800c64c:	4b1c      	ldr	r3, [pc, #112]	; (800c6c0 <delay_ns+0x8c>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c652:	461a      	mov	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4293      	cmp	r3, r2
 800c658:	bfcc      	ite	gt
 800c65a:	2301      	movgt	r3, #1
 800c65c:	2300      	movle	r3, #0
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d000      	beq.n	800c666 <delay_ns+0x32>
 800c664:	e7f2      	b.n	800c64c <delay_ns+0x18>
   __HAL_TIM_DISABLE(&htim7);
 800c666:	4b16      	ldr	r3, [pc, #88]	; (800c6c0 <delay_ns+0x8c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	6a1a      	ldr	r2, [r3, #32]
 800c66c:	f241 1311 	movw	r3, #4369	; 0x1111
 800c670:	4013      	ands	r3, r2
 800c672:	2b00      	cmp	r3, #0
 800c674:	bf0c      	ite	eq
 800c676:	2301      	moveq	r3, #1
 800c678:	2300      	movne	r3, #0
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d014      	beq.n	800c6aa <delay_ns+0x76>
 800c680:	4b0f      	ldr	r3, [pc, #60]	; (800c6c0 <delay_ns+0x8c>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6a1a      	ldr	r2, [r3, #32]
 800c686:	f240 4344 	movw	r3, #1092	; 0x444
 800c68a:	4013      	ands	r3, r2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	bf0c      	ite	eq
 800c690:	2301      	moveq	r3, #1
 800c692:	2300      	movne	r3, #0
 800c694:	b2db      	uxtb	r3, r3
 800c696:	2b00      	cmp	r3, #0
 800c698:	d007      	beq.n	800c6aa <delay_ns+0x76>
 800c69a:	4b09      	ldr	r3, [pc, #36]	; (800c6c0 <delay_ns+0x8c>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	4b07      	ldr	r3, [pc, #28]	; (800c6c0 <delay_ns+0x8c>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f022 0201 	bic.w	r2, r2, #1
 800c6a8:	601a      	str	r2, [r3, #0]
   htim7.Instance->CNT=0;
 800c6aa:	4b05      	ldr	r3, [pc, #20]	; (800c6c0 <delay_ns+0x8c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	625a      	str	r2, [r3, #36]	; 0x24

}
 800c6b2:	bf00      	nop
 800c6b4:	370c      	adds	r7, #12
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6bc:	4770      	bx	lr
 800c6be:	bf00      	nop
 800c6c0:	2000acb4 	.word	0x2000acb4

0800c6c4 <setPeriodControlLoop>:

void setPeriodControlLoop(int32_t clMS)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
	globalPeriodControlLoop=clMS;
 800c6cc:	4a04      	ldr	r2, [pc, #16]	; (800c6e0 <setPeriodControlLoop+0x1c>)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6013      	str	r3, [r2, #0]
}
 800c6d2:	bf00      	nop
 800c6d4:	370c      	adds	r7, #12
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	20000038 	.word	0x20000038

0800c6e4 <setPeriodSendLoop>:

void setPeriodSendLoop(int32_t slMS)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
	globalPeriodSendLoop=slMS;
 800c6ec:	4a04      	ldr	r2, [pc, #16]	; (800c700 <setPeriodSendLoop+0x1c>)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6013      	str	r3, [r2, #0]
}
 800c6f2:	bf00      	nop
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	2000003c 	.word	0x2000003c

0800c704 <_ZN14SOLENOID_VALVEC1Ei>:

#include <PneuDriveLL.h>
#include <SOLENOIDVALVE.h>


SOLENOID_VALVE::SOLENOID_VALVE(int num){
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]

	_duty=0;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f04f 0200 	mov.w	r2, #0
 800c714:	609a      	str	r2, [r3, #8]
	duty=(PWM_DIGITAL_OUTPUT_REVERSED == 0)?_duty:(1-_duty);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	edd3 7a02 	vldr	s15, [r3, #8]
 800c71c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c720:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	edc3 7a01 	vstr	s15, [r3, #4]
	frequency = 10;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	4a09      	ldr	r2, [pc, #36]	; (800c754 <_ZN14SOLENOID_VALVEC1Ei+0x50>)
 800c72e:	60da      	str	r2, [r3, #12]
	dutyMin = 0;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f04f 0200 	mov.w	r2, #0
 800c736:	611a      	str	r2, [r3, #16]
	dutyMax = 1;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c73e:	615a      	str	r2, [r3, #20]
	attach(num);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f808 	bl	800c758 <_ZN14SOLENOID_VALVE6attachEi>
}
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4618      	mov	r0, r3
 800c74c:	3708      	adds	r7, #8
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	41200000 	.word	0x41200000

0800c758 <_ZN14SOLENOID_VALVE6attachEi>:

void SOLENOID_VALVE::attach(int num)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
	PWMPort = num;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	601a      	str	r2, [r3, #0]
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <_ZN14SOLENOID_VALVE9writeDutyEf>:
{
	return duty;
}

void SOLENOID_VALVE::writeDuty(float dut)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	ed87 0a00 	vstr	s0, [r7]
	dut = CONSTRAIN(dut,dutyMin,dutyMax);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	ed93 7a04 	vldr	s14, [r3, #16]
 800c786:	edd7 7a00 	vldr	s15, [r7]
 800c78a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c792:	dd02      	ble.n	800c79a <_ZN14SOLENOID_VALVE9writeDutyEf+0x26>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	e00d      	b.n	800c7b6 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	ed93 7a05 	vldr	s14, [r3, #20]
 800c7a0:	edd7 7a00 	vldr	s15, [r7]
 800c7a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c7a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ac:	d502      	bpl.n	800c7b4 <_ZN14SOLENOID_VALVE9writeDutyEf+0x40>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	e000      	b.n	800c7b6 <_ZN14SOLENOID_VALVE9writeDutyEf+0x42>
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	603b      	str	r3, [r7, #0]
//	{
//		 duty = dut;
//		_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
//		PWMWriteDuty(PWMPort,_duty);
//	}
	 duty = dut;
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	605a      	str	r2, [r3, #4]
	_duty= (PWM_DIGITAL_OUTPUT_REVERSED == 0)?duty:(1-duty);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c7c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	edc3 7a02 	vstr	s15, [r3, #8]
	PWMWriteDuty(PWMPort,_duty);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	edd3 7a02 	vldr	s15, [r3, #8]
 800c7de:	eeb0 0a67 	vmov.f32	s0, s15
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	f7ff feb3 	bl	800c54e <PWMWriteDuty>
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <AnalogRead_BuiltIn>:
		fADDataBuiltIn[i]=ADDataBuiltIn[i]/4096.0f*3.3f;

}*/

float AnalogRead_BuiltIn(int num)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	if(num>=0 && num<BUILTIN_ANA_IN_NUM)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	db1e      	blt.n	800c83c <AnalogRead_BuiltIn+0x4c>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	2b05      	cmp	r3, #5
 800c802:	dc1b      	bgt.n	800c83c <AnalogRead_BuiltIn+0x4c>
	{
		fADDataBuiltIn[num]=ADDataBuiltIn[num]/4096.0f*3.3f;
 800c804:	4a13      	ldr	r2, [pc, #76]	; (800c854 <AnalogRead_BuiltIn+0x64>)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c80c:	ee07 3a90 	vmov	s15, r3
 800c810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c814:	eddf 6a10 	vldr	s13, [pc, #64]	; 800c858 <AnalogRead_BuiltIn+0x68>
 800c818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c81c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800c85c <AnalogRead_BuiltIn+0x6c>
 800c820:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c824:	4a0e      	ldr	r2, [pc, #56]	; (800c860 <AnalogRead_BuiltIn+0x70>)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	edc3 7a00 	vstr	s15, [r3]
		return fADDataBuiltIn[num];
 800c830:	4a0b      	ldr	r2, [pc, #44]	; (800c860 <AnalogRead_BuiltIn+0x70>)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	009b      	lsls	r3, r3, #2
 800c836:	4413      	add	r3, r2
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	e001      	b.n	800c840 <AnalogRead_BuiltIn+0x50>
	}
	else
		return 0;
 800c83c:	f04f 0300 	mov.w	r3, #0
 800c840:	ee07 3a90 	vmov	s15, r3
}
 800c844:	eeb0 0a67 	vmov.f32	s0, s15
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	2000b24c 	.word	0x2000b24c
 800c858:	45800000 	.word	0x45800000
 800c85c:	40533333 	.word	0x40533333
 800c860:	2000b234 	.word	0x2000b234

0800c864 <DigitalBuiltIn_Write>:
static uint16_t BuiltInDigitalIn_Pin[BUILTIN_DIT_IN_NUM]={DI_0_Pin,DI_1_Pin,DI_2_Pin,DI_3_Pin};



void DigitalBuiltIn_Write(uint16_t num, uint16_t state)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	4603      	mov	r3, r0
 800c86c:	460a      	mov	r2, r1
 800c86e:	80fb      	strh	r3, [r7, #6]
 800c870:	4613      	mov	r3, r2
 800c872:	80bb      	strh	r3, [r7, #4]
	GPIO_PinState sta = (GPIO_PinState)(state);
 800c874:	88bb      	ldrh	r3, [r7, #4]
 800c876:	73fb      	strb	r3, [r7, #15]
	if(0<=num && num<BUILTIN_DIT_OUT_NUM){
 800c878:	88fb      	ldrh	r3, [r7, #6]
 800c87a:	2b0f      	cmp	r3, #15
 800c87c:	d80b      	bhi.n	800c896 <DigitalBuiltIn_Write+0x32>
	HAL_GPIO_WritePin(BuiltInDigitalOut_GPIO_Port[num], BuiltInDigitalOut_Pin[num], sta);
 800c87e:	88fb      	ldrh	r3, [r7, #6]
 800c880:	4a07      	ldr	r2, [pc, #28]	; (800c8a0 <DigitalBuiltIn_Write+0x3c>)
 800c882:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c886:	88fb      	ldrh	r3, [r7, #6]
 800c888:	4a06      	ldr	r2, [pc, #24]	; (800c8a4 <DigitalBuiltIn_Write+0x40>)
 800c88a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c88e:	7bfa      	ldrb	r2, [r7, #15]
 800c890:	4619      	mov	r1, r3
 800c892:	f7f6 f96d 	bl	8002b70 <HAL_GPIO_WritePin>
	}
}
 800c896:	bf00      	nop
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	20000040 	.word	0x20000040
 800c8a4:	20000080 	.word	0x20000080

0800c8a8 <duty2CCR>:
static uint32_t PWM_CriticalPSC_power[PWM_CRITICAL_FRE_NUM]={16,8,8,6,6,4,4,2,2,0};
static uint32_t PWM_CriticalARR[PWM_CRITICAL_FRE_NUM];
static uint32_t PWM_CriticalPSC[PWM_CRITICAL_FRE_NUM];
static float 	PWM_CRITICAL_FRE[BUILTIN_PWM_NUM][PWM_CRITICAL_FRE_NUM];

static uint32_t duty2CCR(uint32_t arr,float fduty){
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	ed87 0a00 	vstr	s0, [r7]
	uint32_t ccr=(round)((uint32_t)(arr+1)*fduty);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	ee07 3a90 	vmov	s15, r3
 800c8bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c8c0:	edd7 7a00 	vldr	s15, [r7]
 800c8c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8c8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c8cc:	eeb0 0b47 	vmov.f64	d0, d7
 800c8d0:	f004 fd52 	bl	8011378 <round>
 800c8d4:	eeb0 7b40 	vmov.f64	d7, d0
 800c8d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800c8dc:	ee17 3a90 	vmov	r3, s15
 800c8e0:	60fb      	str	r3, [r7, #12]
	return CONSTRAIN(ccr,0,65535);
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	bf28      	it	cs
 800c8ec:	4613      	movcs	r3, r2
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3710      	adds	r7, #16
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <CCR2duty>:

static float CCR2duty(uint32_t arr,uint32_t ccr){
 800c8f6:	b480      	push	{r7}
 800c8f8:	b085      	sub	sp, #20
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	6039      	str	r1, [r7, #0]
	float fccr=ccr;
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	ee07 3a90 	vmov	s15, r3
 800c906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c90a:	edc7 7a03 	vstr	s15, [r7, #12]
	return (fccr/(uint32_t)(arr+1));
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	3301      	adds	r3, #1
 800c912:	ee07 3a90 	vmov	s15, r3
 800c916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c91a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c91e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c922:	eef0 7a66 	vmov.f32	s15, s13
}
 800c926:	eeb0 0a67 	vmov.f32	s0, s15
 800c92a:	3714      	adds	r7, #20
 800c92c:	46bd      	mov	sp, r7
 800c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c932:	4770      	bx	lr

0800c934 <getTIM_SOURCECLK>:

static uint32_t getTIM_SOURCECLK(TIM_HandleTypeDef *htim)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
	if ((htim->Instance==TIM1) || (htim->Instance==TIM8) || (htim->Instance==TIM9) || (htim->Instance==TIM10) || (htim->Instance==TIM11))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	4a0f      	ldr	r2, [pc, #60]	; (800c980 <getTIM_SOURCECLK+0x4c>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d013      	beq.n	800c96e <getTIM_SOURCECLK+0x3a>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a0e      	ldr	r2, [pc, #56]	; (800c984 <getTIM_SOURCECLK+0x50>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d00e      	beq.n	800c96e <getTIM_SOURCECLK+0x3a>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a0c      	ldr	r2, [pc, #48]	; (800c988 <getTIM_SOURCECLK+0x54>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d009      	beq.n	800c96e <getTIM_SOURCECLK+0x3a>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a0b      	ldr	r2, [pc, #44]	; (800c98c <getTIM_SOURCECLK+0x58>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d004      	beq.n	800c96e <getTIM_SOURCECLK+0x3a>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a09      	ldr	r2, [pc, #36]	; (800c990 <getTIM_SOURCECLK+0x5c>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d101      	bne.n	800c972 <getTIM_SOURCECLK+0x3e>
		return MY_APB2_CLK;
 800c96e:	4b09      	ldr	r3, [pc, #36]	; (800c994 <getTIM_SOURCECLK+0x60>)
 800c970:	e000      	b.n	800c974 <getTIM_SOURCECLK+0x40>
	else
		return MY_APB1_CLK;
 800c972:	4b09      	ldr	r3, [pc, #36]	; (800c998 <getTIM_SOURCECLK+0x64>)
}
 800c974:	4618      	mov	r0, r3
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	40010000 	.word	0x40010000
 800c984:	40010400 	.word	0x40010400
 800c988:	40014000 	.word	0x40014000
 800c98c:	40014400 	.word	0x40014400
 800c990:	40014800 	.word	0x40014800
 800c994:	0cdfe600 	.word	0x0cdfe600
 800c998:	066ff300 	.word	0x066ff300

0800c99c <PWMBuiltIn_writeDuty>:


void PWMBuiltIn_writeDuty(uint16_t num, float fduty){
 800c99c:	b590      	push	{r4, r7, lr}
 800c99e:	b083      	sub	sp, #12
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	ed87 0a00 	vstr	s0, [r7]
 800c9a8:	80fb      	strh	r3, [r7, #6]
	//uduty~[0,ARR+1],uduty=0 means constant low; uduty=ARR+1 means constant high;
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c9aa:	88fb      	ldrh	r3, [r7, #6]
 800c9ac:	4a48      	ldr	r2, [pc, #288]	; (800cad0 <PWMBuiltIn_writeDuty+0x134>)
 800c9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d112      	bne.n	800c9dc <PWMBuiltIn_writeDuty+0x40>
 800c9b6:	88fb      	ldrh	r3, [r7, #6]
 800c9b8:	4a46      	ldr	r2, [pc, #280]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800c9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c9c2:	88fb      	ldrh	r3, [r7, #6]
 800c9c4:	4a43      	ldr	r2, [pc, #268]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800c9c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9ca:	681c      	ldr	r4, [r3, #0]
 800c9cc:	ed97 0a00 	vldr	s0, [r7]
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	f7ff ff69 	bl	800c8a8 <duty2CCR>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	6363      	str	r3, [r4, #52]	; 0x34

}
 800c9da:	e075      	b.n	800cac8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800c9dc:	88fb      	ldrh	r3, [r7, #6]
 800c9de:	4a3c      	ldr	r2, [pc, #240]	; (800cad0 <PWMBuiltIn_writeDuty+0x134>)
 800c9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9e4:	2b04      	cmp	r3, #4
 800c9e6:	d112      	bne.n	800ca0e <PWMBuiltIn_writeDuty+0x72>
 800c9e8:	88fb      	ldrh	r3, [r7, #6]
 800c9ea:	4a3a      	ldr	r2, [pc, #232]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800c9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c9f4:	88fb      	ldrh	r3, [r7, #6]
 800c9f6:	4a37      	ldr	r2, [pc, #220]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800c9f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9fc:	681c      	ldr	r4, [r3, #0]
 800c9fe:	ed97 0a00 	vldr	s0, [r7]
 800ca02:	4608      	mov	r0, r1
 800ca04:	f7ff ff50 	bl	800c8a8 <duty2CCR>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800ca0c:	e05c      	b.n	800cac8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800ca0e:	88fb      	ldrh	r3, [r7, #6]
 800ca10:	4a2f      	ldr	r2, [pc, #188]	; (800cad0 <PWMBuiltIn_writeDuty+0x134>)
 800ca12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca16:	2b08      	cmp	r3, #8
 800ca18:	d112      	bne.n	800ca40 <PWMBuiltIn_writeDuty+0xa4>
 800ca1a:	88fb      	ldrh	r3, [r7, #6]
 800ca1c:	4a2d      	ldr	r2, [pc, #180]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800ca1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca26:	88fb      	ldrh	r3, [r7, #6]
 800ca28:	4a2a      	ldr	r2, [pc, #168]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800ca2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca2e:	681c      	ldr	r4, [r3, #0]
 800ca30:	ed97 0a00 	vldr	s0, [r7]
 800ca34:	4608      	mov	r0, r1
 800ca36:	f7ff ff37 	bl	800c8a8 <duty2CCR>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	63e3      	str	r3, [r4, #60]	; 0x3c
}
 800ca3e:	e043      	b.n	800cac8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800ca40:	88fb      	ldrh	r3, [r7, #6]
 800ca42:	4a23      	ldr	r2, [pc, #140]	; (800cad0 <PWMBuiltIn_writeDuty+0x134>)
 800ca44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca48:	2b0c      	cmp	r3, #12
 800ca4a:	d112      	bne.n	800ca72 <PWMBuiltIn_writeDuty+0xd6>
 800ca4c:	88fb      	ldrh	r3, [r7, #6]
 800ca4e:	4a21      	ldr	r2, [pc, #132]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800ca50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca58:	88fb      	ldrh	r3, [r7, #6]
 800ca5a:	4a1e      	ldr	r2, [pc, #120]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800ca5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca60:	681c      	ldr	r4, [r3, #0]
 800ca62:	ed97 0a00 	vldr	s0, [r7]
 800ca66:	4608      	mov	r0, r1
 800ca68:	f7ff ff1e 	bl	800c8a8 <duty2CCR>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	6423      	str	r3, [r4, #64]	; 0x40
}
 800ca70:	e02a      	b.n	800cac8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	4a16      	ldr	r2, [pc, #88]	; (800cad0 <PWMBuiltIn_writeDuty+0x134>)
 800ca76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca7a:	2b10      	cmp	r3, #16
 800ca7c:	d112      	bne.n	800caa4 <PWMBuiltIn_writeDuty+0x108>
 800ca7e:	88fb      	ldrh	r3, [r7, #6]
 800ca80:	4a14      	ldr	r2, [pc, #80]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800ca82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ca8a:	88fb      	ldrh	r3, [r7, #6]
 800ca8c:	4a11      	ldr	r2, [pc, #68]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800ca8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca92:	681c      	ldr	r4, [r3, #0]
 800ca94:	ed97 0a00 	vldr	s0, [r7]
 800ca98:	4608      	mov	r0, r1
 800ca9a:	f7ff ff05 	bl	800c8a8 <duty2CCR>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 800caa2:	e011      	b.n	800cac8 <PWMBuiltIn_writeDuty+0x12c>
	__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num], duty2CCR((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,fduty));
 800caa4:	88fb      	ldrh	r3, [r7, #6]
 800caa6:	4a0b      	ldr	r2, [pc, #44]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800caa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800cab0:	88fb      	ldrh	r3, [r7, #6]
 800cab2:	4a08      	ldr	r2, [pc, #32]	; (800cad4 <PWMBuiltIn_writeDuty+0x138>)
 800cab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cab8:	681c      	ldr	r4, [r3, #0]
 800caba:	ed97 0a00 	vldr	s0, [r7]
 800cabe:	4608      	mov	r0, r1
 800cac0:	f7ff fef2 	bl	800c8a8 <duty2CCR>
 800cac4:	4603      	mov	r3, r0
 800cac6:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd90      	pop	{r4, r7, pc}
 800cad0:	200000f0 	.word	0x200000f0
 800cad4:	200000a0 	.word	0x200000a0

0800cad8 <PWMBuiltIn_writeFrequency>:
void PWMBuiltIn_writeFrequency(uint16_t num, float fre) {
 800cad8:	b590      	push	{r4, r7, lr}
 800cada:	b087      	sub	sp, #28
 800cadc:	af00      	add	r7, sp, #0
 800cade:	4603      	mov	r3, r0
 800cae0:	ed87 0a00 	vstr	s0, [r7]
 800cae4:	80fb      	strh	r3, [r7, #6]
	fre = CONSTRAIN(fre, BUILTIN_PWM_FREMIN, BUILTIN_PWM_FREMAX);
 800cae6:	edd7 7a00 	vldr	s15, [r7]
 800caea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800caee:	ed9f 6bae 	vldr	d6, [pc, #696]	; 800cda8 <PWMBuiltIn_writeFrequency+0x2d0>
 800caf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800caf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafa:	d501      	bpl.n	800cb00 <PWMBuiltIn_writeFrequency+0x28>
 800cafc:	4bac      	ldr	r3, [pc, #688]	; (800cdb0 <PWMBuiltIn_writeFrequency+0x2d8>)
 800cafe:	e00b      	b.n	800cb18 <PWMBuiltIn_writeFrequency+0x40>
 800cb00:	edd7 7a00 	vldr	s15, [r7]
 800cb04:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cdb4 <PWMBuiltIn_writeFrequency+0x2dc>
 800cb08:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb10:	dd01      	ble.n	800cb16 <PWMBuiltIn_writeFrequency+0x3e>
 800cb12:	4ba9      	ldr	r3, [pc, #676]	; (800cdb8 <PWMBuiltIn_writeFrequency+0x2e0>)
 800cb14:	e000      	b.n	800cb18 <PWMBuiltIn_writeFrequency+0x40>
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	603b      	str	r3, [r7, #0]
	uint32_t ARRtem=0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	617b      	str	r3, [r7, #20]

	//recalculate the ARR and PSC with the propriate resolution and accuracy
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800cb1e:	2301      	movs	r3, #1
 800cb20:	613b      	str	r3, [r7, #16]
 800cb22:	e06f      	b.n	800cc04 <PWMBuiltIn_writeFrequency+0x12c>
		if (fre <= PWM_CRITICAL_FRE[num][i]) {
 800cb24:	88fa      	ldrh	r2, [r7, #6]
 800cb26:	49a5      	ldr	r1, [pc, #660]	; (800cdbc <PWMBuiltIn_writeFrequency+0x2e4>)
 800cb28:	4613      	mov	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	693a      	ldr	r2, [r7, #16]
 800cb32:	4413      	add	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	440b      	add	r3, r1
 800cb38:	edd3 7a00 	vldr	s15, [r3]
 800cb3c:	ed97 7a00 	vldr	s14, [r7]
 800cb40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb48:	d859      	bhi.n	800cbfe <PWMBuiltIn_writeFrequency+0x126>
			if (PWM_CriticalARR[i] == PWM_CriticalARR[i - 1]) {
 800cb4a:	4a9d      	ldr	r2, [pc, #628]	; (800cdc0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	499a      	ldr	r1, [pc, #616]	; (800cdc0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800cb58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d124      	bne.n	800cbaa <PWMBuiltIn_writeFrequency+0xd2>
				ARRtem = PWM_CriticalARR[i];
 800cb60:	4a97      	ldr	r2, [pc, #604]	; (800cdc0 <PWMBuiltIn_writeFrequency+0x2e8>)
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb68:	617b      	str	r3, [r7, #20]
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(ARRtem+1))-1);
 800cb6a:	88fb      	ldrh	r3, [r7, #6]
 800cb6c:	4a95      	ldr	r2, [pc, #596]	; (800cdc4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800cb6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb72:	ee07 3a90 	vmov	s15, r3
 800cb76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb7a:	edd7 7a00 	vldr	s15, [r7]
 800cb7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	3301      	adds	r3, #1
 800cb86:	ee07 3a90 	vmov	s15, r3
 800cb8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb96:	ee17 1a90 	vmov	r1, s15
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	4a8a      	ldr	r2, [pc, #552]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	1e4a      	subs	r2, r1, #1
 800cba6:	629a      	str	r2, [r3, #40]	; 0x28
			} else {
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
			}
			break;
 800cba8:	e02f      	b.n	800cc0a <PWMBuiltIn_writeFrequency+0x132>
				__HAL_TIM_SET_PRESCALER(PWM_TIMs_Array[num],PWM_CriticalPSC[i]);
 800cbaa:	88fb      	ldrh	r3, [r7, #6]
 800cbac:	4a86      	ldr	r2, [pc, #536]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cbae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4985      	ldr	r1, [pc, #532]	; (800cdcc <PWMBuiltIn_writeFrequency+0x2f4>)
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800cbbc:	629a      	str	r2, [r3, #40]	; 0x28
				ARRtem =(uint32_t)((PWM_TIMs_CLOCKFREQUENCYs[num]/fre)/(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC+1))-1;
 800cbbe:	88fb      	ldrh	r3, [r7, #6]
 800cbc0:	4a80      	ldr	r2, [pc, #512]	; (800cdc4 <PWMBuiltIn_writeFrequency+0x2ec>)
 800cbc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbc6:	ee07 3a90 	vmov	s15, r3
 800cbca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cbce:	edd7 7a00 	vldr	s15, [r7]
 800cbd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cbd6:	88fb      	ldrh	r3, [r7, #6]
 800cbd8:	4a7b      	ldr	r2, [pc, #492]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cbda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	ee07 3a90 	vmov	s15, r3
 800cbe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cbec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbf4:	ee17 3a90 	vmov	r3, s15
 800cbf8:	3b01      	subs	r3, #1
 800cbfa:	617b      	str	r3, [r7, #20]
			break;
 800cbfc:	e005      	b.n	800cc0a <PWMBuiltIn_writeFrequency+0x132>
	for (int i = 1; i < PWM_CRITICAL_FRE_NUM; i++) {
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3301      	adds	r3, #1
 800cc02:	613b      	str	r3, [r7, #16]
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	2b09      	cmp	r3, #9
 800cc08:	dd8c      	ble.n	800cb24 <PWMBuiltIn_writeFrequency+0x4c>
		}
	}

	//check if the ARR has changed
	if(ARRtem!=(uint32_t)(PWM_TIMs_Array[num]->Instance->ARR)){
 800cc0a:	88fb      	ldrh	r3, [r7, #6]
 800cc0c:	4a6e      	ldr	r2, [pc, #440]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cc0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	f000 80be 	beq.w	800cd9a <PWMBuiltIn_writeFrequency+0x2c2>

		//alter all the channels' CCR under the same TIM because they share a common ARR.
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60fb      	str	r3, [r7, #12]
 800cc22:	e0a9      	b.n	800cd78 <PWMBuiltIn_writeFrequency+0x2a0>
			if(PWM_TIMs_Array[j]==PWM_TIMs_Array[num]){
 800cc24:	4a68      	ldr	r2, [pc, #416]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cc2c:	88fb      	ldrh	r3, [r7, #6]
 800cc2e:	4966      	ldr	r1, [pc, #408]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cc30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cc34:	429a      	cmp	r2, r3
 800cc36:	f040 809c 	bne.w	800cd72 <PWMBuiltIn_writeFrequency+0x29a>
				__HAL_TIM_SET_COMPARE(PWM_TIMs_Array[j], PWM_CHANNELs_Array[j],duty2CCR(ARRtem,PWMBuiltIn_readDuty(j)));
 800cc3a:	4a65      	ldr	r2, [pc, #404]	; (800cdd0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d113      	bne.n	800cc6e <PWMBuiltIn_writeFrequency+0x196>
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 f8c2 	bl	800cdd4 <PWMBuiltIn_readDuty>
 800cc50:	eef0 7a40 	vmov.f32	s15, s0
 800cc54:	4a5c      	ldr	r2, [pc, #368]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc5c:	681c      	ldr	r4, [r3, #0]
 800cc5e:	eeb0 0a67 	vmov.f32	s0, s15
 800cc62:	6978      	ldr	r0, [r7, #20]
 800cc64:	f7ff fe20 	bl	800c8a8 <duty2CCR>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	6363      	str	r3, [r4, #52]	; 0x34
 800cc6c:	e07a      	b.n	800cd64 <PWMBuiltIn_writeFrequency+0x28c>
 800cc6e:	4a58      	ldr	r2, [pc, #352]	; (800cdd0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc76:	2b04      	cmp	r3, #4
 800cc78:	d113      	bne.n	800cca2 <PWMBuiltIn_writeFrequency+0x1ca>
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	b29b      	uxth	r3, r3
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f000 f8a8 	bl	800cdd4 <PWMBuiltIn_readDuty>
 800cc84:	eef0 7a40 	vmov.f32	s15, s0
 800cc88:	4a4f      	ldr	r2, [pc, #316]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc90:	681c      	ldr	r4, [r3, #0]
 800cc92:	eeb0 0a67 	vmov.f32	s0, s15
 800cc96:	6978      	ldr	r0, [r7, #20]
 800cc98:	f7ff fe06 	bl	800c8a8 <duty2CCR>
 800cc9c:	4603      	mov	r3, r0
 800cc9e:	63a3      	str	r3, [r4, #56]	; 0x38
 800cca0:	e060      	b.n	800cd64 <PWMBuiltIn_writeFrequency+0x28c>
 800cca2:	4a4b      	ldr	r2, [pc, #300]	; (800cdd0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	d113      	bne.n	800ccd6 <PWMBuiltIn_writeFrequency+0x1fe>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	b29b      	uxth	r3, r3
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f000 f88e 	bl	800cdd4 <PWMBuiltIn_readDuty>
 800ccb8:	eef0 7a40 	vmov.f32	s15, s0
 800ccbc:	4a42      	ldr	r2, [pc, #264]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccc4:	681c      	ldr	r4, [r3, #0]
 800ccc6:	eeb0 0a67 	vmov.f32	s0, s15
 800ccca:	6978      	ldr	r0, [r7, #20]
 800cccc:	f7ff fdec 	bl	800c8a8 <duty2CCR>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ccd4:	e046      	b.n	800cd64 <PWMBuiltIn_writeFrequency+0x28c>
 800ccd6:	4a3e      	ldr	r2, [pc, #248]	; (800cdd0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccde:	2b0c      	cmp	r3, #12
 800cce0:	d113      	bne.n	800cd0a <PWMBuiltIn_writeFrequency+0x232>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	b29b      	uxth	r3, r3
 800cce6:	4618      	mov	r0, r3
 800cce8:	f000 f874 	bl	800cdd4 <PWMBuiltIn_readDuty>
 800ccec:	eef0 7a40 	vmov.f32	s15, s0
 800ccf0:	4a35      	ldr	r2, [pc, #212]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf8:	681c      	ldr	r4, [r3, #0]
 800ccfa:	eeb0 0a67 	vmov.f32	s0, s15
 800ccfe:	6978      	ldr	r0, [r7, #20]
 800cd00:	f7ff fdd2 	bl	800c8a8 <duty2CCR>
 800cd04:	4603      	mov	r3, r0
 800cd06:	6423      	str	r3, [r4, #64]	; 0x40
 800cd08:	e02c      	b.n	800cd64 <PWMBuiltIn_writeFrequency+0x28c>
 800cd0a:	4a31      	ldr	r2, [pc, #196]	; (800cdd0 <PWMBuiltIn_writeFrequency+0x2f8>)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd12:	2b10      	cmp	r3, #16
 800cd14:	d113      	bne.n	800cd3e <PWMBuiltIn_writeFrequency+0x266>
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f000 f85a 	bl	800cdd4 <PWMBuiltIn_readDuty>
 800cd20:	eef0 7a40 	vmov.f32	s15, s0
 800cd24:	4a28      	ldr	r2, [pc, #160]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd2c:	681c      	ldr	r4, [r3, #0]
 800cd2e:	eeb0 0a67 	vmov.f32	s0, s15
 800cd32:	6978      	ldr	r0, [r7, #20]
 800cd34:	f7ff fdb8 	bl	800c8a8 <duty2CCR>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd3c:	e012      	b.n	800cd64 <PWMBuiltIn_writeFrequency+0x28c>
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 f846 	bl	800cdd4 <PWMBuiltIn_readDuty>
 800cd48:	eef0 7a40 	vmov.f32	s15, s0
 800cd4c:	4a1e      	ldr	r2, [pc, #120]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd54:	681c      	ldr	r4, [r3, #0]
 800cd56:	eeb0 0a67 	vmov.f32	s0, s15
 800cd5a:	6978      	ldr	r0, [r7, #20]
 800cd5c:	f7ff fda4 	bl	800c8a8 <duty2CCR>
 800cd60:	4603      	mov	r3, r0
 800cd62:	65e3      	str	r3, [r4, #92]	; 0x5c
				__HAL_TIM_SET_COUNTER(PWM_TIMs_Array[j],0);
 800cd64:	4a18      	ldr	r2, [pc, #96]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	625a      	str	r2, [r3, #36]	; 0x24
		for(int j=0;j<BUILTIN_PWM_NUM;j++){
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3301      	adds	r3, #1
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2b13      	cmp	r3, #19
 800cd7c:	f77f af52 	ble.w	800cc24 <PWMBuiltIn_writeFrequency+0x14c>
			}
		}
		//alter ARR after CCR
		__HAL_TIM_SET_AUTORELOAD(PWM_TIMs_Array[num],ARRtem);
 800cd80:	88fb      	ldrh	r3, [r7, #6]
 800cd82:	4a11      	ldr	r2, [pc, #68]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cd84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	697a      	ldr	r2, [r7, #20]
 800cd8c:	62da      	str	r2, [r3, #44]	; 0x2c
 800cd8e:	88fb      	ldrh	r3, [r7, #6]
 800cd90:	4a0d      	ldr	r2, [pc, #52]	; (800cdc8 <PWMBuiltIn_writeFrequency+0x2f0>)
 800cd92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	60da      	str	r2, [r3, #12]
	}
}
 800cd9a:	bf00      	nop
 800cd9c:	371c      	adds	r7, #28
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd90      	pop	{r4, r7, pc}
 800cda2:	bf00      	nop
 800cda4:	f3af 8000 	nop.w
 800cda8:	eb851eb8 	.word	0xeb851eb8
 800cdac:	3f9eb851 	.word	0x3f9eb851
 800cdb0:	3cf5c28f 	.word	0x3cf5c28f
 800cdb4:	4bcdfe60 	.word	0x4bcdfe60
 800cdb8:	4bcdfe60 	.word	0x4bcdfe60
 800cdbc:	200007bc 	.word	0x200007bc
 800cdc0:	2000076c 	.word	0x2000076c
 800cdc4:	2000071c 	.word	0x2000071c
 800cdc8:	200000a0 	.word	0x200000a0
 800cdcc:	20000794 	.word	0x20000794
 800cdd0:	200000f0 	.word	0x200000f0

0800cdd4 <PWMBuiltIn_readDuty>:

float PWMBuiltIn_readDuty(uint16_t num){
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	4603      	mov	r3, r0
 800cddc:	80fb      	strh	r3, [r7, #6]
	return CCR2duty((uint32_t)PWM_TIMs_Array[num]->Instance->ARR,(uint32_t)(__HAL_TIM_GET_COMPARE(PWM_TIMs_Array[num], PWM_CHANNELs_Array[num])));
 800cdde:	88fb      	ldrh	r3, [r7, #6]
 800cde0:	4a2a      	ldr	r2, [pc, #168]	; (800ce8c <PWMBuiltIn_readDuty+0xb8>)
 800cde2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800cdea:	88fb      	ldrh	r3, [r7, #6]
 800cdec:	4a28      	ldr	r2, [pc, #160]	; (800ce90 <PWMBuiltIn_readDuty+0xbc>)
 800cdee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <PWMBuiltIn_readDuty+0x30>
 800cdf6:	88fb      	ldrh	r3, [r7, #6]
 800cdf8:	4a24      	ldr	r2, [pc, #144]	; (800ce8c <PWMBuiltIn_readDuty+0xb8>)
 800cdfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce02:	e039      	b.n	800ce78 <PWMBuiltIn_readDuty+0xa4>
 800ce04:	88fb      	ldrh	r3, [r7, #6]
 800ce06:	4a22      	ldr	r2, [pc, #136]	; (800ce90 <PWMBuiltIn_readDuty+0xbc>)
 800ce08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce0c:	2b04      	cmp	r3, #4
 800ce0e:	d106      	bne.n	800ce1e <PWMBuiltIn_readDuty+0x4a>
 800ce10:	88fb      	ldrh	r3, [r7, #6]
 800ce12:	4a1e      	ldr	r2, [pc, #120]	; (800ce8c <PWMBuiltIn_readDuty+0xb8>)
 800ce14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1c:	e02c      	b.n	800ce78 <PWMBuiltIn_readDuty+0xa4>
 800ce1e:	88fb      	ldrh	r3, [r7, #6]
 800ce20:	4a1b      	ldr	r2, [pc, #108]	; (800ce90 <PWMBuiltIn_readDuty+0xbc>)
 800ce22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce26:	2b08      	cmp	r3, #8
 800ce28:	d106      	bne.n	800ce38 <PWMBuiltIn_readDuty+0x64>
 800ce2a:	88fb      	ldrh	r3, [r7, #6]
 800ce2c:	4a17      	ldr	r2, [pc, #92]	; (800ce8c <PWMBuiltIn_readDuty+0xb8>)
 800ce2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce36:	e01f      	b.n	800ce78 <PWMBuiltIn_readDuty+0xa4>
 800ce38:	88fb      	ldrh	r3, [r7, #6]
 800ce3a:	4a15      	ldr	r2, [pc, #84]	; (800ce90 <PWMBuiltIn_readDuty+0xbc>)
 800ce3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce40:	2b0c      	cmp	r3, #12
 800ce42:	d106      	bne.n	800ce52 <PWMBuiltIn_readDuty+0x7e>
 800ce44:	88fb      	ldrh	r3, [r7, #6]
 800ce46:	4a11      	ldr	r2, [pc, #68]	; (800ce8c <PWMBuiltIn_readDuty+0xb8>)
 800ce48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce50:	e012      	b.n	800ce78 <PWMBuiltIn_readDuty+0xa4>
 800ce52:	88fb      	ldrh	r3, [r7, #6]
 800ce54:	4a0e      	ldr	r2, [pc, #56]	; (800ce90 <PWMBuiltIn_readDuty+0xbc>)
 800ce56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce5a:	2b10      	cmp	r3, #16
 800ce5c:	d106      	bne.n	800ce6c <PWMBuiltIn_readDuty+0x98>
 800ce5e:	88fb      	ldrh	r3, [r7, #6]
 800ce60:	4a0a      	ldr	r2, [pc, #40]	; (800ce8c <PWMBuiltIn_readDuty+0xb8>)
 800ce62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce6a:	e005      	b.n	800ce78 <PWMBuiltIn_readDuty+0xa4>
 800ce6c:	88fb      	ldrh	r3, [r7, #6]
 800ce6e:	4a07      	ldr	r2, [pc, #28]	; (800ce8c <PWMBuiltIn_readDuty+0xb8>)
 800ce70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce78:	4619      	mov	r1, r3
 800ce7a:	f7ff fd3c 	bl	800c8f6 <CCR2duty>
 800ce7e:	eef0 7a40 	vmov.f32	s15, s0
}
 800ce82:	eeb0 0a67 	vmov.f32	s0, s15
 800ce86:	3708      	adds	r7, #8
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	200000a0 	.word	0x200000a0
 800ce90:	200000f0 	.word	0x200000f0

0800ce94 <PWMBuiltInStartChannel>:
	float psc=(uint32_t)(PWM_TIMs_Array[num]->Instance->PSC) + 1;
	return (PWM_TIMs_CLOCKFREQUENCYs[num]/arr)/psc;
}

void PWMBuiltInStartChannel(int i)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800ce9c:	4a07      	ldr	r2, [pc, #28]	; (800cebc <PWMBuiltInStartChannel+0x28>)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cea4:	4a06      	ldr	r2, [pc, #24]	; (800cec0 <PWMBuiltInStartChannel+0x2c>)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceac:	4619      	mov	r1, r3
 800ceae:	f7f8 f939 	bl	8005124 <HAL_TIM_PWM_Start>
}
 800ceb2:	bf00      	nop
 800ceb4:	3708      	adds	r7, #8
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	200000a0 	.word	0x200000a0
 800cec0:	200000f0 	.word	0x200000f0

0800cec4 <PWMBuiltInStopChannel>:

void PWMBuiltInStopChannel(int i)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(PWM_TIMs_Array[i],PWM_CHANNELs_Array[i]);
 800cecc:	4a07      	ldr	r2, [pc, #28]	; (800ceec <PWMBuiltInStopChannel+0x28>)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ced4:	4a06      	ldr	r2, [pc, #24]	; (800cef0 <PWMBuiltInStopChannel+0x2c>)
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cedc:	4619      	mov	r1, r3
 800cede:	f7f8 f965 	bl	80051ac <HAL_TIM_PWM_Stop>
}
 800cee2:	bf00      	nop
 800cee4:	3708      	adds	r7, #8
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	200000a0 	.word	0x200000a0
 800cef0:	200000f0 	.word	0x200000f0

0800cef4 <PWMBuiltInStart>:

void PWMBuiltInStart()
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800cefa:	2300      	movs	r3, #0
 800cefc:	607b      	str	r3, [r7, #4]
 800cefe:	e005      	b.n	800cf0c <PWMBuiltInStart+0x18>
		PWMBuiltInStartChannel(i);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f7ff ffc7 	bl	800ce94 <PWMBuiltInStartChannel>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	3301      	adds	r3, #1
 800cf0a:	607b      	str	r3, [r7, #4]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2b13      	cmp	r3, #19
 800cf10:	ddf6      	ble.n	800cf00 <PWMBuiltInStart+0xc>
}
 800cf12:	bf00      	nop
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}
	...

0800cf1c <PWMBuiltIn_init>:
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
		PWMBuiltInStopChannel(i);
}

void PWMBuiltIn_init()
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b084      	sub	sp, #16
 800cf20:	af00      	add	r7, sp, #0
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800cf22:	2300      	movs	r3, #0
 800cf24:	60fb      	str	r3, [r7, #12]
 800cf26:	e06f      	b.n	800d008 <PWMBuiltIn_init+0xec>
	{
		PWM_TIMs_CLOCKFREQUENCYs[i]=getTIM_SOURCECLK(PWM_TIMs_Array[i]);
 800cf28:	4a3c      	ldr	r2, [pc, #240]	; (800d01c <PWMBuiltIn_init+0x100>)
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7ff fcff 	bl	800c934 <getTIM_SOURCECLK>
 800cf36:	4601      	mov	r1, r0
 800cf38:	4a39      	ldr	r2, [pc, #228]	; (800d020 <PWMBuiltIn_init+0x104>)
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800cf40:	2300      	movs	r3, #0
 800cf42:	60bb      	str	r3, [r7, #8]
 800cf44:	e04c      	b.n	800cfe0 <PWMBuiltIn_init+0xc4>
		{
			PWM_CriticalARR[j]=(uint32_t)(0x01<<PWM_CriticalARR_power[j])-1;
 800cf46:	4a37      	ldr	r2, [pc, #220]	; (800d024 <PWMBuiltIn_init+0x108>)
 800cf48:	68bb      	ldr	r3, [r7, #8]
 800cf4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf4e:	2201      	movs	r2, #1
 800cf50:	fa02 f303 	lsl.w	r3, r2, r3
 800cf54:	1e5a      	subs	r2, r3, #1
 800cf56:	4934      	ldr	r1, [pc, #208]	; (800d028 <PWMBuiltIn_init+0x10c>)
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			PWM_CriticalPSC[j]=(uint32_t)(0x01<<PWM_CriticalPSC_power[j])-1;
 800cf5e:	4a33      	ldr	r2, [pc, #204]	; (800d02c <PWMBuiltIn_init+0x110>)
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf66:	2201      	movs	r2, #1
 800cf68:	fa02 f303 	lsl.w	r3, r2, r3
 800cf6c:	1e5a      	subs	r2, r3, #1
 800cf6e:	4930      	ldr	r1, [pc, #192]	; (800d030 <PWMBuiltIn_init+0x114>)
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			float arr=(uint32_t)(PWM_CriticalARR[j]+1);
 800cf76:	4a2c      	ldr	r2, [pc, #176]	; (800d028 <PWMBuiltIn_init+0x10c>)
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf7e:	3301      	adds	r3, #1
 800cf80:	ee07 3a90 	vmov	s15, r3
 800cf84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf88:	edc7 7a01 	vstr	s15, [r7, #4]
			float psc=(uint32_t)(PWM_CriticalPSC[j]+1);
 800cf8c:	4a28      	ldr	r2, [pc, #160]	; (800d030 <PWMBuiltIn_init+0x114>)
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf94:	3301      	adds	r3, #1
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf9e:	edc7 7a00 	vstr	s15, [r7]
			PWM_CRITICAL_FRE[i][j]=((PWM_TIMs_CLOCKFREQUENCYs[i]/arr)/psc);  //be careful of overflow
 800cfa2:	4a1f      	ldr	r2, [pc, #124]	; (800d020 <PWMBuiltIn_init+0x104>)
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfaa:	ee07 3a90 	vmov	s15, r3
 800cfae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cfb2:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cfba:	ed97 7a00 	vldr	s14, [r7]
 800cfbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfc2:	491c      	ldr	r1, [pc, #112]	; (800d034 <PWMBuiltIn_init+0x118>)
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	005b      	lsls	r3, r3, #1
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	440b      	add	r3, r1
 800cfd6:	edc3 7a00 	vstr	s15, [r3]
		for(int j=0;j<PWM_CRITICAL_FRE_NUM;j++)
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	60bb      	str	r3, [r7, #8]
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	2b09      	cmp	r3, #9
 800cfe4:	ddaf      	ble.n	800cf46 <PWMBuiltIn_init+0x2a>
		}
		PWMBuiltIn_writeDuty(i,0);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	b29b      	uxth	r3, r3
 800cfea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800d038 <PWMBuiltIn_init+0x11c>
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7ff fcd4 	bl	800c99c <PWMBuiltIn_writeDuty>
		PWMBuiltIn_writeFrequency(i,40);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800d03c <PWMBuiltIn_init+0x120>
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7ff fd6b 	bl	800cad8 <PWMBuiltIn_writeFrequency>
	for(int i=0;i<BUILTIN_PWM_NUM;i++)
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	3301      	adds	r3, #1
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2b13      	cmp	r3, #19
 800d00c:	dd8c      	ble.n	800cf28 <PWMBuiltIn_init+0xc>

	}
	PWMBuiltInStart();
 800d00e:	f7ff ff71 	bl	800cef4 <PWMBuiltInStart>
}
 800d012:	bf00      	nop
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop
 800d01c:	200000a0 	.word	0x200000a0
 800d020:	2000071c 	.word	0x2000071c
 800d024:	20000140 	.word	0x20000140
 800d028:	2000076c 	.word	0x2000076c
 800d02c:	20000168 	.word	0x20000168
 800d030:	20000794 	.word	0x20000794
 800d034:	200007bc 	.word	0x200007bc
 800d038:	00000000 	.word	0x00000000
 800d03c:	42200000 	.word	0x42200000

0800d040 <kalman_StoreMeasure>:

static void kalmanInitSizeMem(KALMAN_FILTER *s);
static void kalman_step(KALMAN_FILTER *s);

static void kalman_StoreMeasure(KALMAN_FILTER *ptKalmanFilter, uint8_t num,float z)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	460b      	mov	r3, r1
 800d04a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d04e:	72fb      	strb	r3, [r7, #11]
	ptKalmanFilter->Z.pData[num] = z;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d054:	7afb      	ldrb	r3, [r7, #11]
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4413      	add	r3, r2
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	601a      	str	r2, [r3, #0]
}
 800d05e:	bf00      	nop
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr
	...

0800d06c <kalman_setQ>:


void kalman_setQ(KALMAN_FILTER *ptKalmanFilter, float *pQ)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b085      	sub	sp, #20
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
	float dt=ptKalmanFilter->dt;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d07c:	60fb      	str	r3, [r7, #12]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d084:	2b00      	cmp	r3, #0
 800d086:	d15b      	bne.n	800d140 <kalman_setQ+0xd4>
		{
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt/4.0f;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	ed93 7a00 	vldr	s14, [r3]
 800d08e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d092:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d096:	edd7 7a03 	vldr	s15, [r7, #12]
 800d09a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d09e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0a6:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b2:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d0b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d0ba:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt/2.0f;
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	ed93 7a00 	vldr	s14, [r3]
 800d0c4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0cc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0d4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e0:	3304      	adds	r3, #4
 800d0e2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d0e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d0ea:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt/2.0f;
 800d0ee:	683b      	ldr	r3, [r7, #0]
 800d0f0:	ed93 7a00 	vldr	s14, [r3]
 800d0f4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d0f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0fc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d100:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d104:	edd7 7a03 	vldr	s15, [r7, #12]
 800d108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d110:	3308      	adds	r3, #8
 800d112:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d11a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	ed93 7a00 	vldr	s14, [r3]
 800d124:	edd7 7a03 	vldr	s15, [r7, #12]
 800d128:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d130:	330c      	adds	r3, #12
 800d132:	edd7 7a03 	vldr	s15, [r7, #12]
 800d136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13a:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
	}
}
 800d13e:	e0fc      	b.n	800d33a <kalman_setQ+0x2ce>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d146:	2b01      	cmp	r3, #1
 800d148:	f040 80f7 	bne.w	800d33a <kalman_setQ+0x2ce>
		ptKalmanFilter->Q.pData[0]=(*pQ)*dt*dt*dt*dt*dt*dt/36.0f;
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	ed93 7a00 	vldr	s14, [r3]
 800d152:	edd7 7a03 	vldr	s15, [r7, #12]
 800d156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d15a:	edd7 7a03 	vldr	s15, [r7, #12]
 800d15e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d162:	edd7 7a03 	vldr	s15, [r7, #12]
 800d166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d16a:	edd7 7a03 	vldr	s15, [r7, #12]
 800d16e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d172:	edd7 7a03 	vldr	s15, [r7, #12]
 800d176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d17a:	edd7 7a03 	vldr	s15, [r7, #12]
 800d17e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d186:	eddf 6a70 	vldr	s13, [pc, #448]	; 800d348 <kalman_setQ+0x2dc>
 800d18a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d18e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[1]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	ed93 7a00 	vldr	s14, [r3]
 800d198:	edd7 7a03 	vldr	s15, [r7, #12]
 800d19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800d1ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1ce:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[2]=(*pQ)*dt*dt*dt*dt/6.0f;
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	ed93 7a00 	vldr	s14, [r3]
 800d1d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d206:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[3]=(*pQ)*dt*dt*dt*dt*dt/12.0f;
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	ed93 7a00 	vldr	s14, [r3]
 800d210:	edd7 7a03 	vldr	s15, [r7, #12]
 800d214:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d218:	edd7 7a03 	vldr	s15, [r7, #12]
 800d21c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d220:	edd7 7a03 	vldr	s15, [r7, #12]
 800d224:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d228:	edd7 7a03 	vldr	s15, [r7, #12]
 800d22c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d230:	edd7 7a03 	vldr	s15, [r7, #12]
 800d234:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23c:	330c      	adds	r3, #12
 800d23e:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 800d242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d246:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[4]=(*pQ)*dt*dt*dt*dt/4.0f;
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	ed93 7a00 	vldr	s14, [r3]
 800d250:	edd7 7a03 	vldr	s15, [r7, #12]
 800d254:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d258:	edd7 7a03 	vldr	s15, [r7, #12]
 800d25c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d260:	edd7 7a03 	vldr	s15, [r7, #12]
 800d264:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d268:	edd7 7a03 	vldr	s15, [r7, #12]
 800d26c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d274:	3310      	adds	r3, #16
 800d276:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800d27a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d27e:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[5]=(*pQ)*dt*dt*dt/2.0f;
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	ed93 7a00 	vldr	s14, [r3]
 800d288:	edd7 7a03 	vldr	s15, [r7, #12]
 800d28c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d290:	edd7 7a03 	vldr	s15, [r7, #12]
 800d294:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d298:	edd7 7a03 	vldr	s15, [r7, #12]
 800d29c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a4:	3314      	adds	r3, #20
 800d2a6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d2aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2ae:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[6]=(*pQ)*dt*dt*dt*dt/6.0f;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	ed93 7a00 	vldr	s14, [r3]
 800d2b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2c0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2c8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2d0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2dc:	3318      	adds	r3, #24
 800d2de:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800d2e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d2e6:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[7]=(*pQ)*dt*dt*dt/2.0f;
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	ed93 7a00 	vldr	s14, [r3]
 800d2f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2f8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d2fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d300:	edd7 7a03 	vldr	s15, [r7, #12]
 800d304:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30c:	331c      	adds	r3, #28
 800d30e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d316:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->Q.pData[8]=(*pQ)*dt*dt;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	ed93 7a00 	vldr	s14, [r3]
 800d320:	edd7 7a03 	vldr	s15, [r7, #12]
 800d324:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d32c:	3320      	adds	r3, #32
 800d32e:	edd7 7a03 	vldr	s15, [r7, #12]
 800d332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d336:	edc3 7a00 	vstr	s15, [r3]
}
 800d33a:	bf00      	nop
 800d33c:	3714      	adds	r7, #20
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	42100000 	.word	0x42100000

0800d34c <kalman_setR>:

void kalman_setR(KALMAN_FILTER *ptKalmanFilter, float *pR)
{
 800d34c:	b480      	push	{r7}
 800d34e:	b083      	sub	sp, #12
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY){
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d105      	bne.n	800d36c <kalman_setR+0x20>
		ptKalmanFilter->R.pData[0]=*pR;
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d364:	683a      	ldr	r2, [r7, #0]
 800d366:	6812      	ldr	r2, [r2, #0]
 800d368:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
		ptKalmanFilter->R.pData[6]=0;
		ptKalmanFilter->R.pData[7]=0;
		ptKalmanFilter->R.pData[8]=*(pR+2);
	}
}
 800d36a:	e039      	b.n	800d3e0 <kalman_setR+0x94>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d372:	2b01      	cmp	r3, #1
 800d374:	d134      	bne.n	800d3e0 <kalman_setR+0x94>
		ptKalmanFilter->R.pData[0]=*pR;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	6812      	ldr	r2, [r2, #0]
 800d37e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[1]=0;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d384:	3304      	adds	r3, #4
 800d386:	f04f 0200 	mov.w	r2, #0
 800d38a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[2]=0;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d390:	3308      	adds	r3, #8
 800d392:	f04f 0200 	mov.w	r2, #0
 800d396:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[3]=0;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d39c:	330c      	adds	r3, #12
 800d39e:	f04f 0200 	mov.w	r2, #0
 800d3a2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[4]=*(pR+1);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3a8:	3310      	adds	r3, #16
 800d3aa:	683a      	ldr	r2, [r7, #0]
 800d3ac:	6852      	ldr	r2, [r2, #4]
 800d3ae:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[5]=0;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b4:	3314      	adds	r3, #20
 800d3b6:	f04f 0200 	mov.w	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[6]=0;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c0:	3318      	adds	r3, #24
 800d3c2:	f04f 0200 	mov.w	r2, #0
 800d3c6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[7]=0;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3cc:	331c      	adds	r3, #28
 800d3ce:	f04f 0200 	mov.w	r2, #0
 800d3d2:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->R.pData[8]=*(pR+2);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d8:	3320      	adds	r3, #32
 800d3da:	683a      	ldr	r2, [r7, #0]
 800d3dc:	6892      	ldr	r2, [r2, #8]
 800d3de:	601a      	str	r2, [r3, #0]
}
 800d3e0:	bf00      	nop
 800d3e2:	370c      	adds	r7, #12
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ea:	4770      	bx	lr

0800d3ec <newSimpleKalmanFilter>:

KALMAN_FILTER  *newSimpleKalmanFilter(float q,float r,float dt)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	ed87 0a03 	vstr	s0, [r7, #12]
 800d3f6:	edc7 0a02 	vstr	s1, [r7, #8]
 800d3fa:	ed87 1a01 	vstr	s2, [r7, #4]
	KALMAN_FILTER *pk=KALMANFILTER(&q,&r,dt,KALMAN_CONST_VELOCITY);
 800d3fe:	f107 0108 	add.w	r1, r7, #8
 800d402:	f107 030c 	add.w	r3, r7, #12
 800d406:	2200      	movs	r2, #0
 800d408:	ed97 0a01 	vldr	s0, [r7, #4]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f000 f807 	bl	800d420 <KALMANFILTER>
 800d412:	6178      	str	r0, [r7, #20]
	return pk;
 800d414:	697b      	ldr	r3, [r7, #20]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <KALMANFILTER>:

KALMAN_FILTER * KALMANFILTER(float *pQ, float *pR,float dt,uint16_t kalmanType)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	ed87 0a01 	vstr	s0, [r7, #4]
 800d42e:	4613      	mov	r3, r2
 800d430:	807b      	strh	r3, [r7, #2]
	KALMAN_FILTER * ptKalmanFilter = (KALMAN_FILTER *)malloc(sizeof(KALMAN_FILTER));
 800d432:	20c4      	movs	r0, #196	; 0xc4
 800d434:	f004 f876 	bl	8011524 <malloc>
 800d438:	4603      	mov	r3, r0
 800d43a:	617b      	str	r3, [r7, #20]
	if(ptKalmanFilter==NULL)
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <KALMANFILTER+0x26>
		return NULL;
 800d442:	2300      	movs	r3, #0
 800d444:	e10e      	b.n	800d664 <KALMANFILTER+0x244>
	memset(ptKalmanFilter,0,sizeof(KALMAN_FILTER));
 800d446:	22c4      	movs	r2, #196	; 0xc4
 800d448:	2100      	movs	r1, #0
 800d44a:	6978      	ldr	r0, [r7, #20]
 800d44c:	f004 f87d 	bl	801154a <memset>

	//allocate memory on heap basd on kalman filter kalmanType
	ptKalmanFilter->kalmanType = kalmanType;
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	887a      	ldrh	r2, [r7, #2]
 800d454:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	kalmanInitSizeMem(ptKalmanFilter);
 800d458:	6978      	ldr	r0, [r7, #20]
 800d45a:	f000 f90f 	bl	800d67c <kalmanInitSizeMem>

	//attach methods
	ptKalmanFilter->step = kalman_step;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	4a82      	ldr	r2, [pc, #520]	; (800d66c <KALMANFILTER+0x24c>)
 800d462:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	ptKalmanFilter->setQ = kalman_setQ;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	4a81      	ldr	r2, [pc, #516]	; (800d670 <KALMANFILTER+0x250>)
 800d46a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	ptKalmanFilter->setR = kalman_setR;
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	4a80      	ldr	r2, [pc, #512]	; (800d674 <KALMANFILTER+0x254>)
 800d472:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	ptKalmanFilter->store = kalman_StoreMeasure;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	4a7f      	ldr	r2, [pc, #508]	; (800d678 <KALMANFILTER+0x258>)
 800d47a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	//update rate 0.001s
	ptKalmanFilter->dt = dt;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

	//init values
	if(kalmanType == KALMAN_CONST_ACCELERATION){
 800d486:	887b      	ldrh	r3, [r7, #2]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	f040 8095 	bne.w	800d5b8 <KALMANFILTER+0x198>
		ptKalmanFilter->A.pData[0]=1;
 800d48e:	697b      	ldr	r3, [r7, #20]
 800d490:	695b      	ldr	r3, [r3, #20]
 800d492:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d496:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	695b      	ldr	r3, [r3, #20]
 800d49c:	3304      	adds	r3, #4
 800d49e:	687a      	ldr	r2, [r7, #4]
 800d4a0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=dt*dt/2;
 800d4a2:	ed97 7a01 	vldr	s14, [r7, #4]
 800d4a6:	edd7 7a01 	vldr	s15, [r7, #4]
 800d4aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	695b      	ldr	r3, [r3, #20]
 800d4b2:	3308      	adds	r3, #8
 800d4b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d4b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d4bc:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->A.pData[3]=0;
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	330c      	adds	r3, #12
 800d4c6:	f04f 0200 	mov.w	r2, #0
 800d4ca:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[4]=1;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	3310      	adds	r3, #16
 800d4d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d4d6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[5]=dt;
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	695b      	ldr	r3, [r3, #20]
 800d4dc:	3314      	adds	r3, #20
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[6]=0;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	695b      	ldr	r3, [r3, #20]
 800d4e6:	3318      	adds	r3, #24
 800d4e8:	f04f 0200 	mov.w	r2, #0
 800d4ec:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[7]=0;
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	331c      	adds	r3, #28
 800d4f4:	f04f 0200 	mov.w	r2, #0
 800d4f8:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[8]=1;
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	695b      	ldr	r3, [r3, #20]
 800d4fe:	3320      	adds	r3, #32
 800d500:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d504:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=0;
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	69db      	ldr	r3, [r3, #28]
 800d50a:	f04f 0200 	mov.w	r2, #0
 800d50e:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[1]=0;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	69db      	ldr	r3, [r3, #28]
 800d514:	3304      	adds	r3, #4
 800d516:	f04f 0200 	mov.w	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->B.pData[2]=1;
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	69db      	ldr	r3, [r3, #28]
 800d520:	3308      	adds	r3, #8
 800d522:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d526:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d530:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d536:	3304      	adds	r3, #4
 800d538:	f04f 0200 	mov.w	r2, #0
 800d53c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[2]=0;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d542:	3308      	adds	r3, #8
 800d544:	f04f 0200 	mov.w	r2, #0
 800d548:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[3]=0;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54e:	330c      	adds	r3, #12
 800d550:	f04f 0200 	mov.w	r2, #0
 800d554:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[4]=1;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55a:	3310      	adds	r3, #16
 800d55c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d560:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[5]=0;
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d566:	3314      	adds	r3, #20
 800d568:	f04f 0200 	mov.w	r2, #0
 800d56c:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[6]=0;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d572:	3318      	adds	r3, #24
 800d574:	f04f 0200 	mov.w	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[7]=0;
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d57e:	331c      	adds	r3, #28
 800d580:	f04f 0200 	mov.w	r2, #0
 800d584:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[8]=1;
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d58a:	3320      	adds	r3, #32
 800d58c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d590:	601a      	str	r2, [r3, #0]

		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	f103 0210 	add.w	r2, r3, #16
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	3350      	adds	r3, #80	; 0x50
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7f3 fc8f 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	f103 0220 	add.w	r2, r3, #32
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	3358      	adds	r3, #88	; 0x58
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	4610      	mov	r0, r2
 800d5b2:	f7f3 fc86 	bl	8000ec2 <arm_mat_trans_f32>
 800d5b6:	e048      	b.n	800d64a <KALMANFILTER+0x22a>
	}
	else if(kalmanType == KALMAN_CONST_VELOCITY){
 800d5b8:	887b      	ldrh	r3, [r7, #2]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d145      	bne.n	800d64a <KALMANFILTER+0x22a>
		ptKalmanFilter->A.pData[0]=1;
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	695b      	ldr	r3, [r3, #20]
 800d5c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d5c6:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[1]=dt;
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	695b      	ldr	r3, [r3, #20]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	687a      	ldr	r2, [r7, #4]
 800d5d0:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[2]=0;
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	3308      	adds	r3, #8
 800d5d8:	f04f 0200 	mov.w	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->A.pData[3]=1;
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	695b      	ldr	r3, [r3, #20]
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d5e8:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->B.pData[0]=dt*dt/2.0f;
 800d5ea:	ed97 7a01 	vldr	s14, [r7, #4]
 800d5ee:	edd7 7a01 	vldr	s15, [r7, #4]
 800d5f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	69db      	ldr	r3, [r3, #28]
 800d5fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d5fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d602:	edc3 7a00 	vstr	s15, [r3]
		ptKalmanFilter->B.pData[1]=dt;
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	69db      	ldr	r3, [r3, #28]
 800d60a:	3304      	adds	r3, #4
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	601a      	str	r2, [r3, #0]

		ptKalmanFilter->H.pData[0]=1;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d614:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d618:	601a      	str	r2, [r3, #0]
		ptKalmanFilter->H.pData[1]=0;
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d61e:	3304      	adds	r3, #4
 800d620:	f04f 0200 	mov.w	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
		
		arm_mat_trans_f32(&ptKalmanFilter->A,&ptKalmanFilter->At);
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f103 0210 	add.w	r2, r3, #16
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	3350      	adds	r3, #80	; 0x50
 800d630:	4619      	mov	r1, r3
 800d632:	4610      	mov	r0, r2
 800d634:	f7f3 fc45 	bl	8000ec2 <arm_mat_trans_f32>
		arm_mat_trans_f32(&ptKalmanFilter->H,&ptKalmanFilter->Ht);
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	f103 0220 	add.w	r2, r3, #32
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	3358      	adds	r3, #88	; 0x58
 800d642:	4619      	mov	r1, r3
 800d644:	4610      	mov	r0, r2
 800d646:	f7f3 fc3c 	bl	8000ec2 <arm_mat_trans_f32>
	}

	ptKalmanFilter->setQ(ptKalmanFilter,pQ);
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d650:	68f9      	ldr	r1, [r7, #12]
 800d652:	6978      	ldr	r0, [r7, #20]
 800d654:	4798      	blx	r3
	ptKalmanFilter->setR(ptKalmanFilter,pR);
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d65c:	68b9      	ldr	r1, [r7, #8]
 800d65e:	6978      	ldr	r0, [r7, #20]
 800d660:	4798      	blx	r3

	return ptKalmanFilter;
 800d662:	697b      	ldr	r3, [r7, #20]
	
}
 800d664:	4618      	mov	r0, r3
 800d666:	3718      	adds	r7, #24
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd80      	pop	{r7, pc}
 800d66c:	0800d9ed 	.word	0x0800d9ed
 800d670:	0800d06d 	.word	0x0800d06d
 800d674:	0800d34d 	.word	0x0800d34d
 800d678:	0800d041 	.word	0x0800d041

0800d67c <kalmanInitSizeMem>:




void kalmanInitSizeMem(KALMAN_FILTER *ptKalmanFilter)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
	if(ptKalmanFilter->kalmanType == KALMAN_CONST_ACCELERATION){
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	f040 80d9 	bne.w	800d842 <kalmanInitSizeMem+0x1c6>

		//allocate memory
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_FUL));
 800d690:	f44f 700b 	mov.w	r0, #556	; 0x22c
 800d694:	f003 ff46 	bl	8011524 <malloc>
 800d698:	4603      	mov	r3, r0
 800d69a:	461a      	mov	r2, r3
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_FUL *pMemFul = (KALMAN_STATE_MEM_FUL *)(ptKalmanFilter->pMem);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d6a8:	60bb      	str	r3, [r7, #8]
		memset(pMemFul,0,sizeof(KALMAN_STATE_MEM_FUL));
 800d6aa:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d6ae:	2100      	movs	r1, #0
 800d6b0:	68b8      	ldr	r0, [r7, #8]
 800d6b2:	f003 ff4a 	bl	801154a <memset>

		//link memory
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Ful,			  1,	&(pMemFul->arrayX[0]));
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	2201      	movs	r2, #1
 800d6bc:	2103      	movs	r1, #3
 800d6be:	f7f3 f82f 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayA[0]));
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f103 0010 	add.w	r0, r3, #16
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	330c      	adds	r3, #12
 800d6cc:	2203      	movs	r2, #3
 800d6ce:	2103      	movs	r1, #3
 800d6d0:	f7f3 f826 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Ful,	M_Input_Ful,	&(pMemFul->arrayB[0]));
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f103 0018 	add.w	r0, r3, #24
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	3330      	adds	r3, #48	; 0x30
 800d6de:	2201      	movs	r2, #1
 800d6e0:	2103      	movs	r1, #3
 800d6e2:	f7f3 f81d 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Ful,			  1,	&(pMemFul->arrayU[0]));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f103 0008 	add.w	r0, r3, #8
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	333c      	adds	r3, #60	; 0x3c
 800d6f0:	2201      	movs	r2, #1
 800d6f2:	2101      	movs	r1, #1
 800d6f4:	f7f3 f814 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Ful,	N_State_Ful,	&(pMemFul->arrayH[0]));
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f103 0020 	add.w	r0, r3, #32
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	3340      	adds	r3, #64	; 0x40
 800d702:	2203      	movs	r2, #3
 800d704:	2103      	movs	r1, #3
 800d706:	f7f3 f80b 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Ful,			  1,	&(pMemFul->arrayZ[0]));
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	33f4      	adds	r3, #244	; 0xf4
 800d714:	2201      	movs	r2, #1
 800d716:	2103      	movs	r1, #3
 800d718:	f7f3 f802 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayP[0]));
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	3364      	adds	r3, #100	; 0x64
 800d726:	2203      	movs	r2, #3
 800d728:	2103      	movs	r1, #3
 800d72a:	f7f2 fff9 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Ful,	N_State_Ful,	&(pMemFul->arrayQ[0]));
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	3388      	adds	r3, #136	; 0x88
 800d738:	2203      	movs	r2, #3
 800d73a:	2103      	movs	r1, #3
 800d73c:	f7f2 fff0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayR[0]));
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	33ac      	adds	r3, #172	; 0xac
 800d74a:	2203      	movs	r2, #3
 800d74c:	2103      	movs	r1, #3
 800d74e:	f7f2 ffe7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayK[0]));
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d758:	68bb      	ldr	r3, [r7, #8]
 800d75a:	33d0      	adds	r3, #208	; 0xd0
 800d75c:	2203      	movs	r2, #3
 800d75e:	2103      	movs	r1, #3
 800d760:	f7f2 ffde 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayAt[0]));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d770:	2203      	movs	r2, #3
 800d772:	2103      	movs	r1, #3
 800d774:	f7f2 ffd4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayHt[0]));
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d784:	2203      	movs	r2, #3
 800d786:	2103      	movs	r1, #3
 800d788:	f7f2 ffca 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Ful,	L_Measure_Ful,	&(pMemFul->arrayNL[0]));
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d792:	68bb      	ldr	r3, [r7, #8]
 800d794:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800d798:	2203      	movs	r2, #3
 800d79a:	2103      	movs	r1, #3
 800d79c:	f7f2 ffc0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[0][0]));
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800d7ac:	2203      	movs	r2, #3
 800d7ae:	2103      	movs	r1, #3
 800d7b0:	f7f2 ffb6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Ful,	N_State_Ful,	&(pMemFul->arrayNN[1][0]));
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800d7c0:	2203      	movs	r2, #3
 800d7c2:	2103      	movs	r1, #3
 800d7c4:	f7f2 ffac 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[0][0]));
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800d7d4:	2203      	movs	r2, #3
 800d7d6:	2103      	movs	r1, #3
 800d7d8:	f7f2 ffa2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Ful,	L_Measure_Ful,	&(pMemFul->arrayLL[1][0]));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	2103      	movs	r1, #3
 800d7ec:	f7f2 ff98 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Ful,			    1,	&(pMemFul->arrayL[0][0]));
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d7f6:	68bb      	ldr	r3, [r7, #8]
 800d7f8:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	2103      	movs	r1, #3
 800d800:	f7f2 ff8e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Ful,				1,	&(pMemFul->arrayL[1][0]));
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d810:	2201      	movs	r2, #1
 800d812:	2103      	movs	r1, #3
 800d814:	f7f2 ff84 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Ful,				1,	&(pMemFul->arrayN[0][0]));
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800d824:	2201      	movs	r2, #1
 800d826:	2103      	movs	r1, #3
 800d828:	f7f2 ff7a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Ful,				1,	&(pMemFul->arrayN[1][0]));
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800d838:	2201      	movs	r2, #1
 800d83a:	2103      	movs	r1, #3
 800d83c:	f7f2 ff70 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
	}
}
 800d840:	e0d0      	b.n	800d9e4 <kalmanInitSizeMem+0x368>
	else if(ptKalmanFilter->kalmanType == KALMAN_CONST_VELOCITY ){
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f040 80cb 	bne.w	800d9e4 <kalmanInitSizeMem+0x368>
		ptKalmanFilter->pMem = (void *)malloc(sizeof(KALMAN_STATE_MEM_SIM));
 800d84e:	20bc      	movs	r0, #188	; 0xbc
 800d850:	f003 fe68 	bl	8011524 <malloc>
 800d854:	4603      	mov	r3, r0
 800d856:	461a      	mov	r2, r3
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		KALMAN_STATE_MEM_SIM *pMemSim = (KALMAN_STATE_MEM_SIM *)(ptKalmanFilter->pMem);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d864:	60fb      	str	r3, [r7, #12]
		memset(pMemSim,0,sizeof(KALMAN_STATE_MEM_SIM));
 800d866:	22bc      	movs	r2, #188	; 0xbc
 800d868:	2100      	movs	r1, #0
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f003 fe6d 	bl	801154a <memset>
		arm_mat_init_f32(&ptKalmanFilter->X,		N_State_Sim,			  1,	&(pMemSim->arrayX[0]));
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2201      	movs	r2, #1
 800d876:	2102      	movs	r1, #2
 800d878:	f7f2 ff52 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->A,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayA[0]));
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	f103 0010 	add.w	r0, r3, #16
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	3308      	adds	r3, #8
 800d886:	2202      	movs	r2, #2
 800d888:	2102      	movs	r1, #2
 800d88a:	f7f2 ff49 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->B,		N_State_Sim,	M_Input_Sim,	&(pMemSim->arrayB[0]));
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f103 0018 	add.w	r0, r3, #24
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	3318      	adds	r3, #24
 800d898:	2201      	movs	r2, #1
 800d89a:	2102      	movs	r1, #2
 800d89c:	f7f2 ff40 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->U,		M_Input_Sim,			  1,	&(pMemSim->arrayU[0]));
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f103 0008 	add.w	r0, r3, #8
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3320      	adds	r3, #32
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	2101      	movs	r1, #1
 800d8ae:	f7f2 ff37 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->H,		L_Measure_Sim,	N_State_Sim,	&(pMemSim->arrayH[0]));
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	f103 0020 	add.w	r0, r3, #32
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	3324      	adds	r3, #36	; 0x24
 800d8bc:	2202      	movs	r2, #2
 800d8be:	2101      	movs	r1, #1
 800d8c0:	f7f2 ff2e 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Z,		L_Measure_Sim,			  1,	&(pMemSim->arrayZ[0]));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3358      	adds	r3, #88	; 0x58
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	2101      	movs	r1, #1
 800d8d2:	f7f2 ff25 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->P,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayP[0]));
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	332c      	adds	r3, #44	; 0x2c
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	2102      	movs	r1, #2
 800d8e4:	f7f2 ff1c 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Q,		N_State_Sim,	N_State_Sim,	&(pMemSim->arrayQ[0]));
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	333c      	adds	r3, #60	; 0x3c
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	2102      	movs	r1, #2
 800d8f6:	f7f2 ff13 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->R,		L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayR[0]));
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	334c      	adds	r3, #76	; 0x4c
 800d904:	2201      	movs	r2, #1
 800d906:	2101      	movs	r1, #1
 800d908:	f7f2 ff0a 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->K,		N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayK[0]));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	3350      	adds	r3, #80	; 0x50
 800d916:	2201      	movs	r2, #1
 800d918:	2102      	movs	r1, #2
 800d91a:	f7f2 ff01 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->At,	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayAt[0]));
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	335c      	adds	r3, #92	; 0x5c
 800d928:	2202      	movs	r2, #2
 800d92a:	2102      	movs	r1, #2
 800d92c:	f7f2 fef8 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->Ht,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayHt[0]));
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f103 0058 	add.w	r0, r3, #88	; 0x58
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	336c      	adds	r3, #108	; 0x6c
 800d93a:	2201      	movs	r2, #1
 800d93c:	2102      	movs	r1, #2
 800d93e:	f7f2 feef 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NL,	N_State_Sim,	L_Measure_Sim,	&(pMemSim->arrayNL[0]));
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	3374      	adds	r3, #116	; 0x74
 800d94c:	2201      	movs	r2, #1
 800d94e:	2102      	movs	r1, #2
 800d950:	f7f2 fee6 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[0],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[0][0]));
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	337c      	adds	r3, #124	; 0x7c
 800d95e:	2202      	movs	r2, #2
 800d960:	2102      	movs	r1, #2
 800d962:	f7f2 fedd 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->NN[1],	N_State_Sim,	N_State_Sim,	&(pMemSim->arrayNN[1][0]));
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	338c      	adds	r3, #140	; 0x8c
 800d970:	2202      	movs	r2, #2
 800d972:	2102      	movs	r1, #2
 800d974:	f7f2 fed4 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[0],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[0][0]));
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	339c      	adds	r3, #156	; 0x9c
 800d982:	2201      	movs	r2, #1
 800d984:	2101      	movs	r1, #1
 800d986:	f7f2 fecb 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->LL[1],	L_Measure_Sim,	L_Measure_Sim,	&(pMemSim->arrayLL[1][0]));
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	33a0      	adds	r3, #160	; 0xa0
 800d994:	2201      	movs	r2, #1
 800d996:	2101      	movs	r1, #1
 800d998:	f7f2 fec2 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[0] ,	L_Measure_Sim,			    1,	&(pMemSim->arrayL[0][0]));
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f103 0088 	add.w	r0, r3, #136	; 0x88
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	33a4      	adds	r3, #164	; 0xa4
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	f7f2 feb9 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->L[1] ,	L_Measure_Sim,				1,	&(pMemSim->arrayL[1][0]));
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f103 0090 	add.w	r0, r3, #144	; 0x90
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	33a8      	adds	r3, #168	; 0xa8
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	2101      	movs	r1, #1
 800d9bc:	f7f2 feb0 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[0] ,	N_State_Sim,				1,	&(pMemSim->arrayN[0][0]));
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	33ac      	adds	r3, #172	; 0xac
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	2102      	movs	r1, #2
 800d9ce:	f7f2 fea7 	bl	8000720 <arm_mat_init_f32>
		arm_mat_init_f32(&ptKalmanFilter->N[1] ,	N_State_Sim,				1,	&(pMemSim->arrayN[1][0]));
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	33b4      	adds	r3, #180	; 0xb4
 800d9dc:	2201      	movs	r2, #1
 800d9de:	2102      	movs	r1, #2
 800d9e0:	f7f2 fe9e 	bl	8000720 <arm_mat_init_f32>
}
 800d9e4:	bf00      	nop
 800d9e6:	3710      	adds	r7, #16
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	bd80      	pop	{r7, pc}

0800d9ec <kalman_step>:


static void kalman_step(KALMAN_FILTER *s)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b082      	sub	sp, #8
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
	//predict X=A*X
	arm_mat_mult_f32(&s->A,&s->X,&(s->N[0]));          //A*X -> N0  			 now N0 is a priori
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f103 0010 	add.w	r0, r3, #16
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	3398      	adds	r3, #152	; 0x98
 800da00:	461a      	mov	r2, r3
 800da02:	f7f3 f8dd 	bl	8000bc0 <arm_mat_mult_f32>

	//predict P=A*P*At+Q
	arm_mat_mult_f32(&s->A,&s->P,&(s->NN[0]));         //A*P -> NN0
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f103 0010 	add.w	r0, r3, #16
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	3368      	adds	r3, #104	; 0x68
 800da16:	461a      	mov	r2, r3
 800da18:	f7f3 f8d2 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_mult_f32(&(s->NN[0]),&s->At,&(s->NN[1]));       //NN0*At -> NN1
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	3370      	adds	r3, #112	; 0x70
 800da2c:	461a      	mov	r2, r3
 800da2e:	f7f3 f8c7 	bl	8000bc0 <arm_mat_mult_f32>
	arm_mat_add_f32(&(s->NN[1]),&s->Q,&(s->NN[0]));         //NN1+Q -> NN0    		 now NN0 is a priori
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	3368      	adds	r3, #104	; 0x68
 800da42:	461a      	mov	r2, r3
 800da44:	f7f2 fdd4 	bl	80005f0 <arm_mat_add_f32>

	//kalman_gain K=P*Ht*Inv(H*P*Ht+R)
	 arm_mat_mult_f32(&(s->NN[0]),&s->Ht,&s->NL);     		//P*Ht -> NL
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	3360      	adds	r3, #96	; 0x60
 800da58:	461a      	mov	r2, r3
 800da5a:	f7f3 f8b1 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->H,&s->NL,&(s->LL[0]));     	 	//H*NL -> LL0
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f103 0020 	add.w	r0, r3, #32
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f103 0160 	add.w	r1, r3, #96	; 0x60
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3378      	adds	r3, #120	; 0x78
 800da6e:	461a      	mov	r2, r3
 800da70:	f7f3 f8a6 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->LL[0]),&s->R,&(s->LL[1]));		//LL0+R -> LL1
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	3380      	adds	r3, #128	; 0x80
 800da84:	461a      	mov	r2, r3
 800da86:	f7f2 fdb3 	bl	80005f0 <arm_mat_add_f32>
	 arm_mat_inverse_f32(&(s->LL[1]),&(s->LL[0]));  		// Inv(LL1) -> LL0     side effect: LL1 turn to identity due to Gauss-Jordan method.
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	3378      	adds	r3, #120	; 0x78
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7f2 fe5a 	bl	8000750 <arm_mat_inverse_f32>
	 arm_mat_mult_f32(&s->NL,&(s->LL[0]),&s->K);       	//NL*LL0 -> K       	 now K is K
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3348      	adds	r3, #72	; 0x48
 800daac:	461a      	mov	r2, r3
 800daae:	f7f3 f887 	bl	8000bc0 <arm_mat_mult_f32>

	//update X=X+K*(Z-H*X)
     arm_mat_mult_f32(&s->H,&(s->N[0]),&(s->L[0]));     	//H*N0 -> LN0
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f103 0020 	add.w	r0, r3, #32
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f103 0198 	add.w	r1, r3, #152	; 0x98
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	3388      	adds	r3, #136	; 0x88
 800dac2:	461a      	mov	r2, r3
 800dac4:	f7f3 f87c 	bl	8000bc0 <arm_mat_mult_f32>
     arm_mat_sub_f32(&s->Z,&(s->L[0]),&(s->L[1]));          // (Z - LN0) -> LN1
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f103 0188 	add.w	r1, r3, #136	; 0x88
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	3390      	adds	r3, #144	; 0x90
 800dad8:	461a      	mov	r2, r3
 800dada:	f7f3 f95a 	bl	8000d92 <arm_mat_sub_f32>
     arm_mat_mult_f32(&s->K,&(s->L[1]),&(s->N[1])); 		//K*LN1 -> N1
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f103 0190 	add.w	r1, r3, #144	; 0x90
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	33a0      	adds	r3, #160	; 0xa0
 800daee:	461a      	mov	r2, r3
 800daf0:	f7f3 f866 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_add_f32(&(s->N[0]),&(s->N[1]),&s->X);     		//X+Ht_temp -> X         now X is a posteriori
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f103 0098 	add.w	r0, r3, #152	; 0x98
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	33a0      	adds	r3, #160	; 0xa0
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	4619      	mov	r1, r3
 800db02:	f7f2 fd75 	bl	80005f0 <arm_mat_add_f32>

  //update P=P-K*H*P
     arm_mat_mult_f32(&s->K,&s->H,&s->P);              	//K*H -> P
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f103 0120 	add.w	r1, r3, #32
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	3330      	adds	r3, #48	; 0x30
 800db16:	461a      	mov	r2, r3
 800db18:	f7f3 f852 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_mult_f32(&s->P,&(s->NN[0]),&(s->NN[1]));       //P*NN0 -> NN1
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	3370      	adds	r3, #112	; 0x70
 800db2c:	461a      	mov	r2, r3
 800db2e:	f7f3 f847 	bl	8000bc0 <arm_mat_mult_f32>
	 arm_mat_sub_f32(&(s->NN[0]),&(s->NN[1]),&s->P);		//NN0-NN1 -> P      	 now P is a posteriori
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	f103 0068 	add.w	r0, r3, #104	; 0x68
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	3330      	adds	r3, #48	; 0x30
 800db42:	461a      	mov	r2, r3
 800db44:	f7f3 f925 	bl	8000d92 <arm_mat_sub_f32>

}
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <initPID>:
	return pid->U;

}

void initPID(PID_Type *pid,float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800db50:	b480      	push	{r7}
 800db52:	b089      	sub	sp, #36	; 0x24
 800db54:	af00      	add	r7, sp, #0
 800db56:	61f8      	str	r0, [r7, #28]
 800db58:	ed87 0a06 	vstr	s0, [r7, #24]
 800db5c:	edc7 0a05 	vstr	s1, [r7, #20]
 800db60:	ed87 1a04 	vstr	s2, [r7, #16]
 800db64:	edc7 1a03 	vstr	s3, [r7, #12]
 800db68:	ed87 2a02 	vstr	s4, [r7, #8]
 800db6c:	edc7 2a01 	vstr	s5, [r7, #4]
	 pid->Kp=kp;
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	69ba      	ldr	r2, [r7, #24]
 800db74:	601a      	str	r2, [r3, #0]
	 pid->Ki=ki;
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	697a      	ldr	r2, [r7, #20]
 800db7a:	605a      	str	r2, [r3, #4]
	 pid->Kd=kd;
 800db7c:	69fb      	ldr	r3, [r7, #28]
 800db7e:	693a      	ldr	r2, [r7, #16]
 800db80:	609a      	str	r2, [r3, #8]

	 pid->Kpr=1;
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800db88:	60da      	str	r2, [r3, #12]
	 pid->Kdr=0.0f;
 800db8a:	69fb      	ldr	r3, [r7, #28]
 800db8c:	f04f 0200 	mov.w	r2, #0
 800db90:	611a      	str	r2, [r3, #16]

	 pid->Dt=dt;
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	615a      	str	r2, [r3, #20]

	 pid->Direction=1;
 800db98:	69fb      	ldr	r3, [r7, #28]
 800db9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800db9e:	649a      	str	r2, [r3, #72]	; 0x48


	 pid->Ypre = 0;
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	f04f 0200 	mov.w	r2, #0
 800dba6:	619a      	str	r2, [r3, #24]
	 pid->N = 15;
 800dba8:	69fb      	ldr	r3, [r7, #28]
 800dbaa:	4a2f      	ldr	r2, [pc, #188]	; (800dc68 <initPID+0x118>)
 800dbac:	61da      	str	r2, [r3, #28]
	 pid->Td = pid->Kd/pid->Kp;
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	edd3 6a02 	vldr	s13, [r3, #8]
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	ed93 7a00 	vldr	s14, [r3]
 800dbba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	edc3 7a08 	vstr	s15, [r3, #32]
	 pid->Dcoeff[0]=pid->Td/(pid->Td+pid->N*pid->Dt);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	edd3 6a08 	vldr	s13, [r3, #32]
 800dbca:	69fb      	ldr	r3, [r7, #28]
 800dbcc:	ed93 7a08 	vldr	s14, [r3, #32]
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	ed93 6a07 	vldr	s12, [r3, #28]
 800dbd6:	69fb      	ldr	r3, [r7, #28]
 800dbd8:	edd3 7a05 	vldr	s15, [r3, #20]
 800dbdc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dbe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dbe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	 pid->Dcoeff[1]=-pid->Kp*pid->N*pid->Dcoeff[0];
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	edd3 7a00 	vldr	s15, [r3]
 800dbf4:	eeb1 7a67 	vneg.f32	s14, s15
 800dbf8:	69fb      	ldr	r3, [r7, #28]
 800dbfa:	edd3 7a07 	vldr	s15, [r3, #28]
 800dbfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc02:	69fb      	ldr	r3, [r7, #28]
 800dc04:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dc08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


	 pid->P=0;
 800dc12:	69fb      	ldr	r3, [r7, #28]
 800dc14:	f04f 0200 	mov.w	r2, #0
 800dc18:	63da      	str	r2, [r3, #60]	; 0x3c
	 pid->I=0;
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	f04f 0200 	mov.w	r2, #0
 800dc20:	641a      	str	r2, [r3, #64]	; 0x40
	 pid->D=0;
 800dc22:	69fb      	ldr	r3, [r7, #28]
 800dc24:	f04f 0200 	mov.w	r2, #0
 800dc28:	645a      	str	r2, [r3, #68]	; 0x44

	 pid->U=0;
 800dc2a:	69fb      	ldr	r3, [r7, #28]
 800dc2c:	f04f 0200 	mov.w	r2, #0
 800dc30:	651a      	str	r2, [r3, #80]	; 0x50

	 pid->Imax = ilim;
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	62da      	str	r2, [r3, #44]	; 0x2c
	 pid->Imin = -ilim;
 800dc38:	edd7 7a02 	vldr	s15, [r7, #8]
 800dc3c:	eef1 7a67 	vneg.f32	s15, s15
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 pid->Umax=ulim;//5e-4;
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	635a      	str	r2, [r3, #52]	; 0x34
	 pid->Umin=-ulim;//-5e-4;
 800dc4c:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc50:	eef1 7a67 	vneg.f32	s15, s15
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
}
 800dc5a:	bf00      	nop
 800dc5c:	3724      	adds	r7, #36	; 0x24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr
 800dc66:	bf00      	nop
 800dc68:	41700000 	.word	0x41700000

0800dc6c <newPID>:
	pid->Umin = -ulim;
}


PID_Type *newPID(float kp,float ki,float kd,float dt,float ilim,float ulim)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b088      	sub	sp, #32
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	ed87 0a05 	vstr	s0, [r7, #20]
 800dc76:	edc7 0a04 	vstr	s1, [r7, #16]
 800dc7a:	ed87 1a03 	vstr	s2, [r7, #12]
 800dc7e:	edc7 1a02 	vstr	s3, [r7, #8]
 800dc82:	ed87 2a01 	vstr	s4, [r7, #4]
 800dc86:	edc7 2a00 	vstr	s5, [r7]

	PID_Type *pp=(PID_Type *)malloc(sizeof(PID_Type));
 800dc8a:	2054      	movs	r0, #84	; 0x54
 800dc8c:	f003 fc4a 	bl	8011524 <malloc>
 800dc90:	4603      	mov	r3, r0
 800dc92:	61fb      	str	r3, [r7, #28]
	if(pp==NULL)
 800dc94:	69fb      	ldr	r3, [r7, #28]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d101      	bne.n	800dc9e <newPID+0x32>
		return NULL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e014      	b.n	800dcc8 <newPID+0x5c>
	memset(pp,0,sizeof(PID_Type));
 800dc9e:	2254      	movs	r2, #84	; 0x54
 800dca0:	2100      	movs	r1, #0
 800dca2:	69f8      	ldr	r0, [r7, #28]
 800dca4:	f003 fc51 	bl	801154a <memset>
	initPID(pp,kp,ki,kd,dt,ilim,ulim);
 800dca8:	edd7 2a00 	vldr	s5, [r7]
 800dcac:	ed97 2a01 	vldr	s4, [r7, #4]
 800dcb0:	edd7 1a02 	vldr	s3, [r7, #8]
 800dcb4:	ed97 1a03 	vldr	s2, [r7, #12]
 800dcb8:	edd7 0a04 	vldr	s1, [r7, #16]
 800dcbc:	ed97 0a05 	vldr	s0, [r7, #20]
 800dcc0:	69f8      	ldr	r0, [r7, #28]
 800dcc2:	f7ff ff45 	bl	800db50 <initPID>
	return pp;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3720      	adds	r7, #32
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <my_UsartInit>:
 *
 */

/*put this function in the main.c for initilization*/
void my_UsartInit()
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	af00      	add	r7, sp, #0

	 //Usart 1 is connected to raspberry pi, we handle Tx, rosserial handles Rx
	 myInitUsartMode(&huart1,usartDMACircularMode);
 800dcd4:	2102      	movs	r1, #2
 800dcd6:	4807      	ldr	r0, [pc, #28]	; (800dcf4 <my_UsartInit+0x24>)
 800dcd8:	f000 f812 	bl	800dd00 <myInitUsartMode>

	 //for application use
	 myInitUsartMode(&huart2,usartIntMode);
 800dcdc:	2100      	movs	r1, #0
 800dcde:	4806      	ldr	r0, [pc, #24]	; (800dcf8 <my_UsartInit+0x28>)
 800dce0:	f000 f80e 	bl	800dd00 <myInitUsartMode>

	 //Usart 3 is connecting through usb by defaut, configured to DMA mode
	 myInitUsartMode(&huart3,usartDMAIdleMode);
 800dce4:	2101      	movs	r1, #1
 800dce6:	4805      	ldr	r0, [pc, #20]	; (800dcfc <my_UsartInit+0x2c>)
 800dce8:	f000 f80a 	bl	800dd00 <myInitUsartMode>

	 //Enable printf Binany
	 printfBin_init();
 800dcec:	f000 fc1a 	bl	800e524 <printfBin_init>
}
 800dcf0:	bf00      	nop
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	2000aef4 	.word	0x2000aef4
 800dcf8:	2000af74 	.word	0x2000af74
 800dcfc:	2000ad54 	.word	0x2000ad54

0800dd00 <myInitUsartMode>:

static void myInitUsartMode(UART_HandleTypeDef *huart,USARTMode usartMode){
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	460b      	mov	r3, r1
 800dd0a:	70fb      	strb	r3, [r7, #3]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 f85b 	bl	800ddc8 <getUsartDevice>
 800dd12:	60f8      	str	r0, [r7, #12]
	memset(uartDev,0,sizeof(UART_DEVICE));
 800dd14:	f242 32f4 	movw	r2, #9204	; 0x23f4
 800dd18:	2100      	movs	r1, #0
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f003 fc15 	bl	801154a <memset>
	uartDev->huart = huart;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	601a      	str	r2, [r3, #0]
	uartDev->pRxBuf = uartDev->RxBuf;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800dd2c:	68f9      	ldr	r1, [r7, #12]
 800dd2e:	f242 1354 	movw	r3, #8532	; 0x2154
 800dd32:	440b      	add	r3, r1
 800dd34:	601a      	str	r2, [r3, #0]
	uartDev->pRxLineBuf=uartDev->RxLineBuf;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f242 1258 	movw	r2, #8536	; 0x2158
 800dd3c:	441a      	add	r2, r3
 800dd3e:	68f9      	ldr	r1, [r7, #12]
 800dd40:	f242 334c 	movw	r3, #9036	; 0x234c
 800dd44:	440b      	add	r3, r1
 800dd46:	601a      	str	r2, [r3, #0]
	uartDev->receveBinPtr = (RECEIVEBINSTRUCT *)uartDev->RxBuf;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800dd4e:	68f9      	ldr	r1, [r7, #12]
 800dd50:	f242 33e0 	movw	r3, #9184	; 0x23e0
 800dd54:	440b      	add	r3, r1
 800dd56:	601a      	str	r2, [r3, #0]
	uartDev->usartmode=usartMode;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	78fa      	ldrb	r2, [r7, #3]
 800dd5c:	711a      	strb	r2, [r3, #4]
	if(usartMode==usartIntMode){
 800dd5e:	78fb      	ldrb	r3, [r7, #3]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d108      	bne.n	800dd76 <myInitUsartMode+0x76>
		 __HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	681a      	ldr	r2, [r3, #0]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f042 0220 	orr.w	r2, r2, #32
 800dd72:	601a      	str	r2, [r3, #0]
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);

		 /*Enable USART_Rx IDLE Detection to stop USART1_Rx_DMA*/
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
	}
}
 800dd74:	e024      	b.n	800ddc0 <myInitUsartMode+0xc0>
	else if(usartMode==usartDMACircularMode){
 800dd76:	78fb      	ldrb	r3, [r7, #3]
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d10a      	bne.n	800dd92 <myInitUsartMode+0x92>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6818      	ldr	r0, [r3, #0]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800dd86:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	f7f8 fb32 	bl	80063f4 <HAL_UART_Receive_DMA>
}
 800dd90:	e016      	b.n	800ddc0 <myInitUsartMode+0xc0>
	else if(usartMode==usartDMAIdleMode){
 800dd92:	78fb      	ldrb	r3, [r7, #3]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d113      	bne.n	800ddc0 <myInitUsartMode+0xc0>
		 HAL_UART_Receive_DMA(uartDev->huart, uartDev->RxBuf, UART_RX_BUF_SIZE-1);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6818      	ldr	r0, [r3, #0]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800dda2:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dda6:	4619      	mov	r1, r3
 800dda8:	f7f8 fb24 	bl	80063f4 <HAL_UART_Receive_DMA>
		 __HAL_UART_ENABLE_IT(uartDev->huart, UART_IT_IDLE);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	681a      	ldr	r2, [r3, #0]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	f042 0210 	orr.w	r2, r2, #16
 800ddbe:	601a      	str	r2, [r3, #0]
}
 800ddc0:	bf00      	nop
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <getUsartDevice>:

static UART_DEVICE *getUsartDevice(UART_HandleTypeDef *huart){
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
	if(huart==&huart1)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a0c      	ldr	r2, [pc, #48]	; (800de04 <getUsartDevice+0x3c>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d101      	bne.n	800dddc <getUsartDevice+0x14>
		return &Usart1Device;
 800ddd8:	4b0b      	ldr	r3, [pc, #44]	; (800de08 <getUsartDevice+0x40>)
 800ddda:	e00c      	b.n	800ddf6 <getUsartDevice+0x2e>
	if(huart==&huart2)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	4a0b      	ldr	r2, [pc, #44]	; (800de0c <getUsartDevice+0x44>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d101      	bne.n	800dde8 <getUsartDevice+0x20>
		return &Usart2Device;
 800dde4:	4b0a      	ldr	r3, [pc, #40]	; (800de10 <getUsartDevice+0x48>)
 800dde6:	e006      	b.n	800ddf6 <getUsartDevice+0x2e>
	if(huart==&huart3)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	4a0a      	ldr	r2, [pc, #40]	; (800de14 <getUsartDevice+0x4c>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	d101      	bne.n	800ddf4 <getUsartDevice+0x2c>
		return &Usart3Device;
 800ddf0:	4b09      	ldr	r3, [pc, #36]	; (800de18 <getUsartDevice+0x50>)
 800ddf2:	e000      	b.n	800ddf6 <getUsartDevice+0x2e>
	return &Usart3Device;
 800ddf4:	4b08      	ldr	r3, [pc, #32]	; (800de18 <getUsartDevice+0x50>)
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	370c      	adds	r7, #12
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	2000aef4 	.word	0x2000aef4
 800de08:	2000d64c 	.word	0x2000d64c
 800de0c:	2000af74 	.word	0x2000af74
 800de10:	2000b258 	.word	0x2000b258
 800de14:	2000ad54 	.word	0x2000ad54
 800de18:	2000fa40 	.word	0x2000fa40

0800de1c <_write>:
/************************************			*************************************/
/************************************	Transfer*************************************/
/************************************			************************************/
/*Redirect printf() by implementing (weak) _write function.
 *Every printf() call would store the output string in TxBuf[], ready for Usart DMA output instead of directly output*/
int _write(int file, char *pSrc, int len){
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	60f8      	str	r0, [r7, #12]
 800de24:	60b9      	str	r1, [r7, #8]
 800de26:	607a      	str	r2, [r7, #4]
	return my_write_DMA(&huart3,(uint8_t *)pSrc,len);
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	68b9      	ldr	r1, [r7, #8]
 800de2c:	4803      	ldr	r0, [pc, #12]	; (800de3c <_write+0x20>)
 800de2e:	f000 f807 	bl	800de40 <my_write_DMA>
 800de32:	4603      	mov	r3, r0
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	2000ad54 	.word	0x2000ad54

0800de40 <my_write_DMA>:
int my_write_DMA(UART_HandleTypeDef *huart, uint8_t *pSrc, int len)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800de4c:	68f8      	ldr	r0, [r7, #12]
 800de4e:	f7ff ffbb 	bl	800ddc8 <getUsartDevice>
 800de52:	6178      	str	r0, [r7, #20]
	uint8_t *pDes=uartDev->TxBuf[uartDev->producerTxBufNum];
 800de54:	697a      	ldr	r2, [r7, #20]
 800de56:	f641 7348 	movw	r3, #8008	; 0x1f48
 800de5a:	4413      	add	r3, r2
 800de5c:	881b      	ldrh	r3, [r3, #0]
 800de5e:	461a      	mov	r2, r3
 800de60:	f44f 7348 	mov.w	r3, #800	; 0x320
 800de64:	fb03 f302 	mul.w	r3, r3, r2
 800de68:	697a      	ldr	r2, [r7, #20]
 800de6a:	4413      	add	r3, r2
 800de6c:	3305      	adds	r3, #5
 800de6e:	613b      	str	r3, [r7, #16]

	//store the string to next buffer
	memcpy(pDes,pSrc,len);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	461a      	mov	r2, r3
 800de74:	68b9      	ldr	r1, [r7, #8]
 800de76:	6938      	ldr	r0, [r7, #16]
 800de78:	f003 fb5c 	bl	8011534 <memcpy>
	*(pDes+len)='\0';
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	693a      	ldr	r2, [r7, #16]
 800de80:	4413      	add	r3, r2
 800de82:	2200      	movs	r2, #0
 800de84:	701a      	strb	r2, [r3, #0]
	uartDev->countTxBuf[uartDev->producerTxBufNum] = len;
 800de86:	697a      	ldr	r2, [r7, #20]
 800de88:	f641 7348 	movw	r3, #8008	; 0x1f48
 800de8c:	4413      	add	r3, r2
 800de8e:	881b      	ldrh	r3, [r3, #0]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	b291      	uxth	r1, r2
 800de94:	697a      	ldr	r2, [r7, #20]
 800de96:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800de9a:	005b      	lsls	r3, r3, #1
 800de9c:	4413      	add	r3, r2
 800de9e:	460a      	mov	r2, r1
 800dea0:	809a      	strh	r2, [r3, #4]

	//add one bufferedTxNum, recording how many buffered strings that haven't been sent
	uartDev->bufferedTxNum++;
 800dea2:	697a      	ldr	r2, [r7, #20]
 800dea4:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800dea8:	4413      	add	r3, r2
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	3301      	adds	r3, #1
 800deae:	b299      	uxth	r1, r3
 800deb0:	697a      	ldr	r2, [r7, #20]
 800deb2:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800deb6:	4413      	add	r3, r2
 800deb8:	460a      	mov	r2, r1
 800deba:	801a      	strh	r2, [r3, #0]

	//Try to send just buffered string if this is the only one
	if(uartDev->bufferedTxNum == 1){
 800debc:	697a      	ldr	r2, [r7, #20]
 800debe:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800dec2:	4413      	add	r3, r2
 800dec4:	881b      	ldrh	r3, [r3, #0]
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d119      	bne.n	800defe <my_write_DMA+0xbe>
		HAL_UART_Transmit_DMA(uartDev->huart,pDes,uartDev->countTxBuf[uartDev->producerTxBufNum]);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	6818      	ldr	r0, [r3, #0]
 800dece:	697a      	ldr	r2, [r7, #20]
 800ded0:	f641 7348 	movw	r3, #8008	; 0x1f48
 800ded4:	4413      	add	r3, r2
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	697a      	ldr	r2, [r7, #20]
 800deda:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	4413      	add	r3, r2
 800dee2:	889b      	ldrh	r3, [r3, #4]
 800dee4:	461a      	mov	r2, r3
 800dee6:	6939      	ldr	r1, [r7, #16]
 800dee8:	f7f8 fa08 	bl	80062fc <HAL_UART_Transmit_DMA>
		uartDev->TxStart = micros();
 800deec:	f7fe fb72 	bl	800c5d4 <micros>
 800def0:	4601      	mov	r1, r0
 800def2:	697a      	ldr	r2, [r7, #20]
 800def4:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800def8:	4413      	add	r3, r2
 800defa:	6019      	str	r1, [r3, #0]
 800defc:	e00a      	b.n	800df14 <my_write_DMA+0xd4>
	}
	else{
	//TO DO, There is a bug here, when the builtInPWMFrequency is changed, the uartDevs would somehow suddenly lost the configurations
		uartDev->bufferedTxNum=uartDev->bufferedTxNum-1+1;
 800defe:	697a      	ldr	r2, [r7, #20]
 800df00:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800df04:	4413      	add	r3, r2
 800df06:	8819      	ldrh	r1, [r3, #0]
 800df08:	697a      	ldr	r2, [r7, #20]
 800df0a:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800df0e:	4413      	add	r3, r2
 800df10:	460a      	mov	r2, r1
 800df12:	801a      	strh	r2, [r3, #0]
	}
	//move producerTxBufNum forward
	uartDev->producerTxBufNum++;
 800df14:	697a      	ldr	r2, [r7, #20]
 800df16:	f641 7348 	movw	r3, #8008	; 0x1f48
 800df1a:	4413      	add	r3, r2
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	3301      	adds	r3, #1
 800df20:	b299      	uxth	r1, r3
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	f641 7348 	movw	r3, #8008	; 0x1f48
 800df28:	4413      	add	r3, r2
 800df2a:	460a      	mov	r2, r1
 800df2c:	801a      	strh	r2, [r3, #0]
	uartDev->producerTxBufNum%=UART_TX_BUF_NUM;
 800df2e:	697a      	ldr	r2, [r7, #20]
 800df30:	f641 7348 	movw	r3, #8008	; 0x1f48
 800df34:	4413      	add	r3, r2
 800df36:	881a      	ldrh	r2, [r3, #0]
 800df38:	4b0a      	ldr	r3, [pc, #40]	; (800df64 <my_write_DMA+0x124>)
 800df3a:	fba3 1302 	umull	r1, r3, r3, r2
 800df3e:	08d9      	lsrs	r1, r3, #3
 800df40:	460b      	mov	r3, r1
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	440b      	add	r3, r1
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	1ad3      	subs	r3, r2, r3
 800df4a:	b299      	uxth	r1, r3
 800df4c:	697a      	ldr	r2, [r7, #20]
 800df4e:	f641 7348 	movw	r3, #8008	; 0x1f48
 800df52:	4413      	add	r3, r2
 800df54:	460a      	mov	r2, r1
 800df56:	801a      	strh	r2, [r3, #0]
//	while(uartDev->bufferedTxNum > (UART_TX_BUF_NUM-2)){
//		//Danger! May block the main program continuously !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//		//This waiting mechanism is to take care of the high frequency output within a short period during the Ethercat Initialization
//		//If the producer is always quicker than consumer, for example a high frequency output ,this function would block the program permanently
//	};
	return len;
 800df58:	687b      	ldr	r3, [r7, #4]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3718      	adds	r7, #24
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	cccccccd 	.word	0xcccccccd

0800df68 <HAL_UART_TxCpltCallback>:
/************************************							*************************************/
/************************************Transfer Complete Callback*************************************/
/************************************							************************************/
/*this function would overwrite HAL's weak HAL_UART_TxCpltCallback for all usart*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b086      	sub	sp, #24
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7ff ff29 	bl	800ddc8 <getUsartDevice>
 800df76:	6178      	str	r0, [r7, #20]
	if(uartDev->usartmode==usartDMAIdleMode){
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	791b      	ldrb	r3, [r3, #4]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	f040 808a 	bne.w	800e096 <HAL_UART_TxCpltCallback+0x12e>
		UART_DEVICE *uartDev=getUsartDevice(huart);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff ff20 	bl	800ddc8 <getUsartDevice>
 800df88:	6138      	str	r0, [r7, #16]
		 /*update information*/
		 uartDev->TxEnd = micros();
 800df8a:	f7fe fb23 	bl	800c5d4 <micros>
 800df8e:	4601      	mov	r1, r0
 800df90:	693a      	ldr	r2, [r7, #16]
 800df92:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800df96:	4413      	add	r3, r2
 800df98:	6019      	str	r1, [r3, #0]
		 uartDev->lastTxTime = uartDev->TxEnd - uartDev->TxStart;
 800df9a:	693a      	ldr	r2, [r7, #16]
 800df9c:	f242 33e8 	movw	r3, #9192	; 0x23e8
 800dfa0:	4413      	add	r3, r2
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	6939      	ldr	r1, [r7, #16]
 800dfa6:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800dfaa:	440b      	add	r3, r1
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	1ad2      	subs	r2, r2, r3
 800dfb0:	6939      	ldr	r1, [r7, #16]
 800dfb2:	f242 33ec 	movw	r3, #9196	; 0x23ec
 800dfb6:	440b      	add	r3, r1
 800dfb8:	601a      	str	r2, [r3, #0]
		 uartDev->lastTxCount = uartDev->countTxBuf[uartDev->consumerTxBufNum];
 800dfba:	693a      	ldr	r2, [r7, #16]
 800dfbc:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dfc0:	4413      	add	r3, r2
 800dfc2:	881b      	ldrh	r3, [r3, #0]
 800dfc4:	693a      	ldr	r2, [r7, #16]
 800dfc6:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	4413      	add	r3, r2
 800dfce:	889b      	ldrh	r3, [r3, #4]
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	693a      	ldr	r2, [r7, #16]
 800dfd4:	f242 33f0 	movw	r3, #9200	; 0x23f0
 800dfd8:	4413      	add	r3, r2
 800dfda:	6019      	str	r1, [r3, #0]

		/*One consumption done. move consumer forward*/
		uartDev->consumerTxBufNum++;
 800dfdc:	693a      	ldr	r2, [r7, #16]
 800dfde:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dfe2:	4413      	add	r3, r2
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	3301      	adds	r3, #1
 800dfe8:	b299      	uxth	r1, r3
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dff0:	4413      	add	r3, r2
 800dff2:	460a      	mov	r2, r1
 800dff4:	801a      	strh	r2, [r3, #0]
		uartDev->consumerTxBufNum%=UART_TX_BUF_NUM;
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	f641 7346 	movw	r3, #8006	; 0x1f46
 800dffc:	4413      	add	r3, r2
 800dffe:	881a      	ldrh	r2, [r3, #0]
 800e000:	4b27      	ldr	r3, [pc, #156]	; (800e0a0 <HAL_UART_TxCpltCallback+0x138>)
 800e002:	fba3 1302 	umull	r1, r3, r3, r2
 800e006:	08d9      	lsrs	r1, r3, #3
 800e008:	460b      	mov	r3, r1
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	440b      	add	r3, r1
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	1ad3      	subs	r3, r2, r3
 800e012:	b299      	uxth	r1, r3
 800e014:	693a      	ldr	r2, [r7, #16]
 800e016:	f641 7346 	movw	r3, #8006	; 0x1f46
 800e01a:	4413      	add	r3, r2
 800e01c:	460a      	mov	r2, r1
 800e01e:	801a      	strh	r2, [r3, #0]

		/*reduce one bufferedTxNum*/
		 uartDev->bufferedTxNum--;
 800e020:	693a      	ldr	r2, [r7, #16]
 800e022:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800e026:	4413      	add	r3, r2
 800e028:	881b      	ldrh	r3, [r3, #0]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	b299      	uxth	r1, r3
 800e02e:	693a      	ldr	r2, [r7, #16]
 800e030:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800e034:	4413      	add	r3, r2
 800e036:	460a      	mov	r2, r1
 800e038:	801a      	strh	r2, [r3, #0]

		/*If it is still positive, go on consume next*/
		if(uartDev->bufferedTxNum>0){
 800e03a:	693a      	ldr	r2, [r7, #16]
 800e03c:	f641 734a 	movw	r3, #8010	; 0x1f4a
 800e040:	4413      	add	r3, r2
 800e042:	881b      	ldrh	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d026      	beq.n	800e096 <HAL_UART_TxCpltCallback+0x12e>
			uartDev->TxStart = micros();
 800e048:	f7fe fac4 	bl	800c5d4 <micros>
 800e04c:	4601      	mov	r1, r0
 800e04e:	693a      	ldr	r2, [r7, #16]
 800e050:	f242 33e4 	movw	r3, #9188	; 0x23e4
 800e054:	4413      	add	r3, r2
 800e056:	6019      	str	r1, [r3, #0]
			uint8_t *px = &uartDev->TxBuf[uartDev->consumerTxBufNum][0];
 800e058:	693a      	ldr	r2, [r7, #16]
 800e05a:	f641 7346 	movw	r3, #8006	; 0x1f46
 800e05e:	4413      	add	r3, r2
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	461a      	mov	r2, r3
 800e064:	f44f 7348 	mov.w	r3, #800	; 0x320
 800e068:	fb03 f302 	mul.w	r3, r3, r2
 800e06c:	693a      	ldr	r2, [r7, #16]
 800e06e:	4413      	add	r3, r2
 800e070:	3305      	adds	r3, #5
 800e072:	60fb      	str	r3, [r7, #12]
			HAL_UART_Transmit_DMA(uartDev->huart,px,uartDev->countTxBuf[uartDev->consumerTxBufNum]);
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	6818      	ldr	r0, [r3, #0]
 800e078:	693a      	ldr	r2, [r7, #16]
 800e07a:	f641 7346 	movw	r3, #8006	; 0x1f46
 800e07e:	4413      	add	r3, r2
 800e080:	881b      	ldrh	r3, [r3, #0]
 800e082:	693a      	ldr	r2, [r7, #16]
 800e084:	f603 73a4 	addw	r3, r3, #4004	; 0xfa4
 800e088:	005b      	lsls	r3, r3, #1
 800e08a:	4413      	add	r3, r2
 800e08c:	889b      	ldrh	r3, [r3, #4]
 800e08e:	461a      	mov	r2, r3
 800e090:	68f9      	ldr	r1, [r7, #12]
 800e092:	f7f8 f933 	bl	80062fc <HAL_UART_Transmit_DMA>
		}
	}

}
 800e096:	bf00      	nop
 800e098:	3718      	adds	r7, #24
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	cccccccd 	.word	0xcccccccd

0800e0a4 <myUsartDMAIdleIRQ>:
		myUsartDMAIRQ(&huart3) ;
		HAL_UART_IRQHandler(&huart3);
	}
*/
void myUsartDMAIdleIRQ(UART_HandleTypeDef *huart)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b086      	sub	sp, #24
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f7ff fe8b 	bl	800ddc8 <getUsartDevice>
 800e0b2:	6178      	str	r0, [r7, #20]
	 uint32_t tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	69db      	ldr	r3, [r3, #28]
 800e0ba:	f003 0310 	and.w	r3, r3, #16
 800e0be:	2b10      	cmp	r3, #16
 800e0c0:	bf0c      	ite	eq
 800e0c2:	2301      	moveq	r3, #1
 800e0c4:	2300      	movne	r3, #0
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	613b      	str	r3, [r7, #16]
	 uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_IDLE);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f003 0310 	and.w	r3, r3, #16
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	bf14      	ite	ne
 800e0d8:	2301      	movne	r3, #1
 800e0da:	2300      	moveq	r3, #0
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	60fb      	str	r3, [r7, #12]
	 /* UART RX Idle interrupt*/
	 if((tmp_flag != RESET) && (tmp_it_source != RESET)){
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d00c      	beq.n	800e100 <myUsartDMAIdleIRQ+0x5c>
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d009      	beq.n	800e100 <myUsartDMAIdleIRQ+0x5c>

		 /*Clear Idle Flag*/
		__HAL_UART_CLEAR_IDLEFLAG(huart);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2210      	movs	r2, #16
 800e0f2:	621a      	str	r2, [r3, #32]

		/*receive flag*/
		uartDev->Received = 1;
 800e0f4:	697a      	ldr	r2, [r7, #20]
 800e0f6:	f242 33de 	movw	r3, #9182	; 0x23de
 800e0fa:	4413      	add	r3, r2
 800e0fc:	2201      	movs	r2, #1
 800e0fe:	801a      	strh	r2, [r3, #0]
		/*We stop the DMA in the polling task, not here, since some data are still on the fly now*/
	}
}
 800e100:	bf00      	nop
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <myUsartIntIRQ>:
	  myUsartIntIRQ(&huart2);
	  HAL_UART_IRQHandler(&huart2);
	}
*/
void myUsartIntIRQ(UART_HandleTypeDef *huart)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7ff fe59 	bl	800ddc8 <getUsartDevice>
 800e116:	60f8      	str	r0, [r7, #12]
	if(uartDev->usartmode==usartIntMode){
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	791b      	ldrb	r3, [r3, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d153      	bne.n	800e1c8 <myUsartIntIRQ+0xc0>
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff fe51 	bl	800ddc8 <getUsartDevice>
 800e126:	60b8      	str	r0, [r7, #8]
 	if(__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE)!=RESET)   //receive interrupt
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	69db      	ldr	r3, [r3, #28]
 800e12e:	f003 0320 	and.w	r3, r3, #32
 800e132:	2b20      	cmp	r3, #32
 800e134:	d148      	bne.n	800e1c8 <myUsartIntIRQ+0xc0>
	{
		*(uartDev->pRxBuf)=(uint8_t)(huart->Instance->RDR & (uint8_t)0x00FF);  //read and clear flag
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e13c:	68ba      	ldr	r2, [r7, #8]
 800e13e:	f242 1354 	movw	r3, #8532	; 0x2154
 800e142:	4413      	add	r3, r2
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	b2ca      	uxtb	r2, r1
 800e148:	701a      	strb	r2, [r3, #0]
		if(*(uartDev->pRxBuf)==0x0a) // if current char is 0x0a, take care. If not, go on receiving.
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	f242 1354 	movw	r3, #8532	; 0x2154
 800e150:	4413      	add	r3, r2
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	2b0a      	cmp	r3, #10
 800e158:	d12b      	bne.n	800e1b2 <myUsartIntIRQ+0xaa>
		{
			if((uartDev->pRxBuf)!=(uartDev->RxBuf)) // if '0x0a' is not in the beginning
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	f242 1354 	movw	r3, #8532	; 0x2154
 800e160:	4413      	add	r3, r2
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d02c      	beq.n	800e1c8 <myUsartIntIRQ+0xc0>
			{
				if(*(uartDev->pRxBuf-1)==0x0d)// if previous char is 0x0d, legal end.
 800e16e:	68ba      	ldr	r2, [r7, #8]
 800e170:	f242 1354 	movw	r3, #8532	; 0x2154
 800e174:	4413      	add	r3, r2
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	3b01      	subs	r3, #1
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	2b0d      	cmp	r3, #13
 800e17e:	d106      	bne.n	800e18e <myUsartIntIRQ+0x86>
			    {
					uartDev->Received = 1;
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	f242 33de 	movw	r3, #9182	; 0x23de
 800e186:	4413      	add	r3, r2
 800e188:	2201      	movs	r2, #1
 800e18a:	801a      	strh	r2, [r3, #0]
			}//if '0x0a' is received in the beginning. do nothing.
		}
		else uartDev->pRxBuf++;
	}
	}
}
 800e18c:	e01c      	b.n	800e1c8 <myUsartIntIRQ+0xc0>
					memset(uartDev->RxBuf,0,UART_RX_BUF_SIZE);
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800e194:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e198:	2100      	movs	r1, #0
 800e19a:	4618      	mov	r0, r3
 800e19c:	f003 f9d5 	bl	801154a <memset>
					uartDev->pRxBuf=uartDev->RxBuf;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800e1a6:	68b9      	ldr	r1, [r7, #8]
 800e1a8:	f242 1354 	movw	r3, #8532	; 0x2154
 800e1ac:	440b      	add	r3, r1
 800e1ae:	601a      	str	r2, [r3, #0]
}
 800e1b0:	e00a      	b.n	800e1c8 <myUsartIntIRQ+0xc0>
		else uartDev->pRxBuf++;
 800e1b2:	68ba      	ldr	r2, [r7, #8]
 800e1b4:	f242 1354 	movw	r3, #8532	; 0x2154
 800e1b8:	4413      	add	r3, r2
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	1c5a      	adds	r2, r3, #1
 800e1be:	68b9      	ldr	r1, [r7, #8]
 800e1c0:	f242 1354 	movw	r3, #8532	; 0x2154
 800e1c4:	440b      	add	r3, r1
 800e1c6:	601a      	str	r2, [r3, #0]
}
 800e1c8:	bf00      	nop
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <Usart_ReceivePolling>:

/*This function is put in the control loop in freeRTOS.c for polling*/
void Usart_ReceivePolling()
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0
	/********************************Usart 1 DMA reception is circular****************************/

	/********************************Usart 2 Int reception****************************/
	UsartRxIntReceivedPolling(&Usart2Device);
 800e1d4:	4803      	ldr	r0, [pc, #12]	; (800e1e4 <Usart_ReceivePolling+0x14>)
 800e1d6:	f000 f831 	bl	800e23c <UsartRxIntReceivedPolling>

	/********************************Usart 3 DMA reception****************************/
	UsartRxDMAIdleReceivedPolling(&Usart3Device);
 800e1da:	4803      	ldr	r0, [pc, #12]	; (800e1e8 <Usart_ReceivePolling+0x18>)
 800e1dc:	f000 f857 	bl	800e28e <UsartRxDMAIdleReceivedPolling>
}
 800e1e0:	bf00      	nop
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	2000b258 	.word	0x2000b258
 800e1e8:	2000fa40 	.word	0x2000fa40

0800e1ec <_serialCallback>:


inline static void _serialCallback(UART_DEVICE *usartDevice){
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
	char *pSerialBuf=(usartDevice->usartmode==usartDMACircularMode)?((char *)usartDevice->RxLineBuf):((char *)usartDevice->RxBuf);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	791b      	ldrb	r3, [r3, #4]
 800e1f8:	2b02      	cmp	r3, #2
 800e1fa:	d104      	bne.n	800e206 <_serialCallback+0x1a>
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	f242 1358 	movw	r3, #8536	; 0x2158
 800e202:	4413      	add	r3, r2
 800e204:	e002      	b.n	800e20c <_serialCallback+0x20>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800e20c:	60fb      	str	r3, [r7, #12]

	if(usartDevice==&Usart2Device){
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	4a08      	ldr	r2, [pc, #32]	; (800e234 <_serialCallback+0x48>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d103      	bne.n	800e21e <_serialCallback+0x32>
		serial2Callback(pSerialBuf);
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f7fe f9c6 	bl	800c5a8 <serial2Callback>
	}
	else if(usartDevice==&Usart3Device){
		serial3Callback(pSerialBuf);
	}
}
 800e21c:	e006      	b.n	800e22c <_serialCallback+0x40>
	else if(usartDevice==&Usart3Device){
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	4a05      	ldr	r2, [pc, #20]	; (800e238 <_serialCallback+0x4c>)
 800e222:	4293      	cmp	r3, r2
 800e224:	d102      	bne.n	800e22c <_serialCallback+0x40>
		serial3Callback(pSerialBuf);
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f002 ffe2 	bl	80111f0 <serial3Callback>
}
 800e22c:	bf00      	nop
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	2000b258 	.word	0x2000b258
 800e238:	2000fa40 	.word	0x2000fa40

0800e23c <UsartRxIntReceivedPolling>:

static void UsartRxIntReceivedPolling(UART_DEVICE *UsartDevice){
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
	if (UsartDevice->Received == 1) {
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	f242 33de 	movw	r3, #9182	; 0x23de
 800e24a:	4413      	add	r3, r2
 800e24c:	881b      	ldrh	r3, [r3, #0]
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d119      	bne.n	800e286 <UsartRxIntReceivedPolling+0x4a>
		_serialCallback(UsartDevice);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7ff ffca 	bl	800e1ec <_serialCallback>
		memset(UsartDevice->RxBuf,0,UART_RX_BUF_SIZE);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800e25e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e262:	2100      	movs	r1, #0
 800e264:	4618      	mov	r0, r3
 800e266:	f003 f970 	bl	801154a <memset>
		UsartDevice->pRxBuf=UsartDevice->RxBuf;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f503 52fb 	add.w	r2, r3, #8032	; 0x1f60
 800e270:	6879      	ldr	r1, [r7, #4]
 800e272:	f242 1354 	movw	r3, #8532	; 0x2154
 800e276:	440b      	add	r3, r1
 800e278:	601a      	str	r2, [r3, #0]
		UsartDevice->Received = 0;
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	f242 33de 	movw	r3, #9182	; 0x23de
 800e280:	4413      	add	r3, r2
 800e282:	2200      	movs	r2, #0
 800e284:	801a      	strh	r2, [r3, #0]
	}
}
 800e286:	bf00      	nop
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}

0800e28e <UsartRxDMAIdleReceivedPolling>:

static void UsartRxDMAIdleReceivedPolling(UART_DEVICE *UsartDevice)
{
 800e28e:	b580      	push	{r7, lr}
 800e290:	b084      	sub	sp, #16
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
	/********************************Usart DMA reception****************************/
		/*Only process with idle receiving detection*/
		if (UsartDevice->Received == 1) {
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	f242 33de 	movw	r3, #9182	; 0x23de
 800e29c:	4413      	add	r3, r2
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	2b01      	cmp	r3, #1
 800e2a2:	f040 80f1 	bne.w	800e488 <UsartRxDMAIdleReceivedPolling+0x1fa>

			/* Stop UART DMA Rx request if ongoing */
			if ((UsartDevice->huart->RxState == HAL_UART_STATE_BUSY_RX) && (HAL_IS_BIT_SET(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR))) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2ac:	2b22      	cmp	r3, #34	; 0x22
 800e2ae:	d14b      	bne.n	800e348 <UsartRxDMAIdleReceivedPolling+0xba>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2bc:	2b40      	cmp	r3, #64	; 0x40
 800e2be:	d143      	bne.n	800e348 <UsartRxDMAIdleReceivedPolling+0xba>
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_DMAR);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	689a      	ldr	r2, [r3, #8]
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2d2:	609a      	str	r2, [r3, #8]

				/* Abort the UART DMA Rx channel */
				if (UsartDevice->huart->hdmarx != NULL) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d01c      	beq.n	800e318 <UsartRxDMAIdleReceivedPolling+0x8a>
					/* Determine how many items of data have been received */
					UsartDevice->countRxBuf = UsartDevice->huart->RxXferSize - __HAL_DMA_GET_COUNTER(UsartDevice->huart->hdmarx);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	b299      	uxth	r1, r3
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800e2fc:	4413      	add	r3, r2
 800e2fe:	460a      	mov	r2, r1
 800e300:	801a      	strh	r2, [r3, #0]
					UsartDevice->huart->RxXferCount = 0;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	2200      	movs	r2, #0
 800e308:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

					/*Abort DMA*/
					HAL_DMA_Abort(UsartDevice->huart->hdmarx);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e312:	4618      	mov	r0, r3
 800e314:	f7f3 ff88 	bl	8002228 <HAL_DMA_Abort>
				}

				/* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
				CLEAR_BIT(UsartDevice->huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e32a:	601a      	str	r2, [r3, #0]
				CLEAR_BIT(UsartDevice->huart->Instance->CR3, USART_CR3_EIE);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	689a      	ldr	r2, [r3, #8]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f022 0201 	bic.w	r2, r2, #1
 800e33e:	609a      	str	r2, [r3, #8]

				/* At end of Rx process, restore huart->RxState to Ready */
				UsartDevice->huart->RxState = HAL_UART_STATE_READY;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2220      	movs	r2, #32
 800e346:	679a      	str	r2, [r3, #120]	; 0x78
			}

			/*Process commands buffer*/
			//since this termination is triggered by IDLE LINE, we keep looking for end of line '\r\n'
			int len=UsartDevice->countRxLineBuf+UsartDevice->countRxBuf;
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	f242 3350 	movw	r3, #9040	; 0x2350
 800e34e:	4413      	add	r3, r2
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	4619      	mov	r1, r3
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800e35a:	4413      	add	r3, r2
 800e35c:	881b      	ldrh	r3, [r3, #0]
 800e35e:	440b      	add	r3, r1
 800e360:	60fb      	str	r3, [r7, #12]

			//If overflow Clear
			if(len>UART_RX_BUF_SIZE)
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e368:	dd19      	ble.n	800e39e <UsartRxDMAIdleReceivedPolling+0x110>
			{
				memset(UsartDevice->RxLineBuf,0,UART_RX_BUF_SIZE);
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	f242 1358 	movw	r3, #8536	; 0x2158
 800e370:	4413      	add	r3, r2
 800e372:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e376:	2100      	movs	r1, #0
 800e378:	4618      	mov	r0, r3
 800e37a:	f003 f8e6 	bl	801154a <memset>
				UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f242 1258 	movw	r2, #8536	; 0x2158
 800e384:	441a      	add	r2, r3
 800e386:	6879      	ldr	r1, [r7, #4]
 800e388:	f242 334c 	movw	r3, #9036	; 0x234c
 800e38c:	440b      	add	r3, r1
 800e38e:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=0;
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	f242 3350 	movw	r3, #9040	; 0x2350
 800e396:	4413      	add	r3, r2
 800e398:	2200      	movs	r2, #0
 800e39a:	801a      	strh	r2, [r3, #0]
 800e39c:	e056      	b.n	800e44c <UsartRxDMAIdleReceivedPolling+0x1be>
			}
			else{
				//buffer to line
				memcpy(&(UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf]),UsartDevice->RxBuf,UsartDevice->countRxBuf);
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	f242 3350 	movw	r3, #9040	; 0x2350
 800e3a4:	4413      	add	r3, r2
 800e3a6:	881b      	ldrh	r3, [r3, #0]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	f242 1358 	movw	r3, #8536	; 0x2158
 800e3ae:	4413      	add	r3, r2
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	18d0      	adds	r0, r2, r3
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	f503 51fb 	add.w	r1, r3, #8032	; 0x1f60
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800e3c0:	4413      	add	r3, r2
 800e3c2:	881b      	ldrh	r3, [r3, #0]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	f003 f8b5 	bl	8011534 <memcpy>
				UsartDevice->pRxLineBuf+=UsartDevice->countRxBuf;
 800e3ca:	687a      	ldr	r2, [r7, #4]
 800e3cc:	f242 334c 	movw	r3, #9036	; 0x234c
 800e3d0:	4413      	add	r3, r2
 800e3d2:	681a      	ldr	r2, [r3, #0]
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800e3da:	440b      	add	r3, r1
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	441a      	add	r2, r3
 800e3e0:	6879      	ldr	r1, [r7, #4]
 800e3e2:	f242 334c 	movw	r3, #9036	; 0x234c
 800e3e6:	440b      	add	r3, r1
 800e3e8:	601a      	str	r2, [r3, #0]
				UsartDevice->countRxLineBuf=len;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	b299      	uxth	r1, r3
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	f242 3350 	movw	r3, #9040	; 0x2350
 800e3f4:	4413      	add	r3, r2
 800e3f6:	460a      	mov	r2, r1
 800e3f8:	801a      	strh	r2, [r3, #0]

				//if end of line
				if (UsartDevice->RxLineBuf[UsartDevice->countRxLineBuf-1]=='\n')
 800e3fa:	687a      	ldr	r2, [r7, #4]
 800e3fc:	f242 3350 	movw	r3, #9040	; 0x2350
 800e400:	4413      	add	r3, r2
 800e402:	881b      	ldrh	r3, [r3, #0]
 800e404:	3b01      	subs	r3, #1
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	441a      	add	r2, r3
 800e40a:	f242 1358 	movw	r3, #8536	; 0x2158
 800e40e:	4413      	add	r3, r2
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	2b0a      	cmp	r3, #10
 800e414:	d11a      	bne.n	800e44c <UsartRxDMAIdleReceivedPolling+0x1be>
				{
					_serialCallback(UsartDevice);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f7ff fee8 	bl	800e1ec <_serialCallback>
					memset(UsartDevice->RxLineBuf,0,len);
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	f242 1358 	movw	r3, #8536	; 0x2158
 800e422:	4413      	add	r3, r2
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	2100      	movs	r1, #0
 800e428:	4618      	mov	r0, r3
 800e42a:	f003 f88e 	bl	801154a <memset>
					UsartDevice->pRxLineBuf=UsartDevice->RxLineBuf;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f242 1258 	movw	r2, #8536	; 0x2158
 800e434:	441a      	add	r2, r3
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	f242 334c 	movw	r3, #9036	; 0x234c
 800e43c:	440b      	add	r3, r1
 800e43e:	601a      	str	r2, [r3, #0]
					UsartDevice->countRxLineBuf=0;
 800e440:	687a      	ldr	r2, [r7, #4]
 800e442:	f242 3350 	movw	r3, #9040	; 0x2350
 800e446:	4413      	add	r3, r2
 800e448:	2200      	movs	r2, #0
 800e44a:	801a      	strh	r2, [r3, #0]
				}
			}

			/*clear Recived flag*/
			UsartDevice->Received = 0;
 800e44c:	687a      	ldr	r2, [r7, #4]
 800e44e:	f242 33de 	movw	r3, #9182	; 0x23de
 800e452:	4413      	add	r3, r2
 800e454:	2200      	movs	r2, #0
 800e456:	801a      	strh	r2, [r3, #0]

			/*clear buffer*/
			memset(UsartDevice->szCmd, 0, sizeof(UsartDevice->szCmd));
 800e458:	687a      	ldr	r2, [r7, #4]
 800e45a:	f242 3358 	movw	r3, #9048	; 0x2358
 800e45e:	4413      	add	r3, r2
 800e460:	2264      	movs	r2, #100	; 0x64
 800e462:	2100      	movs	r1, #0
 800e464:	4618      	mov	r0, r3
 800e466:	f003 f870 	bl	801154a <memset>
			memset(UsartDevice->RxBuf, 0, UART_RX_BUF_SIZE);
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800e470:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800e474:	2100      	movs	r1, #0
 800e476:	4618      	mov	r0, r3
 800e478:	f003 f867 	bl	801154a <memset>
			UsartDevice->countRxBuf = 0;
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	f242 33dc 	movw	r3, #9180	; 0x23dc
 800e482:	4413      	add	r3, r2
 800e484:	2200      	movs	r2, #0
 800e486:	801a      	strh	r2, [r3, #0]
		}
		//Always try to start a new reception
		HAL_UART_Receive_DMA(UsartDevice->huart, UsartDevice->RxBuf, UART_RX_BUF_SIZE - 1);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6818      	ldr	r0, [r3, #0]
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800e492:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e496:	4619      	mov	r1, r3
 800e498:	f7f7 ffac 	bl	80063f4 <HAL_UART_Receive_DMA>
}
 800e49c:	bf00      	nop
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}

0800e4a4 <my_read_DMA_byte>:


int my_read_DMA_byte(UART_HandleTypeDef *huart){
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b086      	sub	sp, #24
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
	int c=-1;
 800e4ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b0:	617b      	str	r3, [r7, #20]
	UART_DEVICE *uartDev=getUsartDevice(huart);
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f7ff fc88 	bl	800ddc8 <getUsartDevice>
 800e4b8:	6138      	str	r0, [r7, #16]
	uint32_t RdmaInd=(UART_RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (UART_RX_BUF_SIZE - 1);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	f5c3 72fa 	rsb	r2, r3, #500	; 0x1f4
 800e4c6:	f240 13f3 	movw	r3, #499	; 0x1f3
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	60fb      	str	r3, [r7, #12]
    if(uartDev->RxInd != RdmaInd){
 800e4ce:	693a      	ldr	r2, [r7, #16]
 800e4d0:	f242 3354 	movw	r3, #9044	; 0x2354
 800e4d4:	4413      	add	r3, r2
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	68fa      	ldr	r2, [r7, #12]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d01d      	beq.n	800e51a <my_read_DMA_byte+0x76>
      c = uartDev->RxBuf[uartDev->RxInd++];
 800e4de:	693a      	ldr	r2, [r7, #16]
 800e4e0:	f242 3354 	movw	r3, #9044	; 0x2354
 800e4e4:	4413      	add	r3, r2
 800e4e6:	681a      	ldr	r2, [r3, #0]
 800e4e8:	1c51      	adds	r1, r2, #1
 800e4ea:	6938      	ldr	r0, [r7, #16]
 800e4ec:	f242 3354 	movw	r3, #9044	; 0x2354
 800e4f0:	4403      	add	r3, r0
 800e4f2:	6019      	str	r1, [r3, #0]
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	4413      	add	r3, r2
 800e4f8:	f503 53fb 	add.w	r3, r3, #8032	; 0x1f60
 800e4fc:	781b      	ldrb	r3, [r3, #0]
 800e4fe:	617b      	str	r3, [r7, #20]
      uartDev->RxInd &= (UART_RX_BUF_SIZE - 1);
 800e500:	693a      	ldr	r2, [r7, #16]
 800e502:	f242 3354 	movw	r3, #9044	; 0x2354
 800e506:	4413      	add	r3, r2
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e50e:	401a      	ands	r2, r3
 800e510:	6939      	ldr	r1, [r7, #16]
 800e512:	f242 3354 	movw	r3, #9044	; 0x2354
 800e516:	440b      	add	r3, r1
 800e518:	601a      	str	r2, [r3, #0]
    }
    return c;
 800e51a:	697b      	ldr	r3, [r7, #20]
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3718      	adds	r7, #24
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}

0800e524 <printfBin_init>:
 */
static PRINTFBINSTRUCT printfBinStruct;
//input: array pointer, and data number
//function: add header and tail, send into buffer
static void printfBin_init()
{
 800e524:	b580      	push	{r7, lr}
 800e526:	af00      	add	r7, sp, #0
	memset(&printfBinStruct,0,sizeof(PRINTFBINSTRUCT));
 800e528:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e52c:	2100      	movs	r1, #0
 800e52e:	480a      	ldr	r0, [pc, #40]	; (800e558 <printfBin_init+0x34>)
 800e530:	f003 f80b 	bl	801154a <memset>
	printfBinStruct.header[0]=0x5a;
 800e534:	4b08      	ldr	r3, [pc, #32]	; (800e558 <printfBin_init+0x34>)
 800e536:	225a      	movs	r2, #90	; 0x5a
 800e538:	701a      	strb	r2, [r3, #0]
	printfBinStruct.header[1]=0x5a;
 800e53a:	4b07      	ldr	r3, [pc, #28]	; (800e558 <printfBin_init+0x34>)
 800e53c:	225a      	movs	r2, #90	; 0x5a
 800e53e:	705a      	strb	r2, [r3, #1]
	printfBinStruct.header[2]=0xa5;
 800e540:	4b05      	ldr	r3, [pc, #20]	; (800e558 <printfBin_init+0x34>)
 800e542:	22a5      	movs	r2, #165	; 0xa5
 800e544:	709a      	strb	r2, [r3, #2]
	printfBinStruct.header[3]=0xa5;
 800e546:	4b04      	ldr	r3, [pc, #16]	; (800e558 <printfBin_init+0x34>)
 800e548:	22a5      	movs	r2, #165	; 0xa5
 800e54a:	70da      	strb	r2, [r3, #3]
	printfBinStruct.pData=printfBinStruct.data;
 800e54c:	4b02      	ldr	r3, [pc, #8]	; (800e558 <printfBin_init+0x34>)
 800e54e:	4a03      	ldr	r2, [pc, #12]	; (800e55c <printfBin_init+0x38>)
 800e550:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
}
 800e554:	bf00      	nop
 800e556:	bd80      	pop	{r7, pc}
 800e558:	20000adc 	.word	0x20000adc
 800e55c:	20000ae0 	.word	0x20000ae0

0800e560 <_ZN18PRESSURE_SENSORSPIC1Ev>:

static uint32_t DummyByte[] = { 0xFFFFFFFF};



PRESSURE_SENSORSPI::PRESSURE_SENSORSPI()
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
{
	rawData= 0;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	801a      	strh	r2, [r3, #0]
	rawSPIPressure = 0;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	805a      	strh	r2, [r3, #2]
	rawSPITemperature = 0;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2200      	movs	r2, #0
 800e578:	809a      	strh	r2, [r3, #4]
	Pressure = 0;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f04f 0200 	mov.w	r2, #0
 800e580:	609a      	str	r2, [r3, #8]
	Temperature = 0;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f04f 0200 	mov.w	r2, #0
 800e588:	60da      	str	r2, [r3, #12]
	PMax = 60 * 6895; //60*6895 Pa
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4a0e      	ldr	r2, [pc, #56]	; (800e5c8 <_ZN18PRESSURE_SENSORSPIC1Ev+0x68>)
 800e58e:	619a      	str	r2, [r3, #24]
	PMin = 0;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f04f 0200 	mov.w	r2, #0
 800e596:	615a      	str	r2, [r3, #20]
	uOutMin = 0x0666;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f240 6266 	movw	r2, #1638	; 0x666
 800e59e:	821a      	strh	r2, [r3, #16]
	uOutMax = 0x3999;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f643 1299 	movw	r2, #14745	; 0x3999
 800e5a6:	825a      	strh	r2, [r3, #18]
	pressure_spi = &hspi6;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	4a08      	ldr	r2, [pc, #32]	; (800e5cc <_ZN18PRESSURE_SENSORSPIC1Ev+0x6c>)
 800e5ac:	61da      	str	r2, [r3, #28]
	CS_Port =DO_13_GPIO_Port;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a07      	ldr	r2, [pc, #28]	; (800e5d0 <_ZN18PRESSURE_SENSORSPIC1Ev+0x70>)
 800e5b2:	621a      	str	r2, [r3, #32]
	CS_Pin = DO_13_Pin;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2210      	movs	r2, #16
 800e5b8:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr
 800e5c8:	48ca0080 	.word	0x48ca0080
 800e5cc:	2000a6c4 	.word	0x2000a6c4
 800e5d0:	40021000 	.word	0x40021000

0800e5d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e5d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e60c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800e5d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800e5da:	e003      	b.n	800e5e4 <LoopCopyDataInit>

0800e5dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800e5dc:	4b0c      	ldr	r3, [pc, #48]	; (800e610 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800e5de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800e5e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800e5e2:	3104      	adds	r1, #4

0800e5e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800e5e4:	480b      	ldr	r0, [pc, #44]	; (800e614 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800e5e6:	4b0c      	ldr	r3, [pc, #48]	; (800e618 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800e5e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800e5ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800e5ec:	d3f6      	bcc.n	800e5dc <CopyDataInit>
  ldr  r2, =_sbss
 800e5ee:	4a0b      	ldr	r2, [pc, #44]	; (800e61c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800e5f0:	e002      	b.n	800e5f8 <LoopFillZerobss>

0800e5f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800e5f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800e5f4:	f842 3b04 	str.w	r3, [r2], #4

0800e5f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800e5f8:	4b09      	ldr	r3, [pc, #36]	; (800e620 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800e5fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800e5fc:	d3f9      	bcc.n	800e5f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e5fe:	f7fb f987 	bl	8009910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e602:	f002 ff6b 	bl	80114dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e606:	f7fa fb11 	bl	8008c2c <main>
  bx  lr    
 800e60a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800e60c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800e610:	080161d0 	.word	0x080161d0
  ldr  r0, =_sdata
 800e614:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800e618:	2000036c 	.word	0x2000036c
  ldr  r2, =_sbss
 800e61c:	2000036c 	.word	0x2000036c
  ldr  r3, = _ebss
 800e620:	20011e38 	.word	0x20011e38

0800e624 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e624:	e7fe      	b.n	800e624 <ADC_IRQHandler>
	...

0800e628 <canConfig>:
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
/**************************************************************************/
void canConfig(){
 800e628:	b5b0      	push	{r4, r5, r7, lr}
 800e62a:	b08c      	sub	sp, #48	; 0x30
 800e62c:	af00      	add	r7, sp, #0
	canbus.CanHandle=hcan1;
 800e62e:	4a39      	ldr	r2, [pc, #228]	; (800e714 <canConfig+0xec>)
 800e630:	4b39      	ldr	r3, [pc, #228]	; (800e718 <canConfig+0xf0>)
 800e632:	4614      	mov	r4, r2
 800e634:	461d      	mov	r5, r3
 800e636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e63a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e63c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e63e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e642:	e884 0003 	stmia.w	r4, {r0, r1}
	CAN_FilterTypeDef  sFilterConfig;
	/*##-2- Configure the CAN Filter ###########################################*/
	/*For single CAN instance(14 dedicated filter banks)*/
	for(int i=0;i<14;i++){
 800e646:	2300      	movs	r3, #0
 800e648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64c:	2b0d      	cmp	r3, #13
 800e64e:	dc41      	bgt.n	800e6d4 <canConfig+0xac>
		sFilterConfig.FilterBank = i;
 800e650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e652:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 800e654:	2301      	movs	r3, #1
 800e656:	61fb      	str	r3, [r7, #28]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800e658:	2300      	movs	r3, #0
 800e65a:	623b      	str	r3, [r7, #32]
		sFilterConfig.FilterIdHigh = (uint16_t)((uint16_t)(4*i))<<5;
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	b29b      	uxth	r3, r3
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	b29b      	uxth	r3, r3
 800e664:	015b      	lsls	r3, r3, #5
 800e666:	607b      	str	r3, [r7, #4]
		sFilterConfig.FilterIdLow = (uint16_t)((uint16_t)(4*i+1))<<5;
 800e668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	b29b      	uxth	r3, r3
 800e670:	3301      	adds	r3, #1
 800e672:	b29b      	uxth	r3, r3
 800e674:	015b      	lsls	r3, r3, #5
 800e676:	60bb      	str	r3, [r7, #8]
		sFilterConfig.FilterMaskIdHigh = (uint16_t)((uint16_t)(4*i+2))<<5;
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	b29b      	uxth	r3, r3
 800e67c:	009b      	lsls	r3, r3, #2
 800e67e:	b29b      	uxth	r3, r3
 800e680:	3302      	adds	r3, #2
 800e682:	b29b      	uxth	r3, r3
 800e684:	015b      	lsls	r3, r3, #5
 800e686:	60fb      	str	r3, [r7, #12]
		sFilterConfig.FilterMaskIdLow = (uint16_t)((uint16_t)(4*i+3))<<5;
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	b29b      	uxth	r3, r3
 800e68c:	009b      	lsls	r3, r3, #2
 800e68e:	b29b      	uxth	r3, r3
 800e690:	3303      	adds	r3, #3
 800e692:	b29b      	uxth	r3, r3
 800e694:	015b      	lsls	r3, r3, #5
 800e696:	613b      	str	r3, [r7, #16]
		sFilterConfig.FilterFIFOAssignment = i%2;//CAN_RX_FIFO0=0; CAN_RX_FIFO1=1
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f003 0301 	and.w	r3, r3, #1
 800e6a0:	bfb8      	it	lt
 800e6a2:	425b      	neglt	r3, r3
 800e6a4:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterActivation = ENABLE;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	627b      	str	r3, [r7, #36]	; 0x24
		sFilterConfig.SlaveStartFilterBank = 14;
 800e6aa:	230e      	movs	r3, #14
 800e6ac:	62bb      	str	r3, [r7, #40]	; 0x28
//		sFilterConfig.FilterMaskIdLow = 0x0000;
//		sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
//		sFilterConfig.FilterActivation = ENABLE;
//		sFilterConfig.SlaveStartFilterBank = 14;

		if (HAL_CAN_ConfigFilter(&canbus.CanHandle, &sFilterConfig) != HAL_OK)
 800e6ae:	1d3b      	adds	r3, r7, #4
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	4818      	ldr	r0, [pc, #96]	; (800e714 <canConfig+0xec>)
 800e6b4:	f7f3 f852 	bl	800175c <HAL_CAN_ConfigFilter>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	bf14      	ite	ne
 800e6be:	2301      	movne	r3, #1
 800e6c0:	2300      	moveq	r3, #0
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d001      	beq.n	800e6cc <canConfig+0xa4>
		{
			/* Filter configuration Error */
			Error_Handler();
 800e6c8:	f7fa fbfe 	bl	8008ec8 <Error_Handler>
	for(int i=0;i<14;i++){
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6d2:	e7ba      	b.n	800e64a <canConfig+0x22>
		}
	}


	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&canbus.CanHandle) != HAL_OK)
 800e6d4:	480f      	ldr	r0, [pc, #60]	; (800e714 <canConfig+0xec>)
 800e6d6:	f7f3 f92d 	bl	8001934 <HAL_CAN_Start>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	bf14      	ite	ne
 800e6e0:	2301      	movne	r3, #1
 800e6e2:	2300      	moveq	r3, #0
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <canConfig+0xc6>
	{
		/* Start Error */
		Error_Handler();
 800e6ea:	f7fa fbed 	bl	8008ec8 <Error_Handler>
	}

	/*##-4- Activate CAN RX notification #######################################*/
	if (HAL_CAN_ActivateNotification(&canbus.CanHandle, CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 800e6ee:	2112      	movs	r1, #18
 800e6f0:	4808      	ldr	r0, [pc, #32]	; (800e714 <canConfig+0xec>)
 800e6f2:	f7f3 f963 	bl	80019bc <HAL_CAN_ActivateNotification>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	bf14      	ite	ne
 800e6fc:	2301      	movne	r3, #1
 800e6fe:	2300      	moveq	r3, #0
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d001      	beq.n	800e70a <canConfig+0xe2>
	{
		/* Notification Error */
		Error_Handler();
 800e706:	f7fa fbdf 	bl	8008ec8 <Error_Handler>
	}


}
 800e70a:	bf00      	nop
 800e70c:	3730      	adds	r7, #48	; 0x30
 800e70e:	46bd      	mov	sp, r7
 800e710:	bdb0      	pop	{r4, r5, r7, pc}
 800e712:	bf00      	nop
 800e714:	20000e04 	.word	0x20000e04
 800e718:	20002540 	.word	0x20002540

0800e71c <HAL_CAN_RxFifo0MsgPendingCallback>:



/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b082      	sub	sp, #8
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  /* Get RX message */

  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO0, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e724:	4b0a      	ldr	r3, [pc, #40]	; (800e750 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800e726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e728:	4a0a      	ldr	r2, [pc, #40]	; (800e754 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800e72a:	2100      	movs	r1, #0
 800e72c:	4808      	ldr	r0, [pc, #32]	; (800e750 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800e72e:	f000 f831 	bl	800e794 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	bf14      	ite	ne
 800e738:	2301      	movne	r3, #1
 800e73a:	2300      	moveq	r3, #0
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d001      	beq.n	800e746 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800e742:	f7fa fbc1 	bl	8008ec8 <Error_Handler>
  }
  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
  //printf("ID[%d]: %x %x %x %x %x %x %x %x\r\n", canbus.RxHeader.StdId, canbus.RxData[0], canbus.RxData[1], canbus.RxData[2], canbus.RxData[3], canbus.RxData[4], canbus.RxData[5], canbus.RxData[6], canbus.RxData[7]);
  //printf("FIFO0: ID[%d]\r\n", canbus.RxHeader.StdId, canbus.RxData);
}
 800e746:	bf00      	nop
 800e748:	3708      	adds	r7, #8
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
 800e74e:	bf00      	nop
 800e750:	20000e04 	.word	0x20000e04
 800e754:	20000e44 	.word	0x20000e44

0800e758 <HAL_CAN_RxFifo1MsgPendingCallback>:

/*Automatically called when can bus RxFiFo get message. Move the received message to corresponding buffer according to the RxHeader ID*/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b082      	sub	sp, #8
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  /* Get RX message */


  if (my_HAL_CAN_GetRxMessage(&canbus.CanHandle, CAN_RX_FIFO1, &canbus.RxHeader, canbus.RxData) != HAL_OK)
 800e760:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800e762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e764:	4a0a      	ldr	r2, [pc, #40]	; (800e790 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 800e766:	2101      	movs	r1, #1
 800e768:	4808      	ldr	r0, [pc, #32]	; (800e78c <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 800e76a:	f000 f813 	bl	800e794 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>
 800e76e:	4603      	mov	r3, r0
 800e770:	2b00      	cmp	r3, #0
 800e772:	bf14      	ite	ne
 800e774:	2301      	movne	r3, #1
 800e776:	2300      	moveq	r3, #0
 800e778:	b2db      	uxtb	r3, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d001      	beq.n	800e782 <HAL_CAN_RxFifo1MsgPendingCallback+0x2a>
  {
    /* Reception Error */
    Error_Handler();
 800e77e:	f7fa fba3 	bl	8008ec8 <Error_Handler>
  }
  //printf("FIFO1: ID[%d]\r\n", canbus.RxHeader.StdId);

  //printf("Get Can Rx %d\r\n",canbus.RxHeader.StdId);
}
 800e782:	bf00      	nop
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}
 800e78a:	bf00      	nop
 800e78c:	20000e04 	.word	0x20000e04
 800e790:	20000e44 	.word	0x20000e44

0800e794 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh>:

static HAL_StatusTypeDef my_HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800e794:	b5b0      	push	{r4, r5, r7, lr}
 800e796:	b088      	sub	sp, #32
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	607a      	str	r2, [r7, #4]
 800e7a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e7a8:	77fb      	strb	r3, [r7, #31]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800e7aa:	7ffb      	ldrb	r3, [r7, #31]
 800e7ac:	2b01      	cmp	r3, #1
 800e7ae:	d003      	beq.n	800e7b8 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x24>
 800e7b0:	7ffb      	ldrb	r3, [r7, #31]
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	f040 8170 	bne.w	800ea98 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x304>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d113      	bne.n	800e7e6 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f003 0303 	and.w	r3, r3, #3
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	bf0c      	ite	eq
 800e7cc:	2301      	moveq	r3, #1
 800e7ce:	2300      	movne	r3, #0
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d01b      	beq.n	800e80e <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e15f      	b.n	800eaa6 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x312>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	691b      	ldr	r3, [r3, #16]
 800e7ec:	f003 0303 	and.w	r3, r3, #3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	bf0c      	ite	eq
 800e7f4:	2301      	moveq	r3, #1
 800e7f6:	2300      	movne	r3, #0
 800e7f8:	b2db      	uxtb	r3, r3
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x7a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e802:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	e14b      	b.n	800eaa6 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x312>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	331b      	adds	r3, #27
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	4413      	add	r3, r2
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f003 0204 	and.w	r2, r3, #4
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10c      	bne.n	800e846 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xb2>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	331b      	adds	r3, #27
 800e834:	011b      	lsls	r3, r3, #4
 800e836:	4413      	add	r3, r2
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	0d5b      	lsrs	r3, r3, #21
 800e83c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	601a      	str	r2, [r3, #0]
 800e844:	e00b      	b.n	800e85e <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0xca>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	331b      	adds	r3, #27
 800e84e:	011b      	lsls	r3, r3, #4
 800e850:	4413      	add	r3, r2
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	08db      	lsrs	r3, r3, #3
 800e856:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	331b      	adds	r3, #27
 800e866:	011b      	lsls	r3, r3, #4
 800e868:	4413      	add	r3, r2
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f003 0202 	and.w	r2, r3, #2
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	331b      	adds	r3, #27
 800e87c:	011b      	lsls	r3, r3, #4
 800e87e:	4413      	add	r3, r2
 800e880:	3304      	adds	r3, #4
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f003 020f 	and.w	r2, r3, #15
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	331b      	adds	r3, #27
 800e894:	011b      	lsls	r3, r3, #4
 800e896:	4413      	add	r3, r2
 800e898:	3304      	adds	r3, #4
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	0a1b      	lsrs	r3, r3, #8
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681a      	ldr	r2, [r3, #0]
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	331b      	adds	r3, #27
 800e8ac:	011b      	lsls	r3, r3, #4
 800e8ae:	4413      	add	r3, r2
 800e8b0:	3304      	adds	r3, #4
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	0c1b      	lsrs	r3, r3, #16
 800e8b6:	b29a      	uxth	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	615a      	str	r2, [r3, #20]



    /**********************  added  ******************************************/
	int i = pHeader->StdId/6;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	4a7b      	ldr	r2, [pc, #492]	; (800eab0 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x31c>)
 800e8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8c6:	089b      	lsrs	r3, r3, #2
 800e8c8:	61bb      	str	r3, [r7, #24]
    int j = pHeader->StdId%6;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6819      	ldr	r1, [r3, #0]
 800e8ce:	4b78      	ldr	r3, [pc, #480]	; (800eab0 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x31c>)
 800e8d0:	fba3 2301 	umull	r2, r3, r3, r1
 800e8d4:	089a      	lsrs	r2, r3, #2
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	005b      	lsls	r3, r3, #1
 800e8da:	4413      	add	r3, r2
 800e8dc:	005b      	lsls	r3, r3, #1
 800e8de:	1aca      	subs	r2, r1, r3
 800e8e0:	617a      	str	r2, [r7, #20]
    softArm.actuatorOnline[j][j]=10;
 800e8e2:	4974      	ldr	r1, [pc, #464]	; (800eab4 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x320>)
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	4413      	add	r3, r2
 800e8ec:	005b      	lsls	r3, r3, #1
 800e8ee:	18ca      	adds	r2, r1, r3
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	f603 732a 	addw	r3, r3, #3882	; 0xf2a
 800e8f8:	220a      	movs	r2, #10
 800e8fa:	701a      	strb	r2, [r3, #0]
    aData=(uint8_t *)(&softArm.sensorDataBuffer[i][j]);
 800e8fc:	69ba      	ldr	r2, [r7, #24]
 800e8fe:	4613      	mov	r3, r2
 800e900:	005b      	lsls	r3, r3, #1
 800e902:	4413      	add	r3, r2
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	697a      	ldr	r2, [r7, #20]
 800e908:	4413      	add	r3, r2
 800e90a:	33b8      	adds	r3, #184	; 0xb8
 800e90c:	00db      	lsls	r3, r3, #3
 800e90e:	4a69      	ldr	r2, [pc, #420]	; (800eab4 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x320>)
 800e910:	4413      	add	r3, r2
 800e912:	3304      	adds	r3, #4
 800e914:	603b      	str	r3, [r7, #0]
    /****************************************************************/

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	68bb      	ldr	r3, [r7, #8]
 800e91c:	011b      	lsls	r3, r3, #4
 800e91e:	4413      	add	r3, r2
 800e920:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	b2da      	uxtb	r2, r3
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	011b      	lsls	r3, r3, #4
 800e934:	4413      	add	r3, r2
 800e936:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	0a1a      	lsrs	r2, r3, #8
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	3301      	adds	r3, #1
 800e942:	b2d2      	uxtb	r2, r2
 800e944:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	68bb      	ldr	r3, [r7, #8]
 800e94c:	011b      	lsls	r3, r3, #4
 800e94e:	4413      	add	r3, r2
 800e950:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	0c1a      	lsrs	r2, r3, #16
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	3302      	adds	r3, #2
 800e95c:	b2d2      	uxtb	r2, r2
 800e95e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	681a      	ldr	r2, [r3, #0]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	011b      	lsls	r3, r3, #4
 800e968:	4413      	add	r3, r2
 800e96a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	0e1a      	lsrs	r2, r3, #24
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	3303      	adds	r3, #3
 800e976:	b2d2      	uxtb	r2, r2
 800e978:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681a      	ldr	r2, [r3, #0]
 800e97e:	68bb      	ldr	r3, [r7, #8]
 800e980:	011b      	lsls	r3, r3, #4
 800e982:	4413      	add	r3, r2
 800e984:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	3304      	adds	r3, #4
 800e98e:	b2d2      	uxtb	r2, r2
 800e990:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	011b      	lsls	r3, r3, #4
 800e99a:	4413      	add	r3, r2
 800e99c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	0a1a      	lsrs	r2, r3, #8
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	3305      	adds	r3, #5
 800e9a8:	b2d2      	uxtb	r2, r2
 800e9aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	011b      	lsls	r3, r3, #4
 800e9b4:	4413      	add	r3, r2
 800e9b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	0c1a      	lsrs	r2, r3, #16
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	3306      	adds	r3, #6
 800e9c2:	b2d2      	uxtb	r2, r2
 800e9c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681a      	ldr	r2, [r3, #0]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	011b      	lsls	r3, r3, #4
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	0e1a      	lsrs	r2, r3, #24
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	3307      	adds	r3, #7
 800e9dc:	b2d2      	uxtb	r2, r2
 800e9de:	701a      	strb	r2, [r3, #0]


    /**********************  Added Docode the sensor Data to SPI buffer*******************************/

    decodeSensorData(&softArm.sensorDataBuffer[i][j],&(softArm.sensorData.data[i][j]),(int16_t)(softArm.armSegments[i].bellows[j]->pressureOffset/100),(int16_t)(softArm.armSegments[i].bellows[j]->positionOffset));
 800e9e0:	69ba      	ldr	r2, [r7, #24]
 800e9e2:	4613      	mov	r3, r2
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	4413      	add	r3, r2
 800e9e8:	005b      	lsls	r3, r3, #1
 800e9ea:	697a      	ldr	r2, [r7, #20]
 800e9ec:	4413      	add	r3, r2
 800e9ee:	33b8      	adds	r3, #184	; 0xb8
 800e9f0:	00db      	lsls	r3, r3, #3
 800e9f2:	4a30      	ldr	r2, [pc, #192]	; (800eab4 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x320>)
 800e9f4:	4413      	add	r3, r2
 800e9f6:	1d18      	adds	r0, r3, #4
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	0052      	lsls	r2, r2, #1
 800e9fe:	441a      	add	r2, r3
 800ea00:	0093      	lsls	r3, r2, #2
 800ea02:	461a      	mov	r2, r3
 800ea04:	69b9      	ldr	r1, [r7, #24]
 800ea06:	460b      	mov	r3, r1
 800ea08:	00db      	lsls	r3, r3, #3
 800ea0a:	440b      	add	r3, r1
 800ea0c:	00db      	lsls	r3, r3, #3
 800ea0e:	4413      	add	r3, r2
 800ea10:	f503 6320 	add.w	r3, r3, #2560	; 0xa00
 800ea14:	4a27      	ldr	r2, [pc, #156]	; (800eab4 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x320>)
 800ea16:	4413      	add	r3, r2
 800ea18:	1d9c      	adds	r4, r3, #6
 800ea1a:	4926      	ldr	r1, [pc, #152]	; (800eab4 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x320>)
 800ea1c:	69ba      	ldr	r2, [r7, #24]
 800ea1e:	4613      	mov	r3, r2
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	4413      	add	r3, r2
 800ea24:	00db      	lsls	r3, r3, #3
 800ea26:	4413      	add	r3, r2
 800ea28:	697a      	ldr	r2, [r7, #20]
 800ea2a:	4413      	add	r3, r2
 800ea2c:	3316      	adds	r3, #22
 800ea2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ea32:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 800ea36:	eddf 6a20 	vldr	s13, [pc, #128]	; 800eab8 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x324>
 800ea3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ea42:	ee17 3a90 	vmov	r3, s15
 800ea46:	b21d      	sxth	r5, r3
 800ea48:	491a      	ldr	r1, [pc, #104]	; (800eab4 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x320>)
 800ea4a:	69ba      	ldr	r2, [r7, #24]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	009b      	lsls	r3, r3, #2
 800ea50:	4413      	add	r3, r2
 800ea52:	00db      	lsls	r3, r3, #3
 800ea54:	4413      	add	r3, r2
 800ea56:	697a      	ldr	r2, [r7, #20]
 800ea58:	4413      	add	r3, r2
 800ea5a:	3316      	adds	r3, #22
 800ea5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ea60:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	; 0xb4
 800ea64:	462a      	mov	r2, r5
 800ea66:	4621      	mov	r1, r4
 800ea68:	f002 f9a2 	bl	8010db0 <decodeSensorData>
    /*******************************************************************/


    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d108      	bne.n	800ea84 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x2f0>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	68da      	ldr	r2, [r3, #12]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f042 0220 	orr.w	r2, r2, #32
 800ea80:	60da      	str	r2, [r3, #12]
 800ea82:	e007      	b.n	800ea94 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x300>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	691a      	ldr	r2, [r3, #16]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f042 0220 	orr.w	r2, r2, #32
 800ea92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    //printf("sensor[%d]: %hu\r\n", pHeader->StdId, softArm.sensorData[i][j].pressure);

    return HAL_OK;
 800ea94:	2300      	movs	r3, #0
 800ea96:	e006      	b.n	800eaa6 <_ZL23my_HAL_CAN_GetRxMessageP19__CAN_HandleTypeDefmP19CAN_RxHeaderTypeDefPh+0x312>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800eaa4:	2301      	movs	r3, #1
  }
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3720      	adds	r7, #32
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bdb0      	pop	{r4, r5, r7, pc}
 800eaae:	bf00      	nop
 800eab0:	aaaaaaab 	.word	0xaaaaaaab
 800eab4:	200013d4 	.word	0x200013d4
 800eab8:	42c80000 	.word	0x42c80000

0800eabc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 800eabc:	b480      	push	{r7}
 800eabe:	b083      	sub	sp, #12
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	4a04      	ldr	r2, [pc, #16]	; (800ead8 <_ZN3ros3MsgC1Ev+0x1c>)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	4618      	mov	r0, r3
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr
 800ead8:	08015e80 	.word	0x08015e80

0800eadc <_ZN8std_msgs6UInt16C1Ev>:
  {
    public:
      typedef uint16_t _data_type;
      _data_type data;

    UInt16():
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
      data(0)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff ffe8 	bl	800eabc <_ZN3ros3MsgC1Ev>
 800eaec:	4a05      	ldr	r2, [pc, #20]	; (800eb04 <_ZN8std_msgs6UInt16C1Ev+0x28>)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	601a      	str	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	809a      	strh	r2, [r3, #4]
    {
    }
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	4618      	mov	r0, r3
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	08015e68 	.word	0x08015e68

0800eb08 <_ZNK8std_msgs6UInt169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800eb08:	b480      	push	{r7}
 800eb0a:	b085      	sub	sp, #20
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	8899      	ldrh	r1, [r3, #4]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	683a      	ldr	r2, [r7, #0]
 800eb1e:	4413      	add	r3, r2
 800eb20:	b2ca      	uxtb	r2, r1
 800eb22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	889b      	ldrh	r3, [r3, #4]
 800eb28:	0a1b      	lsrs	r3, r3, #8
 800eb2a:	b299      	uxth	r1, r3
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	683a      	ldr	r2, [r7, #0]
 800eb32:	4413      	add	r3, r2
 800eb34:	b2ca      	uxtb	r2, r1
 800eb36:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	3302      	adds	r3, #2
 800eb3c:	60fb      	str	r3, [r7, #12]
      return offset;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
    }
 800eb40:	4618      	mov	r0, r3
 800eb42:	3714      	adds	r7, #20
 800eb44:	46bd      	mov	sp, r7
 800eb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4a:	4770      	bx	lr

0800eb4c <_ZN8std_msgs6UInt1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800eb4c:	b480      	push	{r7}
 800eb4e:	b085      	sub	sp, #20
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint16_t) (*(inbuffer + offset)));
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	683a      	ldr	r2, [r7, #0]
 800eb5e:	4413      	add	r3, r2
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	809a      	strh	r2, [r3, #4]
      this->data |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	889b      	ldrh	r3, [r3, #4]
 800eb6c:	b21a      	sxth	r2, r3
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	3301      	adds	r3, #1
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	440b      	add	r3, r1
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	021b      	lsls	r3, r3, #8
 800eb7a:	b21b      	sxth	r3, r3
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	b21b      	sxth	r3, r3
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	3302      	adds	r3, #2
 800eb8a:	60fb      	str	r3, [r7, #12]
     return offset;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
    }
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3714      	adds	r7, #20
 800eb92:	46bd      	mov	sp, r7
 800eb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb98:	4770      	bx	lr
	...

0800eb9c <_ZN8std_msgs6UInt167getTypeEv>:

    const char * getType(){ return "std_msgs/UInt16"; };
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	4b03      	ldr	r3, [pc, #12]	; (800ebb4 <_ZN8std_msgs6UInt167getTypeEv+0x18>)
 800eba6:	4618      	mov	r0, r3
 800eba8:	370c      	adds	r7, #12
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	08015aec 	.word	0x08015aec

0800ebb8 <_ZN8std_msgs6UInt166getMD5Ev>:
    const char * getMD5(){ return "1df79edf208b629fe6b81923a544552d"; };
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	4b03      	ldr	r3, [pc, #12]	; (800ebd0 <_ZN8std_msgs6UInt166getMD5Ev+0x18>)
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	370c      	adds	r7, #12
 800ebc6:	46bd      	mov	sp, r7
 800ebc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	08015afc 	.word	0x08015afc

0800ebd4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7ff ff6c 	bl	800eabc <_ZN3ros3MsgC1Ev>
 800ebe4:	4a06      	ldr	r2, [pc, #24]	; (800ec00 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	601a      	str	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	711a      	strb	r2, [r3, #4]
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a04      	ldr	r2, [pc, #16]	; (800ec04 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800ebf4:	609a      	str	r2, [r3, #8]
    {
    }
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3708      	adds	r7, #8
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	08015e50 	.word	0x08015e50
 800ec04:	08015b20 	.word	0x08015b20

0800ec08 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	683a      	ldr	r2, [r7, #0]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	7912      	ldrb	r2, [r2, #4]
 800ec20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	3301      	adds	r3, #1
 800ec26:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	689b      	ldr	r3, [r3, #8]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7f1 fb07 	bl	8000240 <strlen>
 800ec32:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	683a      	ldr	r2, [r7, #0]
 800ec38:	4413      	add	r3, r2
 800ec3a:	68b9      	ldr	r1, [r7, #8]
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f000 febd 	bl	800f9bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	3304      	adds	r3, #4
 800ec46:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	683a      	ldr	r2, [r7, #0]
 800ec4c:	18d0      	adds	r0, r2, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	689b      	ldr	r3, [r3, #8]
 800ec52:	68ba      	ldr	r2, [r7, #8]
 800ec54:	4619      	mov	r1, r3
 800ec56:	f002 fc6d 	bl	8011534 <memcpy>
      offset += length_msg;
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	68bb      	ldr	r3, [r7, #8]
 800ec5e:	4413      	add	r3, r2
 800ec60:	60fb      	str	r3, [r7, #12]
      return offset;
 800ec62:	68fb      	ldr	r3, [r7, #12]
    }
 800ec64:	4618      	mov	r0, r3
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	4413      	add	r3, r2
 800ec80:	781a      	ldrb	r2, [r3, #0]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	441a      	add	r2, r3
 800ec92:	f107 030c 	add.w	r3, r7, #12
 800ec96:	4611      	mov	r1, r2
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f000 fead 	bl	800f9f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800ec9e:	693b      	ldr	r3, [r7, #16]
 800eca0:	3304      	adds	r3, #4
 800eca2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	617b      	str	r3, [r7, #20]
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	4413      	add	r3, r2
 800ecae:	697a      	ldr	r2, [r7, #20]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d20c      	bcs.n	800ecce <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800ecb4:	683a      	ldr	r2, [r7, #0]
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	441a      	add	r2, r3
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	6839      	ldr	r1, [r7, #0]
 800ecc0:	440b      	add	r3, r1
 800ecc2:	7812      	ldrb	r2, [r2, #0]
 800ecc4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	617b      	str	r3, [r7, #20]
 800eccc:	e7ec      	b.n	800eca8 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800ecce:	693a      	ldr	r2, [r7, #16]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	3b01      	subs	r3, #1
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	4413      	add	r3, r2
 800ecda:	2200      	movs	r2, #0
 800ecdc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	3b01      	subs	r3, #1
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	441a      	add	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800ecea:	693a      	ldr	r2, [r7, #16]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	4413      	add	r3, r2
 800ecf0:	613b      	str	r3, [r7, #16]
     return offset;
 800ecf2:	693b      	ldr	r3, [r7, #16]
    }
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	4b03      	ldr	r3, [pc, #12]	; (800ed14 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800ed06:	4618      	mov	r0, r3
 800ed08:	370c      	adds	r7, #12
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
 800ed14:	08015b24 	.word	0x08015b24

0800ed18 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800ed18:	b480      	push	{r7}
 800ed1a:	b083      	sub	sp, #12
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	4b03      	ldr	r3, [pc, #12]	; (800ed30 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800ed22:	4618      	mov	r0, r3
 800ed24:	370c      	adds	r7, #12
 800ed26:	46bd      	mov	sp, r7
 800ed28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2c:	4770      	bx	lr
 800ed2e:	bf00      	nop
 800ed30:	08015b38 	.word	0x08015b38

0800ed34 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7ff febc 	bl	800eabc <_ZN3ros3MsgC1Ev>
 800ed44:	4a0c      	ldr	r2, [pc, #48]	; (800ed78 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	601a      	str	r2, [r3, #0]
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	605a      	str	r2, [r3, #4]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	60da      	str	r2, [r3, #12]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2200      	movs	r2, #0
 800ed5a:	611a      	str	r2, [r3, #16]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	619a      	str	r2, [r3, #24]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	61da      	str	r2, [r3, #28]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4618      	mov	r0, r3
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	08015e38 	.word	0x08015e38

0800ed7c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08a      	sub	sp, #40	; 0x28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800ed86:	2300      	movs	r3, #0
 800ed88:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6859      	ldr	r1, [r3, #4]
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	4413      	add	r3, r2
 800ed94:	b2ca      	uxtb	r2, r1
 800ed96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	0a19      	lsrs	r1, r3, #8
 800ed9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda0:	3301      	adds	r3, #1
 800eda2:	683a      	ldr	r2, [r7, #0]
 800eda4:	4413      	add	r3, r2
 800eda6:	b2ca      	uxtb	r2, r1
 800eda8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	0c19      	lsrs	r1, r3, #16
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	3302      	adds	r3, #2
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	4413      	add	r3, r2
 800edb8:	b2ca      	uxtb	r2, r1
 800edba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	0e19      	lsrs	r1, r3, #24
 800edc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc4:	3303      	adds	r3, #3
 800edc6:	683a      	ldr	r2, [r7, #0]
 800edc8:	4413      	add	r3, r2
 800edca:	b2ca      	uxtb	r2, r1
 800edcc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800edce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd0:	3304      	adds	r3, #4
 800edd2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800edd4:	2300      	movs	r3, #0
 800edd6:	623b      	str	r3, [r7, #32]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	6a3a      	ldr	r2, [r7, #32]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d22b      	bcs.n	800ee3a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	68da      	ldr	r2, [r3, #12]
 800ede6:	6a3b      	ldr	r3, [r7, #32]
 800ede8:	009b      	lsls	r3, r3, #2
 800edea:	4413      	add	r3, r2
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800edf0:	6939      	ldr	r1, [r7, #16]
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	683a      	ldr	r2, [r7, #0]
 800edf6:	4413      	add	r3, r2
 800edf8:	b2ca      	uxtb	r2, r1
 800edfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	0a19      	lsrs	r1, r3, #8
 800ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee02:	3301      	adds	r3, #1
 800ee04:	683a      	ldr	r2, [r7, #0]
 800ee06:	4413      	add	r3, r2
 800ee08:	b2ca      	uxtb	r2, r1
 800ee0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	0c19      	lsrs	r1, r3, #16
 800ee10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee12:	3302      	adds	r3, #2
 800ee14:	683a      	ldr	r2, [r7, #0]
 800ee16:	4413      	add	r3, r2
 800ee18:	b2ca      	uxtb	r2, r1
 800ee1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	0e19      	lsrs	r1, r3, #24
 800ee20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee22:	3303      	adds	r3, #3
 800ee24:	683a      	ldr	r2, [r7, #0]
 800ee26:	4413      	add	r3, r2
 800ee28:	b2ca      	uxtb	r2, r1
 800ee2a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2e:	3304      	adds	r3, #4
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	3301      	adds	r3, #1
 800ee36:	623b      	str	r3, [r7, #32]
 800ee38:	e7ce      	b.n	800edd8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6919      	ldr	r1, [r3, #16]
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	683a      	ldr	r2, [r7, #0]
 800ee42:	4413      	add	r3, r2
 800ee44:	b2ca      	uxtb	r2, r1
 800ee46:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	691b      	ldr	r3, [r3, #16]
 800ee4c:	0a19      	lsrs	r1, r3, #8
 800ee4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee50:	3301      	adds	r3, #1
 800ee52:	683a      	ldr	r2, [r7, #0]
 800ee54:	4413      	add	r3, r2
 800ee56:	b2ca      	uxtb	r2, r1
 800ee58:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	0c19      	lsrs	r1, r3, #16
 800ee60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee62:	3302      	adds	r3, #2
 800ee64:	683a      	ldr	r2, [r7, #0]
 800ee66:	4413      	add	r3, r2
 800ee68:	b2ca      	uxtb	r2, r1
 800ee6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	0e19      	lsrs	r1, r3, #24
 800ee72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee74:	3303      	adds	r3, #3
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	4413      	add	r3, r2
 800ee7a:	b2ca      	uxtb	r2, r1
 800ee7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800ee7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee80:	3304      	adds	r3, #4
 800ee82:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800ee84:	2300      	movs	r3, #0
 800ee86:	61fb      	str	r3, [r7, #28]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	691b      	ldr	r3, [r3, #16]
 800ee8c:	69fa      	ldr	r2, [r7, #28]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d22b      	bcs.n	800eeea <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	699a      	ldr	r2, [r3, #24]
 800ee96:	69fb      	ldr	r3, [r7, #28]
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800eea0:	68f9      	ldr	r1, [r7, #12]
 800eea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea4:	683a      	ldr	r2, [r7, #0]
 800eea6:	4413      	add	r3, r2
 800eea8:	b2ca      	uxtb	r2, r1
 800eeaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	0a19      	lsrs	r1, r3, #8
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	683a      	ldr	r2, [r7, #0]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	b2ca      	uxtb	r2, r1
 800eeba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	0c19      	lsrs	r1, r3, #16
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	3302      	adds	r3, #2
 800eec4:	683a      	ldr	r2, [r7, #0]
 800eec6:	4413      	add	r3, r2
 800eec8:	b2ca      	uxtb	r2, r1
 800eeca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	0e19      	lsrs	r1, r3, #24
 800eed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed2:	3303      	adds	r3, #3
 800eed4:	683a      	ldr	r2, [r7, #0]
 800eed6:	4413      	add	r3, r2
 800eed8:	b2ca      	uxtb	r2, r1
 800eeda:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800eedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eede:	3304      	adds	r3, #4
 800eee0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	3301      	adds	r3, #1
 800eee6:	61fb      	str	r3, [r7, #28]
 800eee8:	e7ce      	b.n	800ee88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	69d9      	ldr	r1, [r3, #28]
 800eeee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	4413      	add	r3, r2
 800eef4:	b2ca      	uxtb	r2, r1
 800eef6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	69db      	ldr	r3, [r3, #28]
 800eefc:	0a19      	lsrs	r1, r3, #8
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	3301      	adds	r3, #1
 800ef02:	683a      	ldr	r2, [r7, #0]
 800ef04:	4413      	add	r3, r2
 800ef06:	b2ca      	uxtb	r2, r1
 800ef08:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	69db      	ldr	r3, [r3, #28]
 800ef0e:	0c19      	lsrs	r1, r3, #16
 800ef10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef12:	3302      	adds	r3, #2
 800ef14:	683a      	ldr	r2, [r7, #0]
 800ef16:	4413      	add	r3, r2
 800ef18:	b2ca      	uxtb	r2, r1
 800ef1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	69db      	ldr	r3, [r3, #28]
 800ef20:	0e19      	lsrs	r1, r3, #24
 800ef22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef24:	3303      	adds	r3, #3
 800ef26:	683a      	ldr	r2, [r7, #0]
 800ef28:	4413      	add	r3, r2
 800ef2a:	b2ca      	uxtb	r2, r1
 800ef2c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800ef2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef30:	3304      	adds	r3, #4
 800ef32:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800ef34:	2300      	movs	r3, #0
 800ef36:	61bb      	str	r3, [r7, #24]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	69db      	ldr	r3, [r3, #28]
 800ef3c:	69ba      	ldr	r2, [r7, #24]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d228      	bcs.n	800ef94 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef46:	69bb      	ldr	r3, [r7, #24]
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4413      	add	r3, r2
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7f1 f976 	bl	8000240 <strlen>
 800ef54:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	683a      	ldr	r2, [r7, #0]
 800ef5a:	4413      	add	r3, r2
 800ef5c:	6979      	ldr	r1, [r7, #20]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f000 fd2c 	bl	800f9bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800ef64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef66:	3304      	adds	r3, #4
 800ef68:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	683a      	ldr	r2, [r7, #0]
 800ef6e:	18d0      	adds	r0, r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	4413      	add	r3, r2
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	697a      	ldr	r2, [r7, #20]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	f002 fad8 	bl	8011534 <memcpy>
      offset += length_stringsi;
 800ef84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	4413      	add	r3, r2
 800ef8a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	61bb      	str	r3, [r7, #24]
 800ef92:	e7d1      	b.n	800ef38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800ef94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800ef96:	4618      	mov	r0, r3
 800ef98:	3728      	adds	r7, #40	; 0x28
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b08e      	sub	sp, #56	; 0x38
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800efa8:	2300      	movs	r3, #0
 800efaa:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800efac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efae:	683a      	ldr	r2, [r7, #0]
 800efb0:	4413      	add	r3, r2
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800efb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb8:	3301      	adds	r3, #1
 800efba:	683a      	ldr	r2, [r7, #0]
 800efbc:	4413      	add	r3, r2
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	021b      	lsls	r3, r3, #8
 800efc2:	6a3a      	ldr	r2, [r7, #32]
 800efc4:	4313      	orrs	r3, r2
 800efc6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800efc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efca:	3302      	adds	r3, #2
 800efcc:	683a      	ldr	r2, [r7, #0]
 800efce:	4413      	add	r3, r2
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	041b      	lsls	r3, r3, #16
 800efd4:	6a3a      	ldr	r2, [r7, #32]
 800efd6:	4313      	orrs	r3, r2
 800efd8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800efda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efdc:	3303      	adds	r3, #3
 800efde:	683a      	ldr	r2, [r7, #0]
 800efe0:	4413      	add	r3, r2
 800efe2:	781b      	ldrb	r3, [r3, #0]
 800efe4:	061b      	lsls	r3, r3, #24
 800efe6:	6a3a      	ldr	r2, [r7, #32]
 800efe8:	4313      	orrs	r3, r2
 800efea:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800efec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efee:	3304      	adds	r3, #4
 800eff0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	685b      	ldr	r3, [r3, #4]
 800eff6:	6a3a      	ldr	r2, [r7, #32]
 800eff8:	429a      	cmp	r2, r3
 800effa:	d90a      	bls.n	800f012 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	6a3b      	ldr	r3, [r7, #32]
 800f002:	009b      	lsls	r3, r3, #2
 800f004:	4619      	mov	r1, r3
 800f006:	4610      	mov	r0, r2
 800f008:	f003 f9ee 	bl	80123e8 <realloc>
 800f00c:	4602      	mov	r2, r0
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6a3a      	ldr	r2, [r7, #32]
 800f016:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800f018:	2300      	movs	r3, #0
 800f01a:	633b      	str	r3, [r7, #48]	; 0x30
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f022:	429a      	cmp	r2, r3
 800f024:	d236      	bcs.n	800f094 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f02e:	6839      	ldr	r1, [r7, #0]
 800f030:	440a      	add	r2, r1
 800f032:	7812      	ldrb	r2, [r2, #0]
 800f034:	4313      	orrs	r3, r2
 800f036:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f038:	697a      	ldr	r2, [r7, #20]
 800f03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f03c:	3301      	adds	r3, #1
 800f03e:	6839      	ldr	r1, [r7, #0]
 800f040:	440b      	add	r3, r1
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	021b      	lsls	r3, r3, #8
 800f046:	4313      	orrs	r3, r2
 800f048:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f04a:	697a      	ldr	r2, [r7, #20]
 800f04c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04e:	3302      	adds	r3, #2
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	440b      	add	r3, r1
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	041b      	lsls	r3, r3, #16
 800f058:	4313      	orrs	r3, r2
 800f05a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f05c:	697a      	ldr	r2, [r7, #20]
 800f05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f060:	3303      	adds	r3, #3
 800f062:	6839      	ldr	r1, [r7, #0]
 800f064:	440b      	add	r3, r1
 800f066:	781b      	ldrb	r3, [r3, #0]
 800f068:	061b      	lsls	r3, r3, #24
 800f06a:	4313      	orrs	r3, r2
 800f06c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800f06e:	697a      	ldr	r2, [r7, #20]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800f074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f076:	3304      	adds	r3, #4
 800f078:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68da      	ldr	r2, [r3, #12]
 800f07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	4413      	add	r3, r2
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	3208      	adds	r2, #8
 800f088:	6812      	ldr	r2, [r2, #0]
 800f08a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800f08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08e:	3301      	adds	r3, #1
 800f090:	633b      	str	r3, [r7, #48]	; 0x30
 800f092:	e7c3      	b.n	800f01c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800f094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	4413      	add	r3, r2
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800f09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0a0:	3301      	adds	r3, #1
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	021b      	lsls	r3, r3, #8
 800f0aa:	69fa      	ldr	r2, [r7, #28]
 800f0ac:	4313      	orrs	r3, r2
 800f0ae:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800f0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0b2:	3302      	adds	r3, #2
 800f0b4:	683a      	ldr	r2, [r7, #0]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	041b      	lsls	r3, r3, #16
 800f0bc:	69fa      	ldr	r2, [r7, #28]
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800f0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0c4:	3303      	adds	r3, #3
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	061b      	lsls	r3, r3, #24
 800f0ce:	69fa      	ldr	r2, [r7, #28]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800f0d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0d6:	3304      	adds	r3, #4
 800f0d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	691b      	ldr	r3, [r3, #16]
 800f0de:	69fa      	ldr	r2, [r7, #28]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d90a      	bls.n	800f0fa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	699a      	ldr	r2, [r3, #24]
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	009b      	lsls	r3, r3, #2
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	f003 f97a 	bl	80123e8 <realloc>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	69fa      	ldr	r2, [r7, #28]
 800f0fe:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800f100:	2300      	movs	r3, #0
 800f102:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d236      	bcs.n	800f17c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f112:	693b      	ldr	r3, [r7, #16]
 800f114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f116:	6839      	ldr	r1, [r7, #0]
 800f118:	440a      	add	r2, r1
 800f11a:	7812      	ldrb	r2, [r2, #0]
 800f11c:	4313      	orrs	r3, r2
 800f11e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f120:	693a      	ldr	r2, [r7, #16]
 800f122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f124:	3301      	adds	r3, #1
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	440b      	add	r3, r1
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	021b      	lsls	r3, r3, #8
 800f12e:	4313      	orrs	r3, r2
 800f130:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f132:	693a      	ldr	r2, [r7, #16]
 800f134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f136:	3302      	adds	r3, #2
 800f138:	6839      	ldr	r1, [r7, #0]
 800f13a:	440b      	add	r3, r1
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	041b      	lsls	r3, r3, #16
 800f140:	4313      	orrs	r3, r2
 800f142:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f148:	3303      	adds	r3, #3
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	440b      	add	r3, r1
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	061b      	lsls	r3, r3, #24
 800f152:	4313      	orrs	r3, r2
 800f154:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800f156:	693a      	ldr	r2, [r7, #16]
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800f15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15e:	3304      	adds	r3, #4
 800f160:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	699a      	ldr	r2, [r3, #24]
 800f166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f168:	009b      	lsls	r3, r3, #2
 800f16a:	4413      	add	r3, r2
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	3214      	adds	r2, #20
 800f170:	6812      	ldr	r2, [r2, #0]
 800f172:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	3301      	adds	r3, #1
 800f178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f17a:	e7c3      	b.n	800f104 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800f17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f17e:	683a      	ldr	r2, [r7, #0]
 800f180:	4413      	add	r3, r2
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800f186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f188:	3301      	adds	r3, #1
 800f18a:	683a      	ldr	r2, [r7, #0]
 800f18c:	4413      	add	r3, r2
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	021b      	lsls	r3, r3, #8
 800f192:	69ba      	ldr	r2, [r7, #24]
 800f194:	4313      	orrs	r3, r2
 800f196:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800f198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f19a:	3302      	adds	r3, #2
 800f19c:	683a      	ldr	r2, [r7, #0]
 800f19e:	4413      	add	r3, r2
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	041b      	lsls	r3, r3, #16
 800f1a4:	69ba      	ldr	r2, [r7, #24]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800f1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ac:	3303      	adds	r3, #3
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	061b      	lsls	r3, r3, #24
 800f1b6:	69ba      	ldr	r2, [r7, #24]
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800f1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1be:	3304      	adds	r3, #4
 800f1c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	69db      	ldr	r3, [r3, #28]
 800f1c6:	69ba      	ldr	r2, [r7, #24]
 800f1c8:	429a      	cmp	r2, r3
 800f1ca:	d90a      	bls.n	800f1e2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	009b      	lsls	r3, r3, #2
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	4610      	mov	r0, r2
 800f1d8:	f003 f906 	bl	80123e8 <realloc>
 800f1dc:	4602      	mov	r2, r0
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	69ba      	ldr	r2, [r7, #24]
 800f1e6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	69db      	ldr	r3, [r3, #28]
 800f1f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d23f      	bcs.n	800f276 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800f1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	441a      	add	r2, r3
 800f1fc:	f107 030c 	add.w	r3, r7, #12
 800f200:	4611      	mov	r1, r2
 800f202:	4618      	mov	r0, r3
 800f204:	f000 fbf8 	bl	800f9f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800f208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f20a:	3304      	adds	r3, #4
 800f20c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f210:	627b      	str	r3, [r7, #36]	; 0x24
 800f212:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	4413      	add	r3, r2
 800f218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d20c      	bcs.n	800f238 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800f21e:	683a      	ldr	r2, [r7, #0]
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f222:	441a      	add	r2, r3
 800f224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f226:	3b01      	subs	r3, #1
 800f228:	6839      	ldr	r1, [r7, #0]
 800f22a:	440b      	add	r3, r1
 800f22c:	7812      	ldrb	r2, [r2, #0]
 800f22e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800f230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f232:	3301      	adds	r3, #1
 800f234:	627b      	str	r3, [r7, #36]	; 0x24
 800f236:	e7ec      	b.n	800f212 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800f238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	4413      	add	r3, r2
 800f23e:	3b01      	subs	r3, #1
 800f240:	683a      	ldr	r2, [r7, #0]
 800f242:	4413      	add	r3, r2
 800f244:	2200      	movs	r2, #0
 800f246:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800f248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f24a:	3b01      	subs	r3, #1
 800f24c:	683a      	ldr	r2, [r7, #0]
 800f24e:	441a      	add	r2, r3
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800f254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	4413      	add	r3, r2
 800f25a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	009b      	lsls	r3, r3, #2
 800f264:	4413      	add	r3, r2
 800f266:	687a      	ldr	r2, [r7, #4]
 800f268:	3220      	adds	r2, #32
 800f26a:	6812      	ldr	r2, [r2, #0]
 800f26c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800f26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f270:	3301      	adds	r3, #1
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
 800f274:	e7ba      	b.n	800f1ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800f276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800f278:	4618      	mov	r0, r3
 800f27a:	3738      	adds	r7, #56	; 0x38
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}

0800f280 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 800f280:	b480      	push	{r7}
 800f282:	b083      	sub	sp, #12
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	4b03      	ldr	r3, [pc, #12]	; (800f298 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800f28a:	4618      	mov	r0, r3
 800f28c:	370c      	adds	r7, #12
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	08015d8c 	.word	0x08015d8c

0800f29c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	4b03      	ldr	r3, [pc, #12]	; (800f2b4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	370c      	adds	r7, #12
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	08015b5c 	.word	0x08015b5c

0800f2b8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	f7ff fbfa 	bl	800eabc <_ZN3ros3MsgC1Ev>
 800f2c8:	4a0b      	ldr	r2, [pc, #44]	; (800f2f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	601a      	str	r2, [r3, #0]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	809a      	strh	r2, [r3, #4]
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a09      	ldr	r2, [pc, #36]	; (800f2fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800f2d8:	609a      	str	r2, [r3, #8]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	4a07      	ldr	r2, [pc, #28]	; (800f2fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800f2de:	60da      	str	r2, [r3, #12]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	4a06      	ldr	r2, [pc, #24]	; (800f2fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800f2e4:	611a      	str	r2, [r3, #16]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	615a      	str	r2, [r3, #20]
    {
    }
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3708      	adds	r7, #8
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
 800f2f6:	bf00      	nop
 800f2f8:	08015e20 	.word	0x08015e20
 800f2fc:	08015b20 	.word	0x08015b20

0800f300 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800f300:	b580      	push	{r7, lr}
 800f302:	b088      	sub	sp, #32
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
 800f308:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800f30a:	2300      	movs	r3, #0
 800f30c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	8899      	ldrh	r1, [r3, #4]
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	683a      	ldr	r2, [r7, #0]
 800f316:	4413      	add	r3, r2
 800f318:	b2ca      	uxtb	r2, r1
 800f31a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	889b      	ldrh	r3, [r3, #4]
 800f320:	0a1b      	lsrs	r3, r3, #8
 800f322:	b299      	uxth	r1, r3
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	3301      	adds	r3, #1
 800f328:	683a      	ldr	r2, [r7, #0]
 800f32a:	4413      	add	r3, r2
 800f32c:	b2ca      	uxtb	r2, r1
 800f32e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	3302      	adds	r3, #2
 800f334:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f7f0 ff80 	bl	8000240 <strlen>
 800f340:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800f342:	69fb      	ldr	r3, [r7, #28]
 800f344:	683a      	ldr	r2, [r7, #0]
 800f346:	4413      	add	r3, r2
 800f348:	69b9      	ldr	r1, [r7, #24]
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 fb36 	bl	800f9bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800f350:	69fb      	ldr	r3, [r7, #28]
 800f352:	3304      	adds	r3, #4
 800f354:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	18d0      	adds	r0, r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	689b      	ldr	r3, [r3, #8]
 800f360:	69ba      	ldr	r2, [r7, #24]
 800f362:	4619      	mov	r1, r3
 800f364:	f002 f8e6 	bl	8011534 <memcpy>
      offset += length_topic_name;
 800f368:	69fa      	ldr	r2, [r7, #28]
 800f36a:	69bb      	ldr	r3, [r7, #24]
 800f36c:	4413      	add	r3, r2
 800f36e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	4618      	mov	r0, r3
 800f376:	f7f0 ff63 	bl	8000240 <strlen>
 800f37a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	683a      	ldr	r2, [r7, #0]
 800f380:	4413      	add	r3, r2
 800f382:	6979      	ldr	r1, [r7, #20]
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fb19 	bl	800f9bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	3304      	adds	r3, #4
 800f38e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	18d0      	adds	r0, r2, r3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	697a      	ldr	r2, [r7, #20]
 800f39c:	4619      	mov	r1, r3
 800f39e:	f002 f8c9 	bl	8011534 <memcpy>
      offset += length_message_type;
 800f3a2:	69fa      	ldr	r2, [r7, #28]
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	4413      	add	r3, r2
 800f3a8:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	691b      	ldr	r3, [r3, #16]
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7f0 ff46 	bl	8000240 <strlen>
 800f3b4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800f3b6:	69fb      	ldr	r3, [r7, #28]
 800f3b8:	683a      	ldr	r2, [r7, #0]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	6939      	ldr	r1, [r7, #16]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 fafc 	bl	800f9bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	3304      	adds	r3, #4
 800f3c8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	683a      	ldr	r2, [r7, #0]
 800f3ce:	18d0      	adds	r0, r2, r3
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	691b      	ldr	r3, [r3, #16]
 800f3d4:	693a      	ldr	r2, [r7, #16]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	f002 f8ac 	bl	8011534 <memcpy>
      offset += length_md5sum;
 800f3dc:	69fa      	ldr	r2, [r7, #28]
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	695b      	ldr	r3, [r3, #20]
 800f3e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800f3ea:	68f9      	ldr	r1, [r7, #12]
 800f3ec:	69fb      	ldr	r3, [r7, #28]
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	4413      	add	r3, r2
 800f3f2:	b2ca      	uxtb	r2, r1
 800f3f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	0a19      	lsrs	r1, r3, #8
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	3301      	adds	r3, #1
 800f3fe:	683a      	ldr	r2, [r7, #0]
 800f400:	4413      	add	r3, r2
 800f402:	b2ca      	uxtb	r2, r1
 800f404:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	0c19      	lsrs	r1, r3, #16
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	3302      	adds	r3, #2
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	4413      	add	r3, r2
 800f412:	b2ca      	uxtb	r2, r1
 800f414:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	0e19      	lsrs	r1, r3, #24
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	3303      	adds	r3, #3
 800f41e:	683a      	ldr	r2, [r7, #0]
 800f420:	4413      	add	r3, r2
 800f422:	b2ca      	uxtb	r2, r1
 800f424:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	3304      	adds	r3, #4
 800f42a:	61fb      	str	r3, [r7, #28]
      return offset;
 800f42c:	69fb      	ldr	r3, [r7, #28]
    }
 800f42e:	4618      	mov	r0, r3
 800f430:	3720      	adds	r7, #32
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800f436:	b580      	push	{r7, lr}
 800f438:	b08a      	sub	sp, #40	; 0x28
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
 800f43e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800f440:	2300      	movs	r3, #0
 800f442:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	683a      	ldr	r2, [r7, #0]
 800f448:	4413      	add	r3, r2
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	889b      	ldrh	r3, [r3, #4]
 800f456:	b21a      	sxth	r2, r3
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	3301      	adds	r3, #1
 800f45c:	6839      	ldr	r1, [r7, #0]
 800f45e:	440b      	add	r3, r1
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	021b      	lsls	r3, r3, #8
 800f464:	b21b      	sxth	r3, r3
 800f466:	4313      	orrs	r3, r2
 800f468:	b21b      	sxth	r3, r3
 800f46a:	b29a      	uxth	r2, r3
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800f470:	69bb      	ldr	r3, [r7, #24]
 800f472:	3302      	adds	r3, #2
 800f474:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	683a      	ldr	r2, [r7, #0]
 800f47a:	441a      	add	r2, r3
 800f47c:	f107 0314 	add.w	r3, r7, #20
 800f480:	4611      	mov	r1, r2
 800f482:	4618      	mov	r0, r3
 800f484:	f000 fab8 	bl	800f9f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800f488:	69bb      	ldr	r3, [r7, #24]
 800f48a:	3304      	adds	r3, #4
 800f48c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	627b      	str	r3, [r7, #36]	; 0x24
 800f492:	69ba      	ldr	r2, [r7, #24]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	4413      	add	r3, r2
 800f498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f49a:	429a      	cmp	r2, r3
 800f49c:	d20c      	bcs.n	800f4b8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800f49e:	683a      	ldr	r2, [r7, #0]
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	441a      	add	r2, r3
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	3b01      	subs	r3, #1
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	440b      	add	r3, r1
 800f4ac:	7812      	ldrb	r2, [r2, #0]
 800f4ae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800f4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b2:	3301      	adds	r3, #1
 800f4b4:	627b      	str	r3, [r7, #36]	; 0x24
 800f4b6:	e7ec      	b.n	800f492 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800f4b8:	69ba      	ldr	r2, [r7, #24]
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	4413      	add	r3, r2
 800f4be:	3b01      	subs	r3, #1
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	4413      	add	r3, r2
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	683a      	ldr	r2, [r7, #0]
 800f4ce:	441a      	add	r2, r3
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800f4d4:	69ba      	ldr	r2, [r7, #24]
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	4413      	add	r3, r2
 800f4da:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800f4dc:	69bb      	ldr	r3, [r7, #24]
 800f4de:	683a      	ldr	r2, [r7, #0]
 800f4e0:	441a      	add	r2, r3
 800f4e2:	f107 0310 	add.w	r3, r7, #16
 800f4e6:	4611      	mov	r1, r2
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f000 fa85 	bl	800f9f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800f4ee:	69bb      	ldr	r3, [r7, #24]
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	623b      	str	r3, [r7, #32]
 800f4f8:	69ba      	ldr	r2, [r7, #24]
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	4413      	add	r3, r2
 800f4fe:	6a3a      	ldr	r2, [r7, #32]
 800f500:	429a      	cmp	r2, r3
 800f502:	d20c      	bcs.n	800f51e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800f504:	683a      	ldr	r2, [r7, #0]
 800f506:	6a3b      	ldr	r3, [r7, #32]
 800f508:	441a      	add	r2, r3
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	6839      	ldr	r1, [r7, #0]
 800f510:	440b      	add	r3, r1
 800f512:	7812      	ldrb	r2, [r2, #0]
 800f514:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	3301      	adds	r3, #1
 800f51a:	623b      	str	r3, [r7, #32]
 800f51c:	e7ec      	b.n	800f4f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800f51e:	69ba      	ldr	r2, [r7, #24]
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	4413      	add	r3, r2
 800f524:	3b01      	subs	r3, #1
 800f526:	683a      	ldr	r2, [r7, #0]
 800f528:	4413      	add	r3, r2
 800f52a:	2200      	movs	r2, #0
 800f52c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	3b01      	subs	r3, #1
 800f532:	683a      	ldr	r2, [r7, #0]
 800f534:	441a      	add	r2, r3
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800f53a:	69ba      	ldr	r2, [r7, #24]
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	4413      	add	r3, r2
 800f540:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800f542:	69bb      	ldr	r3, [r7, #24]
 800f544:	683a      	ldr	r2, [r7, #0]
 800f546:	441a      	add	r2, r3
 800f548:	f107 030c 	add.w	r3, r7, #12
 800f54c:	4611      	mov	r1, r2
 800f54e:	4618      	mov	r0, r3
 800f550:	f000 fa52 	bl	800f9f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800f554:	69bb      	ldr	r3, [r7, #24]
 800f556:	3304      	adds	r3, #4
 800f558:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f55a:	69bb      	ldr	r3, [r7, #24]
 800f55c:	61fb      	str	r3, [r7, #28]
 800f55e:	69ba      	ldr	r2, [r7, #24]
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	4413      	add	r3, r2
 800f564:	69fa      	ldr	r2, [r7, #28]
 800f566:	429a      	cmp	r2, r3
 800f568:	d20c      	bcs.n	800f584 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 800f56a:	683a      	ldr	r2, [r7, #0]
 800f56c:	69fb      	ldr	r3, [r7, #28]
 800f56e:	441a      	add	r2, r3
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	3b01      	subs	r3, #1
 800f574:	6839      	ldr	r1, [r7, #0]
 800f576:	440b      	add	r3, r1
 800f578:	7812      	ldrb	r2, [r2, #0]
 800f57a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	3301      	adds	r3, #1
 800f580:	61fb      	str	r3, [r7, #28]
 800f582:	e7ec      	b.n	800f55e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800f584:	69ba      	ldr	r2, [r7, #24]
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	4413      	add	r3, r2
 800f58a:	3b01      	subs	r3, #1
 800f58c:	683a      	ldr	r2, [r7, #0]
 800f58e:	4413      	add	r3, r2
 800f590:	2200      	movs	r2, #0
 800f592:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	3b01      	subs	r3, #1
 800f598:	683a      	ldr	r2, [r7, #0]
 800f59a:	441a      	add	r2, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800f5a0:	69ba      	ldr	r2, [r7, #24]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	4413      	add	r3, r2
 800f5a6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	69ba      	ldr	r2, [r7, #24]
 800f5b0:	6839      	ldr	r1, [r7, #0]
 800f5b2:	440a      	add	r2, r1
 800f5b4:	7812      	ldrb	r2, [r2, #0]
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f5ba:	68ba      	ldr	r2, [r7, #8]
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	440b      	add	r3, r1
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	021b      	lsls	r3, r3, #8
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	69bb      	ldr	r3, [r7, #24]
 800f5d0:	3302      	adds	r3, #2
 800f5d2:	6839      	ldr	r1, [r7, #0]
 800f5d4:	440b      	add	r3, r1
 800f5d6:	781b      	ldrb	r3, [r3, #0]
 800f5d8:	041b      	lsls	r3, r3, #16
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f5de:	68ba      	ldr	r2, [r7, #8]
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	3303      	adds	r3, #3
 800f5e4:	6839      	ldr	r1, [r7, #0]
 800f5e6:	440b      	add	r3, r1
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	061b      	lsls	r3, r3, #24
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800f5f0:	68ba      	ldr	r2, [r7, #8]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	3304      	adds	r3, #4
 800f5fa:	61bb      	str	r3, [r7, #24]
     return offset;
 800f5fc:	69bb      	ldr	r3, [r7, #24]
    }
 800f5fe:	4618      	mov	r0, r3
 800f600:	3728      	adds	r7, #40	; 0x28
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
	...

0800f608 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	4b03      	ldr	r3, [pc, #12]	; (800f620 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800f612:	4618      	mov	r0, r3
 800f614:	370c      	adds	r7, #12
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	08015b80 	.word	0x08015b80

0800f624 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800f624:	b480      	push	{r7}
 800f626:	b083      	sub	sp, #12
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	4b03      	ldr	r3, [pc, #12]	; (800f63c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800f62e:	4618      	mov	r0, r3
 800f630:	370c      	adds	r7, #12
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	08015b9c 	.word	0x08015b9c

0800f640 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800f640:	b480      	push	{r7}
 800f642:	b083      	sub	sp, #12
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2200      	movs	r2, #0
 800f64c:	601a      	str	r2, [r3, #0]
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2200      	movs	r2, #0
 800f652:	605a      	str	r2, [r3, #4]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4618      	mov	r0, r3
 800f658:	370c      	adds	r7, #12
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr
	...

0800f664 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
      data()
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4618      	mov	r0, r3
 800f670:	f7ff fa24 	bl	800eabc <_ZN3ros3MsgC1Ev>
 800f674:	4a06      	ldr	r2, [pc, #24]	; (800f690 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	601a      	str	r2, [r3, #0]
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	3304      	adds	r3, #4
 800f67e:	4618      	mov	r0, r3
 800f680:	f7ff ffde 	bl	800f640 <_ZN3ros4TimeC1Ev>
    {
    }
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4618      	mov	r0, r3
 800f688:	3708      	adds	r7, #8
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	bf00      	nop
 800f690:	08015e08 	.word	0x08015e08

0800f694 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800f694:	b480      	push	{r7}
 800f696:	b085      	sub	sp, #20
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
 800f69c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6859      	ldr	r1, [r3, #4]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	683a      	ldr	r2, [r7, #0]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	b2ca      	uxtb	r2, r1
 800f6ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	0a19      	lsrs	r1, r3, #8
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	683a      	ldr	r2, [r7, #0]
 800f6bc:	4413      	add	r3, r2
 800f6be:	b2ca      	uxtb	r2, r1
 800f6c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	0c19      	lsrs	r1, r3, #16
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	3302      	adds	r3, #2
 800f6cc:	683a      	ldr	r2, [r7, #0]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	b2ca      	uxtb	r2, r1
 800f6d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	0e19      	lsrs	r1, r3, #24
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	3303      	adds	r3, #3
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	4413      	add	r3, r2
 800f6e2:	b2ca      	uxtb	r2, r1
 800f6e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	3304      	adds	r3, #4
 800f6ea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6899      	ldr	r1, [r3, #8]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	683a      	ldr	r2, [r7, #0]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	b2ca      	uxtb	r2, r1
 800f6f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	689b      	ldr	r3, [r3, #8]
 800f6fe:	0a19      	lsrs	r1, r3, #8
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	3301      	adds	r3, #1
 800f704:	683a      	ldr	r2, [r7, #0]
 800f706:	4413      	add	r3, r2
 800f708:	b2ca      	uxtb	r2, r1
 800f70a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	0c19      	lsrs	r1, r3, #16
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	3302      	adds	r3, #2
 800f716:	683a      	ldr	r2, [r7, #0]
 800f718:	4413      	add	r3, r2
 800f71a:	b2ca      	uxtb	r2, r1
 800f71c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	0e19      	lsrs	r1, r3, #24
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	3303      	adds	r3, #3
 800f728:	683a      	ldr	r2, [r7, #0]
 800f72a:	4413      	add	r3, r2
 800f72c:	b2ca      	uxtb	r2, r1
 800f72e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	3304      	adds	r3, #4
 800f734:	60fb      	str	r3, [r7, #12]
      return offset;
 800f736:	68fb      	ldr	r3, [r7, #12]
    }
 800f738:	4618      	mov	r0, r3
 800f73a:	3714      	adds	r7, #20
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800f74e:	2300      	movs	r3, #0
 800f750:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	683a      	ldr	r2, [r7, #0]
 800f756:	4413      	add	r3, r2
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	685a      	ldr	r2, [r3, #4]
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3301      	adds	r3, #1
 800f768:	6839      	ldr	r1, [r7, #0]
 800f76a:	440b      	add	r3, r1
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	021b      	lsls	r3, r3, #8
 800f770:	431a      	orrs	r2, r3
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	685a      	ldr	r2, [r3, #4]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	3302      	adds	r3, #2
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	440b      	add	r3, r1
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	041b      	lsls	r3, r3, #16
 800f786:	431a      	orrs	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	685a      	ldr	r2, [r3, #4]
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	3303      	adds	r3, #3
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	440b      	add	r3, r1
 800f798:	781b      	ldrb	r3, [r3, #0]
 800f79a:	061b      	lsls	r3, r3, #24
 800f79c:	431a      	orrs	r2, r3
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	3304      	adds	r3, #4
 800f7a6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	683a      	ldr	r2, [r7, #0]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	689a      	ldr	r2, [r3, #8]
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	6839      	ldr	r1, [r7, #0]
 800f7c0:	440b      	add	r3, r1
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	021b      	lsls	r3, r3, #8
 800f7c6:	431a      	orrs	r2, r3
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	689a      	ldr	r2, [r3, #8]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	3302      	adds	r3, #2
 800f7d4:	6839      	ldr	r1, [r7, #0]
 800f7d6:	440b      	add	r3, r1
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	041b      	lsls	r3, r3, #16
 800f7dc:	431a      	orrs	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	689a      	ldr	r2, [r3, #8]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	3303      	adds	r3, #3
 800f7ea:	6839      	ldr	r1, [r7, #0]
 800f7ec:	440b      	add	r3, r1
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	061b      	lsls	r3, r3, #24
 800f7f2:	431a      	orrs	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	3304      	adds	r3, #4
 800f7fc:	60fb      	str	r3, [r7, #12]
     return offset;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
    }
 800f800:	4618      	mov	r0, r3
 800f802:	3714      	adds	r7, #20
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr

0800f80c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	4b03      	ldr	r3, [pc, #12]	; (800f824 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800f816:	4618      	mov	r0, r3
 800f818:	370c      	adds	r7, #12
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr
 800f822:	bf00      	nop
 800f824:	08015bc0 	.word	0x08015bc0

0800f828 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
 800f830:	4b03      	ldr	r3, [pc, #12]	; (800f840 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800f832:	4618      	mov	r0, r3
 800f834:	370c      	adds	r7, #12
 800f836:	46bd      	mov	sp, r7
 800f838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83c:	4770      	bx	lr
 800f83e:	bf00      	nop
 800f840:	08015bd0 	.word	0x08015bd0

0800f844 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	68ba      	ldr	r2, [r7, #8]
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	605a      	str	r2, [r3, #4]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	611a      	str	r2, [r3, #16]
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	4618      	mov	r0, r3
 800f868:	3714      	adds	r7, #20
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr

0800f872 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800f872:	b580      	push	{r7, lr}
 800f874:	b082      	sub	sp, #8
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
 800f87a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	68d8      	ldr	r0, [r3, #12]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	6891      	ldr	r1, [r2, #8]
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	4798      	blx	r3
 800f890:	4603      	mov	r3, r0
  };
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800f89a:	b480      	push	{r7}
 800f89c:	b083      	sub	sp, #12
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	691b      	ldr	r3, [r3, #16]
  }
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	370c      	adds	r7, #12
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b0:	4770      	bx	lr
	...

0800f8b4 <_ZN13STM32HardwareC1Ev>:
class STM32Hardware {
  protected:
    UART_HandleTypeDef *huart;

  public:
    STM32Hardware():
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
      huart(&huart1){
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a04      	ldr	r2, [pc, #16]	; (800f8d0 <_ZN13STM32HardwareC1Ev+0x1c>)
 800f8c0:	601a      	str	r2, [r3, #0]
    }
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	370c      	adds	r7, #12
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ce:	4770      	bx	lr
 800f8d0:	2000aef4 	.word	0x2000aef4

0800f8d4 <_ZN13STM32Hardware4initEv>:

    void init(){
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]

    }
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <_ZN13STM32Hardware4readEv>:

    int read(){
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
      return my_read_DMA_byte(huart);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	f7fe fdd5 	bl	800e4a4 <my_read_DMA_byte>
 800f8fa:	4603      	mov	r3, r0
    }
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 800f904:	b580      	push	{r7, lr}
 800f906:	b084      	sub	sp, #16
 800f908:	af00      	add	r7, sp, #0
 800f90a:	60f8      	str	r0, [r7, #12]
 800f90c:	60b9      	str	r1, [r7, #8]
 800f90e:	607a      	str	r2, [r7, #4]
    	my_write_DMA(huart, data, length);
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	687a      	ldr	r2, [r7, #4]
 800f916:	68b9      	ldr	r1, [r7, #8]
 800f918:	4618      	mov	r0, r3
 800f91a:	f7fe fa91 	bl	800de40 <my_write_DMA>
    }
 800f91e:	bf00      	nop
 800f920:	3710      	adds	r7, #16
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
    	return HAL_GetTick();
 800f92e:	f7f1 fb63 	bl	8000ff8 <HAL_GetTick>
 800f932:	4603      	mov	r3, r0
    }
 800f934:	4618      	mov	r0, r3
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <_Z12rosNodeSetupv>:

void rosNodeSubCB(const std_msgs::UInt16& msg);
ros::Subscriber<std_msgs::UInt16> _sub("subTopicName", &rosNodeSubCB);
/***************  Modify 1 end***********************/

void rosNodeSetup(){
 800f93c:	b580      	push	{r7, lr}
 800f93e:	af00      	add	r7, sp, #0
	rosSerialNode.initNode();
 800f940:	4806      	ldr	r0, [pc, #24]	; (800f95c <_Z12rosNodeSetupv+0x20>)
 800f942:	f000 f941 	bl	800fbc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>

	/***************Modify 2 begin **************/
	rosSerialNode.advertise(_pub);
 800f946:	4906      	ldr	r1, [pc, #24]	; (800f960 <_Z12rosNodeSetupv+0x24>)
 800f948:	4804      	ldr	r0, [pc, #16]	; (800f95c <_Z12rosNodeSetupv+0x20>)
 800f94a:	f000 f95a 	bl	800fc02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	rosSerialNode.subscribe(_sub);
 800f94e:	4905      	ldr	r1, [pc, #20]	; (800f964 <_Z12rosNodeSetupv+0x28>)
 800f950:	4802      	ldr	r0, [pc, #8]	; (800f95c <_Z12rosNodeSetupv+0x20>)
 800f952:	f000 f984 	bl	800fc5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_>
	/***************Modify 2 end  **************/
}
 800f956:	bf00      	nop
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	20000e6c 	.word	0x20000e6c
 800f960:	200013a4 	.word	0x200013a4
 800f964:	200013b8 	.word	0x200013b8

0800f968 <_Z15rosNodeSpinOncev>:


void rosNodeSpinOnce(void)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	af00      	add	r7, sp, #0
   rosSerialNode.spinOnce();
 800f96c:	4802      	ldr	r0, [pc, #8]	; (800f978 <_Z15rosNodeSpinOncev+0x10>)
 800f96e:	f000 f9a3 	bl	800fcb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 800f972:	bf00      	nop
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	20000e6c 	.word	0x20000e6c

0800f97c <_Z10rosNodePubv>:

/***************Modify 3 begin  **************/
void rosNodePub(){
 800f97c:	b580      	push	{r7, lr}
 800f97e:	af00      	add	r7, sp, #0
	pubData.data=2;
 800f980:	4b04      	ldr	r3, [pc, #16]	; (800f994 <_Z10rosNodePubv+0x18>)
 800f982:	2202      	movs	r2, #2
 800f984:	809a      	strh	r2, [r3, #4]
	_pub.publish(&pubData);
 800f986:	4903      	ldr	r1, [pc, #12]	; (800f994 <_Z10rosNodePubv+0x18>)
 800f988:	4803      	ldr	r0, [pc, #12]	; (800f998 <_Z10rosNodePubv+0x1c>)
 800f98a:	f7ff ff72 	bl	800f872 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 800f98e:	bf00      	nop
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	2000139c 	.word	0x2000139c
 800f998:	200013a4 	.word	0x200013a4

0800f99c <_Z12rosNodeSubCBRKN8std_msgs6UInt16E>:

void rosNodeSubCB(const std_msgs::UInt16& msg){
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b082      	sub	sp, #8
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
	printf("Receive test topi %d\r\n",msg.data);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	889b      	ldrh	r3, [r3, #4]
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	4803      	ldr	r0, [pc, #12]	; (800f9b8 <_Z12rosNodeSubCBRKN8std_msgs6UInt16E+0x1c>)
 800f9ac:	f002 fca0 	bl	80122f0 <iprintf>
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	08015bf4 	.word	0x08015bf4

0800f9bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800f9bc:	b480      	push	{r7}
 800f9be:	b085      	sub	sp, #20
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	60fb      	str	r3, [r7, #12]
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	2b03      	cmp	r3, #3
 800f9ce:	d80d      	bhi.n	800f9ec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	00db      	lsls	r3, r3, #3
 800f9d4:	683a      	ldr	r2, [r7, #0]
 800f9d6:	fa22 f103 	lsr.w	r1, r2, r3
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	4413      	add	r3, r2
 800f9e0:	b2ca      	uxtb	r2, r1
 800f9e2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	60fb      	str	r3, [r7, #12]
 800f9ea:	e7ee      	b.n	800f9ca <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800f9ec:	bf00      	nop
 800f9ee:	3714      	adds	r7, #20
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800f9f8:	b480      	push	{r7}
 800f9fa:	b085      	sub	sp, #20
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800fa08:	2300      	movs	r3, #0
 800fa0a:	60fb      	str	r3, [r7, #12]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2b03      	cmp	r3, #3
 800fa10:	d811      	bhi.n	800fa36 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	6839      	ldr	r1, [r7, #0]
 800fa18:	68fa      	ldr	r2, [r7, #12]
 800fa1a:	440a      	add	r2, r1
 800fa1c:	7812      	ldrb	r2, [r2, #0]
 800fa1e:	4611      	mov	r1, r2
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	00d2      	lsls	r2, r2, #3
 800fa24:	fa01 f202 	lsl.w	r2, r1, r2
 800fa28:	431a      	orrs	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	3301      	adds	r3, #1
 800fa32:	60fb      	str	r3, [r7, #12]
 800fa34:	e7ea      	b.n	800fa0c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 800fa36:	bf00      	nop
 800fa38:	3714      	adds	r7, #20
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
	...

0800fa44 <_ZN3ros15NodeHandleBase_C1Ev>:


namespace ros
{

class NodeHandleBase_
 800fa44:	b480      	push	{r7}
 800fa46:	b083      	sub	sp, #12
 800fa48:	af00      	add	r7, sp, #0
 800fa4a:	6078      	str	r0, [r7, #4]
 800fa4c:	4a04      	ldr	r2, [pc, #16]	; (800fa60 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	4618      	mov	r0, r3
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr
 800fa60:	08015df4 	.word	0x08015df4

0800fa64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b086      	sub	sp, #24
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7ff ffe8 	bl	800fa44 <_ZN3ros15NodeHandleBase_C1Ev>
 800fa74:	4a39      	ldr	r2, [pc, #228]	; (800fb5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xf8>)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	601a      	str	r2, [r3, #0]
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	3304      	adds	r3, #4
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7ff ff18 	bl	800f8b4 <_ZN13STM32HardwareC1Ev>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2200      	movs	r2, #0
 800fa88:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7ff f94e 	bl	800ed34 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800fa98:	2300      	movs	r3, #0
 800fa9a:	617b      	str	r3, [r7, #20]
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	2b18      	cmp	r3, #24
 800faa0:	d80a      	bhi.n	800fab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x54>
      publishers[i] = 0;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	697a      	ldr	r2, [r7, #20]
 800faa6:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800faaa:	2100      	movs	r1, #0
 800faac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	3301      	adds	r3, #1
 800fab4:	617b      	str	r3, [r7, #20]
 800fab6:	e7f1      	b.n	800fa9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800fab8:	2300      	movs	r3, #0
 800faba:	613b      	str	r3, [r7, #16]
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	2b18      	cmp	r3, #24
 800fac0:	d80b      	bhi.n	800fada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	4413      	add	r3, r2
 800face:	2200      	movs	r2, #0
 800fad0:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	3301      	adds	r3, #1
 800fad6:	613b      	str	r3, [r7, #16]
 800fad8:	e7f0      	b.n	800fabc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x58>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800fada:	2300      	movs	r3, #0
 800fadc:	60fb      	str	r3, [r7, #12]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fae4:	d209      	bcs.n	800fafa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x96>
      message_in[i] = 0;
 800fae6:	687a      	ldr	r2, [r7, #4]
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	4413      	add	r3, r2
 800faec:	3318      	adds	r3, #24
 800faee:	2200      	movs	r2, #0
 800faf0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	3301      	adds	r3, #1
 800faf6:	60fb      	str	r3, [r7, #12]
 800faf8:	e7f1      	b.n	800fade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800fafa:	2300      	movs	r3, #0
 800fafc:	60bb      	str	r3, [r7, #8]
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb04:	d20a      	bcs.n	800fb1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xb8>
      message_out[i] = 0;
 800fb06:	687a      	ldr	r2, [r7, #4]
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	4413      	add	r3, r2
 800fb0c:	f503 7306 	add.w	r3, r3, #536	; 0x218
 800fb10:	2200      	movs	r2, #0
 800fb12:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	3301      	adds	r3, #1
 800fb18:	60bb      	str	r3, [r7, #8]
 800fb1a:	e7f0      	b.n	800fafe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9a>

    req_param_resp.ints_length = 0;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2200      	movs	r2, #0
 800fb28:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    req_param_resp.floats_length = 0;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    req_param_resp.floats = NULL;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    req_param_resp.ints_length = 0;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    req_param_resp.ints = NULL;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2200      	movs	r2, #0
 800fb48:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514

    spin_timeout_ = 0;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	615a      	str	r2, [r3, #20]
  }
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4618      	mov	r0, r3
 800fb56:	3718      	adds	r7, #24
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	08015dc8 	.word	0x08015dc8

0800fb60 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800fb60:	b480      	push	{r7}
 800fb62:	b083      	sub	sp, #12
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	4a04      	ldr	r2, [pc, #16]	; (800fb7c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	4618      	mov	r0, r3
 800fb72:	370c      	adds	r7, #12
 800fb74:	46bd      	mov	sp, r7
 800fb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7a:	4770      	bx	lr
 800fb7c:	08015ddc 	.word	0x08015ddc

0800fb80 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	60f8      	str	r0, [r7, #12]
 800fb88:	60b9      	str	r1, [r7, #8]
 800fb8a:	607a      	str	r2, [r7, #4]
 800fb8c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7ff ffe5 	bl	800fb60 <_ZN3ros11Subscriber_C1Ev>
 800fb96:	4a0b      	ldr	r2, [pc, #44]	; (800fbc4 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei+0x44>)
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	601a      	str	r2, [r3, #0]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	330c      	adds	r3, #12
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fe ff9b 	bl	800eadc <_ZN8std_msgs6UInt16C1Ev>
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	615a      	str	r2, [r3, #20]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	68ba      	ldr	r2, [r7, #8]
 800fbb6:	609a      	str	r2, [r3, #8]
  };
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3710      	adds	r7, #16
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}
 800fbc2:	bf00      	nop
 800fbc4:	08015db0 	.word	0x08015db0

0800fbc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b082      	sub	sp, #8
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7ff fe7d 	bl	800f8d4 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    bytes_ = 0;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
    index_ = 0;
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
    topic_ = 0;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
  };
 800fbfa:	bf00      	nop
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}

0800fc02 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800fc02:	b480      	push	{r7}
 800fc04:	b085      	sub	sp, #20
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	6078      	str	r0, [r7, #4]
 800fc0a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	60fb      	str	r3, [r7, #12]
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2b18      	cmp	r3, #24
 800fc14:	dc1c      	bgt.n	800fc50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4e>
    {
      if (publishers[i] == 0) // empty slot
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	68fa      	ldr	r2, [r7, #12]
 800fc1a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fc1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d110      	bne.n	800fc48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800fc3e:	687a      	ldr	r2, [r7, #4]
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	60da      	str	r2, [r3, #12]
        return true;
 800fc44:	2301      	movs	r3, #1
 800fc46:	e004      	b.n	800fc52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x50>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	60fb      	str	r3, [r7, #12]
 800fc4e:	e7df      	b.n	800fc10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 800fc50:	2300      	movs	r3, #0
  }
 800fc52:	4618      	mov	r0, r3
 800fc54:	3714      	adds	r7, #20
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800fc5e:	b480      	push	{r7}
 800fc60:	b085      	sub	sp, #20
 800fc62:	af00      	add	r7, sp, #0
 800fc64:	6078      	str	r0, [r7, #4]
 800fc66:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800fc68:	2300      	movs	r3, #0
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b18      	cmp	r3, #24
 800fc70:	dc1b      	bgt.n	800fcaa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0x4c>
    {
      if (subscribers[i] == 0) // empty slot
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc7a:	009b      	lsls	r3, r3, #2
 800fc7c:	4413      	add	r3, r2
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d10e      	bne.n	800fca2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0x44>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800fc84:	683a      	ldr	r2, [r7, #0]
 800fc86:	6879      	ldr	r1, [r7, #4]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	440b      	add	r3, r1
 800fc92:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	605a      	str	r2, [r3, #4]
        return true;
 800fc9e:	2301      	movs	r3, #1
 800fca0:	e004      	b.n	800fcac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	3301      	adds	r3, #1
 800fca6:	60fb      	str	r3, [r7, #12]
 800fca8:	e7e0      	b.n	800fc6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs6UInt16EvEEEEbRT_+0xe>
      }
    }
    return false;
 800fcaa:	2300      	movs	r3, #0
  }
 800fcac:	4618      	mov	r0, r3
 800fcae:	3714      	adds	r7, #20
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b084      	sub	sp, #16
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	3304      	adds	r3, #4
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7ff fe2e 	bl	800f926 <_ZN13STM32Hardware4timeEv>
 800fcca:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800fcd2:	68fa      	ldr	r2, [r7, #12]
 800fcd4:	1ad3      	subs	r3, r2, r3
 800fcd6:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d903      	bls.n	800fce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
    if (mode_ != MODE_FIRST_FF)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d009      	beq.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	429a      	cmp	r2, r3
 800fcfa:	d903      	bls.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
      if (spin_timeout_ > 0)
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	695b      	ldr	r3, [r3, #20]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d013      	beq.n	800fd34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	3304      	adds	r3, #4
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7ff fe08 	bl	800f926 <_ZN13STM32Hardware4timeEv>
 800fd16:	4602      	mov	r2, r0
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	1ad2      	subs	r2, r2, r3
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	695b      	ldr	r3, [r3, #20]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	bf8c      	ite	hi
 800fd24:	2301      	movhi	r3, #1
 800fd26:	2300      	movls	r3, #0
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d002      	beq.n	800fd34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x7c>
          return SPIN_TIMEOUT;
 800fd2e:	f06f 0301 	mvn.w	r3, #1
 800fd32:	e193      	b.n	801005c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      int data = hardware_.read();
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3304      	adds	r3, #4
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff fdd5 	bl	800f8e8 <_ZN13STM32Hardware4readEv>
 800fd3e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f2c0 8173 	blt.w	801002e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x376>
      checksum_ += data;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	441a      	add	r2, r3
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fd5e:	2b07      	cmp	r3, #7
 800fd60:	d11d      	bne.n	800fd9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xe6>
        message_in[index_++] = data;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800fd68:	1c59      	adds	r1, r3, #1
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	f8c2 14ec 	str.w	r1, [r2, #1260]	; 0x4ec
 800fd70:	68ba      	ldr	r2, [r7, #8]
 800fd72:	b2d1      	uxtb	r1, r2
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	4413      	add	r3, r2
 800fd78:	460a      	mov	r2, r1
 800fd7a:	761a      	strb	r2, [r3, #24]
        bytes_--;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800fd82:	1e5a      	subs	r2, r3, #1
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1b7      	bne.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2208      	movs	r2, #8
 800fd98:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800fd9c:	e7b2      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d128      	bne.n	800fdfa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x142>
        if (data == 0xff)
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	2bff      	cmp	r3, #255	; 0xff
 800fdac:	d10d      	bne.n	800fdca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x112>
          mode_++;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fdb4:	1c5a      	adds	r2, r3, #1
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f103 0214 	add.w	r2, r3, #20
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 800fdc8:	e79c      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	3304      	adds	r3, #4
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff fda9 	bl	800f926 <_ZN13STM32Hardware4timeEv>
 800fdd4:	4602      	mov	r2, r0
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	1ad3      	subs	r3, r2, r3
 800fdda:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdde:	4293      	cmp	r3, r2
 800fde0:	bf8c      	ite	hi
 800fde2:	2301      	movhi	r3, #1
 800fde4:	2300      	movls	r3, #0
 800fde6:	b2db      	uxtb	r3, r3
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d08b      	beq.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
          return SPIN_TIMEOUT;
 800fdf4:	f06f 0301 	mvn.w	r3, #1
 800fdf8:	e130      	b.n	801005c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
      else if (mode_ == MODE_PROTOCOL_VER)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d11b      	bne.n	800fe3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800fe04:	68bb      	ldr	r3, [r7, #8]
 800fe06:	2bfe      	cmp	r3, #254	; 0xfe
 800fe08:	d107      	bne.n	800fe1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x162>
          mode_++;
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe10:	1c5a      	adds	r2, r3, #1
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800fe18:	e774      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
          if (configured_ == false)
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800fe28:	f083 0301 	eor.w	r3, r3, #1
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f43f af68 	beq.w	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800fe34:	6878      	ldr	r0, [r7, #4]
 800fe36:	f000 f915 	bl	8010064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800fe3a:	e763      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	d113      	bne.n	800fe6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68ba      	ldr	r2, [r7, #8]
 800fe4a:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        index_ = 0;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	f8c3 24ec 	str.w	r2, [r3, #1260]	; 0x4ec
        mode_++;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe5c:	1c5a      	adds	r2, r3, #1
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte for calculating size checksum */
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	68ba      	ldr	r2, [r7, #8]
 800fe68:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800fe6c:	e74a      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe74:	2b03      	cmp	r3, #3
 800fe76:	d110      	bne.n	800fe9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	f8d3 24e4 	ldr.w	r2, [r3, #1252]	; 0x4e4
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	021b      	lsls	r3, r3, #8
 800fe82:	441a      	add	r2, r3
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f8c3 24e4 	str.w	r2, [r3, #1252]	; 0x4e4
        mode_++;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fe90:	1c5a      	adds	r2, r3, #1
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800fe98:	e734      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fea0:	2b04      	cmp	r3, #4
 800fea2:	d116      	bne.n	800fed2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800feaa:	425a      	negs	r2, r3
 800feac:	b2db      	uxtb	r3, r3
 800feae:	b2d2      	uxtb	r2, r2
 800feb0:	bf58      	it	pl
 800feb2:	4253      	negpl	r3, r2
 800feb4:	2bff      	cmp	r3, #255	; 0xff
 800feb6:	d107      	bne.n	800fec8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800febe:	1c5a      	adds	r2, r3, #1
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800fec6:	e71d      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2200      	movs	r2, #0
 800fecc:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800fed0:	e718      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800fed8:	2b05      	cmp	r3, #5
 800feda:	d10f      	bne.n	800fefc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	68ba      	ldr	r2, [r7, #8]
 800fee0:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_++;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800feea:	1c5a      	adds	r2, r3, #1
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        checksum_ = data;               /* first byte included in checksum */
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	68ba      	ldr	r2, [r7, #8]
 800fef6:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
 800fefa:	e703      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ff02:	2b06      	cmp	r3, #6
 800ff04:	d117      	bne.n	800ff36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 24e8 	ldr.w	r2, [r3, #1256]	; 0x4e8
 800ff0c:	68bb      	ldr	r3, [r7, #8]
 800ff0e:	021b      	lsls	r3, r3, #8
 800ff10:	441a      	add	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8c3 24e8 	str.w	r2, [r3, #1256]	; 0x4e8
        mode_ = MODE_MESSAGE;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2207      	movs	r2, #7
 800ff1c:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if (bytes_ == 0)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 34e4 	ldr.w	r3, [r3, #1252]	; 0x4e4
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f47f aeec 	bne.w	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	2208      	movs	r2, #8
 800ff30:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
 800ff34:	e6e6      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800ff3c:	2b08      	cmp	r3, #8
 800ff3e:	f47f aee1 	bne.w	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
        if ((checksum_ % 256) == 255)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800ff50:	425a      	negs	r2, r3
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	b2d2      	uxtb	r2, r2
 800ff56:	bf58      	it	pl
 800ff58:	4253      	negpl	r3, r2
 800ff5a:	2bff      	cmp	r3, #255	; 0xff
 800ff5c:	f47f aed2 	bne.w	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d110      	bne.n	800ff8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800ff6a:	6878      	ldr	r0, [r7, #4]
 800ff6c:	f000 f87a 	bl	8010064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f894 	bl	801009e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	68fa      	ldr	r2, [r7, #12]
 800ff7a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
            last_sync_receive_time = c_time;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
            return SPIN_ERR;
 800ff86:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8a:	e067      	b.n	801005c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>
          else if (topic_ == TopicInfo::ID_TIME)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ff92:	2b0a      	cmp	r3, #10
 800ff94:	d106      	bne.n	800ffa4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ec>
            syncTime(message_in);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3318      	adds	r3, #24
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 f95f 	bl	8010260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800ffa2:	e6af      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ffaa:	2b06      	cmp	r3, #6
 800ffac:	d10d      	bne.n	800ffca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
            req_param_resp.deserialize(message_in);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f503 62a1 	add.w	r2, r3, #1288	; 0x508
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3318      	adds	r3, #24
 800ffb8:	4619      	mov	r1, r3
 800ffba:	4610      	mov	r0, r2
 800ffbc:	f7fe ffef 	bl	800ef9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2201      	movs	r2, #1
 800ffc4:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
 800ffc8:	e69c      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ffd0:	2b0b      	cmp	r3, #11
 800ffd2:	d104      	bne.n	800ffde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x326>
            configured_ = false;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
 800ffdc:	e692      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800ffe4:	3b64      	subs	r3, #100	; 0x64
 800ffe6:	687a      	ldr	r2, [r7, #4]
 800ffe8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	4413      	add	r3, r2
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f43f ae86 	beq.w	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 800fffe:	3b64      	subs	r3, #100	; 0x64
 8010000:	687a      	ldr	r2, [r7, #4]
 8010002:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8010006:	009b      	lsls	r3, r3, #2
 8010008:	4413      	add	r3, r2
 801000a:	6858      	ldr	r0, [r3, #4]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8d3 34e8 	ldr.w	r3, [r3, #1256]	; 0x4e8
 8010012:	3b64      	subs	r3, #100	; 0x64
 8010014:	687a      	ldr	r2, [r7, #4]
 8010016:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4413      	add	r3, r2
 801001e:	685b      	ldr	r3, [r3, #4]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	3218      	adds	r2, #24
 8010028:	4611      	mov	r1, r2
 801002a:	4798      	blx	r3
    while (true)
 801002c:	e66a      	b.n	800fd04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 801002e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8010036:	2b00      	cmp	r3, #0
 8010038:	d00f      	beq.n	801005a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8010040:	68fa      	ldr	r2, [r7, #12]
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8010048:	4293      	cmp	r3, r2
 801004a:	d906      	bls.n	801005a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a2>
      requestSyncTime();
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f000 f809 	bl	8010064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    return SPIN_OK;
 801005a:	2300      	movs	r3, #0
  }
 801005c:	4618      	mov	r0, r3
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 801006c:	f107 030c 	add.w	r3, r7, #12
 8010070:	4618      	mov	r0, r3
 8010072:	f7ff faf7 	bl	800f664 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f107 020c 	add.w	r2, r7, #12
 8010080:	210a      	movs	r1, #10
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	4798      	blx	r3
    rt_time = hardware_.time();
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	3304      	adds	r3, #4
 801008a:	4618      	mov	r0, r3
 801008c:	f7ff fc4b 	bl	800f926 <_ZN13STM32Hardware4timeEv>
 8010090:	4602      	mov	r2, r0
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	609a      	str	r2, [r3, #8]
  }
 8010096:	bf00      	nop
 8010098:	3718      	adds	r7, #24
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 801009e:	b590      	push	{r4, r7, lr}
 80100a0:	b08b      	sub	sp, #44	; 0x2c
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80100a6:	f107 030c 	add.w	r3, r7, #12
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7ff f904 	bl	800f2b8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80100b0:	2300      	movs	r3, #0
 80100b2:	627b      	str	r3, [r7, #36]	; 0x24
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	2b18      	cmp	r3, #24
 80100b8:	dc5b      	bgt.n	8010172 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd4>
    {
      if (publishers[i] != 0) // non-empty slot
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100be:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80100c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d04f      	beq.n	801016a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xcc>
      {
        ti.topic_id = publishers[i]->id_;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100ce:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80100d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	b29b      	uxth	r3, r3
 80100da:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100e0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80100e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100f0:	f502 7283 	add.w	r2, r2, #262	; 0x106
 80100f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f8:	6859      	ldr	r1, [r3, #4]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100fe:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8010102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010106:	685b      	ldr	r3, [r3, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	3308      	adds	r3, #8
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	4608      	mov	r0, r1
 8010110:	4798      	blx	r3
 8010112:	4603      	mov	r3, r0
 8010114:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801011a:	f502 7283 	add.w	r2, r2, #262	; 0x106
 801011e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010122:	6859      	ldr	r1, [r3, #4]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010128:	f502 7283 	add.w	r2, r2, #262	; 0x106
 801012c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	330c      	adds	r3, #12
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4608      	mov	r0, r1
 801013a:	4798      	blx	r3
 801013c:	4603      	mov	r3, r0
 801013e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8010140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010144:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	681c      	ldr	r4, [r3, #0]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010150:	f502 7283 	add.w	r2, r2, #262	; 0x106
 8010154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff fb9e 	bl	800f89a <_ZN3ros9Publisher15getEndpointTypeEv>
 801015e:	4601      	mov	r1, r0
 8010160:	f107 030c 	add.w	r3, r7, #12
 8010164:	461a      	mov	r2, r3
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 801016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016c:	3301      	adds	r3, #1
 801016e:	627b      	str	r3, [r7, #36]	; 0x24
 8010170:	e7a0      	b.n	80100b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8010172:	2300      	movs	r3, #0
 8010174:	627b      	str	r3, [r7, #36]	; 0x24
 8010176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010178:	2b18      	cmp	r3, #24
 801017a:	dc68      	bgt.n	801024e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1b0>
    {
      if (subscribers[i] != 0) // non-empty slot
 801017c:	687a      	ldr	r2, [r7, #4]
 801017e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010180:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8010184:	009b      	lsls	r3, r3, #2
 8010186:	4413      	add	r3, r2
 8010188:	685b      	ldr	r3, [r3, #4]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d05b      	beq.n	8010246 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      {
        ti.topic_id = subscribers[i]->id_;
 801018e:	687a      	ldr	r2, [r7, #4]
 8010190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010192:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 8010196:	009b      	lsls	r3, r3, #2
 8010198:	4413      	add	r3, r2
 801019a:	685b      	ldr	r3, [r3, #4]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	b29b      	uxth	r3, r3
 80101a0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	4413      	add	r3, r2
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	689b      	ldr	r3, [r3, #8]
 80101b2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b8:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80101bc:	009b      	lsls	r3, r3, #2
 80101be:	4413      	add	r3, r2
 80101c0:	6859      	ldr	r1, [r3, #4]
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c6:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80101ca:	009b      	lsls	r3, r3, #2
 80101cc:	4413      	add	r3, r2
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3308      	adds	r3, #8
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	4608      	mov	r0, r1
 80101d8:	4798      	blx	r3
 80101da:	4603      	mov	r3, r0
 80101dc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101e2:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4413      	add	r3, r2
 80101ea:	6859      	ldr	r1, [r3, #4]
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f0:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 80101f4:	009b      	lsls	r3, r3, #2
 80101f6:	4413      	add	r3, r2
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	330c      	adds	r3, #12
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	4608      	mov	r0, r1
 8010202:	4798      	blx	r3
 8010204:	4603      	mov	r3, r0
 8010206:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8010208:	f44f 7300 	mov.w	r3, #512	; 0x200
 801020c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	681c      	ldr	r4, [r3, #0]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010218:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 801021c:	009b      	lsls	r3, r3, #2
 801021e:	4413      	add	r3, r2
 8010220:	6859      	ldr	r1, [r3, #4]
 8010222:	687a      	ldr	r2, [r7, #4]
 8010224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010226:	f503 738f 	add.w	r3, r3, #286	; 0x11e
 801022a:	009b      	lsls	r3, r3, #2
 801022c:	4413      	add	r3, r2
 801022e:	685b      	ldr	r3, [r3, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	3304      	adds	r3, #4
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	4608      	mov	r0, r1
 8010238:	4798      	blx	r3
 801023a:	4601      	mov	r1, r0
 801023c:	f107 030c 	add.w	r3, r7, #12
 8010240:	461a      	mov	r2, r3
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	3301      	adds	r3, #1
 801024a:	627b      	str	r3, [r7, #36]	; 0x24
 801024c:	e793      	b.n	8010176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      }
    }
    configured_ = true;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2201      	movs	r2, #1
 8010252:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  }
 8010256:	bf00      	nop
 8010258:	372c      	adds	r7, #44	; 0x2c
 801025a:	46bd      	mov	sp, r7
 801025c:	bd90      	pop	{r4, r7, pc}
	...

08010260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8010260:	b580      	push	{r7, lr}
 8010262:	b086      	sub	sp, #24
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 801026a:	f107 0308 	add.w	r3, r7, #8
 801026e:	4618      	mov	r0, r3
 8010270:	f7ff f9f8 	bl	800f664 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	3304      	adds	r3, #4
 8010278:	4618      	mov	r0, r3
 801027a:	f7ff fb54 	bl	800f926 <_ZN13STM32Hardware4timeEv>
 801027e:	4602      	mov	r2, r0
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	689b      	ldr	r3, [r3, #8]
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8010288:	f107 0308 	add.w	r3, r7, #8
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff fa58 	bl	800f744 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8010294:	68fa      	ldr	r2, [r7, #12]
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	4914      	ldr	r1, [pc, #80]	; (80102ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 801029a:	fba1 1303 	umull	r1, r3, r1, r3
 801029e:	099b      	lsrs	r3, r3, #6
 80102a0:	4413      	add	r3, r2
 80102a2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80102a4:	6939      	ldr	r1, [r7, #16]
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	4b10      	ldr	r3, [pc, #64]	; (80102ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x8c>)
 80102aa:	fba3 0302 	umull	r0, r3, r3, r2
 80102ae:	099b      	lsrs	r3, r3, #6
 80102b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80102b4:	fb00 f303 	mul.w	r3, r0, r3
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	4a0d      	ldr	r2, [pc, #52]	; (80102f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80102bc:	fb02 f303 	mul.w	r3, r2, r3
 80102c0:	440b      	add	r3, r1
 80102c2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80102c4:	f107 0308 	add.w	r3, r7, #8
 80102c8:	3304      	adds	r3, #4
 80102ca:	4619      	mov	r1, r3
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 f8a3 	bl	8010418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	3304      	adds	r3, #4
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7ff fb25 	bl	800f926 <_ZN13STM32Hardware4timeEv>
 80102dc:	4602      	mov	r2, r0
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc
  }
 80102e4:	bf00      	nop
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}
 80102ec:	10624dd3 	.word	0x10624dd3
 80102f0:	000f4240 	.word	0x000f4240

080102f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b088      	sub	sp, #32
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	2b63      	cmp	r3, #99	; 0x63
 8010304:	dd09      	ble.n	801031a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 801030c:	f083 0301 	eor.w	r3, r3, #1
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8010316:	2300      	movs	r3, #0
 8010318:	e077      	b.n	801040a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	68fa      	ldr	r2, [r7, #12]
 8010322:	f502 7206 	add.w	r2, r2, #536	; 0x218
 8010326:	3207      	adds	r2, #7
 8010328:	4611      	mov	r1, r2
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	4798      	blx	r3
 801032e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	22ff      	movs	r2, #255	; 0xff
 8010334:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
    message_out[1] = PROTOCOL_VER;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	22fe      	movs	r2, #254	; 0xfe
 801033c:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8010340:	697b      	ldr	r3, [r7, #20]
 8010342:	b2da      	uxtb	r2, r3
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 801034a:	697b      	ldr	r3, [r7, #20]
 801034c:	b29b      	uxth	r3, r3
 801034e:	121b      	asrs	r3, r3, #8
 8010350:	b2da      	uxtb	r2, r3
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	f893 221a 	ldrb.w	r2, [r3, #538]	; 0x21a
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 8010364:	4413      	add	r3, r2
 8010366:	b2db      	uxtb	r3, r3
 8010368:	43db      	mvns	r3, r3
 801036a:	b2da      	uxtb	r2, r3
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	b2da      	uxtb	r2, r3
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	b21b      	sxth	r3, r3
 8010380:	121b      	asrs	r3, r3, #8
 8010382:	b2da      	uxtb	r2, r3
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e

    /* calculate checksum */
    int chk = 0;
 801038a:	2300      	movs	r3, #0
 801038c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 801038e:	2305      	movs	r3, #5
 8010390:	61bb      	str	r3, [r7, #24]
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	3307      	adds	r3, #7
 8010396:	69ba      	ldr	r2, [r7, #24]
 8010398:	429a      	cmp	r2, r3
 801039a:	da0d      	bge.n	80103b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 801039c:	68fa      	ldr	r2, [r7, #12]
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	4413      	add	r3, r2
 80103a2:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	461a      	mov	r2, r3
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	4413      	add	r3, r2
 80103ae:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	3301      	adds	r3, #1
 80103b4:	61bb      	str	r3, [r7, #24]
 80103b6:	e7ec      	b.n	8010392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	3307      	adds	r3, #7
 80103bc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80103be:	69fb      	ldr	r3, [r7, #28]
 80103c0:	425a      	negs	r2, r3
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	b2d2      	uxtb	r2, r2
 80103c6:	bf58      	it	pl
 80103c8:	4253      	negpl	r3, r2
 80103ca:	b2da      	uxtb	r2, r3
 80103cc:	697b      	ldr	r3, [r7, #20]
 80103ce:	1c59      	adds	r1, r3, #1
 80103d0:	6179      	str	r1, [r7, #20]
 80103d2:	43d2      	mvns	r2, r2
 80103d4:	b2d1      	uxtb	r1, r2
 80103d6:	68fa      	ldr	r2, [r7, #12]
 80103d8:	4413      	add	r3, r2
 80103da:	460a      	mov	r2, r1
 80103dc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

    if (l <= OUTPUT_SIZE)
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103e6:	dc0a      	bgt.n	80103fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	1d18      	adds	r0, r3, #4
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	f503 7306 	add.w	r3, r3, #536	; 0x218
 80103f2:	697a      	ldr	r2, [r7, #20]
 80103f4:	4619      	mov	r1, r3
 80103f6:	f7ff fa85 	bl	800f904 <_ZN13STM32Hardware5writeEPhi>
      return l;
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	e005      	b.n	801040a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 80103fe:	4905      	ldr	r1, [pc, #20]	; (8010414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8010400:	68f8      	ldr	r0, [r7, #12]
 8010402:	f000 f847 	bl	8010494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8010406:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 801040a:	4618      	mov	r0, r3
 801040c:	3720      	adds	r7, #32
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	08015c0c 	.word	0x08015c0c

08010418 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
 8010420:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	3304      	adds	r3, #4
 8010426:	4618      	mov	r0, r3
 8010428:	f7ff fa7d 	bl	800f926 <_ZN13STM32Hardware4timeEv>
 801042c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	4914      	ldr	r1, [pc, #80]	; (8010488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 8010436:	fba1 1303 	umull	r1, r3, r1, r3
 801043a:	099b      	lsrs	r3, r3, #6
 801043c:	1ad3      	subs	r3, r2, r3
 801043e:	1e5a      	subs	r2, r3, #1
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	60da      	str	r2, [r3, #12]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	6859      	ldr	r1, [r3, #4]
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	4b0f      	ldr	r3, [pc, #60]	; (8010488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x70>)
 801044c:	fba3 0302 	umull	r0, r3, r3, r2
 8010450:	099b      	lsrs	r3, r3, #6
 8010452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010456:	fb00 f303 	mul.w	r3, r0, r3
 801045a:	1ad3      	subs	r3, r2, r3
 801045c:	4a0b      	ldr	r2, [pc, #44]	; (801048c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 801045e:	fb02 f303 	mul.w	r3, r2, r3
 8010462:	1aca      	subs	r2, r1, r3
 8010464:	4b0a      	ldr	r3, [pc, #40]	; (8010490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8010466:	4413      	add	r3, r2
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	6113      	str	r3, [r2, #16]
    normalizeSecNSec(sec_offset, nsec_offset);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f103 020c 	add.w	r2, r3, #12
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	3310      	adds	r3, #16
 8010476:	4619      	mov	r1, r3
 8010478:	4610      	mov	r0, r2
 801047a:	f7f6 fed9 	bl	8007230 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 801047e:	bf00      	nop
 8010480:	3710      	adds	r7, #16
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	10624dd3 	.word	0x10624dd3
 801048c:	000f4240 	.word	0x000f4240
 8010490:	3b9aca00 	.word	0x3b9aca00

08010494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 801049e:	683a      	ldr	r2, [r7, #0]
 80104a0:	2103      	movs	r1, #3
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 f804 	bl	80104b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80104a8:	bf00      	nop
 80104aa:	3708      	adds	r7, #8
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b088      	sub	sp, #32
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	460b      	mov	r3, r1
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80104be:	f107 0314 	add.w	r3, r7, #20
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7fe fb86 	bl	800ebd4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80104c8:	7afb      	ldrb	r3, [r7, #11]
 80104ca:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f107 0214 	add.w	r2, r7, #20
 80104da:	2107      	movs	r1, #7
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	4798      	blx	r3
  }
 80104e0:	bf00      	nop
 80104e2:	3720      	adds	r7, #32
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}

080104e8 <_Z41__static_initialization_and_destruction_0ii>:
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b01      	cmp	r3, #1
 80104f6:	d116      	bne.n	8010526 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104fe:	4293      	cmp	r3, r2
 8010500:	d111      	bne.n	8010526 <_Z41__static_initialization_and_destruction_0ii+0x3e>
ros::NodeHandle rosSerialNode;
 8010502:	480b      	ldr	r0, [pc, #44]	; (8010530 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8010504:	f7ff faae 	bl	800fa64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::UInt16 pubData;
 8010508:	480a      	ldr	r0, [pc, #40]	; (8010534 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 801050a:	f7fe fae7 	bl	800eadc <_ZN8std_msgs6UInt16C1Ev>
ros::Publisher _pub("pubTopicName", &pubData);
 801050e:	2300      	movs	r3, #0
 8010510:	4a08      	ldr	r2, [pc, #32]	; (8010534 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8010512:	4909      	ldr	r1, [pc, #36]	; (8010538 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8010514:	4809      	ldr	r0, [pc, #36]	; (801053c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8010516:	f7ff f995 	bl	800f844 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::UInt16> _sub("subTopicName", &rosNodeSubCB);
 801051a:	2301      	movs	r3, #1
 801051c:	4a08      	ldr	r2, [pc, #32]	; (8010540 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 801051e:	4909      	ldr	r1, [pc, #36]	; (8010544 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8010520:	4809      	ldr	r0, [pc, #36]	; (8010548 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8010522:	f7ff fb2d 	bl	800fb80 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvEC1EPKcPFvRKS2_Ei>
}
 8010526:	bf00      	nop
 8010528:	3708      	adds	r7, #8
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	20000e6c 	.word	0x20000e6c
 8010534:	2000139c 	.word	0x2000139c
 8010538:	08015c48 	.word	0x08015c48
 801053c:	200013a4 	.word	0x200013a4
 8010540:	0800f99d 	.word	0x0800f99d
 8010544:	08015c58 	.word	0x08015c58
 8010548:	200013b8 	.word	0x200013b8

0801054c <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	330c      	adds	r3, #12
 801055a:	6839      	ldr	r1, [r7, #0]
 801055c:	4618      	mov	r0, r3
 801055e:	f7fe faf5 	bl	800eb4c <_ZN8std_msgs6UInt1611deserializeEPh>
    this->cb_(msg);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	695b      	ldr	r3, [r3, #20]
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	320c      	adds	r2, #12
 801056a:	4610      	mov	r0, r2
 801056c:	4798      	blx	r3
  }
 801056e:	bf00      	nop
 8010570:	3708      	adds	r7, #8
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8010576:	b480      	push	{r7}
 8010578:	b083      	sub	sp, #12
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	699b      	ldr	r3, [r3, #24]
  }
 8010582:	4618      	mov	r0, r3
 8010584:	370c      	adds	r7, #12
 8010586:	46bd      	mov	sp, r7
 8010588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058c:	4770      	bx	lr

0801058e <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 801058e:	b580      	push	{r7, lr}
 8010590:	b082      	sub	sp, #8
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	330c      	adds	r3, #12
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fafe 	bl	800eb9c <_ZN8std_msgs6UInt167getTypeEv>
 80105a0:	4603      	mov	r3, r0
  }
 80105a2:	4618      	mov	r0, r3
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <_ZN3ros10SubscriberIN8std_msgs6UInt16EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80105aa:	b580      	push	{r7, lr}
 80105ac:	b082      	sub	sp, #8
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	330c      	adds	r3, #12
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe fafe 	bl	800ebb8 <_ZN8std_msgs6UInt166getMD5Ev>
 80105bc:	4603      	mov	r3, r0
  }
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80105c6:	b480      	push	{r7}
 80105c8:	b083      	sub	sp, #12
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
    return configured_;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
  };
 80105d4:	4618      	mov	r0, r3
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <_GLOBAL__sub_I_rosSerialNode>:
 80105e0:	b580      	push	{r7, lr}
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105e8:	2001      	movs	r0, #1
 80105ea:	f7ff ff7d 	bl	80104e8 <_Z41__static_initialization_and_destruction_0ii>
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <_ZN8SOFT_ARMC1Ev>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM::SOFT_ARM()
 80105f0:	b5b0      	push	{r4, r5, r7, lr}
 80105f2:	b082      	sub	sp, #8
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2408      	movs	r4, #8
 80105fc:	461d      	mov	r5, r3
 80105fe:	2c00      	cmp	r4, #0
 8010600:	db06      	blt.n	8010610 <_ZN8SOFT_ARMC1Ev+0x20>
 8010602:	2106      	movs	r1, #6
 8010604:	4628      	mov	r0, r5
 8010606:	f000 fb07 	bl	8010c18 <_ZN16SOFT_ARM_SEGMENTC1Ei>
 801060a:	35a4      	adds	r5, #164	; 0xa4
 801060c:	3c01      	subs	r4, #1
 801060e:	e7f6      	b.n	80105fe <_ZN8SOFT_ARMC1Ev+0xe>
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	f241 0338 	movw	r3, #4152	; 0x1038
 8010616:	4413      	add	r3, r2
 8010618:	2200      	movs	r2, #0
 801061a:	2100      	movs	r1, #0
 801061c:	4618      	mov	r0, r3
 801061e:	f7fb fabd 	bl	800bb9c <_ZN15PRESSURE_SOURCEC1Eii>
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	f241 0370 	movw	r3, #4208	; 0x1070
 8010628:	4413      	add	r3, r2
 801062a:	2200      	movs	r2, #0
 801062c:	2100      	movs	r1, #0
 801062e:	4618      	mov	r0, r3
 8010630:	f7fb fab4 	bl	800bb9c <_ZN15PRESSURE_SOURCEC1Eii>
{

}
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	4618      	mov	r0, r3
 8010638:	3708      	adds	r7, #8
 801063a:	46bd      	mov	sp, r7
 801063c:	bdb0      	pop	{r4, r5, r7, pc}

0801063e <_ZN8SOFT_ARM17setupChamberPortsEv>:


void SOFT_ARM::setupChamberPorts()
{
 801063e:	b580      	push	{r7, lr}
 8010640:	b096      	sub	sp, #88	; 0x58
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
	/*Every actuator is refered to with two numbers, segNum(0-8) and bellowNum(0-5)*/
	float initOpening=0;
 8010646:	f04f 0300 	mov.w	r3, #0
 801064a:	63fb      	str	r3, [r7, #60]	; 0x3c
	for(int j=0;j<SEGMENTNUM;j++){
 801064c:	2300      	movs	r3, #0
 801064e:	657b      	str	r3, [r7, #84]	; 0x54
 8010650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010652:	2b08      	cmp	r3, #8
 8010654:	dc55      	bgt.n	8010702 <_ZN8SOFT_ARM17setupChamberPortsEv+0xc4>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 8010656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010658:	22a4      	movs	r2, #164	; 0xa4
 801065a:	fb02 f303 	mul.w	r3, r2, r3
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	4413      	add	r3, r2
 8010662:	63bb      	str	r3, [r7, #56]	; 0x38
		for(int i=0;i<BELLOWNUM;i++)
 8010664:	2300      	movs	r3, #0
 8010666:	653b      	str	r3, [r7, #80]	; 0x50
 8010668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801066a:	2b05      	cmp	r3, #5
 801066c:	dc45      	bgt.n	80106fa <_ZN8SOFT_ARM17setupChamberPortsEv+0xbc>
		{
			CHAMBER *bellowCur=armSegCur->bellows[i];
 801066e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010670:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010672:	3216      	adds	r2, #22
 8010674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010678:	637b      	str	r3, [r7, #52]	; 0x34
			int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 801067a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801067c:	011b      	lsls	r3, r3, #4
 801067e:	3314      	adds	r3, #20
 8010680:	633b      	str	r3, [r7, #48]	; 0x30
			/*analog port is treated as the overall No. in our arm.*/

			if(j==1 || j==2 || j==6){
 8010682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010684:	2b01      	cmp	r3, #1
 8010686:	d005      	beq.n	8010694 <_ZN8SOFT_ARM17setupChamberPortsEv+0x56>
 8010688:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801068a:	2b02      	cmp	r3, #2
 801068c:	d002      	beq.n	8010694 <_ZN8SOFT_ARM17setupChamberPortsEv+0x56>
 801068e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010690:	2b06      	cmp	r3, #6
 8010692:	d113      	bne.n	80106bc <_ZN8SOFT_ARM17setupChamberPortsEv+0x7e>
				bellowCur->attach(pwmPortOffset+BELLOWNUM+i, pwmPortOffset+i, j*BELLOWNUM+i);
 8010694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010696:	1d9a      	adds	r2, r3, #6
 8010698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801069a:	18d1      	adds	r1, r2, r3
 801069c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801069e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106a0:	18d0      	adds	r0, r2, r3
 80106a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106a4:	4613      	mov	r3, r2
 80106a6:	005b      	lsls	r3, r3, #1
 80106a8:	4413      	add	r3, r2
 80106aa:	005b      	lsls	r3, r3, #1
 80106ac:	461a      	mov	r2, r3
 80106ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106b0:	4413      	add	r3, r2
 80106b2:	4602      	mov	r2, r0
 80106b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80106b6:	f7fa fdb7 	bl	800b228 <_ZN7CHAMBER6attachEiii>
 80106ba:	e012      	b.n	80106e2 <_ZN8SOFT_ARM17setupChamberPortsEv+0xa4>
			}
			else{
				bellowCur->attach(pwmPortOffset+i, pwmPortOffset+BELLOWNUM+i, j*BELLOWNUM+i);
 80106bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106c0:	18d1      	adds	r1, r2, r3
 80106c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c4:	1d9a      	adds	r2, r3, #6
 80106c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106c8:	18d0      	adds	r0, r2, r3
 80106ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80106cc:	4613      	mov	r3, r2
 80106ce:	005b      	lsls	r3, r3, #1
 80106d0:	4413      	add	r3, r2
 80106d2:	005b      	lsls	r3, r3, #1
 80106d4:	461a      	mov	r2, r3
 80106d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106d8:	4413      	add	r3, r2
 80106da:	4602      	mov	r2, r0
 80106dc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80106de:	f7fa fda3 	bl	800b228 <_ZN7CHAMBER6attachEiii>
			}

			bellowCur->writeOpening(initOpening);
 80106e2:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80106e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80106e8:	f7fb f850 	bl	800b78c <_ZN7CHAMBER12writeOpeningEf>


			HAL_Delay(10);
 80106ec:	200a      	movs	r0, #10
 80106ee:	f7f0 fc8f 	bl	8001010 <HAL_Delay>
		for(int i=0;i<BELLOWNUM;i++)
 80106f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106f4:	3301      	adds	r3, #1
 80106f6:	653b      	str	r3, [r7, #80]	; 0x50
 80106f8:	e7b6      	b.n	8010668 <_ZN8SOFT_ARM17setupChamberPortsEv+0x2a>
	for(int j=0;j<SEGMENTNUM;j++){
 80106fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80106fc:	3301      	adds	r3, #1
 80106fe:	657b      	str	r3, [r7, #84]	; 0x54
 8010700:	e7a6      	b.n	8010650 <_ZN8SOFT_ARM17setupChamberPortsEv+0x12>
		}
	}
	int j=2;
 8010702:	2302      	movs	r3, #2
 8010704:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0;i<BELLOWNUM;i++)
 8010706:	2300      	movs	r3, #0
 8010708:	64fb      	str	r3, [r7, #76]	; 0x4c
 801070a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801070c:	2b05      	cmp	r3, #5
 801070e:	dc2f      	bgt.n	8010770 <_ZN8SOFT_ARM17setupChamberPortsEv+0x132>
			{
				CHAMBER *bellowCur=armSegments[j].bellows[i];
 8010710:	6879      	ldr	r1, [r7, #4]
 8010712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010714:	4613      	mov	r3, r2
 8010716:	009b      	lsls	r3, r3, #2
 8010718:	4413      	add	r3, r2
 801071a:	00db      	lsls	r3, r3, #3
 801071c:	4413      	add	r3, r2
 801071e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010720:	4413      	add	r3, r2
 8010722:	3316      	adds	r3, #22
 8010724:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010728:	62bb      	str	r3, [r7, #40]	; 0x28
				int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 801072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801072c:	011b      	lsls	r3, r3, #4
 801072e:	3314      	adds	r3, #20
 8010730:	627b      	str	r3, [r7, #36]	; 0x24
				bellowCur->attach(4*16+pwmPortOffset+BELLOWNUM+i, 4*16+pwmPortOffset+i, j*BELLOWNUM+i);//segment 2 changed to segment 6.
 8010732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010734:	f103 0246 	add.w	r2, r3, #70	; 0x46
 8010738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801073a:	18d1      	adds	r1, r2, r3
 801073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801073e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8010742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010744:	18d0      	adds	r0, r2, r3
 8010746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010748:	4613      	mov	r3, r2
 801074a:	005b      	lsls	r3, r3, #1
 801074c:	4413      	add	r3, r2
 801074e:	005b      	lsls	r3, r3, #1
 8010750:	461a      	mov	r2, r3
 8010752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010754:	4413      	add	r3, r2
 8010756:	4602      	mov	r2, r0
 8010758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801075a:	f7fa fd65 	bl	800b228 <_ZN7CHAMBER6attachEiii>
				bellowCur->writeOpening(initOpening);
 801075e:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8010762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010764:	f7fb f812 	bl	800b78c <_ZN7CHAMBER12writeOpeningEf>
	for(int i=0;i<BELLOWNUM;i++)
 8010768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801076a:	3301      	adds	r3, #1
 801076c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801076e:	e7cc      	b.n	801070a <_ZN8SOFT_ARM17setupChamberPortsEv+0xcc>
			}
	j=5;
 8010770:	2305      	movs	r3, #5
 8010772:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0;i<BELLOWNUM;i++)
 8010774:	2300      	movs	r3, #0
 8010776:	64bb      	str	r3, [r7, #72]	; 0x48
 8010778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801077a:	2b05      	cmp	r3, #5
 801077c:	dc2f      	bgt.n	80107de <_ZN8SOFT_ARM17setupChamberPortsEv+0x1a0>
				{
					CHAMBER *bellowCur=armSegments[j].bellows[i];
 801077e:	6879      	ldr	r1, [r7, #4]
 8010780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010782:	4613      	mov	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	4413      	add	r3, r2
 8010788:	00db      	lsls	r3, r3, #3
 801078a:	4413      	add	r3, r2
 801078c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801078e:	4413      	add	r3, r2
 8010790:	3316      	adds	r3, #22
 8010792:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010796:	623b      	str	r3, [r7, #32]
					int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 8010798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079a:	011b      	lsls	r3, r3, #4
 801079c:	3314      	adds	r3, #20
 801079e:	61fb      	str	r3, [r7, #28]
					bellowCur->attach(2*16+pwmPortOffset+i, 2*16+pwmPortOffset+BELLOWNUM+i, j*BELLOWNUM+i);//segment 5 changed to segment 7.
 80107a0:	69fb      	ldr	r3, [r7, #28]
 80107a2:	f103 0220 	add.w	r2, r3, #32
 80107a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107a8:	18d1      	adds	r1, r2, r3
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80107b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107b2:	18d0      	adds	r0, r2, r3
 80107b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107b6:	4613      	mov	r3, r2
 80107b8:	005b      	lsls	r3, r3, #1
 80107ba:	4413      	add	r3, r2
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	461a      	mov	r2, r3
 80107c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107c2:	4413      	add	r3, r2
 80107c4:	4602      	mov	r2, r0
 80107c6:	6a38      	ldr	r0, [r7, #32]
 80107c8:	f7fa fd2e 	bl	800b228 <_ZN7CHAMBER6attachEiii>
					bellowCur->writeOpening(initOpening);
 80107cc:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80107d0:	6a38      	ldr	r0, [r7, #32]
 80107d2:	f7fa ffdb 	bl	800b78c <_ZN7CHAMBER12writeOpeningEf>
	for(int i=0;i<BELLOWNUM;i++)
 80107d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107d8:	3301      	adds	r3, #1
 80107da:	64bb      	str	r3, [r7, #72]	; 0x48
 80107dc:	e7cc      	b.n	8010778 <_ZN8SOFT_ARM17setupChamberPortsEv+0x13a>
				}
	j=6;
 80107de:	2306      	movs	r3, #6
 80107e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0;i<BELLOWNUM;i++)
 80107e2:	2300      	movs	r3, #0
 80107e4:	647b      	str	r3, [r7, #68]	; 0x44
 80107e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107e8:	2b05      	cmp	r3, #5
 80107ea:	dc30      	bgt.n	801084e <_ZN8SOFT_ARM17setupChamberPortsEv+0x210>
			{
				CHAMBER *bellowCur=armSegments[j].bellows[i];
 80107ec:	6879      	ldr	r1, [r7, #4]
 80107ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80107f0:	4613      	mov	r3, r2
 80107f2:	009b      	lsls	r3, r3, #2
 80107f4:	4413      	add	r3, r2
 80107f6:	00db      	lsls	r3, r3, #3
 80107f8:	4413      	add	r3, r2
 80107fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107fc:	4413      	add	r3, r2
 80107fe:	3316      	adds	r3, #22
 8010800:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010804:	61bb      	str	r3, [r7, #24]
				int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 8010806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010808:	011b      	lsls	r3, r3, #4
 801080a:	3314      	adds	r3, #20
 801080c:	617b      	str	r3, [r7, #20]
				bellowCur->attach(pwmPortOffset+BELLOWNUM+i-4*16, pwmPortOffset+i-4*16, j*BELLOWNUM+i);//segment 2 changed to segment 6.
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	1d9a      	adds	r2, r3, #6
 8010812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010814:	4413      	add	r3, r2
 8010816:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 801081a:	697a      	ldr	r2, [r7, #20]
 801081c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801081e:	4413      	add	r3, r2
 8010820:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 8010824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010826:	4613      	mov	r3, r2
 8010828:	005b      	lsls	r3, r3, #1
 801082a:	4413      	add	r3, r2
 801082c:	005b      	lsls	r3, r3, #1
 801082e:	461a      	mov	r2, r3
 8010830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010832:	4413      	add	r3, r2
 8010834:	4602      	mov	r2, r0
 8010836:	69b8      	ldr	r0, [r7, #24]
 8010838:	f7fa fcf6 	bl	800b228 <_ZN7CHAMBER6attachEiii>
				bellowCur->writeOpening(initOpening);
 801083c:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8010840:	69b8      	ldr	r0, [r7, #24]
 8010842:	f7fa ffa3 	bl	800b78c <_ZN7CHAMBER12writeOpeningEf>
	for(int i=0;i<BELLOWNUM;i++)
 8010846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010848:	3301      	adds	r3, #1
 801084a:	647b      	str	r3, [r7, #68]	; 0x44
 801084c:	e7cb      	b.n	80107e6 <_ZN8SOFT_ARM17setupChamberPortsEv+0x1a8>
			}
	j=7;
 801084e:	2307      	movs	r3, #7
 8010850:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i=0;i<BELLOWNUM;i++)
 8010852:	2300      	movs	r3, #0
 8010854:	643b      	str	r3, [r7, #64]	; 0x40
 8010856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010858:	2b05      	cmp	r3, #5
 801085a:	dc30      	bgt.n	80108be <_ZN8SOFT_ARM17setupChamberPortsEv+0x280>
				{
					CHAMBER *bellowCur=armSegments[j].bellows[i];
 801085c:	6879      	ldr	r1, [r7, #4]
 801085e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010860:	4613      	mov	r3, r2
 8010862:	009b      	lsls	r3, r3, #2
 8010864:	4413      	add	r3, r2
 8010866:	00db      	lsls	r3, r3, #3
 8010868:	4413      	add	r3, r2
 801086a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801086c:	4413      	add	r3, r2
 801086e:	3316      	adds	r3, #22
 8010870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010874:	613b      	str	r3, [r7, #16]
					int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
 8010876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010878:	011b      	lsls	r3, r3, #4
 801087a:	3314      	adds	r3, #20
 801087c:	60fb      	str	r3, [r7, #12]
					bellowCur->attach(pwmPortOffset+i-2*16, pwmPortOffset+BELLOWNUM+i-2*16, j*BELLOWNUM+i);//segment 7 changed to segment 5.
 801087e:	68fa      	ldr	r2, [r7, #12]
 8010880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010882:	4413      	add	r3, r2
 8010884:	f1a3 0120 	sub.w	r1, r3, #32
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	1d9a      	adds	r2, r3, #6
 801088c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801088e:	4413      	add	r3, r2
 8010890:	f1a3 0020 	sub.w	r0, r3, #32
 8010894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010896:	4613      	mov	r3, r2
 8010898:	005b      	lsls	r3, r3, #1
 801089a:	4413      	add	r3, r2
 801089c:	005b      	lsls	r3, r3, #1
 801089e:	461a      	mov	r2, r3
 80108a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108a2:	4413      	add	r3, r2
 80108a4:	4602      	mov	r2, r0
 80108a6:	6938      	ldr	r0, [r7, #16]
 80108a8:	f7fa fcbe 	bl	800b228 <_ZN7CHAMBER6attachEiii>
					bellowCur->writeOpening(initOpening);
 80108ac:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 80108b0:	6938      	ldr	r0, [r7, #16]
 80108b2:	f7fa ff6b 	bl	800b78c <_ZN7CHAMBER12writeOpeningEf>
	for(int i=0;i<BELLOWNUM;i++)
 80108b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80108b8:	3301      	adds	r3, #1
 80108ba:	643b      	str	r3, [r7, #64]	; 0x40
 80108bc:	e7cb      	b.n	8010856 <_ZN8SOFT_ARM17setupChamberPortsEv+0x218>
//		CHAMBER *bellowCur=armSegments[j].bellows[0];
//		int pwmPortOffset=BUILTIN_PWM_NUM+j*16; //each pwm board has 16*3 ports, while we only need 6*2*3 on each
//		bellowCur->attach(5*16+pwmPortOffset, 5*16+pwmPortOffset+BELLOWNUM, j*BELLOWNUM);//segment 2 changed to segment 6.


}
 80108be:	bf00      	nop
 80108c0:	3758      	adds	r7, #88	; 0x58
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <_ZN8SOFT_ARM15zeroPressureAllEv>:

void SOFT_ARM::zeroPressureAll() {
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b084      	sub	sp, #16
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 80108ce:	2300      	movs	r3, #0
 80108d0:	60fb      	str	r3, [r7, #12]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2b08      	cmp	r3, #8
 80108d6:	dc1b      	bgt.n	8010910 <_ZN8SOFT_ARM15zeroPressureAllEv+0x4a>
		for(int i=0;i<BELLOWNUM;i++){
 80108d8:	2300      	movs	r3, #0
 80108da:	60bb      	str	r3, [r7, #8]
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	2b05      	cmp	r3, #5
 80108e0:	dc12      	bgt.n	8010908 <_ZN8SOFT_ARM15zeroPressureAllEv+0x42>
			armSegments[j].bellows[i]->zeroPressure();
 80108e2:	6879      	ldr	r1, [r7, #4]
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	4613      	mov	r3, r2
 80108e8:	009b      	lsls	r3, r3, #2
 80108ea:	4413      	add	r3, r2
 80108ec:	00db      	lsls	r3, r3, #3
 80108ee:	4413      	add	r3, r2
 80108f0:	68ba      	ldr	r2, [r7, #8]
 80108f2:	4413      	add	r3, r2
 80108f4:	3316      	adds	r3, #22
 80108f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fa fcb1 	bl	800b262 <_ZN7CHAMBER12zeroPressureEv>
		for(int i=0;i<BELLOWNUM;i++){
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	3301      	adds	r3, #1
 8010904:	60bb      	str	r3, [r7, #8]
 8010906:	e7e9      	b.n	80108dc <_ZN8SOFT_ARM15zeroPressureAllEv+0x16>
	for(int j=0;j<SEGMENTNUM;j++){
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	3301      	adds	r3, #1
 801090c:	60fb      	str	r3, [r7, #12]
 801090e:	e7e0      	b.n	80108d2 <_ZN8SOFT_ARM15zeroPressureAllEv+0xc>
		}
	}
}
 8010910:	bf00      	nop
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <_ZN8SOFT_ARM15zeroPositionAllEv>:

void SOFT_ARM::zeroPositionAll() {
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 8010920:	2300      	movs	r3, #0
 8010922:	60fb      	str	r3, [r7, #12]
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	2b08      	cmp	r3, #8
 8010928:	dc1b      	bgt.n	8010962 <_ZN8SOFT_ARM15zeroPositionAllEv+0x4a>
		for(int i=0;i<BELLOWNUM;i++){
 801092a:	2300      	movs	r3, #0
 801092c:	60bb      	str	r3, [r7, #8]
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	2b05      	cmp	r3, #5
 8010932:	dc12      	bgt.n	801095a <_ZN8SOFT_ARM15zeroPositionAllEv+0x42>
			armSegments[j].bellows[i]->zeroPosition();
 8010934:	6879      	ldr	r1, [r7, #4]
 8010936:	68fa      	ldr	r2, [r7, #12]
 8010938:	4613      	mov	r3, r2
 801093a:	009b      	lsls	r3, r3, #2
 801093c:	4413      	add	r3, r2
 801093e:	00db      	lsls	r3, r3, #3
 8010940:	4413      	add	r3, r2
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	4413      	add	r3, r2
 8010946:	3316      	adds	r3, #22
 8010948:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801094c:	4618      	mov	r0, r3
 801094e:	f7fa feeb 	bl	800b728 <_ZN7CHAMBER12zeroPositionEv>
		for(int i=0;i<BELLOWNUM;i++){
 8010952:	68bb      	ldr	r3, [r7, #8]
 8010954:	3301      	adds	r3, #1
 8010956:	60bb      	str	r3, [r7, #8]
 8010958:	e7e9      	b.n	801092e <_ZN8SOFT_ARM15zeroPositionAllEv+0x16>
	for(int j=0;j<SEGMENTNUM;j++){
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	3301      	adds	r3, #1
 801095e:	60fb      	str	r3, [r7, #12]
 8010960:	e7e0      	b.n	8010924 <_ZN8SOFT_ARM15zeroPositionAllEv+0xc>
		}
	}
}
 8010962:	bf00      	nop
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <_ZN8SOFT_ARM15readPressureAllEv>:



void SOFT_ARM::readPressureAll()
{
 801096a:	b590      	push	{r4, r7, lr}
 801096c:	b085      	sub	sp, #20
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
	//Read pressure information from sensorData(from CANbus) as the Chamber's pressure
	for(int j=0;j<SEGMENTNUM;j++){
 8010972:	2300      	movs	r3, #0
 8010974:	60fb      	str	r3, [r7, #12]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2b08      	cmp	r3, #8
 801097a:	dc4e      	bgt.n	8010a1a <_ZN8SOFT_ARM15readPressureAllEv+0xb0>
		for(int i=0;i<BELLOWNUM;i++){
 801097c:	2300      	movs	r3, #0
 801097e:	60bb      	str	r3, [r7, #8]
 8010980:	68bb      	ldr	r3, [r7, #8]
 8010982:	2b05      	cmp	r3, #5
 8010984:	dc45      	bgt.n	8010a12 <_ZN8SOFT_ARM15readPressureAllEv+0xa8>
			armSegments[j].bellows[i]->readPressureCan(unpackPressure(&(sensorDataBuffer[j][i])));//original absolute hpa
 8010986:	6879      	ldr	r1, [r7, #4]
 8010988:	68fa      	ldr	r2, [r7, #12]
 801098a:	4613      	mov	r3, r2
 801098c:	009b      	lsls	r3, r3, #2
 801098e:	4413      	add	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	4413      	add	r3, r2
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	4413      	add	r3, r2
 8010998:	3316      	adds	r3, #22
 801099a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 801099e:	68fa      	ldr	r2, [r7, #12]
 80109a0:	4613      	mov	r3, r2
 80109a2:	005b      	lsls	r3, r3, #1
 80109a4:	4413      	add	r3, r2
 80109a6:	005b      	lsls	r3, r3, #1
 80109a8:	68ba      	ldr	r2, [r7, #8]
 80109aa:	4413      	add	r3, r2
 80109ac:	33b8      	adds	r3, #184	; 0xb8
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	4413      	add	r3, r2
 80109b4:	3304      	adds	r3, #4
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 fa27 	bl	8010e0a <unpackPressure>
 80109bc:	4603      	mov	r3, r0
 80109be:	b21b      	sxth	r3, r3
 80109c0:	4619      	mov	r1, r3
 80109c2:	4620      	mov	r0, r4
 80109c4:	f7fa fc5d 	bl	800b282 <_ZN7CHAMBER15readPressureCanEs>
			armSegments[j].bellows[i]->readPositionCan(unpackPosition(&(sensorDataBuffer[j][i])));//original absolute hpa
 80109c8:	6879      	ldr	r1, [r7, #4]
 80109ca:	68fa      	ldr	r2, [r7, #12]
 80109cc:	4613      	mov	r3, r2
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	4413      	add	r3, r2
 80109d2:	00db      	lsls	r3, r3, #3
 80109d4:	4413      	add	r3, r2
 80109d6:	68ba      	ldr	r2, [r7, #8]
 80109d8:	4413      	add	r3, r2
 80109da:	3316      	adds	r3, #22
 80109dc:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80109e0:	68fa      	ldr	r2, [r7, #12]
 80109e2:	4613      	mov	r3, r2
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	4413      	add	r3, r2
 80109e8:	005b      	lsls	r3, r3, #1
 80109ea:	68ba      	ldr	r2, [r7, #8]
 80109ec:	4413      	add	r3, r2
 80109ee:	33b8      	adds	r3, #184	; 0xb8
 80109f0:	00db      	lsls	r3, r3, #3
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	4413      	add	r3, r2
 80109f6:	3304      	adds	r3, #4
 80109f8:	4618      	mov	r0, r3
 80109fa:	f000 fa15 	bl	8010e28 <unpackPosition>
 80109fe:	4603      	mov	r3, r0
 8010a00:	b21b      	sxth	r3, r3
 8010a02:	4619      	mov	r1, r3
 8010a04:	4620      	mov	r0, r4
 8010a06:	f7fa fe9f 	bl	800b748 <_ZN7CHAMBER15readPositionCanEs>
		for(int i=0;i<BELLOWNUM;i++){
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	3301      	adds	r3, #1
 8010a0e:	60bb      	str	r3, [r7, #8]
 8010a10:	e7b6      	b.n	8010980 <_ZN8SOFT_ARM15readPressureAllEv+0x16>
	for(int j=0;j<SEGMENTNUM;j++){
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	3301      	adds	r3, #1
 8010a16:	60fb      	str	r3, [r7, #12]
 8010a18:	e7ad      	b.n	8010976 <_ZN8SOFT_ARM15readPressureAllEv+0xc>

		}
	}
}
 8010a1a:	bf00      	nop
 8010a1c:	3714      	adds	r7, #20
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd90      	pop	{r4, r7, pc}
 8010a22:	0000      	movs	r0, r0
 8010a24:	0000      	movs	r0, r0
	...

08010a28 <_ZN8SOFT_ARM15writeCommandAllEv>:

void SOFT_ARM::writeCommandAll()
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b088      	sub	sp, #32
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
	for(int j=0;j<SEGMENTNUM;j++){
 8010a30:	2300      	movs	r3, #0
 8010a32:	61fb      	str	r3, [r7, #28]
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	2b08      	cmp	r3, #8
 8010a38:	f300 8085 	bgt.w	8010b46 <_ZN8SOFT_ARM15writeCommandAllEv+0x11e>
		SOFT_ARM_SEGMENT* armSegCur=&armSegments[j];
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	22a4      	movs	r2, #164	; 0xa4
 8010a40:	fb02 f303 	mul.w	r3, r2, r3
 8010a44:	687a      	ldr	r2, [r7, #4]
 8010a46:	4413      	add	r3, r2
 8010a48:	617b      	str	r3, [r7, #20]
			for(int i=0;i<BELLOWNUM;i++){
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	61bb      	str	r3, [r7, #24]
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	2b05      	cmp	r3, #5
 8010a52:	dc74      	bgt.n	8010b3e <_ZN8SOFT_ARM15writeCommandAllEv+0x116>
				CHAMBER *bellowCur=armSegCur->bellows[i];
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	69ba      	ldr	r2, [r7, #24]
 8010a58:	3216      	adds	r2, #22
 8010a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a5e:	613b      	str	r3, [r7, #16]
				//write pressure command from commandData to the chamber
				if(commandData.data[j][i].commandType==pressureCommandType){
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	69bb      	ldr	r3, [r7, #24]
 8010a64:	69f9      	ldr	r1, [r7, #28]
 8010a66:	461a      	mov	r2, r3
 8010a68:	0052      	lsls	r2, r2, #1
 8010a6a:	441a      	add	r2, r3
 8010a6c:	0093      	lsls	r3, r2, #2
 8010a6e:	461a      	mov	r2, r3
 8010a70:	460b      	mov	r3, r1
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	440b      	add	r3, r1
 8010a76:	00db      	lsls	r3, r3, #3
 8010a78:	4413      	add	r3, r2
 8010a7a:	4403      	add	r3, r0
 8010a7c:	f603 43a2 	addw	r3, r3, #3234	; 0xca2
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d121      	bne.n	8010aca <_ZN8SOFT_ARM15writeCommandAllEv+0xa2>
					float pressureCommandTemp=commandData.data[j][i].values[0]*100;//gauge PA
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	69bb      	ldr	r3, [r7, #24]
 8010a8a:	69f9      	ldr	r1, [r7, #28]
 8010a8c:	461a      	mov	r2, r3
 8010a8e:	0052      	lsls	r2, r2, #1
 8010a90:	441a      	add	r2, r3
 8010a92:	0093      	lsls	r3, r2, #2
 8010a94:	461a      	mov	r2, r3
 8010a96:	460b      	mov	r3, r1
 8010a98:	00db      	lsls	r3, r3, #3
 8010a9a:	440b      	add	r3, r1
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	4413      	add	r3, r2
 8010aa0:	4403      	add	r3, r0
 8010aa2:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8010aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010aaa:	461a      	mov	r2, r3
 8010aac:	2364      	movs	r3, #100	; 0x64
 8010aae:	fb03 f302 	mul.w	r3, r3, r2
 8010ab2:	ee07 3a90 	vmov	s15, r3
 8010ab6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010aba:	edc7 7a02 	vstr	s15, [r7, #8]
					bellowCur->writePressure(pressureCommandTemp);
 8010abe:	ed97 0a02 	vldr	s0, [r7, #8]
 8010ac2:	6938      	ldr	r0, [r7, #16]
 8010ac4:	f7fa fc06 	bl	800b2d4 <_ZN7CHAMBER13writePressureEf>
 8010ac8:	e035      	b.n	8010b36 <_ZN8SOFT_ARM15writeCommandAllEv+0x10e>
				}
				else if(commandData.data[j][i].commandType==openingCommandType){
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	69f9      	ldr	r1, [r7, #28]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	0052      	lsls	r2, r2, #1
 8010ad4:	441a      	add	r2, r3
 8010ad6:	0093      	lsls	r3, r2, #2
 8010ad8:	461a      	mov	r2, r3
 8010ada:	460b      	mov	r3, r1
 8010adc:	00db      	lsls	r3, r3, #3
 8010ade:	440b      	add	r3, r1
 8010ae0:	00db      	lsls	r3, r3, #3
 8010ae2:	4413      	add	r3, r2
 8010ae4:	4403      	add	r3, r0
 8010ae6:	f603 43a2 	addw	r3, r3, #3234	; 0xca2
 8010aea:	881b      	ldrh	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d122      	bne.n	8010b36 <_ZN8SOFT_ARM15writeCommandAllEv+0x10e>
					float openingCommandTemp=((int16_t)commandData.data[j][i].values[0])*3.0517578125e-5;//values[0]/32767
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	69f9      	ldr	r1, [r7, #28]
 8010af6:	461a      	mov	r2, r3
 8010af8:	0052      	lsls	r2, r2, #1
 8010afa:	441a      	add	r2, r3
 8010afc:	0093      	lsls	r3, r2, #2
 8010afe:	461a      	mov	r2, r3
 8010b00:	460b      	mov	r3, r1
 8010b02:	00db      	lsls	r3, r3, #3
 8010b04:	440b      	add	r3, r1
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	4413      	add	r3, r2
 8010b0a:	4403      	add	r3, r0
 8010b0c:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8010b10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010b14:	ee07 3a90 	vmov	s15, r3
 8010b18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010b1c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8010b50 <_ZN8SOFT_ARM15writeCommandAllEv+0x128>
 8010b20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8010b28:	edc7 7a03 	vstr	s15, [r7, #12]
					bellowCur->writeOpening(openingCommandTemp);
 8010b2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8010b30:	6938      	ldr	r0, [r7, #16]
 8010b32:	f7fa fe2b 	bl	800b78c <_ZN7CHAMBER12writeOpeningEf>
			for(int i=0;i<BELLOWNUM;i++){
 8010b36:	69bb      	ldr	r3, [r7, #24]
 8010b38:	3301      	adds	r3, #1
 8010b3a:	61bb      	str	r3, [r7, #24]
 8010b3c:	e787      	b.n	8010a4e <_ZN8SOFT_ARM15writeCommandAllEv+0x26>
	for(int j=0;j<SEGMENTNUM;j++){
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	3301      	adds	r3, #1
 8010b42:	61fb      	str	r3, [r7, #28]
 8010b44:	e776      	b.n	8010a34 <_ZN8SOFT_ARM15writeCommandAllEv+0xc>
//				else
//					bellowCur->writeOpening(-0.8);
//				}
//		}
	}
}
 8010b46:	bf00      	nop
 8010b48:	3720      	adds	r7, #32
 8010b4a:	46bd      	mov	sp, r7
 8010b4c:	bd80      	pop	{r7, pc}
 8010b4e:	bf00      	nop
 8010b50:	00000000 	.word	0x00000000
 8010b54:	3f000000 	.word	0x3f000000

08010b58 <_ZN8SOFT_ARM16maintainPressureEff>:

void SOFT_ARM::maintainPressure(float posP, float negP) {
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	ed87 0a02 	vstr	s0, [r7, #8]
 8010b64:	edc7 0a01 	vstr	s1, [r7, #4]
	pSource.maintainPressure(posP,posP+10000);
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	f241 0338 	movw	r3, #4152	; 0x1038
 8010b6e:	4413      	add	r3, r2
 8010b70:	edd7 7a02 	vldr	s15, [r7, #8]
 8010b74:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8010bb4 <_ZN8SOFT_ARM16maintainPressureEff+0x5c>
 8010b78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010b7c:	eef0 0a67 	vmov.f32	s1, s15
 8010b80:	ed97 0a02 	vldr	s0, [r7, #8]
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fb f867 	bl	800bc58 <_ZN15PRESSURE_SOURCE16maintainPressureEff>
	pSink.maintainPressure(negP-10000,negP);
 8010b8a:	68fa      	ldr	r2, [r7, #12]
 8010b8c:	f241 0370 	movw	r3, #4208	; 0x1070
 8010b90:	4413      	add	r3, r2
 8010b92:	edd7 7a01 	vldr	s15, [r7, #4]
 8010b96:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8010bb4 <_ZN8SOFT_ARM16maintainPressureEff+0x5c>
 8010b9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b9e:	edd7 0a01 	vldr	s1, [r7, #4]
 8010ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fb f856 	bl	800bc58 <_ZN15PRESSURE_SOURCE16maintainPressureEff>
}
 8010bac:	bf00      	nop
 8010bae:	3710      	adds	r7, #16
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	461c4000 	.word	0x461c4000

08010bb8 <_ZN8SOFT_ARM15execInfoCommandEPc>:

void SOFT_ARM::execInfoCommand(char *infoBuf){
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
	if(infoBuf[0]=='z'){
 8010bc2:	683b      	ldr	r3, [r7, #0]
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	2b7a      	cmp	r3, #122	; 0x7a
 8010bc8:	d105      	bne.n	8010bd6 <_ZN8SOFT_ARM15execInfoCommandEPc+0x1e>
		zeroPressureAll();
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7ff fe7b 	bl	80108c6 <_ZN8SOFT_ARM15zeroPressureAllEv>
		zeroPositionAll();
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7ff fea1 	bl	8010918 <_ZN8SOFT_ARM15zeroPositionAllEv>
	}if(infoBuf[0]=='o'){

	}
}
 8010bd6:	bf00      	nop
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <_ZN8SOFT_ARM10setupPumpsEiiii>:

void SOFT_ARM::setupPumps(int d1,int a1, int d2, int a2) {
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b084      	sub	sp, #16
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	60f8      	str	r0, [r7, #12]
 8010be6:	60b9      	str	r1, [r7, #8]
 8010be8:	607a      	str	r2, [r7, #4]
 8010bea:	603b      	str	r3, [r7, #0]
	pSource.attach(d1, a1);
 8010bec:	68fa      	ldr	r2, [r7, #12]
 8010bee:	f241 0338 	movw	r3, #4152	; 0x1038
 8010bf2:	4413      	add	r3, r2
 8010bf4:	687a      	ldr	r2, [r7, #4]
 8010bf6:	68b9      	ldr	r1, [r7, #8]
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fa fffd 	bl	800bbf8 <_ZN15PRESSURE_SOURCE6attachEii>
	pSink.attach(d2, a2);
 8010bfe:	68fa      	ldr	r2, [r7, #12]
 8010c00:	f241 0370 	movw	r3, #4208	; 0x1070
 8010c04:	4413      	add	r3, r2
 8010c06:	69ba      	ldr	r2, [r7, #24]
 8010c08:	6839      	ldr	r1, [r7, #0]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fa fff4 	bl	800bbf8 <_ZN15PRESSURE_SOURCE6attachEii>

}
 8010c10:	bf00      	nop
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <_ZN16SOFT_ARM_SEGMENTC1Ei>:


/*************************SOFT ARM**************************
 *
 ***********************************************************/
SOFT_ARM_SEGMENT::SOFT_ARM_SEGMENT(int num)
 8010c18:	b590      	push	{r4, r7, lr}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
{
	basePlatform = new PNEUDRIVE(num);
 8010c22:	2084      	movs	r0, #132	; 0x84
 8010c24:	f000 fb7d 	bl	8011322 <_Znwj>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	461c      	mov	r4, r3
 8010c2c:	6839      	ldr	r1, [r7, #0]
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f7fb fbfe 	bl	800c430 <_ZN9PNEUDRIVEC1Ei>
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	655c      	str	r4, [r3, #84]	; 0x54
	for(int i=0;i<BELLOWNUM;i++)
 8010c38:	2300      	movs	r3, #0
 8010c3a:	60fb      	str	r3, [r7, #12]
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	2b05      	cmp	r3, #5
 8010c40:	dc0f      	bgt.n	8010c62 <_ZN16SOFT_ARM_SEGMENTC1Ei+0x4a>
	{
		bellows[i]=basePlatform->chambers[i];
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c46:	689a      	ldr	r2, [r3, #8]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	009b      	lsls	r3, r3, #2
 8010c4c:	4413      	add	r3, r2
 8010c4e:	6819      	ldr	r1, [r3, #0]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	3216      	adds	r2, #22
 8010c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<BELLOWNUM;i++)
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	60fb      	str	r3, [r7, #12]
 8010c60:	e7ec      	b.n	8010c3c <_ZN16SOFT_ARM_SEGMENTC1Ei+0x24>
	}

}
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	4618      	mov	r0, r3
 8010c66:	3714      	adds	r7, #20
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd90      	pop	{r4, r7, pc}

08010c6c <unpackQuaternion>:
	qCom->maxLocHigh=maxLoc>>1;
	qCom->maxLocLow=maxLoc;
	qCom->maxSign=((uint16_t)(((uint16_t)qOri->imuData[maxLoc])&0x8000))>>15;
}

void unpackQuaternion(QUATERNIONCOMPACT *qCom,QUATERNION *qOri){
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b088      	sub	sp, #32
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
 8010c74:	6039      	str	r1, [r7, #0]
	int32_t lastNumOri=0;
 8010c76:	2300      	movs	r3, #0
 8010c78:	61fb      	str	r3, [r7, #28]
	uint16_t maxLoc=(uint16_t)(qCom->maxLocHigh<<1 | qCom->maxLocLow);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	785b      	ldrb	r3, [r3, #1]
 8010c7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	005b      	lsls	r3, r3, #1
 8010c86:	b21a      	sxth	r2, r3
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	78db      	ldrb	r3, [r3, #3]
 8010c8c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	b21b      	sxth	r3, r3
 8010c94:	4313      	orrs	r3, r2
 8010c96:	b21b      	sxth	r3, r3
 8010c98:	837b      	strh	r3, [r7, #26]
	int16_t qRes0=(int16_t)(((uint16_t)qCom->imuData0)<<COMPACT_SHIFT_BIT);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	009b      	lsls	r3, r3, #2
 8010ca6:	833b      	strh	r3, [r7, #24]
	int16_t qRes1=(int16_t)(((uint16_t)qCom->imuData1)<<COMPACT_SHIFT_BIT);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	885b      	ldrh	r3, [r3, #2]
 8010cac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010cb0:	b29b      	uxth	r3, r3
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	82fb      	strh	r3, [r7, #22]
	int16_t qRes2=(int16_t)(((uint16_t)qCom->imuData2)<<COMPACT_SHIFT_BIT);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	889b      	ldrh	r3, [r3, #4]
 8010cba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	009b      	lsls	r3, r3, #2
 8010cc2:	82bb      	strh	r3, [r7, #20]

	uint32_t sum=qRes0*qRes0+qRes1*qRes1+qRes2*qRes2;
 8010cc4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8010cc8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8010ccc:	fb02 f203 	mul.w	r2, r2, r3
 8010cd0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010cd4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8010cd8:	fb01 f303 	mul.w	r3, r1, r3
 8010cdc:	441a      	add	r2, r3
 8010cde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010ce2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8010ce6:	fb01 f303 	mul.w	r3, r1, r3
 8010cea:	4413      	add	r3, r2
 8010cec:	613b      	str	r3, [r7, #16]
	const int maxNum=(uint32_t)(1<<30);
 8010cee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010cf2:	60fb      	str	r3, [r7, #12]
	lastNumOri=(sum>=maxNum?0:fastSqrt32((uint32_t)(maxNum-sum)));
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	693a      	ldr	r2, [r7, #16]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d207      	bcs.n	8010d0c <unpackQuaternion+0xa0>
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	1ad3      	subs	r3, r2, r3
 8010d02:	4618      	mov	r0, r3
 8010d04:	f000 f8c1 	bl	8010e8a <fastSqrt32>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	e000      	b.n	8010d0e <unpackQuaternion+0xa2>
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	61fb      	str	r3, [r7, #28]
	int16_t lastNum=qCom->maxSign?-lastNumOri:lastNumOri;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	795b      	ldrb	r3, [r3, #5]
 8010d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d18:	b2db      	uxtb	r3, r3
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d005      	beq.n	8010d2a <unpackQuaternion+0xbe>
 8010d1e:	69fb      	ldr	r3, [r7, #28]
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	425b      	negs	r3, r3
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	b21b      	sxth	r3, r3
 8010d28:	e001      	b.n	8010d2e <unpackQuaternion+0xc2>
 8010d2a:	69fb      	ldr	r3, [r7, #28]
 8010d2c:	b21b      	sxth	r3, r3
 8010d2e:	817b      	strh	r3, [r7, #10]
	if(maxLoc==0)
 8010d30:	8b7b      	ldrh	r3, [r7, #26]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d10c      	bne.n	8010d50 <unpackQuaternion+0xe4>
	{
		qOri->imuData[1]=qRes0;
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	8b3a      	ldrh	r2, [r7, #24]
 8010d3a:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes1;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	8afa      	ldrh	r2, [r7, #22]
 8010d40:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	8aba      	ldrh	r2, [r7, #20]
 8010d46:	80da      	strh	r2, [r3, #6]
		qOri->imuData[0]=lastNum;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	897a      	ldrh	r2, [r7, #10]
 8010d4c:	801a      	strh	r2, [r3, #0]
		qOri->imuData[0]=qRes0;
		qOri->imuData[1]=qRes1;
		qOri->imuData[2]=qRes2;
		qOri->imuData[3]=lastNum;
	}
}
 8010d4e:	e02b      	b.n	8010da8 <unpackQuaternion+0x13c>
	else if (maxLoc==1){
 8010d50:	8b7b      	ldrh	r3, [r7, #26]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d10c      	bne.n	8010d70 <unpackQuaternion+0x104>
		qOri->imuData[0]=qRes0;
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	8b3a      	ldrh	r2, [r7, #24]
 8010d5a:	801a      	strh	r2, [r3, #0]
		qOri->imuData[2]=qRes1;
 8010d5c:	683b      	ldr	r3, [r7, #0]
 8010d5e:	8afa      	ldrh	r2, [r7, #22]
 8010d60:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=qRes2;
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	8aba      	ldrh	r2, [r7, #20]
 8010d66:	80da      	strh	r2, [r3, #6]
		qOri->imuData[1]=lastNum;
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	897a      	ldrh	r2, [r7, #10]
 8010d6c:	805a      	strh	r2, [r3, #2]
}
 8010d6e:	e01b      	b.n	8010da8 <unpackQuaternion+0x13c>
	else if(maxLoc==2){
 8010d70:	8b7b      	ldrh	r3, [r7, #26]
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	d10c      	bne.n	8010d90 <unpackQuaternion+0x124>
		qOri->imuData[0]=qRes0;
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	8b3a      	ldrh	r2, [r7, #24]
 8010d7a:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	8afa      	ldrh	r2, [r7, #22]
 8010d80:	805a      	strh	r2, [r3, #2]
		qOri->imuData[3]=qRes2;
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	8aba      	ldrh	r2, [r7, #20]
 8010d86:	80da      	strh	r2, [r3, #6]
		qOri->imuData[2]=lastNum;
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	897a      	ldrh	r2, [r7, #10]
 8010d8c:	809a      	strh	r2, [r3, #4]
}
 8010d8e:	e00b      	b.n	8010da8 <unpackQuaternion+0x13c>
		qOri->imuData[0]=qRes0;
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	8b3a      	ldrh	r2, [r7, #24]
 8010d94:	801a      	strh	r2, [r3, #0]
		qOri->imuData[1]=qRes1;
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	8afa      	ldrh	r2, [r7, #22]
 8010d9a:	805a      	strh	r2, [r3, #2]
		qOri->imuData[2]=qRes2;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	8aba      	ldrh	r2, [r7, #20]
 8010da0:	809a      	strh	r2, [r3, #4]
		qOri->imuData[3]=lastNum;
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	897a      	ldrh	r2, [r7, #10]
 8010da6:	80da      	strh	r2, [r3, #6]
}
 8010da8:	bf00      	nop
 8010daa:	3720      	adds	r7, #32
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <decodeSensorData>:


void decodeSensorData(SENSORDATACOMPACT *scom, SENSORDATA *s,int16_t pOff,int16_t disOff) {
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	4611      	mov	r1, r2
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	80fb      	strh	r3, [r7, #6]
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	80bb      	strh	r3, [r7, #4]

	s->pressure=(int16_t)(unpackPressure(scom))-pOff; //gauge hpa
 8010dc6:	68f8      	ldr	r0, [r7, #12]
 8010dc8:	f000 f81f 	bl	8010e0a <unpackPressure>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	461a      	mov	r2, r3
 8010dd0:	88fb      	ldrh	r3, [r7, #6]
 8010dd2:	1ad3      	subs	r3, r2, r3
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	b21a      	sxth	r2, r3
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	801a      	strh	r2, [r3, #0]
	s->distance= (int16_t)(unpackPosition(scom))-disOff;
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f000 f823 	bl	8010e28 <unpackPosition>
 8010de2:	4603      	mov	r3, r0
 8010de4:	461a      	mov	r2, r3
 8010de6:	88bb      	ldrh	r3, [r7, #4]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	b21a      	sxth	r2, r3
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	805a      	strh	r2, [r3, #2]
	unpackQuaternion(&(scom->quaternionCom),&(s->quaternion));
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	1c9a      	adds	r2, r3, #2
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	3304      	adds	r3, #4
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	4610      	mov	r0, r2
 8010dfe:	f7ff ff35 	bl	8010c6c <unpackQuaternion>
}
 8010e02:	bf00      	nop
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <unpackPressure>:
uint16_t unpackPressure(SENSORDATACOMPACT *scom){
 8010e0a:	b480      	push	{r7}
 8010e0c:	b083      	sub	sp, #12
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
#if COMPACT_VERSION_PRESSURE_HPA==1
	return scom->pressure;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010e1a:	b29b      	uxth	r3, r3
#else
	return scom->pressure*10;
#endif
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <unpackPosition>:
uint16_t unpackPosition(SENSORDATACOMPACT *scom){
 8010e28:	b480      	push	{r7}
 8010e2a:	b085      	sub	sp, #20
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
	uint16_t pos=0;
 8010e30:	2300      	movs	r3, #0
 8010e32:	81fb      	strh	r3, [r7, #14]
#if COMPACT_VERSION_PRESSURE_HPA==1
	pos= ((uint16_t)(scom->distance<<3)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	785b      	ldrb	r3, [r3, #1]
 8010e38:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010e3c:	b2db      	uxtb	r3, r3
 8010e3e:	b29b      	uxth	r3, r3
 8010e40:	00db      	lsls	r3, r3, #3
 8010e42:	b29a      	uxth	r2, r3
				+(uint16_t)(scom->quaternionCom.distanceBit2<<2)
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	78db      	ldrb	r3, [r3, #3]
 8010e48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	b29b      	uxth	r3, r3
 8010e50:	009b      	lsls	r3, r3, #2
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	4413      	add	r3, r2
 8010e56:	b29a      	uxth	r2, r3
				+(uint16_t)(scom->quaternionCom.distanceBit1<<1)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	795b      	ldrb	r3, [r3, #5]
 8010e5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	b29b      	uxth	r3, r3
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	b29b      	uxth	r3, r3
 8010e68:	4413      	add	r3, r2
 8010e6a:	b29a      	uxth	r2, r3
				+(uint16_t)(scom->quaternionCom.distanceBit0));
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	79db      	ldrb	r3, [r3, #7]
 8010e70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	b29b      	uxth	r3, r3
	pos= ((uint16_t)(scom->distance<<3)
 8010e78:	4413      	add	r3, r2
 8010e7a:	81fb      	strh	r3, [r7, #14]
#else
	pos=scom->distance;
#endif
	return pos;
 8010e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3714      	adds	r7, #20
 8010e82:	46bd      	mov	sp, r7
 8010e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e88:	4770      	bx	lr

08010e8a <fastSqrt32>:

static unsigned int fastSqrt32(unsigned long n)
{
 8010e8a:	b480      	push	{r7}
 8010e8c:	b085      	sub	sp, #20
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
    unsigned int c = 0x8000;
 8010e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e96:	60fb      	str	r3, [r7, #12]
    unsigned int g = 0x8000;
 8010e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e9c:	60bb      	str	r3, [r7, #8]

    for(;;) {
        if(g*g > n)
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	68ba      	ldr	r2, [r7, #8]
 8010ea2:	fb02 f303 	mul.w	r3, r2, r3
 8010ea6:	687a      	ldr	r2, [r7, #4]
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d203      	bcs.n	8010eb4 <fastSqrt32+0x2a>
            g ^= c;
 8010eac:	68ba      	ldr	r2, [r7, #8]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	4053      	eors	r3, r2
 8010eb2:	60bb      	str	r3, [r7, #8]
        c >>= 1;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	085b      	lsrs	r3, r3, #1
 8010eb8:	60fb      	str	r3, [r7, #12]
        if(c == 0)
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d101      	bne.n	8010ec4 <fastSqrt32+0x3a>
            return g;
 8010ec0:	68bb      	ldr	r3, [r7, #8]
 8010ec2:	e004      	b.n	8010ece <fastSqrt32+0x44>
        g |= c;
 8010ec4:	68ba      	ldr	r2, [r7, #8]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	60bb      	str	r3, [r7, #8]
        if(g*g > n)
 8010ecc:	e7e7      	b.n	8010e9e <fastSqrt32+0x14>
    }
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3714      	adds	r7, #20
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr
	...

08010edc <setup>:
#include "spiSlave.h"
#include <SoftArm.h>
SOFT_ARM softArm;


void setup() {
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af02      	add	r7, sp, #8
	/*setup 1000Hz control loop*/
	setPeriodControlLoop(10);
 8010ee2:	200a      	movs	r0, #10
 8010ee4:	f7fb fbee 	bl	800c6c4 <setPeriodControlLoop>

	/*setup 50Hz serial display loop*/
	setPeriodSendLoop(100);
 8010ee8:	2064      	movs	r0, #100	; 0x64
 8010eea:	f7fb fbfb 	bl	800c6e4 <setPeriodSendLoop>

	/*soft arm chambers' PWM port mapping*/
	softArm.setupChamberPorts();
 8010eee:	480a      	ldr	r0, [pc, #40]	; (8010f18 <setup+0x3c>)
 8010ef0:	f7ff fba5 	bl	801063e <_ZN8SOFT_ARM17setupChamberPortsEv>

	/*soft arm Pumps' port mapping*/
	softArm.setupPumps(0,BUILTIN_ANA_IN_NUM+0,1,BUILTIN_ANA_IN_NUM+1);
 8010ef4:	2307      	movs	r3, #7
 8010ef6:	9300      	str	r3, [sp, #0]
 8010ef8:	2301      	movs	r3, #1
 8010efa:	2206      	movs	r2, #6
 8010efc:	2100      	movs	r1, #0
 8010efe:	4806      	ldr	r0, [pc, #24]	; (8010f18 <setup+0x3c>)
 8010f00:	f7ff fe6d 	bl	8010bde <_ZN8SOFT_ARM10setupPumpsEiiii>

	/*start canBus receive*/
	canConfig();
 8010f04:	f7fd fb90 	bl	800e628 <canConfig>

	/**********start the SPI slave in DMA*****/
	spiSlaveStart();
 8010f08:	f000 f99e 	bl	8011248 <spiSlaveStart>

	/*********start the rosserial node*******/
	rosNodeSetup();
 8010f0c:	f7fe fd16 	bl	800f93c <_Z12rosNodeSetupv>

}
 8010f10:	bf00      	nop
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bd80      	pop	{r7, pc}
 8010f16:	bf00      	nop
 8010f18:	200013d4 	.word	0x200013d4

08010f1c <loop>:

void loop() {
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	af00      	add	r7, sp, #0

	/***************Handle string commands from the raspberry pi********************/
	//softArm.execInfoCommand(softArm.commandData.infos);
	softArm.maintainPressure(100000,-60000);
 8010f20:	eddf 0a09 	vldr	s1, [pc, #36]	; 8010f48 <loop+0x2c>
 8010f24:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8010f4c <loop+0x30>
 8010f28:	4809      	ldr	r0, [pc, #36]	; (8010f50 <loop+0x34>)
 8010f2a:	f7ff fe15 	bl	8010b58 <_ZN8SOFT_ARM16maintainPressureEff>

	//update chamber's pressure from the CANbus************************/
	softArm.readPressureAll();
 8010f2e:	4808      	ldr	r0, [pc, #32]	; (8010f50 <loop+0x34>)
 8010f30:	f7ff fd1b 	bl	801096a <_ZN8SOFT_ARM15readPressureAllEv>

	/**Write the command of each chamber, either pressure or opening type*/
	softArm.writeCommandAll();
 8010f34:	4806      	ldr	r0, [pc, #24]	; (8010f50 <loop+0x34>)
 8010f36:	f7ff fd77 	bl	8010a28 <_ZN8SOFT_ARM15writeCommandAllEv>

	/*rosserial publish**/
	rosNodePub();
 8010f3a:	f7fe fd1f 	bl	800f97c <_Z10rosNodePubv>

	/**rosserial spinonce routine***/
	rosNodeSpinOnce();
 8010f3e:	f7fe fd13 	bl	800f968 <_Z15rosNodeSpinOncev>


}
 8010f42:	bf00      	nop
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	c76a6000 	.word	0xc76a6000
 8010f4c:	47c35000 	.word	0x47c35000
 8010f50:	200013d4 	.word	0x200013d4

08010f54 <serialDisplay>:

/*serial output using DMA*/
void serialDisplay() {
 8010f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f56:	b09d      	sub	sp, #116	; 0x74
 8010f58:	af10      	add	r7, sp, #64	; 0x40

	printf("Time:%10lu    PressureCommand:Pressure(HPa)    Distance(mm)  pSource:%d HPa  pSink:%d HPa\r\n",
 8010f5a:	f7fb fb33 	bl	800c5c4 <millis>
 8010f5e:	4601      	mov	r1, r0
			millis(),(int)(softArm.pSource.pressure/100),(int)(softArm.pSink.pressure/100));
 8010f60:	4a9f      	ldr	r2, [pc, #636]	; (80111e0 <serialDisplay+0x28c>)
 8010f62:	f241 0364 	movw	r3, #4196	; 0x1064
 8010f66:	4413      	add	r3, r2
 8010f68:	ed93 7a00 	vldr	s14, [r3]
 8010f6c:	eddf 6a9d 	vldr	s13, [pc, #628]	; 80111e4 <serialDisplay+0x290>
 8010f70:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("Time:%10lu    PressureCommand:Pressure(HPa)    Distance(mm)  pSource:%d HPa  pSink:%d HPa\r\n",
 8010f74:	eebd 6ae7 	vcvt.s32.f32	s12, s15
			millis(),(int)(softArm.pSource.pressure/100),(int)(softArm.pSink.pressure/100));
 8010f78:	4a99      	ldr	r2, [pc, #612]	; (80111e0 <serialDisplay+0x28c>)
 8010f7a:	f241 039c 	movw	r3, #4252	; 0x109c
 8010f7e:	4413      	add	r3, r2
 8010f80:	ed93 7a00 	vldr	s14, [r3]
 8010f84:	eddf 6a97 	vldr	s13, [pc, #604]	; 80111e4 <serialDisplay+0x290>
 8010f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
	printf("Time:%10lu    PressureCommand:Pressure(HPa)    Distance(mm)  pSource:%d HPa  pSink:%d HPa\r\n",
 8010f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010f90:	ee17 3a90 	vmov	r3, s15
 8010f94:	ee16 2a10 	vmov	r2, s12
 8010f98:	4893      	ldr	r0, [pc, #588]	; (80111e8 <serialDisplay+0x294>)
 8010f9a:	f001 f9a9 	bl	80122f0 <iprintf>
	for (int i = 0; i < SEGMENTNUM; i++) {
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fa4:	2b08      	cmp	r3, #8
 8010fa6:	f300 8117 	bgt.w	80111d8 <serialDisplay+0x284>
		printf(
				"     %4d:%4d   %4d:%4d   %4d:%4d   %4d:%4d   %4d:%4d   %4d:%4d    |     %d,  %d, %d, %d, %d, %d\r\n",
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure/100),
 8010faa:	498d      	ldr	r1, [pc, #564]	; (80111e0 <serialDisplay+0x28c>)
 8010fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fae:	4613      	mov	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	4413      	add	r3, r2
 8010fb4:	00db      	lsls	r3, r3, #3
 8010fb6:	440b      	add	r3, r1
 8010fb8:	f603 4398 	addw	r3, r3, #3224	; 0xc98
 8010fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8010fc0:	469c      	mov	ip, r3
				softArm.commandData.data[i][0].values[0],(int)(softArm.armSegments[i].bellows[0]->pressure/100),
 8010fc2:	4a87      	ldr	r2, [pc, #540]	; (80111e0 <serialDisplay+0x28c>)
 8010fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc6:	21a4      	movs	r1, #164	; 0xa4
 8010fc8:	fb01 f303 	mul.w	r3, r1, r3
 8010fcc:	4413      	add	r3, r2
 8010fce:	3358      	adds	r3, #88	; 0x58
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8010fd6:	eddf 6a83 	vldr	s13, [pc, #524]	; 80111e4 <serialDisplay+0x290>
 8010fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
		printf(
 8010fde:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure/100),
 8010fe2:	497f      	ldr	r1, [pc, #508]	; (80111e0 <serialDisplay+0x28c>)
 8010fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	00db      	lsls	r3, r3, #3
 8010fea:	4413      	add	r3, r2
 8010fec:	00db      	lsls	r3, r3, #3
 8010fee:	440b      	add	r3, r1
 8010ff0:	f603 43a4 	addw	r3, r3, #3236	; 0xca4
 8010ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8010ff8:	469e      	mov	lr, r3
				softArm.commandData.data[i][1].values[0],(int)(softArm.armSegments[i].bellows[1]->pressure/100),
 8010ffa:	4a79      	ldr	r2, [pc, #484]	; (80111e0 <serialDisplay+0x28c>)
 8010ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ffe:	21a4      	movs	r1, #164	; 0xa4
 8011000:	fb01 f303 	mul.w	r3, r1, r3
 8011004:	4413      	add	r3, r2
 8011006:	335c      	adds	r3, #92	; 0x5c
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 801100e:	eddf 6a75 	vldr	s13, [pc, #468]	; 80111e4 <serialDisplay+0x290>
 8011012:	eec7 7a26 	vdiv.f32	s15, s14, s13
		printf(
 8011016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801101a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure/100),
 801101e:	4970      	ldr	r1, [pc, #448]	; (80111e0 <serialDisplay+0x28c>)
 8011020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011022:	4613      	mov	r3, r2
 8011024:	00db      	lsls	r3, r3, #3
 8011026:	4413      	add	r3, r2
 8011028:	00db      	lsls	r3, r3, #3
 801102a:	440b      	add	r3, r1
 801102c:	f503 634b 	add.w	r3, r3, #3248	; 0xcb0
 8011030:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8011034:	623b      	str	r3, [r7, #32]
				softArm.commandData.data[i][2].values[0],(int)(softArm.armSegments[i].bellows[2]->pressure/100),
 8011036:	4a6a      	ldr	r2, [pc, #424]	; (80111e0 <serialDisplay+0x28c>)
 8011038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801103a:	21a4      	movs	r1, #164	; 0xa4
 801103c:	fb01 f303 	mul.w	r3, r1, r3
 8011040:	4413      	add	r3, r2
 8011042:	3360      	adds	r3, #96	; 0x60
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 801104a:	eddf 6a66 	vldr	s13, [pc, #408]	; 80111e4 <serialDisplay+0x290>
 801104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
		printf(
 8011052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011056:	edc7 7a07 	vstr	s15, [r7, #28]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure/100),
 801105a:	4961      	ldr	r1, [pc, #388]	; (80111e0 <serialDisplay+0x28c>)
 801105c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801105e:	4613      	mov	r3, r2
 8011060:	00db      	lsls	r3, r3, #3
 8011062:	4413      	add	r3, r2
 8011064:	00db      	lsls	r3, r3, #3
 8011066:	440b      	add	r3, r1
 8011068:	f603 43bc 	addw	r3, r3, #3260	; 0xcbc
 801106c:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 8011070:	61bb      	str	r3, [r7, #24]
				softArm.commandData.data[i][3].values[0],(int)(softArm.armSegments[i].bellows[3]->pressure/100),
 8011072:	4a5b      	ldr	r2, [pc, #364]	; (80111e0 <serialDisplay+0x28c>)
 8011074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011076:	21a4      	movs	r1, #164	; 0xa4
 8011078:	fb01 f303 	mul.w	r3, r1, r3
 801107c:	4413      	add	r3, r2
 801107e:	3364      	adds	r3, #100	; 0x64
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8011086:	eddf 6a57 	vldr	s13, [pc, #348]	; 80111e4 <serialDisplay+0x290>
 801108a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		printf(
 801108e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011092:	edc7 7a05 	vstr	s15, [r7, #20]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure/100),
 8011096:	4952      	ldr	r1, [pc, #328]	; (80111e0 <serialDisplay+0x28c>)
 8011098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801109a:	4613      	mov	r3, r2
 801109c:	00db      	lsls	r3, r3, #3
 801109e:	4413      	add	r3, r2
 80110a0:	00db      	lsls	r3, r3, #3
 80110a2:	440b      	add	r3, r1
 80110a4:	f603 43c8 	addw	r3, r3, #3272	; 0xcc8
 80110a8:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 80110ac:	613b      	str	r3, [r7, #16]
				softArm.commandData.data[i][4].values[0],(int)(softArm.armSegments[i].bellows[4]->pressure/100),
 80110ae:	4a4c      	ldr	r2, [pc, #304]	; (80111e0 <serialDisplay+0x28c>)
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	21a4      	movs	r1, #164	; 0xa4
 80110b4:	fb01 f303 	mul.w	r3, r1, r3
 80110b8:	4413      	add	r3, r2
 80110ba:	3368      	adds	r3, #104	; 0x68
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80110c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80111e4 <serialDisplay+0x290>
 80110c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
		printf(
 80110ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110ce:	edc7 7a03 	vstr	s15, [r7, #12]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure/100),
 80110d2:	4943      	ldr	r1, [pc, #268]	; (80111e0 <serialDisplay+0x28c>)
 80110d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110d6:	4613      	mov	r3, r2
 80110d8:	00db      	lsls	r3, r3, #3
 80110da:	4413      	add	r3, r2
 80110dc:	00db      	lsls	r3, r3, #3
 80110de:	440b      	add	r3, r1
 80110e0:	f603 43d4 	addw	r3, r3, #3284	; 0xcd4
 80110e4:	f9b3 3000 	ldrsh.w	r3, [r3]
		printf(
 80110e8:	60bb      	str	r3, [r7, #8]
				softArm.commandData.data[i][5].values[0],(int)(softArm.armSegments[i].bellows[5]->pressure/100),
 80110ea:	4a3d      	ldr	r2, [pc, #244]	; (80111e0 <serialDisplay+0x28c>)
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	21a4      	movs	r1, #164	; 0xa4
 80110f0:	fb01 f303 	mul.w	r3, r1, r3
 80110f4:	4413      	add	r3, r2
 80110f6:	336c      	adds	r3, #108	; 0x6c
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 80110fe:	eddf 6a39 	vldr	s13, [pc, #228]	; 80111e4 <serialDisplay+0x290>
 8011102:	eec7 7a26 	vdiv.f32	s15, s14, s13
		printf(
 8011106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801110a:	edc7 7a01 	vstr	s15, [r7, #4]
				softArm.armSegments[i].bellows[0]->position,
 801110e:	4a34      	ldr	r2, [pc, #208]	; (80111e0 <serialDisplay+0x28c>)
 8011110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011112:	21a4      	movs	r1, #164	; 0xa4
 8011114:	fb01 f303 	mul.w	r3, r1, r3
 8011118:	4413      	add	r3, r2
 801111a:	3358      	adds	r3, #88	; 0x58
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
		printf(
 8011122:	603b      	str	r3, [r7, #0]
				softArm.armSegments[i].bellows[1]->position,
 8011124:	492e      	ldr	r1, [pc, #184]	; (80111e0 <serialDisplay+0x28c>)
 8011126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011128:	23a4      	movs	r3, #164	; 0xa4
 801112a:	fb03 f302 	mul.w	r3, r3, r2
 801112e:	440b      	add	r3, r1
 8011130:	335c      	adds	r3, #92	; 0x5c
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
		printf(
 8011138:	461e      	mov	r6, r3
				softArm.armSegments[i].bellows[2]->position,
 801113a:	4929      	ldr	r1, [pc, #164]	; (80111e0 <serialDisplay+0x28c>)
 801113c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801113e:	23a4      	movs	r3, #164	; 0xa4
 8011140:	fb03 f302 	mul.w	r3, r3, r2
 8011144:	440b      	add	r3, r1
 8011146:	3360      	adds	r3, #96	; 0x60
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
		printf(
 801114e:	461d      	mov	r5, r3
				softArm.armSegments[i].bellows[3]->position,
 8011150:	4923      	ldr	r1, [pc, #140]	; (80111e0 <serialDisplay+0x28c>)
 8011152:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011154:	23a4      	movs	r3, #164	; 0xa4
 8011156:	fb03 f302 	mul.w	r3, r3, r2
 801115a:	440b      	add	r3, r1
 801115c:	3364      	adds	r3, #100	; 0x64
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
		printf(
 8011164:	461c      	mov	r4, r3
				softArm.armSegments[i].bellows[4]->position,
 8011166:	491e      	ldr	r1, [pc, #120]	; (80111e0 <serialDisplay+0x28c>)
 8011168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801116a:	23a4      	movs	r3, #164	; 0xa4
 801116c:	fb03 f302 	mul.w	r3, r3, r2
 8011170:	440b      	add	r3, r1
 8011172:	3368      	adds	r3, #104	; 0x68
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
		printf(
 801117a:	4618      	mov	r0, r3
				softArm.armSegments[i].bellows[5]->position);
 801117c:	4918      	ldr	r1, [pc, #96]	; (80111e0 <serialDisplay+0x28c>)
 801117e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011180:	23a4      	movs	r3, #164	; 0xa4
 8011182:	fb03 f302 	mul.w	r3, r3, r2
 8011186:	440b      	add	r3, r1
 8011188:	336c      	adds	r3, #108	; 0x6c
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f9b3 30b0 	ldrsh.w	r3, [r3, #176]	; 0xb0
		printf(
 8011190:	930e      	str	r3, [sp, #56]	; 0x38
 8011192:	900d      	str	r0, [sp, #52]	; 0x34
 8011194:	940c      	str	r4, [sp, #48]	; 0x30
 8011196:	950b      	str	r5, [sp, #44]	; 0x2c
 8011198:	960a      	str	r6, [sp, #40]	; 0x28
 801119a:	683a      	ldr	r2, [r7, #0]
 801119c:	9209      	str	r2, [sp, #36]	; 0x24
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	9208      	str	r2, [sp, #32]
 80111a2:	68ba      	ldr	r2, [r7, #8]
 80111a4:	9207      	str	r2, [sp, #28]
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	9206      	str	r2, [sp, #24]
 80111aa:	693a      	ldr	r2, [r7, #16]
 80111ac:	9205      	str	r2, [sp, #20]
 80111ae:	697a      	ldr	r2, [r7, #20]
 80111b0:	9204      	str	r2, [sp, #16]
 80111b2:	69ba      	ldr	r2, [r7, #24]
 80111b4:	9203      	str	r2, [sp, #12]
 80111b6:	69fa      	ldr	r2, [r7, #28]
 80111b8:	9202      	str	r2, [sp, #8]
 80111ba:	6a3b      	ldr	r3, [r7, #32]
 80111bc:	9301      	str	r3, [sp, #4]
 80111be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	4673      	mov	r3, lr
 80111c4:	ee16 2a10 	vmov	r2, s12
 80111c8:	4661      	mov	r1, ip
 80111ca:	4808      	ldr	r0, [pc, #32]	; (80111ec <serialDisplay+0x298>)
 80111cc:	f001 f890 	bl	80122f0 <iprintf>
	for (int i = 0; i < SEGMENTNUM; i++) {
 80111d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d2:	3301      	adds	r3, #1
 80111d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111d6:	e6e4      	b.n	8010fa2 <serialDisplay+0x4e>
	}
}
 80111d8:	bf00      	nop
 80111da:	3734      	adds	r7, #52	; 0x34
 80111dc:	46bd      	mov	sp, r7
 80111de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111e0:	200013d4 	.word	0x200013d4
 80111e4:	42c80000 	.word	0x42c80000
 80111e8:	08015c68 	.word	0x08015c68
 80111ec:	08015cc4 	.word	0x08015cc4

080111f0 <serial3Callback>:

//called when serial input receive string with ending '\r\n'
void serial3Callback(char *pSerialReceiveBuffer) {
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b082      	sub	sp, #8
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
	softArm.execInfoCommand(pSerialReceiveBuffer);
 80111f8:	6879      	ldr	r1, [r7, #4]
 80111fa:	4803      	ldr	r0, [pc, #12]	; (8011208 <serial3Callback+0x18>)
 80111fc:	f7ff fcdc 	bl	8010bb8 <_ZN8SOFT_ARM15execInfoCommandEPc>
////		softArm.canBusCommand[1] = 0xEF;
////		softArm.canBusCommand[2] = 0xFE;
////		softArm.canBusCommand[3] = 0xAF;
////		canSend();
//	}
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	200013d4 	.word	0x200013d4

0801120c <_Z41__static_initialization_and_destruction_0ii>:
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d107      	bne.n	801122c <_Z41__static_initialization_and_destruction_0ii+0x20>
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011222:	4293      	cmp	r3, r2
 8011224:	d102      	bne.n	801122c <_Z41__static_initialization_and_destruction_0ii+0x20>
SOFT_ARM softArm;
 8011226:	4803      	ldr	r0, [pc, #12]	; (8011234 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8011228:	f7ff f9e2 	bl	80105f0 <_ZN8SOFT_ARMC1Ev>
}
 801122c:	bf00      	nop
 801122e:	3708      	adds	r7, #8
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}
 8011234:	200013d4 	.word	0x200013d4

08011238 <_GLOBAL__sub_I_softArm>:
 8011238:	b580      	push	{r7, lr}
 801123a:	af00      	add	r7, sp, #0
 801123c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011240:	2001      	movs	r0, #1
 8011242:	f7ff ffe3 	bl	801120c <_Z41__static_initialization_and_destruction_0ii>
 8011246:	bd80      	pop	{r7, pc}

08011248 <spiSlaveStart>:
extern SOFT_ARM softArm;

SPI_HandleTypeDef *hspiSlave=&hspi1;


void spiSlaveStart(){
 8011248:	b580      	push	{r7, lr}
 801124a:	af00      	add	r7, sp, #0
	HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 801124c:	f240 2392 	movw	r3, #658	; 0x292
 8011250:	4a03      	ldr	r2, [pc, #12]	; (8011260 <spiSlaveStart+0x18>)
 8011252:	4904      	ldr	r1, [pc, #16]	; (8011264 <spiSlaveStart+0x1c>)
 8011254:	4804      	ldr	r0, [pc, #16]	; (8011268 <spiSlaveStart+0x20>)
 8011256:	f7f3 f9cd 	bl	80045f4 <HAL_SPI_TransmitReceive_DMA>
}
 801125a:	bf00      	nop
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	20001b48 	.word	0x20001b48
 8011264:	20001dda 	.word	0x20001dda
 8011268:	2000a8b0 	.word	0x2000a8b0

0801126c <slaveSPITxRxCpltCallback>:



void slaveSPITxRxCpltCallback(SPI_HandleTypeDef *hspi){
 801126c:	b580      	push	{r7, lr}
 801126e:	b082      	sub	sp, #8
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 8011274:	4b0d      	ldr	r3, [pc, #52]	; (80112ac <slaveSPITxRxCpltCallback+0x40>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	429a      	cmp	r2, r3
 801127c:	d111      	bne.n	80112a2 <slaveSPITxRxCpltCallback+0x36>

		/*Success on receiving data. Update the actual commandData*/
		memcpy(&(softArm.commandData),&(softArm.commandDataBuffer),sizeof(SPIDATA_R));
 801127e:	4a0c      	ldr	r2, [pc, #48]	; (80112b0 <slaveSPITxRxCpltCallback+0x44>)
 8011280:	4b0b      	ldr	r3, [pc, #44]	; (80112b0 <slaveSPITxRxCpltCallback+0x44>)
 8011282:	f602 4098 	addw	r0, r2, #3224	; 0xc98
 8011286:	f203 7374 	addw	r3, r3, #1908	; 0x774
 801128a:	f240 2292 	movw	r2, #658	; 0x292
 801128e:	4619      	mov	r1, r3
 8011290:	f000 f950 	bl	8011534 <memcpy>

		/*Re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 8011294:	f240 2392 	movw	r3, #658	; 0x292
 8011298:	4a06      	ldr	r2, [pc, #24]	; (80112b4 <slaveSPITxRxCpltCallback+0x48>)
 801129a:	4907      	ldr	r1, [pc, #28]	; (80112b8 <slaveSPITxRxCpltCallback+0x4c>)
 801129c:	4807      	ldr	r0, [pc, #28]	; (80112bc <slaveSPITxRxCpltCallback+0x50>)
 801129e:	f7f3 f9a9 	bl	80045f4 <HAL_SPI_TransmitReceive_DMA>
	}
}
 80112a2:	bf00      	nop
 80112a4:	3708      	adds	r7, #8
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	20000190 	.word	0x20000190
 80112b0:	200013d4 	.word	0x200013d4
 80112b4:	20001b48 	.word	0x20001b48
 80112b8:	20001dda 	.word	0x20001dda
 80112bc:	2000a8b0 	.word	0x2000a8b0

080112c0 <slaveSPIErrorCallback>:

void slaveSPIErrorCallback(SPI_HandleTypeDef *hspi){
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b084      	sub	sp, #16
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
	if(hspi==hspiSlave){
 80112c8:	4b0f      	ldr	r3, [pc, #60]	; (8011308 <slaveSPIErrorCallback+0x48>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	687a      	ldr	r2, [r7, #4]
 80112ce:	429a      	cmp	r2, r3
 80112d0:	d115      	bne.n	80112fe <slaveSPIErrorCallback+0x3e>
		HAL_SPI_StateTypeDef hspistate=HAL_SPI_GetState(hspi);
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f7f3 fc38 	bl	8004b48 <HAL_SPI_GetState>
 80112d8:	4603      	mov	r3, r0
 80112da:	73fb      	strb	r3, [r7, #15]
		uint32_t hspierror=HAL_SPI_GetError(hspi);
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7f3 fc41 	bl	8004b64 <HAL_SPI_GetError>
 80112e2:	60b8      	str	r0, [r7, #8]
		printf("Error communication with RPI4, SPI state: %d, SPI Errorcode:%d\r\n",hspistate,hspierror);
 80112e4:	7bfb      	ldrb	r3, [r7, #15]
 80112e6:	68ba      	ldr	r2, [r7, #8]
 80112e8:	4619      	mov	r1, r3
 80112ea:	4808      	ldr	r0, [pc, #32]	; (801130c <slaveSPIErrorCallback+0x4c>)
 80112ec:	f001 f800 	bl	80122f0 <iprintf>
		/*If an error occurs, we only need to re-arm the SPI slave, ready to receive and transmit*/
		HAL_SPI_TransmitReceive_DMA(&hspi1, (uint8_t *)(&softArm.sensorData),  (uint8_t *)(&softArm.commandDataBuffer), sizeof(SPIDATA_R));
 80112f0:	f240 2392 	movw	r3, #658	; 0x292
 80112f4:	4a06      	ldr	r2, [pc, #24]	; (8011310 <slaveSPIErrorCallback+0x50>)
 80112f6:	4907      	ldr	r1, [pc, #28]	; (8011314 <slaveSPIErrorCallback+0x54>)
 80112f8:	4807      	ldr	r0, [pc, #28]	; (8011318 <slaveSPIErrorCallback+0x58>)
 80112fa:	f7f3 f97b 	bl	80045f4 <HAL_SPI_TransmitReceive_DMA>
	}
}
 80112fe:	bf00      	nop
 8011300:	3710      	adds	r7, #16
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
 8011306:	bf00      	nop
 8011308:	20000190 	.word	0x20000190
 801130c:	08015d28 	.word	0x08015d28
 8011310:	20001b48 	.word	0x20001b48
 8011314:	20001dda 	.word	0x20001dda
 8011318:	2000a8b0 	.word	0x2000a8b0

0801131c <__cxa_pure_virtual>:
 801131c:	b508      	push	{r3, lr}
 801131e:	f000 f825 	bl	801136c <_ZSt9terminatev>

08011322 <_Znwj>:
 8011322:	b510      	push	{r4, lr}
 8011324:	2800      	cmp	r0, #0
 8011326:	bf14      	ite	ne
 8011328:	4604      	movne	r4, r0
 801132a:	2401      	moveq	r4, #1
 801132c:	4620      	mov	r0, r4
 801132e:	f000 f8f9 	bl	8011524 <malloc>
 8011332:	b930      	cbnz	r0, 8011342 <_Znwj+0x20>
 8011334:	f000 f806 	bl	8011344 <_ZSt15get_new_handlerv>
 8011338:	b908      	cbnz	r0, 801133e <_Znwj+0x1c>
 801133a:	f000 f8ba 	bl	80114b2 <abort>
 801133e:	4780      	blx	r0
 8011340:	e7f4      	b.n	801132c <_Znwj+0xa>
 8011342:	bd10      	pop	{r4, pc}

08011344 <_ZSt15get_new_handlerv>:
 8011344:	4b02      	ldr	r3, [pc, #8]	; (8011350 <_ZSt15get_new_handlerv+0xc>)
 8011346:	6818      	ldr	r0, [r3, #0]
 8011348:	f3bf 8f5b 	dmb	ish
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop
 8011350:	20002484 	.word	0x20002484

08011354 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8011354:	b508      	push	{r3, lr}
 8011356:	4780      	blx	r0
 8011358:	f000 f8ab 	bl	80114b2 <abort>

0801135c <_ZSt13get_terminatev>:
 801135c:	4b02      	ldr	r3, [pc, #8]	; (8011368 <_ZSt13get_terminatev+0xc>)
 801135e:	6818      	ldr	r0, [r3, #0]
 8011360:	f3bf 8f5b 	dmb	ish
 8011364:	4770      	bx	lr
 8011366:	bf00      	nop
 8011368:	20000194 	.word	0x20000194

0801136c <_ZSt9terminatev>:
 801136c:	b508      	push	{r3, lr}
 801136e:	f7ff fff5 	bl	801135c <_ZSt13get_terminatev>
 8011372:	f7ff ffef 	bl	8011354 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08011378 <round>:
 8011378:	ee10 3a90 	vmov	r3, s1
 801137c:	b530      	push	{r4, r5, lr}
 801137e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8011382:	f2a4 31ff 	subw	r1, r4, #1023	; 0x3ff
 8011386:	2913      	cmp	r1, #19
 8011388:	ee10 5a90 	vmov	r5, s1
 801138c:	ee10 2a10 	vmov	r2, s0
 8011390:	dc17      	bgt.n	80113c2 <round+0x4a>
 8011392:	2900      	cmp	r1, #0
 8011394:	da09      	bge.n	80113aa <round+0x32>
 8011396:	3101      	adds	r1, #1
 8011398:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801139c:	d103      	bne.n	80113a6 <round+0x2e>
 801139e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80113a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80113a6:	2200      	movs	r2, #0
 80113a8:	e024      	b.n	80113f4 <round+0x7c>
 80113aa:	4815      	ldr	r0, [pc, #84]	; (8011400 <round+0x88>)
 80113ac:	4108      	asrs	r0, r1
 80113ae:	4203      	tst	r3, r0
 80113b0:	d100      	bne.n	80113b4 <round+0x3c>
 80113b2:	b16a      	cbz	r2, 80113d0 <round+0x58>
 80113b4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80113b8:	410b      	asrs	r3, r1
 80113ba:	442b      	add	r3, r5
 80113bc:	ea23 0300 	bic.w	r3, r3, r0
 80113c0:	e7f1      	b.n	80113a6 <round+0x2e>
 80113c2:	2933      	cmp	r1, #51	; 0x33
 80113c4:	dd05      	ble.n	80113d2 <round+0x5a>
 80113c6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80113ca:	d101      	bne.n	80113d0 <round+0x58>
 80113cc:	ee30 0b00 	vadd.f64	d0, d0, d0
 80113d0:	bd30      	pop	{r4, r5, pc}
 80113d2:	f2a4 4013 	subw	r0, r4, #1043	; 0x413
 80113d6:	f04f 34ff 	mov.w	r4, #4294967295
 80113da:	40c4      	lsrs	r4, r0
 80113dc:	4222      	tst	r2, r4
 80113de:	d0f7      	beq.n	80113d0 <round+0x58>
 80113e0:	2001      	movs	r0, #1
 80113e2:	f1c1 0133 	rsb	r1, r1, #51	; 0x33
 80113e6:	fa00 f101 	lsl.w	r1, r0, r1
 80113ea:	1852      	adds	r2, r2, r1
 80113ec:	bf28      	it	cs
 80113ee:	181b      	addcs	r3, r3, r0
 80113f0:	ea22 0204 	bic.w	r2, r2, r4
 80113f4:	4619      	mov	r1, r3
 80113f6:	4610      	mov	r0, r2
 80113f8:	ec41 0b10 	vmov	d0, r0, r1
 80113fc:	e7e8      	b.n	80113d0 <round+0x58>
 80113fe:	bf00      	nop
 8011400:	000fffff 	.word	0x000fffff
 8011404:	00000000 	.word	0x00000000

08011408 <sqrtf>:
 8011408:	b500      	push	{lr}
 801140a:	ed2d 8b02 	vpush	{d8}
 801140e:	b08b      	sub	sp, #44	; 0x2c
 8011410:	eeb0 8a40 	vmov.f32	s16, s0
 8011414:	f000 f848 	bl	80114a8 <__ieee754_sqrtf>
 8011418:	4b21      	ldr	r3, [pc, #132]	; (80114a0 <sqrtf+0x98>)
 801141a:	f993 3000 	ldrsb.w	r3, [r3]
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	d028      	beq.n	8011474 <sqrtf+0x6c>
 8011422:	eeb4 8a48 	vcmp.f32	s16, s16
 8011426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142a:	d623      	bvs.n	8011474 <sqrtf+0x6c>
 801142c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011434:	d51e      	bpl.n	8011474 <sqrtf+0x6c>
 8011436:	2201      	movs	r2, #1
 8011438:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
 801143c:	9200      	str	r2, [sp, #0]
 801143e:	4a19      	ldr	r2, [pc, #100]	; (80114a4 <sqrtf+0x9c>)
 8011440:	9201      	str	r2, [sp, #4]
 8011442:	2200      	movs	r2, #0
 8011444:	9208      	str	r2, [sp, #32]
 8011446:	ed8d 8b04 	vstr	d8, [sp, #16]
 801144a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801144e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8011498 <sqrtf+0x90>
 8011452:	b9a3      	cbnz	r3, 801147e <sqrtf+0x76>
 8011454:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011458:	4668      	mov	r0, sp
 801145a:	f000 f828 	bl	80114ae <matherr>
 801145e:	b1a0      	cbz	r0, 801148a <sqrtf+0x82>
 8011460:	9b08      	ldr	r3, [sp, #32]
 8011462:	b11b      	cbz	r3, 801146c <sqrtf+0x64>
 8011464:	f000 f834 	bl	80114d0 <__errno>
 8011468:	9b08      	ldr	r3, [sp, #32]
 801146a:	6003      	str	r3, [r0, #0]
 801146c:	ed9d 0b06 	vldr	d0, [sp, #24]
 8011470:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8011474:	b00b      	add	sp, #44	; 0x2c
 8011476:	ecbd 8b02 	vpop	{d8}
 801147a:	f85d fb04 	ldr.w	pc, [sp], #4
 801147e:	2b02      	cmp	r3, #2
 8011480:	ee87 6b07 	vdiv.f64	d6, d7, d7
 8011484:	ed8d 6b06 	vstr	d6, [sp, #24]
 8011488:	d1e6      	bne.n	8011458 <sqrtf+0x50>
 801148a:	f000 f821 	bl	80114d0 <__errno>
 801148e:	2321      	movs	r3, #33	; 0x21
 8011490:	6003      	str	r3, [r0, #0]
 8011492:	e7e5      	b.n	8011460 <sqrtf+0x58>
 8011494:	f3af 8000 	nop.w
	...
 80114a0:	20000198 	.word	0x20000198
 80114a4:	08015e90 	.word	0x08015e90

080114a8 <__ieee754_sqrtf>:
 80114a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80114ac:	4770      	bx	lr

080114ae <matherr>:
 80114ae:	2000      	movs	r0, #0
 80114b0:	4770      	bx	lr

080114b2 <abort>:
 80114b2:	b508      	push	{r3, lr}
 80114b4:	2006      	movs	r0, #6
 80114b6:	f000 ffdd 	bl	8012474 <raise>
 80114ba:	2001      	movs	r0, #1
 80114bc:	f004 fa46 	bl	801594c <_exit>

080114c0 <calloc>:
 80114c0:	4b02      	ldr	r3, [pc, #8]	; (80114cc <calloc+0xc>)
 80114c2:	460a      	mov	r2, r1
 80114c4:	4601      	mov	r1, r0
 80114c6:	6818      	ldr	r0, [r3, #0]
 80114c8:	f000 b847 	b.w	801155a <_calloc_r>
 80114cc:	2000019c 	.word	0x2000019c

080114d0 <__errno>:
 80114d0:	4b01      	ldr	r3, [pc, #4]	; (80114d8 <__errno+0x8>)
 80114d2:	6818      	ldr	r0, [r3, #0]
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	2000019c 	.word	0x2000019c

080114dc <__libc_init_array>:
 80114dc:	b570      	push	{r4, r5, r6, lr}
 80114de:	4e0d      	ldr	r6, [pc, #52]	; (8011514 <__libc_init_array+0x38>)
 80114e0:	4c0d      	ldr	r4, [pc, #52]	; (8011518 <__libc_init_array+0x3c>)
 80114e2:	1ba4      	subs	r4, r4, r6
 80114e4:	10a4      	asrs	r4, r4, #2
 80114e6:	2500      	movs	r5, #0
 80114e8:	42a5      	cmp	r5, r4
 80114ea:	d109      	bne.n	8011500 <__libc_init_array+0x24>
 80114ec:	4e0b      	ldr	r6, [pc, #44]	; (801151c <__libc_init_array+0x40>)
 80114ee:	4c0c      	ldr	r4, [pc, #48]	; (8011520 <__libc_init_array+0x44>)
 80114f0:	f004 fa2e 	bl	8015950 <_init>
 80114f4:	1ba4      	subs	r4, r4, r6
 80114f6:	10a4      	asrs	r4, r4, #2
 80114f8:	2500      	movs	r5, #0
 80114fa:	42a5      	cmp	r5, r4
 80114fc:	d105      	bne.n	801150a <__libc_init_array+0x2e>
 80114fe:	bd70      	pop	{r4, r5, r6, pc}
 8011500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011504:	4798      	blx	r3
 8011506:	3501      	adds	r5, #1
 8011508:	e7ee      	b.n	80114e8 <__libc_init_array+0xc>
 801150a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801150e:	4798      	blx	r3
 8011510:	3501      	adds	r5, #1
 8011512:	e7f2      	b.n	80114fa <__libc_init_array+0x1e>
 8011514:	080161c0 	.word	0x080161c0
 8011518:	080161c0 	.word	0x080161c0
 801151c:	080161c0 	.word	0x080161c0
 8011520:	080161cc 	.word	0x080161cc

08011524 <malloc>:
 8011524:	4b02      	ldr	r3, [pc, #8]	; (8011530 <malloc+0xc>)
 8011526:	4601      	mov	r1, r0
 8011528:	6818      	ldr	r0, [r3, #0]
 801152a:	f000 b873 	b.w	8011614 <_malloc_r>
 801152e:	bf00      	nop
 8011530:	2000019c 	.word	0x2000019c

08011534 <memcpy>:
 8011534:	b510      	push	{r4, lr}
 8011536:	1e43      	subs	r3, r0, #1
 8011538:	440a      	add	r2, r1
 801153a:	4291      	cmp	r1, r2
 801153c:	d100      	bne.n	8011540 <memcpy+0xc>
 801153e:	bd10      	pop	{r4, pc}
 8011540:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011548:	e7f7      	b.n	801153a <memcpy+0x6>

0801154a <memset>:
 801154a:	4402      	add	r2, r0
 801154c:	4603      	mov	r3, r0
 801154e:	4293      	cmp	r3, r2
 8011550:	d100      	bne.n	8011554 <memset+0xa>
 8011552:	4770      	bx	lr
 8011554:	f803 1b01 	strb.w	r1, [r3], #1
 8011558:	e7f9      	b.n	801154e <memset+0x4>

0801155a <_calloc_r>:
 801155a:	b538      	push	{r3, r4, r5, lr}
 801155c:	fb02 f401 	mul.w	r4, r2, r1
 8011560:	4621      	mov	r1, r4
 8011562:	f000 f857 	bl	8011614 <_malloc_r>
 8011566:	4605      	mov	r5, r0
 8011568:	b118      	cbz	r0, 8011572 <_calloc_r+0x18>
 801156a:	4622      	mov	r2, r4
 801156c:	2100      	movs	r1, #0
 801156e:	f7ff ffec 	bl	801154a <memset>
 8011572:	4628      	mov	r0, r5
 8011574:	bd38      	pop	{r3, r4, r5, pc}
	...

08011578 <_free_r>:
 8011578:	b538      	push	{r3, r4, r5, lr}
 801157a:	4605      	mov	r5, r0
 801157c:	2900      	cmp	r1, #0
 801157e:	d045      	beq.n	801160c <_free_r+0x94>
 8011580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011584:	1f0c      	subs	r4, r1, #4
 8011586:	2b00      	cmp	r3, #0
 8011588:	bfb8      	it	lt
 801158a:	18e4      	addlt	r4, r4, r3
 801158c:	f003 f9f2 	bl	8014974 <__malloc_lock>
 8011590:	4a1f      	ldr	r2, [pc, #124]	; (8011610 <_free_r+0x98>)
 8011592:	6813      	ldr	r3, [r2, #0]
 8011594:	4610      	mov	r0, r2
 8011596:	b933      	cbnz	r3, 80115a6 <_free_r+0x2e>
 8011598:	6063      	str	r3, [r4, #4]
 801159a:	6014      	str	r4, [r2, #0]
 801159c:	4628      	mov	r0, r5
 801159e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115a2:	f003 b9e8 	b.w	8014976 <__malloc_unlock>
 80115a6:	42a3      	cmp	r3, r4
 80115a8:	d90c      	bls.n	80115c4 <_free_r+0x4c>
 80115aa:	6821      	ldr	r1, [r4, #0]
 80115ac:	1862      	adds	r2, r4, r1
 80115ae:	4293      	cmp	r3, r2
 80115b0:	bf04      	itt	eq
 80115b2:	681a      	ldreq	r2, [r3, #0]
 80115b4:	685b      	ldreq	r3, [r3, #4]
 80115b6:	6063      	str	r3, [r4, #4]
 80115b8:	bf04      	itt	eq
 80115ba:	1852      	addeq	r2, r2, r1
 80115bc:	6022      	streq	r2, [r4, #0]
 80115be:	6004      	str	r4, [r0, #0]
 80115c0:	e7ec      	b.n	801159c <_free_r+0x24>
 80115c2:	4613      	mov	r3, r2
 80115c4:	685a      	ldr	r2, [r3, #4]
 80115c6:	b10a      	cbz	r2, 80115cc <_free_r+0x54>
 80115c8:	42a2      	cmp	r2, r4
 80115ca:	d9fa      	bls.n	80115c2 <_free_r+0x4a>
 80115cc:	6819      	ldr	r1, [r3, #0]
 80115ce:	1858      	adds	r0, r3, r1
 80115d0:	42a0      	cmp	r0, r4
 80115d2:	d10b      	bne.n	80115ec <_free_r+0x74>
 80115d4:	6820      	ldr	r0, [r4, #0]
 80115d6:	4401      	add	r1, r0
 80115d8:	1858      	adds	r0, r3, r1
 80115da:	4282      	cmp	r2, r0
 80115dc:	6019      	str	r1, [r3, #0]
 80115de:	d1dd      	bne.n	801159c <_free_r+0x24>
 80115e0:	6810      	ldr	r0, [r2, #0]
 80115e2:	6852      	ldr	r2, [r2, #4]
 80115e4:	605a      	str	r2, [r3, #4]
 80115e6:	4401      	add	r1, r0
 80115e8:	6019      	str	r1, [r3, #0]
 80115ea:	e7d7      	b.n	801159c <_free_r+0x24>
 80115ec:	d902      	bls.n	80115f4 <_free_r+0x7c>
 80115ee:	230c      	movs	r3, #12
 80115f0:	602b      	str	r3, [r5, #0]
 80115f2:	e7d3      	b.n	801159c <_free_r+0x24>
 80115f4:	6820      	ldr	r0, [r4, #0]
 80115f6:	1821      	adds	r1, r4, r0
 80115f8:	428a      	cmp	r2, r1
 80115fa:	bf04      	itt	eq
 80115fc:	6811      	ldreq	r1, [r2, #0]
 80115fe:	6852      	ldreq	r2, [r2, #4]
 8011600:	6062      	str	r2, [r4, #4]
 8011602:	bf04      	itt	eq
 8011604:	1809      	addeq	r1, r1, r0
 8011606:	6021      	streq	r1, [r4, #0]
 8011608:	605c      	str	r4, [r3, #4]
 801160a:	e7c7      	b.n	801159c <_free_r+0x24>
 801160c:	bd38      	pop	{r3, r4, r5, pc}
 801160e:	bf00      	nop
 8011610:	20002488 	.word	0x20002488

08011614 <_malloc_r>:
 8011614:	b570      	push	{r4, r5, r6, lr}
 8011616:	1ccd      	adds	r5, r1, #3
 8011618:	f025 0503 	bic.w	r5, r5, #3
 801161c:	3508      	adds	r5, #8
 801161e:	2d0c      	cmp	r5, #12
 8011620:	bf38      	it	cc
 8011622:	250c      	movcc	r5, #12
 8011624:	2d00      	cmp	r5, #0
 8011626:	4606      	mov	r6, r0
 8011628:	db01      	blt.n	801162e <_malloc_r+0x1a>
 801162a:	42a9      	cmp	r1, r5
 801162c:	d903      	bls.n	8011636 <_malloc_r+0x22>
 801162e:	230c      	movs	r3, #12
 8011630:	6033      	str	r3, [r6, #0]
 8011632:	2000      	movs	r0, #0
 8011634:	bd70      	pop	{r4, r5, r6, pc}
 8011636:	f003 f99d 	bl	8014974 <__malloc_lock>
 801163a:	4a21      	ldr	r2, [pc, #132]	; (80116c0 <_malloc_r+0xac>)
 801163c:	6814      	ldr	r4, [r2, #0]
 801163e:	4621      	mov	r1, r4
 8011640:	b991      	cbnz	r1, 8011668 <_malloc_r+0x54>
 8011642:	4c20      	ldr	r4, [pc, #128]	; (80116c4 <_malloc_r+0xb0>)
 8011644:	6823      	ldr	r3, [r4, #0]
 8011646:	b91b      	cbnz	r3, 8011650 <_malloc_r+0x3c>
 8011648:	4630      	mov	r0, r6
 801164a:	f000 fed5 	bl	80123f8 <_sbrk_r>
 801164e:	6020      	str	r0, [r4, #0]
 8011650:	4629      	mov	r1, r5
 8011652:	4630      	mov	r0, r6
 8011654:	f000 fed0 	bl	80123f8 <_sbrk_r>
 8011658:	1c43      	adds	r3, r0, #1
 801165a:	d124      	bne.n	80116a6 <_malloc_r+0x92>
 801165c:	230c      	movs	r3, #12
 801165e:	6033      	str	r3, [r6, #0]
 8011660:	4630      	mov	r0, r6
 8011662:	f003 f988 	bl	8014976 <__malloc_unlock>
 8011666:	e7e4      	b.n	8011632 <_malloc_r+0x1e>
 8011668:	680b      	ldr	r3, [r1, #0]
 801166a:	1b5b      	subs	r3, r3, r5
 801166c:	d418      	bmi.n	80116a0 <_malloc_r+0x8c>
 801166e:	2b0b      	cmp	r3, #11
 8011670:	d90f      	bls.n	8011692 <_malloc_r+0x7e>
 8011672:	600b      	str	r3, [r1, #0]
 8011674:	50cd      	str	r5, [r1, r3]
 8011676:	18cc      	adds	r4, r1, r3
 8011678:	4630      	mov	r0, r6
 801167a:	f003 f97c 	bl	8014976 <__malloc_unlock>
 801167e:	f104 000b 	add.w	r0, r4, #11
 8011682:	1d23      	adds	r3, r4, #4
 8011684:	f020 0007 	bic.w	r0, r0, #7
 8011688:	1ac3      	subs	r3, r0, r3
 801168a:	d0d3      	beq.n	8011634 <_malloc_r+0x20>
 801168c:	425a      	negs	r2, r3
 801168e:	50e2      	str	r2, [r4, r3]
 8011690:	e7d0      	b.n	8011634 <_malloc_r+0x20>
 8011692:	428c      	cmp	r4, r1
 8011694:	684b      	ldr	r3, [r1, #4]
 8011696:	bf16      	itet	ne
 8011698:	6063      	strne	r3, [r4, #4]
 801169a:	6013      	streq	r3, [r2, #0]
 801169c:	460c      	movne	r4, r1
 801169e:	e7eb      	b.n	8011678 <_malloc_r+0x64>
 80116a0:	460c      	mov	r4, r1
 80116a2:	6849      	ldr	r1, [r1, #4]
 80116a4:	e7cc      	b.n	8011640 <_malloc_r+0x2c>
 80116a6:	1cc4      	adds	r4, r0, #3
 80116a8:	f024 0403 	bic.w	r4, r4, #3
 80116ac:	42a0      	cmp	r0, r4
 80116ae:	d005      	beq.n	80116bc <_malloc_r+0xa8>
 80116b0:	1a21      	subs	r1, r4, r0
 80116b2:	4630      	mov	r0, r6
 80116b4:	f000 fea0 	bl	80123f8 <_sbrk_r>
 80116b8:	3001      	adds	r0, #1
 80116ba:	d0cf      	beq.n	801165c <_malloc_r+0x48>
 80116bc:	6025      	str	r5, [r4, #0]
 80116be:	e7db      	b.n	8011678 <_malloc_r+0x64>
 80116c0:	20002488 	.word	0x20002488
 80116c4:	2000248c 	.word	0x2000248c

080116c8 <__cvt>:
 80116c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116ca:	ed2d 8b02 	vpush	{d8}
 80116ce:	eeb0 8b40 	vmov.f64	d8, d0
 80116d2:	b085      	sub	sp, #20
 80116d4:	4617      	mov	r7, r2
 80116d6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80116d8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80116da:	ee18 2a90 	vmov	r2, s17
 80116de:	f025 0520 	bic.w	r5, r5, #32
 80116e2:	2a00      	cmp	r2, #0
 80116e4:	bfb6      	itet	lt
 80116e6:	222d      	movlt	r2, #45	; 0x2d
 80116e8:	2200      	movge	r2, #0
 80116ea:	eeb1 8b40 	vneglt.f64	d8, d0
 80116ee:	2d46      	cmp	r5, #70	; 0x46
 80116f0:	460c      	mov	r4, r1
 80116f2:	701a      	strb	r2, [r3, #0]
 80116f4:	d004      	beq.n	8011700 <__cvt+0x38>
 80116f6:	2d45      	cmp	r5, #69	; 0x45
 80116f8:	d100      	bne.n	80116fc <__cvt+0x34>
 80116fa:	3401      	adds	r4, #1
 80116fc:	2102      	movs	r1, #2
 80116fe:	e000      	b.n	8011702 <__cvt+0x3a>
 8011700:	2103      	movs	r1, #3
 8011702:	ab03      	add	r3, sp, #12
 8011704:	9301      	str	r3, [sp, #4]
 8011706:	ab02      	add	r3, sp, #8
 8011708:	9300      	str	r3, [sp, #0]
 801170a:	4622      	mov	r2, r4
 801170c:	4633      	mov	r3, r6
 801170e:	eeb0 0b48 	vmov.f64	d0, d8
 8011712:	f001 feb9 	bl	8013488 <_dtoa_r>
 8011716:	2d47      	cmp	r5, #71	; 0x47
 8011718:	d101      	bne.n	801171e <__cvt+0x56>
 801171a:	07fb      	lsls	r3, r7, #31
 801171c:	d51e      	bpl.n	801175c <__cvt+0x94>
 801171e:	2d46      	cmp	r5, #70	; 0x46
 8011720:	eb00 0304 	add.w	r3, r0, r4
 8011724:	d10c      	bne.n	8011740 <__cvt+0x78>
 8011726:	7802      	ldrb	r2, [r0, #0]
 8011728:	2a30      	cmp	r2, #48	; 0x30
 801172a:	d107      	bne.n	801173c <__cvt+0x74>
 801172c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011734:	bf1c      	itt	ne
 8011736:	f1c4 0401 	rsbne	r4, r4, #1
 801173a:	6034      	strne	r4, [r6, #0]
 801173c:	6832      	ldr	r2, [r6, #0]
 801173e:	4413      	add	r3, r2
 8011740:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011748:	d007      	beq.n	801175a <__cvt+0x92>
 801174a:	2130      	movs	r1, #48	; 0x30
 801174c:	9a03      	ldr	r2, [sp, #12]
 801174e:	429a      	cmp	r2, r3
 8011750:	d204      	bcs.n	801175c <__cvt+0x94>
 8011752:	1c54      	adds	r4, r2, #1
 8011754:	9403      	str	r4, [sp, #12]
 8011756:	7011      	strb	r1, [r2, #0]
 8011758:	e7f8      	b.n	801174c <__cvt+0x84>
 801175a:	9303      	str	r3, [sp, #12]
 801175c:	9b03      	ldr	r3, [sp, #12]
 801175e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011760:	1a1b      	subs	r3, r3, r0
 8011762:	6013      	str	r3, [r2, #0]
 8011764:	b005      	add	sp, #20
 8011766:	ecbd 8b02 	vpop	{d8}
 801176a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801176c <__exponent>:
 801176c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801176e:	2900      	cmp	r1, #0
 8011770:	4604      	mov	r4, r0
 8011772:	bfba      	itte	lt
 8011774:	4249      	neglt	r1, r1
 8011776:	232d      	movlt	r3, #45	; 0x2d
 8011778:	232b      	movge	r3, #43	; 0x2b
 801177a:	2909      	cmp	r1, #9
 801177c:	f804 2b02 	strb.w	r2, [r4], #2
 8011780:	7043      	strb	r3, [r0, #1]
 8011782:	dd20      	ble.n	80117c6 <__exponent+0x5a>
 8011784:	f10d 0307 	add.w	r3, sp, #7
 8011788:	461f      	mov	r7, r3
 801178a:	260a      	movs	r6, #10
 801178c:	fb91 f5f6 	sdiv	r5, r1, r6
 8011790:	fb06 1115 	mls	r1, r6, r5, r1
 8011794:	3130      	adds	r1, #48	; 0x30
 8011796:	2d09      	cmp	r5, #9
 8011798:	f803 1c01 	strb.w	r1, [r3, #-1]
 801179c:	f103 32ff 	add.w	r2, r3, #4294967295
 80117a0:	4629      	mov	r1, r5
 80117a2:	dc09      	bgt.n	80117b8 <__exponent+0x4c>
 80117a4:	3130      	adds	r1, #48	; 0x30
 80117a6:	3b02      	subs	r3, #2
 80117a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80117ac:	42bb      	cmp	r3, r7
 80117ae:	4622      	mov	r2, r4
 80117b0:	d304      	bcc.n	80117bc <__exponent+0x50>
 80117b2:	1a10      	subs	r0, r2, r0
 80117b4:	b003      	add	sp, #12
 80117b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117b8:	4613      	mov	r3, r2
 80117ba:	e7e7      	b.n	801178c <__exponent+0x20>
 80117bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117c0:	f804 2b01 	strb.w	r2, [r4], #1
 80117c4:	e7f2      	b.n	80117ac <__exponent+0x40>
 80117c6:	2330      	movs	r3, #48	; 0x30
 80117c8:	4419      	add	r1, r3
 80117ca:	7083      	strb	r3, [r0, #2]
 80117cc:	1d02      	adds	r2, r0, #4
 80117ce:	70c1      	strb	r1, [r0, #3]
 80117d0:	e7ef      	b.n	80117b2 <__exponent+0x46>
 80117d2:	0000      	movs	r0, r0
 80117d4:	0000      	movs	r0, r0
	...

080117d8 <_printf_float>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	b08d      	sub	sp, #52	; 0x34
 80117de:	460c      	mov	r4, r1
 80117e0:	4616      	mov	r6, r2
 80117e2:	461f      	mov	r7, r3
 80117e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80117e8:	4605      	mov	r5, r0
 80117ea:	f003 f83f 	bl	801486c <_localeconv_r>
 80117ee:	f8d0 b000 	ldr.w	fp, [r0]
 80117f2:	4658      	mov	r0, fp
 80117f4:	f7ee fd24 	bl	8000240 <strlen>
 80117f8:	2300      	movs	r3, #0
 80117fa:	930a      	str	r3, [sp, #40]	; 0x28
 80117fc:	f8d8 3000 	ldr.w	r3, [r8]
 8011800:	9005      	str	r0, [sp, #20]
 8011802:	3307      	adds	r3, #7
 8011804:	f023 0307 	bic.w	r3, r3, #7
 8011808:	f103 0108 	add.w	r1, r3, #8
 801180c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011810:	6822      	ldr	r2, [r4, #0]
 8011812:	f8c8 1000 	str.w	r1, [r8]
 8011816:	e9d3 0100 	ldrd	r0, r1, [r3]
 801181a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801181e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8011aa8 <_printf_float+0x2d0>
 8011822:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8011826:	eeb0 6bc0 	vabs.f64	d6, d0
 801182a:	eeb4 6b47 	vcmp.f64	d6, d7
 801182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011832:	dd24      	ble.n	801187e <_printf_float+0xa6>
 8011834:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801183c:	d502      	bpl.n	8011844 <_printf_float+0x6c>
 801183e:	232d      	movs	r3, #45	; 0x2d
 8011840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011844:	499a      	ldr	r1, [pc, #616]	; (8011ab0 <_printf_float+0x2d8>)
 8011846:	4b9b      	ldr	r3, [pc, #620]	; (8011ab4 <_printf_float+0x2dc>)
 8011848:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801184c:	bf8c      	ite	hi
 801184e:	4688      	movhi	r8, r1
 8011850:	4698      	movls	r8, r3
 8011852:	f022 0204 	bic.w	r2, r2, #4
 8011856:	2303      	movs	r3, #3
 8011858:	6123      	str	r3, [r4, #16]
 801185a:	6022      	str	r2, [r4, #0]
 801185c:	f04f 0a00 	mov.w	sl, #0
 8011860:	9700      	str	r7, [sp, #0]
 8011862:	4633      	mov	r3, r6
 8011864:	aa0b      	add	r2, sp, #44	; 0x2c
 8011866:	4621      	mov	r1, r4
 8011868:	4628      	mov	r0, r5
 801186a:	f000 f9e1 	bl	8011c30 <_printf_common>
 801186e:	3001      	adds	r0, #1
 8011870:	f040 8089 	bne.w	8011986 <_printf_float+0x1ae>
 8011874:	f04f 30ff 	mov.w	r0, #4294967295
 8011878:	b00d      	add	sp, #52	; 0x34
 801187a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801187e:	eeb4 0b40 	vcmp.f64	d0, d0
 8011882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011886:	d702      	bvc.n	801188e <_printf_float+0xb6>
 8011888:	498b      	ldr	r1, [pc, #556]	; (8011ab8 <_printf_float+0x2e0>)
 801188a:	4b8c      	ldr	r3, [pc, #560]	; (8011abc <_printf_float+0x2e4>)
 801188c:	e7dc      	b.n	8011848 <_printf_float+0x70>
 801188e:	6861      	ldr	r1, [r4, #4]
 8011890:	1c4b      	adds	r3, r1, #1
 8011892:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8011896:	ab0a      	add	r3, sp, #40	; 0x28
 8011898:	a809      	add	r0, sp, #36	; 0x24
 801189a:	d13b      	bne.n	8011914 <_printf_float+0x13c>
 801189c:	2106      	movs	r1, #6
 801189e:	6061      	str	r1, [r4, #4]
 80118a0:	f04f 0c00 	mov.w	ip, #0
 80118a4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80118a8:	e9cd 0900 	strd	r0, r9, [sp]
 80118ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80118b0:	6022      	str	r2, [r4, #0]
 80118b2:	6861      	ldr	r1, [r4, #4]
 80118b4:	4628      	mov	r0, r5
 80118b6:	f7ff ff07 	bl	80116c8 <__cvt>
 80118ba:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80118be:	2b47      	cmp	r3, #71	; 0x47
 80118c0:	4680      	mov	r8, r0
 80118c2:	d109      	bne.n	80118d8 <_printf_float+0x100>
 80118c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118c6:	1cd8      	adds	r0, r3, #3
 80118c8:	db02      	blt.n	80118d0 <_printf_float+0xf8>
 80118ca:	6862      	ldr	r2, [r4, #4]
 80118cc:	4293      	cmp	r3, r2
 80118ce:	dd47      	ble.n	8011960 <_printf_float+0x188>
 80118d0:	f1a9 0902 	sub.w	r9, r9, #2
 80118d4:	fa5f f989 	uxtb.w	r9, r9
 80118d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80118dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80118de:	d824      	bhi.n	801192a <_printf_float+0x152>
 80118e0:	3901      	subs	r1, #1
 80118e2:	464a      	mov	r2, r9
 80118e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80118e8:	9109      	str	r1, [sp, #36]	; 0x24
 80118ea:	f7ff ff3f 	bl	801176c <__exponent>
 80118ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118f0:	1813      	adds	r3, r2, r0
 80118f2:	2a01      	cmp	r2, #1
 80118f4:	4682      	mov	sl, r0
 80118f6:	6123      	str	r3, [r4, #16]
 80118f8:	dc02      	bgt.n	8011900 <_printf_float+0x128>
 80118fa:	6822      	ldr	r2, [r4, #0]
 80118fc:	07d1      	lsls	r1, r2, #31
 80118fe:	d501      	bpl.n	8011904 <_printf_float+0x12c>
 8011900:	3301      	adds	r3, #1
 8011902:	6123      	str	r3, [r4, #16]
 8011904:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011908:	2b00      	cmp	r3, #0
 801190a:	d0a9      	beq.n	8011860 <_printf_float+0x88>
 801190c:	232d      	movs	r3, #45	; 0x2d
 801190e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011912:	e7a5      	b.n	8011860 <_printf_float+0x88>
 8011914:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8011918:	f000 8178 	beq.w	8011c0c <_printf_float+0x434>
 801191c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8011920:	d1be      	bne.n	80118a0 <_printf_float+0xc8>
 8011922:	2900      	cmp	r1, #0
 8011924:	d1bc      	bne.n	80118a0 <_printf_float+0xc8>
 8011926:	2101      	movs	r1, #1
 8011928:	e7b9      	b.n	801189e <_printf_float+0xc6>
 801192a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801192e:	d119      	bne.n	8011964 <_printf_float+0x18c>
 8011930:	2900      	cmp	r1, #0
 8011932:	6863      	ldr	r3, [r4, #4]
 8011934:	dd0c      	ble.n	8011950 <_printf_float+0x178>
 8011936:	6121      	str	r1, [r4, #16]
 8011938:	b913      	cbnz	r3, 8011940 <_printf_float+0x168>
 801193a:	6822      	ldr	r2, [r4, #0]
 801193c:	07d2      	lsls	r2, r2, #31
 801193e:	d502      	bpl.n	8011946 <_printf_float+0x16e>
 8011940:	3301      	adds	r3, #1
 8011942:	440b      	add	r3, r1
 8011944:	6123      	str	r3, [r4, #16]
 8011946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011948:	65a3      	str	r3, [r4, #88]	; 0x58
 801194a:	f04f 0a00 	mov.w	sl, #0
 801194e:	e7d9      	b.n	8011904 <_printf_float+0x12c>
 8011950:	b913      	cbnz	r3, 8011958 <_printf_float+0x180>
 8011952:	6822      	ldr	r2, [r4, #0]
 8011954:	07d0      	lsls	r0, r2, #31
 8011956:	d501      	bpl.n	801195c <_printf_float+0x184>
 8011958:	3302      	adds	r3, #2
 801195a:	e7f3      	b.n	8011944 <_printf_float+0x16c>
 801195c:	2301      	movs	r3, #1
 801195e:	e7f1      	b.n	8011944 <_printf_float+0x16c>
 8011960:	f04f 0967 	mov.w	r9, #103	; 0x67
 8011964:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011968:	4293      	cmp	r3, r2
 801196a:	db05      	blt.n	8011978 <_printf_float+0x1a0>
 801196c:	6822      	ldr	r2, [r4, #0]
 801196e:	6123      	str	r3, [r4, #16]
 8011970:	07d1      	lsls	r1, r2, #31
 8011972:	d5e8      	bpl.n	8011946 <_printf_float+0x16e>
 8011974:	3301      	adds	r3, #1
 8011976:	e7e5      	b.n	8011944 <_printf_float+0x16c>
 8011978:	2b00      	cmp	r3, #0
 801197a:	bfd4      	ite	le
 801197c:	f1c3 0302 	rsble	r3, r3, #2
 8011980:	2301      	movgt	r3, #1
 8011982:	4413      	add	r3, r2
 8011984:	e7de      	b.n	8011944 <_printf_float+0x16c>
 8011986:	6823      	ldr	r3, [r4, #0]
 8011988:	055a      	lsls	r2, r3, #21
 801198a:	d407      	bmi.n	801199c <_printf_float+0x1c4>
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	4642      	mov	r2, r8
 8011990:	4631      	mov	r1, r6
 8011992:	4628      	mov	r0, r5
 8011994:	47b8      	blx	r7
 8011996:	3001      	adds	r0, #1
 8011998:	d12a      	bne.n	80119f0 <_printf_float+0x218>
 801199a:	e76b      	b.n	8011874 <_printf_float+0x9c>
 801199c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80119a0:	f240 80de 	bls.w	8011b60 <_printf_float+0x388>
 80119a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80119a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b0:	d133      	bne.n	8011a1a <_printf_float+0x242>
 80119b2:	2301      	movs	r3, #1
 80119b4:	4a42      	ldr	r2, [pc, #264]	; (8011ac0 <_printf_float+0x2e8>)
 80119b6:	4631      	mov	r1, r6
 80119b8:	4628      	mov	r0, r5
 80119ba:	47b8      	blx	r7
 80119bc:	3001      	adds	r0, #1
 80119be:	f43f af59 	beq.w	8011874 <_printf_float+0x9c>
 80119c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119c6:	429a      	cmp	r2, r3
 80119c8:	db02      	blt.n	80119d0 <_printf_float+0x1f8>
 80119ca:	6823      	ldr	r3, [r4, #0]
 80119cc:	07d8      	lsls	r0, r3, #31
 80119ce:	d50f      	bpl.n	80119f0 <_printf_float+0x218>
 80119d0:	9b05      	ldr	r3, [sp, #20]
 80119d2:	465a      	mov	r2, fp
 80119d4:	4631      	mov	r1, r6
 80119d6:	4628      	mov	r0, r5
 80119d8:	47b8      	blx	r7
 80119da:	3001      	adds	r0, #1
 80119dc:	f43f af4a 	beq.w	8011874 <_printf_float+0x9c>
 80119e0:	f04f 0800 	mov.w	r8, #0
 80119e4:	f104 091a 	add.w	r9, r4, #26
 80119e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119ea:	3b01      	subs	r3, #1
 80119ec:	4543      	cmp	r3, r8
 80119ee:	dc09      	bgt.n	8011a04 <_printf_float+0x22c>
 80119f0:	6823      	ldr	r3, [r4, #0]
 80119f2:	079b      	lsls	r3, r3, #30
 80119f4:	f100 8105 	bmi.w	8011c02 <_printf_float+0x42a>
 80119f8:	68e0      	ldr	r0, [r4, #12]
 80119fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119fc:	4298      	cmp	r0, r3
 80119fe:	bfb8      	it	lt
 8011a00:	4618      	movlt	r0, r3
 8011a02:	e739      	b.n	8011878 <_printf_float+0xa0>
 8011a04:	2301      	movs	r3, #1
 8011a06:	464a      	mov	r2, r9
 8011a08:	4631      	mov	r1, r6
 8011a0a:	4628      	mov	r0, r5
 8011a0c:	47b8      	blx	r7
 8011a0e:	3001      	adds	r0, #1
 8011a10:	f43f af30 	beq.w	8011874 <_printf_float+0x9c>
 8011a14:	f108 0801 	add.w	r8, r8, #1
 8011a18:	e7e6      	b.n	80119e8 <_printf_float+0x210>
 8011a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	dc2b      	bgt.n	8011a78 <_printf_float+0x2a0>
 8011a20:	2301      	movs	r3, #1
 8011a22:	4a27      	ldr	r2, [pc, #156]	; (8011ac0 <_printf_float+0x2e8>)
 8011a24:	4631      	mov	r1, r6
 8011a26:	4628      	mov	r0, r5
 8011a28:	47b8      	blx	r7
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	f43f af22 	beq.w	8011874 <_printf_float+0x9c>
 8011a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a32:	b923      	cbnz	r3, 8011a3e <_printf_float+0x266>
 8011a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a36:	b913      	cbnz	r3, 8011a3e <_printf_float+0x266>
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	07d9      	lsls	r1, r3, #31
 8011a3c:	d5d8      	bpl.n	80119f0 <_printf_float+0x218>
 8011a3e:	9b05      	ldr	r3, [sp, #20]
 8011a40:	465a      	mov	r2, fp
 8011a42:	4631      	mov	r1, r6
 8011a44:	4628      	mov	r0, r5
 8011a46:	47b8      	blx	r7
 8011a48:	3001      	adds	r0, #1
 8011a4a:	f43f af13 	beq.w	8011874 <_printf_float+0x9c>
 8011a4e:	f04f 0900 	mov.w	r9, #0
 8011a52:	f104 0a1a 	add.w	sl, r4, #26
 8011a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a58:	425b      	negs	r3, r3
 8011a5a:	454b      	cmp	r3, r9
 8011a5c:	dc01      	bgt.n	8011a62 <_printf_float+0x28a>
 8011a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a60:	e795      	b.n	801198e <_printf_float+0x1b6>
 8011a62:	2301      	movs	r3, #1
 8011a64:	4652      	mov	r2, sl
 8011a66:	4631      	mov	r1, r6
 8011a68:	4628      	mov	r0, r5
 8011a6a:	47b8      	blx	r7
 8011a6c:	3001      	adds	r0, #1
 8011a6e:	f43f af01 	beq.w	8011874 <_printf_float+0x9c>
 8011a72:	f109 0901 	add.w	r9, r9, #1
 8011a76:	e7ee      	b.n	8011a56 <_printf_float+0x27e>
 8011a78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	bfa8      	it	ge
 8011a80:	461a      	movge	r2, r3
 8011a82:	2a00      	cmp	r2, #0
 8011a84:	4691      	mov	r9, r2
 8011a86:	dd07      	ble.n	8011a98 <_printf_float+0x2c0>
 8011a88:	4613      	mov	r3, r2
 8011a8a:	4631      	mov	r1, r6
 8011a8c:	4642      	mov	r2, r8
 8011a8e:	4628      	mov	r0, r5
 8011a90:	47b8      	blx	r7
 8011a92:	3001      	adds	r0, #1
 8011a94:	f43f aeee 	beq.w	8011874 <_printf_float+0x9c>
 8011a98:	f104 031a 	add.w	r3, r4, #26
 8011a9c:	f04f 0a00 	mov.w	sl, #0
 8011aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011aa4:	9307      	str	r3, [sp, #28]
 8011aa6:	e017      	b.n	8011ad8 <_printf_float+0x300>
 8011aa8:	ffffffff 	.word	0xffffffff
 8011aac:	7fefffff 	.word	0x7fefffff
 8011ab0:	08015ea0 	.word	0x08015ea0
 8011ab4:	08015e9c 	.word	0x08015e9c
 8011ab8:	08015ea8 	.word	0x08015ea8
 8011abc:	08015ea4 	.word	0x08015ea4
 8011ac0:	08015eac 	.word	0x08015eac
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	9a07      	ldr	r2, [sp, #28]
 8011ac8:	4631      	mov	r1, r6
 8011aca:	4628      	mov	r0, r5
 8011acc:	47b8      	blx	r7
 8011ace:	3001      	adds	r0, #1
 8011ad0:	f43f aed0 	beq.w	8011874 <_printf_float+0x9c>
 8011ad4:	f10a 0a01 	add.w	sl, sl, #1
 8011ad8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011ada:	9306      	str	r3, [sp, #24]
 8011adc:	eba3 0309 	sub.w	r3, r3, r9
 8011ae0:	4553      	cmp	r3, sl
 8011ae2:	dcef      	bgt.n	8011ac4 <_printf_float+0x2ec>
 8011ae4:	9b06      	ldr	r3, [sp, #24]
 8011ae6:	4498      	add	r8, r3
 8011ae8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011aec:	429a      	cmp	r2, r3
 8011aee:	db15      	blt.n	8011b1c <_printf_float+0x344>
 8011af0:	6823      	ldr	r3, [r4, #0]
 8011af2:	07da      	lsls	r2, r3, #31
 8011af4:	d412      	bmi.n	8011b1c <_printf_float+0x344>
 8011af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011af8:	9a06      	ldr	r2, [sp, #24]
 8011afa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011afc:	1a9a      	subs	r2, r3, r2
 8011afe:	eba3 0a01 	sub.w	sl, r3, r1
 8011b02:	4592      	cmp	sl, r2
 8011b04:	bfa8      	it	ge
 8011b06:	4692      	movge	sl, r2
 8011b08:	f1ba 0f00 	cmp.w	sl, #0
 8011b0c:	dc0e      	bgt.n	8011b2c <_printf_float+0x354>
 8011b0e:	f04f 0800 	mov.w	r8, #0
 8011b12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011b16:	f104 091a 	add.w	r9, r4, #26
 8011b1a:	e019      	b.n	8011b50 <_printf_float+0x378>
 8011b1c:	9b05      	ldr	r3, [sp, #20]
 8011b1e:	465a      	mov	r2, fp
 8011b20:	4631      	mov	r1, r6
 8011b22:	4628      	mov	r0, r5
 8011b24:	47b8      	blx	r7
 8011b26:	3001      	adds	r0, #1
 8011b28:	d1e5      	bne.n	8011af6 <_printf_float+0x31e>
 8011b2a:	e6a3      	b.n	8011874 <_printf_float+0x9c>
 8011b2c:	4653      	mov	r3, sl
 8011b2e:	4642      	mov	r2, r8
 8011b30:	4631      	mov	r1, r6
 8011b32:	4628      	mov	r0, r5
 8011b34:	47b8      	blx	r7
 8011b36:	3001      	adds	r0, #1
 8011b38:	d1e9      	bne.n	8011b0e <_printf_float+0x336>
 8011b3a:	e69b      	b.n	8011874 <_printf_float+0x9c>
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	464a      	mov	r2, r9
 8011b40:	4631      	mov	r1, r6
 8011b42:	4628      	mov	r0, r5
 8011b44:	47b8      	blx	r7
 8011b46:	3001      	adds	r0, #1
 8011b48:	f43f ae94 	beq.w	8011874 <_printf_float+0x9c>
 8011b4c:	f108 0801 	add.w	r8, r8, #1
 8011b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b54:	1a9b      	subs	r3, r3, r2
 8011b56:	eba3 030a 	sub.w	r3, r3, sl
 8011b5a:	4543      	cmp	r3, r8
 8011b5c:	dcee      	bgt.n	8011b3c <_printf_float+0x364>
 8011b5e:	e747      	b.n	80119f0 <_printf_float+0x218>
 8011b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b62:	2a01      	cmp	r2, #1
 8011b64:	dc01      	bgt.n	8011b6a <_printf_float+0x392>
 8011b66:	07db      	lsls	r3, r3, #31
 8011b68:	d539      	bpl.n	8011bde <_printf_float+0x406>
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	4642      	mov	r2, r8
 8011b6e:	4631      	mov	r1, r6
 8011b70:	4628      	mov	r0, r5
 8011b72:	47b8      	blx	r7
 8011b74:	3001      	adds	r0, #1
 8011b76:	f43f ae7d 	beq.w	8011874 <_printf_float+0x9c>
 8011b7a:	9b05      	ldr	r3, [sp, #20]
 8011b7c:	465a      	mov	r2, fp
 8011b7e:	4631      	mov	r1, r6
 8011b80:	4628      	mov	r0, r5
 8011b82:	47b8      	blx	r7
 8011b84:	3001      	adds	r0, #1
 8011b86:	f108 0801 	add.w	r8, r8, #1
 8011b8a:	f43f ae73 	beq.w	8011874 <_printf_float+0x9c>
 8011b8e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8011b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b9c:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ba0:	d018      	beq.n	8011bd4 <_printf_float+0x3fc>
 8011ba2:	4642      	mov	r2, r8
 8011ba4:	4631      	mov	r1, r6
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	47b8      	blx	r7
 8011baa:	3001      	adds	r0, #1
 8011bac:	d10e      	bne.n	8011bcc <_printf_float+0x3f4>
 8011bae:	e661      	b.n	8011874 <_printf_float+0x9c>
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	464a      	mov	r2, r9
 8011bb4:	4631      	mov	r1, r6
 8011bb6:	4628      	mov	r0, r5
 8011bb8:	47b8      	blx	r7
 8011bba:	3001      	adds	r0, #1
 8011bbc:	f43f ae5a 	beq.w	8011874 <_printf_float+0x9c>
 8011bc0:	f108 0801 	add.w	r8, r8, #1
 8011bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bc6:	3b01      	subs	r3, #1
 8011bc8:	4543      	cmp	r3, r8
 8011bca:	dcf1      	bgt.n	8011bb0 <_printf_float+0x3d8>
 8011bcc:	4653      	mov	r3, sl
 8011bce:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011bd2:	e6dd      	b.n	8011990 <_printf_float+0x1b8>
 8011bd4:	f04f 0800 	mov.w	r8, #0
 8011bd8:	f104 091a 	add.w	r9, r4, #26
 8011bdc:	e7f2      	b.n	8011bc4 <_printf_float+0x3ec>
 8011bde:	2301      	movs	r3, #1
 8011be0:	e7df      	b.n	8011ba2 <_printf_float+0x3ca>
 8011be2:	2301      	movs	r3, #1
 8011be4:	464a      	mov	r2, r9
 8011be6:	4631      	mov	r1, r6
 8011be8:	4628      	mov	r0, r5
 8011bea:	47b8      	blx	r7
 8011bec:	3001      	adds	r0, #1
 8011bee:	f43f ae41 	beq.w	8011874 <_printf_float+0x9c>
 8011bf2:	f108 0801 	add.w	r8, r8, #1
 8011bf6:	68e3      	ldr	r3, [r4, #12]
 8011bf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bfa:	1a9b      	subs	r3, r3, r2
 8011bfc:	4543      	cmp	r3, r8
 8011bfe:	dcf0      	bgt.n	8011be2 <_printf_float+0x40a>
 8011c00:	e6fa      	b.n	80119f8 <_printf_float+0x220>
 8011c02:	f04f 0800 	mov.w	r8, #0
 8011c06:	f104 0919 	add.w	r9, r4, #25
 8011c0a:	e7f4      	b.n	8011bf6 <_printf_float+0x41e>
 8011c0c:	2900      	cmp	r1, #0
 8011c0e:	f43f ae8a 	beq.w	8011926 <_printf_float+0x14e>
 8011c12:	f04f 0c00 	mov.w	ip, #0
 8011c16:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8011c1a:	e9cd 0900 	strd	r0, r9, [sp]
 8011c1e:	6022      	str	r2, [r4, #0]
 8011c20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011c24:	4628      	mov	r0, r5
 8011c26:	f7ff fd4f 	bl	80116c8 <__cvt>
 8011c2a:	4680      	mov	r8, r0
 8011c2c:	e64a      	b.n	80118c4 <_printf_float+0xec>
 8011c2e:	bf00      	nop

08011c30 <_printf_common>:
 8011c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c34:	4691      	mov	r9, r2
 8011c36:	461f      	mov	r7, r3
 8011c38:	688a      	ldr	r2, [r1, #8]
 8011c3a:	690b      	ldr	r3, [r1, #16]
 8011c3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c40:	4293      	cmp	r3, r2
 8011c42:	bfb8      	it	lt
 8011c44:	4613      	movlt	r3, r2
 8011c46:	f8c9 3000 	str.w	r3, [r9]
 8011c4a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c4e:	4606      	mov	r6, r0
 8011c50:	460c      	mov	r4, r1
 8011c52:	b112      	cbz	r2, 8011c5a <_printf_common+0x2a>
 8011c54:	3301      	adds	r3, #1
 8011c56:	f8c9 3000 	str.w	r3, [r9]
 8011c5a:	6823      	ldr	r3, [r4, #0]
 8011c5c:	0699      	lsls	r1, r3, #26
 8011c5e:	bf42      	ittt	mi
 8011c60:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011c64:	3302      	addmi	r3, #2
 8011c66:	f8c9 3000 	strmi.w	r3, [r9]
 8011c6a:	6825      	ldr	r5, [r4, #0]
 8011c6c:	f015 0506 	ands.w	r5, r5, #6
 8011c70:	d107      	bne.n	8011c82 <_printf_common+0x52>
 8011c72:	f104 0a19 	add.w	sl, r4, #25
 8011c76:	68e3      	ldr	r3, [r4, #12]
 8011c78:	f8d9 2000 	ldr.w	r2, [r9]
 8011c7c:	1a9b      	subs	r3, r3, r2
 8011c7e:	42ab      	cmp	r3, r5
 8011c80:	dc28      	bgt.n	8011cd4 <_printf_common+0xa4>
 8011c82:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011c86:	6822      	ldr	r2, [r4, #0]
 8011c88:	3300      	adds	r3, #0
 8011c8a:	bf18      	it	ne
 8011c8c:	2301      	movne	r3, #1
 8011c8e:	0692      	lsls	r2, r2, #26
 8011c90:	d42d      	bmi.n	8011cee <_printf_common+0xbe>
 8011c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c96:	4639      	mov	r1, r7
 8011c98:	4630      	mov	r0, r6
 8011c9a:	47c0      	blx	r8
 8011c9c:	3001      	adds	r0, #1
 8011c9e:	d020      	beq.n	8011ce2 <_printf_common+0xb2>
 8011ca0:	6823      	ldr	r3, [r4, #0]
 8011ca2:	68e5      	ldr	r5, [r4, #12]
 8011ca4:	f8d9 2000 	ldr.w	r2, [r9]
 8011ca8:	f003 0306 	and.w	r3, r3, #6
 8011cac:	2b04      	cmp	r3, #4
 8011cae:	bf08      	it	eq
 8011cb0:	1aad      	subeq	r5, r5, r2
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	6922      	ldr	r2, [r4, #16]
 8011cb6:	bf0c      	ite	eq
 8011cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cbc:	2500      	movne	r5, #0
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	bfc4      	itt	gt
 8011cc2:	1a9b      	subgt	r3, r3, r2
 8011cc4:	18ed      	addgt	r5, r5, r3
 8011cc6:	f04f 0900 	mov.w	r9, #0
 8011cca:	341a      	adds	r4, #26
 8011ccc:	454d      	cmp	r5, r9
 8011cce:	d11a      	bne.n	8011d06 <_printf_common+0xd6>
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	e008      	b.n	8011ce6 <_printf_common+0xb6>
 8011cd4:	2301      	movs	r3, #1
 8011cd6:	4652      	mov	r2, sl
 8011cd8:	4639      	mov	r1, r7
 8011cda:	4630      	mov	r0, r6
 8011cdc:	47c0      	blx	r8
 8011cde:	3001      	adds	r0, #1
 8011ce0:	d103      	bne.n	8011cea <_printf_common+0xba>
 8011ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011cea:	3501      	adds	r5, #1
 8011cec:	e7c3      	b.n	8011c76 <_printf_common+0x46>
 8011cee:	18e1      	adds	r1, r4, r3
 8011cf0:	1c5a      	adds	r2, r3, #1
 8011cf2:	2030      	movs	r0, #48	; 0x30
 8011cf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011cf8:	4422      	add	r2, r4
 8011cfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011cfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d02:	3302      	adds	r3, #2
 8011d04:	e7c5      	b.n	8011c92 <_printf_common+0x62>
 8011d06:	2301      	movs	r3, #1
 8011d08:	4622      	mov	r2, r4
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	4630      	mov	r0, r6
 8011d0e:	47c0      	blx	r8
 8011d10:	3001      	adds	r0, #1
 8011d12:	d0e6      	beq.n	8011ce2 <_printf_common+0xb2>
 8011d14:	f109 0901 	add.w	r9, r9, #1
 8011d18:	e7d8      	b.n	8011ccc <_printf_common+0x9c>
	...

08011d1c <_printf_i>:
 8011d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d20:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011d24:	460c      	mov	r4, r1
 8011d26:	7e09      	ldrb	r1, [r1, #24]
 8011d28:	b085      	sub	sp, #20
 8011d2a:	296e      	cmp	r1, #110	; 0x6e
 8011d2c:	4617      	mov	r7, r2
 8011d2e:	4606      	mov	r6, r0
 8011d30:	4698      	mov	r8, r3
 8011d32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d34:	f000 80b3 	beq.w	8011e9e <_printf_i+0x182>
 8011d38:	d822      	bhi.n	8011d80 <_printf_i+0x64>
 8011d3a:	2963      	cmp	r1, #99	; 0x63
 8011d3c:	d036      	beq.n	8011dac <_printf_i+0x90>
 8011d3e:	d80a      	bhi.n	8011d56 <_printf_i+0x3a>
 8011d40:	2900      	cmp	r1, #0
 8011d42:	f000 80b9 	beq.w	8011eb8 <_printf_i+0x19c>
 8011d46:	2958      	cmp	r1, #88	; 0x58
 8011d48:	f000 8083 	beq.w	8011e52 <_printf_i+0x136>
 8011d4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d50:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011d54:	e032      	b.n	8011dbc <_printf_i+0xa0>
 8011d56:	2964      	cmp	r1, #100	; 0x64
 8011d58:	d001      	beq.n	8011d5e <_printf_i+0x42>
 8011d5a:	2969      	cmp	r1, #105	; 0x69
 8011d5c:	d1f6      	bne.n	8011d4c <_printf_i+0x30>
 8011d5e:	6820      	ldr	r0, [r4, #0]
 8011d60:	6813      	ldr	r3, [r2, #0]
 8011d62:	0605      	lsls	r5, r0, #24
 8011d64:	f103 0104 	add.w	r1, r3, #4
 8011d68:	d52a      	bpl.n	8011dc0 <_printf_i+0xa4>
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	6011      	str	r1, [r2, #0]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	da03      	bge.n	8011d7a <_printf_i+0x5e>
 8011d72:	222d      	movs	r2, #45	; 0x2d
 8011d74:	425b      	negs	r3, r3
 8011d76:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011d7a:	486f      	ldr	r0, [pc, #444]	; (8011f38 <_printf_i+0x21c>)
 8011d7c:	220a      	movs	r2, #10
 8011d7e:	e039      	b.n	8011df4 <_printf_i+0xd8>
 8011d80:	2973      	cmp	r1, #115	; 0x73
 8011d82:	f000 809d 	beq.w	8011ec0 <_printf_i+0x1a4>
 8011d86:	d808      	bhi.n	8011d9a <_printf_i+0x7e>
 8011d88:	296f      	cmp	r1, #111	; 0x6f
 8011d8a:	d020      	beq.n	8011dce <_printf_i+0xb2>
 8011d8c:	2970      	cmp	r1, #112	; 0x70
 8011d8e:	d1dd      	bne.n	8011d4c <_printf_i+0x30>
 8011d90:	6823      	ldr	r3, [r4, #0]
 8011d92:	f043 0320 	orr.w	r3, r3, #32
 8011d96:	6023      	str	r3, [r4, #0]
 8011d98:	e003      	b.n	8011da2 <_printf_i+0x86>
 8011d9a:	2975      	cmp	r1, #117	; 0x75
 8011d9c:	d017      	beq.n	8011dce <_printf_i+0xb2>
 8011d9e:	2978      	cmp	r1, #120	; 0x78
 8011da0:	d1d4      	bne.n	8011d4c <_printf_i+0x30>
 8011da2:	2378      	movs	r3, #120	; 0x78
 8011da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011da8:	4864      	ldr	r0, [pc, #400]	; (8011f3c <_printf_i+0x220>)
 8011daa:	e055      	b.n	8011e58 <_printf_i+0x13c>
 8011dac:	6813      	ldr	r3, [r2, #0]
 8011dae:	1d19      	adds	r1, r3, #4
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	6011      	str	r1, [r2, #0]
 8011db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	e08c      	b.n	8011eda <_printf_i+0x1be>
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	6011      	str	r1, [r2, #0]
 8011dc4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011dc8:	bf18      	it	ne
 8011dca:	b21b      	sxthne	r3, r3
 8011dcc:	e7cf      	b.n	8011d6e <_printf_i+0x52>
 8011dce:	6813      	ldr	r3, [r2, #0]
 8011dd0:	6825      	ldr	r5, [r4, #0]
 8011dd2:	1d18      	adds	r0, r3, #4
 8011dd4:	6010      	str	r0, [r2, #0]
 8011dd6:	0628      	lsls	r0, r5, #24
 8011dd8:	d501      	bpl.n	8011dde <_printf_i+0xc2>
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	e002      	b.n	8011de4 <_printf_i+0xc8>
 8011dde:	0668      	lsls	r0, r5, #25
 8011de0:	d5fb      	bpl.n	8011dda <_printf_i+0xbe>
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	4854      	ldr	r0, [pc, #336]	; (8011f38 <_printf_i+0x21c>)
 8011de6:	296f      	cmp	r1, #111	; 0x6f
 8011de8:	bf14      	ite	ne
 8011dea:	220a      	movne	r2, #10
 8011dec:	2208      	moveq	r2, #8
 8011dee:	2100      	movs	r1, #0
 8011df0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011df4:	6865      	ldr	r5, [r4, #4]
 8011df6:	60a5      	str	r5, [r4, #8]
 8011df8:	2d00      	cmp	r5, #0
 8011dfa:	f2c0 8095 	blt.w	8011f28 <_printf_i+0x20c>
 8011dfe:	6821      	ldr	r1, [r4, #0]
 8011e00:	f021 0104 	bic.w	r1, r1, #4
 8011e04:	6021      	str	r1, [r4, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d13d      	bne.n	8011e86 <_printf_i+0x16a>
 8011e0a:	2d00      	cmp	r5, #0
 8011e0c:	f040 808e 	bne.w	8011f2c <_printf_i+0x210>
 8011e10:	4665      	mov	r5, ip
 8011e12:	2a08      	cmp	r2, #8
 8011e14:	d10b      	bne.n	8011e2e <_printf_i+0x112>
 8011e16:	6823      	ldr	r3, [r4, #0]
 8011e18:	07db      	lsls	r3, r3, #31
 8011e1a:	d508      	bpl.n	8011e2e <_printf_i+0x112>
 8011e1c:	6923      	ldr	r3, [r4, #16]
 8011e1e:	6862      	ldr	r2, [r4, #4]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	bfde      	ittt	le
 8011e24:	2330      	movle	r3, #48	; 0x30
 8011e26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e2e:	ebac 0305 	sub.w	r3, ip, r5
 8011e32:	6123      	str	r3, [r4, #16]
 8011e34:	f8cd 8000 	str.w	r8, [sp]
 8011e38:	463b      	mov	r3, r7
 8011e3a:	aa03      	add	r2, sp, #12
 8011e3c:	4621      	mov	r1, r4
 8011e3e:	4630      	mov	r0, r6
 8011e40:	f7ff fef6 	bl	8011c30 <_printf_common>
 8011e44:	3001      	adds	r0, #1
 8011e46:	d14d      	bne.n	8011ee4 <_printf_i+0x1c8>
 8011e48:	f04f 30ff 	mov.w	r0, #4294967295
 8011e4c:	b005      	add	sp, #20
 8011e4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e52:	4839      	ldr	r0, [pc, #228]	; (8011f38 <_printf_i+0x21c>)
 8011e54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011e58:	6813      	ldr	r3, [r2, #0]
 8011e5a:	6821      	ldr	r1, [r4, #0]
 8011e5c:	1d1d      	adds	r5, r3, #4
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	6015      	str	r5, [r2, #0]
 8011e62:	060a      	lsls	r2, r1, #24
 8011e64:	d50b      	bpl.n	8011e7e <_printf_i+0x162>
 8011e66:	07ca      	lsls	r2, r1, #31
 8011e68:	bf44      	itt	mi
 8011e6a:	f041 0120 	orrmi.w	r1, r1, #32
 8011e6e:	6021      	strmi	r1, [r4, #0]
 8011e70:	b91b      	cbnz	r3, 8011e7a <_printf_i+0x15e>
 8011e72:	6822      	ldr	r2, [r4, #0]
 8011e74:	f022 0220 	bic.w	r2, r2, #32
 8011e78:	6022      	str	r2, [r4, #0]
 8011e7a:	2210      	movs	r2, #16
 8011e7c:	e7b7      	b.n	8011dee <_printf_i+0xd2>
 8011e7e:	064d      	lsls	r5, r1, #25
 8011e80:	bf48      	it	mi
 8011e82:	b29b      	uxthmi	r3, r3
 8011e84:	e7ef      	b.n	8011e66 <_printf_i+0x14a>
 8011e86:	4665      	mov	r5, ip
 8011e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e8c:	fb02 3311 	mls	r3, r2, r1, r3
 8011e90:	5cc3      	ldrb	r3, [r0, r3]
 8011e92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011e96:	460b      	mov	r3, r1
 8011e98:	2900      	cmp	r1, #0
 8011e9a:	d1f5      	bne.n	8011e88 <_printf_i+0x16c>
 8011e9c:	e7b9      	b.n	8011e12 <_printf_i+0xf6>
 8011e9e:	6813      	ldr	r3, [r2, #0]
 8011ea0:	6825      	ldr	r5, [r4, #0]
 8011ea2:	6961      	ldr	r1, [r4, #20]
 8011ea4:	1d18      	adds	r0, r3, #4
 8011ea6:	6010      	str	r0, [r2, #0]
 8011ea8:	0628      	lsls	r0, r5, #24
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	d501      	bpl.n	8011eb2 <_printf_i+0x196>
 8011eae:	6019      	str	r1, [r3, #0]
 8011eb0:	e002      	b.n	8011eb8 <_printf_i+0x19c>
 8011eb2:	066a      	lsls	r2, r5, #25
 8011eb4:	d5fb      	bpl.n	8011eae <_printf_i+0x192>
 8011eb6:	8019      	strh	r1, [r3, #0]
 8011eb8:	2300      	movs	r3, #0
 8011eba:	6123      	str	r3, [r4, #16]
 8011ebc:	4665      	mov	r5, ip
 8011ebe:	e7b9      	b.n	8011e34 <_printf_i+0x118>
 8011ec0:	6813      	ldr	r3, [r2, #0]
 8011ec2:	1d19      	adds	r1, r3, #4
 8011ec4:	6011      	str	r1, [r2, #0]
 8011ec6:	681d      	ldr	r5, [r3, #0]
 8011ec8:	6862      	ldr	r2, [r4, #4]
 8011eca:	2100      	movs	r1, #0
 8011ecc:	4628      	mov	r0, r5
 8011ece:	f7ee f9bf 	bl	8000250 <memchr>
 8011ed2:	b108      	cbz	r0, 8011ed8 <_printf_i+0x1bc>
 8011ed4:	1b40      	subs	r0, r0, r5
 8011ed6:	6060      	str	r0, [r4, #4]
 8011ed8:	6863      	ldr	r3, [r4, #4]
 8011eda:	6123      	str	r3, [r4, #16]
 8011edc:	2300      	movs	r3, #0
 8011ede:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ee2:	e7a7      	b.n	8011e34 <_printf_i+0x118>
 8011ee4:	6923      	ldr	r3, [r4, #16]
 8011ee6:	462a      	mov	r2, r5
 8011ee8:	4639      	mov	r1, r7
 8011eea:	4630      	mov	r0, r6
 8011eec:	47c0      	blx	r8
 8011eee:	3001      	adds	r0, #1
 8011ef0:	d0aa      	beq.n	8011e48 <_printf_i+0x12c>
 8011ef2:	6823      	ldr	r3, [r4, #0]
 8011ef4:	079b      	lsls	r3, r3, #30
 8011ef6:	d413      	bmi.n	8011f20 <_printf_i+0x204>
 8011ef8:	68e0      	ldr	r0, [r4, #12]
 8011efa:	9b03      	ldr	r3, [sp, #12]
 8011efc:	4298      	cmp	r0, r3
 8011efe:	bfb8      	it	lt
 8011f00:	4618      	movlt	r0, r3
 8011f02:	e7a3      	b.n	8011e4c <_printf_i+0x130>
 8011f04:	2301      	movs	r3, #1
 8011f06:	464a      	mov	r2, r9
 8011f08:	4639      	mov	r1, r7
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	47c0      	blx	r8
 8011f0e:	3001      	adds	r0, #1
 8011f10:	d09a      	beq.n	8011e48 <_printf_i+0x12c>
 8011f12:	3501      	adds	r5, #1
 8011f14:	68e3      	ldr	r3, [r4, #12]
 8011f16:	9a03      	ldr	r2, [sp, #12]
 8011f18:	1a9b      	subs	r3, r3, r2
 8011f1a:	42ab      	cmp	r3, r5
 8011f1c:	dcf2      	bgt.n	8011f04 <_printf_i+0x1e8>
 8011f1e:	e7eb      	b.n	8011ef8 <_printf_i+0x1dc>
 8011f20:	2500      	movs	r5, #0
 8011f22:	f104 0919 	add.w	r9, r4, #25
 8011f26:	e7f5      	b.n	8011f14 <_printf_i+0x1f8>
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d1ac      	bne.n	8011e86 <_printf_i+0x16a>
 8011f2c:	7803      	ldrb	r3, [r0, #0]
 8011f2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f36:	e76c      	b.n	8011e12 <_printf_i+0xf6>
 8011f38:	08015eae 	.word	0x08015eae
 8011f3c:	08015ebf 	.word	0x08015ebf

08011f40 <_scanf_float>:
 8011f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f44:	469a      	mov	sl, r3
 8011f46:	688b      	ldr	r3, [r1, #8]
 8011f48:	4616      	mov	r6, r2
 8011f4a:	1e5a      	subs	r2, r3, #1
 8011f4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011f50:	b087      	sub	sp, #28
 8011f52:	bf83      	ittte	hi
 8011f54:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8011f58:	189b      	addhi	r3, r3, r2
 8011f5a:	9301      	strhi	r3, [sp, #4]
 8011f5c:	2300      	movls	r3, #0
 8011f5e:	bf86      	itte	hi
 8011f60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011f64:	608b      	strhi	r3, [r1, #8]
 8011f66:	9301      	strls	r3, [sp, #4]
 8011f68:	680b      	ldr	r3, [r1, #0]
 8011f6a:	4688      	mov	r8, r1
 8011f6c:	f04f 0b00 	mov.w	fp, #0
 8011f70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011f74:	f848 3b1c 	str.w	r3, [r8], #28
 8011f78:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011f7c:	4607      	mov	r7, r0
 8011f7e:	460c      	mov	r4, r1
 8011f80:	4645      	mov	r5, r8
 8011f82:	465a      	mov	r2, fp
 8011f84:	46d9      	mov	r9, fp
 8011f86:	f8cd b008 	str.w	fp, [sp, #8]
 8011f8a:	68a1      	ldr	r1, [r4, #8]
 8011f8c:	b181      	cbz	r1, 8011fb0 <_scanf_float+0x70>
 8011f8e:	6833      	ldr	r3, [r6, #0]
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	2b49      	cmp	r3, #73	; 0x49
 8011f94:	d071      	beq.n	801207a <_scanf_float+0x13a>
 8011f96:	d84d      	bhi.n	8012034 <_scanf_float+0xf4>
 8011f98:	2b39      	cmp	r3, #57	; 0x39
 8011f9a:	d840      	bhi.n	801201e <_scanf_float+0xde>
 8011f9c:	2b31      	cmp	r3, #49	; 0x31
 8011f9e:	f080 8088 	bcs.w	80120b2 <_scanf_float+0x172>
 8011fa2:	2b2d      	cmp	r3, #45	; 0x2d
 8011fa4:	f000 8090 	beq.w	80120c8 <_scanf_float+0x188>
 8011fa8:	d815      	bhi.n	8011fd6 <_scanf_float+0x96>
 8011faa:	2b2b      	cmp	r3, #43	; 0x2b
 8011fac:	f000 808c 	beq.w	80120c8 <_scanf_float+0x188>
 8011fb0:	f1b9 0f00 	cmp.w	r9, #0
 8011fb4:	d003      	beq.n	8011fbe <_scanf_float+0x7e>
 8011fb6:	6823      	ldr	r3, [r4, #0]
 8011fb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011fbc:	6023      	str	r3, [r4, #0]
 8011fbe:	3a01      	subs	r2, #1
 8011fc0:	2a01      	cmp	r2, #1
 8011fc2:	f200 80ea 	bhi.w	801219a <_scanf_float+0x25a>
 8011fc6:	4545      	cmp	r5, r8
 8011fc8:	f200 80dc 	bhi.w	8012184 <_scanf_float+0x244>
 8011fcc:	2601      	movs	r6, #1
 8011fce:	4630      	mov	r0, r6
 8011fd0:	b007      	add	sp, #28
 8011fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd6:	2b2e      	cmp	r3, #46	; 0x2e
 8011fd8:	f000 809f 	beq.w	801211a <_scanf_float+0x1da>
 8011fdc:	2b30      	cmp	r3, #48	; 0x30
 8011fde:	d1e7      	bne.n	8011fb0 <_scanf_float+0x70>
 8011fe0:	6820      	ldr	r0, [r4, #0]
 8011fe2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8011fe6:	d064      	beq.n	80120b2 <_scanf_float+0x172>
 8011fe8:	9b01      	ldr	r3, [sp, #4]
 8011fea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011fee:	6020      	str	r0, [r4, #0]
 8011ff0:	f109 0901 	add.w	r9, r9, #1
 8011ff4:	b11b      	cbz	r3, 8011ffe <_scanf_float+0xbe>
 8011ff6:	3b01      	subs	r3, #1
 8011ff8:	3101      	adds	r1, #1
 8011ffa:	9301      	str	r3, [sp, #4]
 8011ffc:	60a1      	str	r1, [r4, #8]
 8011ffe:	68a3      	ldr	r3, [r4, #8]
 8012000:	3b01      	subs	r3, #1
 8012002:	60a3      	str	r3, [r4, #8]
 8012004:	6923      	ldr	r3, [r4, #16]
 8012006:	3301      	adds	r3, #1
 8012008:	6123      	str	r3, [r4, #16]
 801200a:	6873      	ldr	r3, [r6, #4]
 801200c:	3b01      	subs	r3, #1
 801200e:	2b00      	cmp	r3, #0
 8012010:	6073      	str	r3, [r6, #4]
 8012012:	f340 80ac 	ble.w	801216e <_scanf_float+0x22e>
 8012016:	6833      	ldr	r3, [r6, #0]
 8012018:	3301      	adds	r3, #1
 801201a:	6033      	str	r3, [r6, #0]
 801201c:	e7b5      	b.n	8011f8a <_scanf_float+0x4a>
 801201e:	2b45      	cmp	r3, #69	; 0x45
 8012020:	f000 8085 	beq.w	801212e <_scanf_float+0x1ee>
 8012024:	2b46      	cmp	r3, #70	; 0x46
 8012026:	d06a      	beq.n	80120fe <_scanf_float+0x1be>
 8012028:	2b41      	cmp	r3, #65	; 0x41
 801202a:	d1c1      	bne.n	8011fb0 <_scanf_float+0x70>
 801202c:	2a01      	cmp	r2, #1
 801202e:	d1bf      	bne.n	8011fb0 <_scanf_float+0x70>
 8012030:	2202      	movs	r2, #2
 8012032:	e046      	b.n	80120c2 <_scanf_float+0x182>
 8012034:	2b65      	cmp	r3, #101	; 0x65
 8012036:	d07a      	beq.n	801212e <_scanf_float+0x1ee>
 8012038:	d818      	bhi.n	801206c <_scanf_float+0x12c>
 801203a:	2b54      	cmp	r3, #84	; 0x54
 801203c:	d066      	beq.n	801210c <_scanf_float+0x1cc>
 801203e:	d811      	bhi.n	8012064 <_scanf_float+0x124>
 8012040:	2b4e      	cmp	r3, #78	; 0x4e
 8012042:	d1b5      	bne.n	8011fb0 <_scanf_float+0x70>
 8012044:	2a00      	cmp	r2, #0
 8012046:	d146      	bne.n	80120d6 <_scanf_float+0x196>
 8012048:	f1b9 0f00 	cmp.w	r9, #0
 801204c:	d145      	bne.n	80120da <_scanf_float+0x19a>
 801204e:	6821      	ldr	r1, [r4, #0]
 8012050:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012054:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012058:	d13f      	bne.n	80120da <_scanf_float+0x19a>
 801205a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801205e:	6021      	str	r1, [r4, #0]
 8012060:	2201      	movs	r2, #1
 8012062:	e02e      	b.n	80120c2 <_scanf_float+0x182>
 8012064:	2b59      	cmp	r3, #89	; 0x59
 8012066:	d01e      	beq.n	80120a6 <_scanf_float+0x166>
 8012068:	2b61      	cmp	r3, #97	; 0x61
 801206a:	e7de      	b.n	801202a <_scanf_float+0xea>
 801206c:	2b6e      	cmp	r3, #110	; 0x6e
 801206e:	d0e9      	beq.n	8012044 <_scanf_float+0x104>
 8012070:	d815      	bhi.n	801209e <_scanf_float+0x15e>
 8012072:	2b66      	cmp	r3, #102	; 0x66
 8012074:	d043      	beq.n	80120fe <_scanf_float+0x1be>
 8012076:	2b69      	cmp	r3, #105	; 0x69
 8012078:	d19a      	bne.n	8011fb0 <_scanf_float+0x70>
 801207a:	f1bb 0f00 	cmp.w	fp, #0
 801207e:	d138      	bne.n	80120f2 <_scanf_float+0x1b2>
 8012080:	f1b9 0f00 	cmp.w	r9, #0
 8012084:	d197      	bne.n	8011fb6 <_scanf_float+0x76>
 8012086:	6821      	ldr	r1, [r4, #0]
 8012088:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801208c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012090:	d195      	bne.n	8011fbe <_scanf_float+0x7e>
 8012092:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012096:	6021      	str	r1, [r4, #0]
 8012098:	f04f 0b01 	mov.w	fp, #1
 801209c:	e011      	b.n	80120c2 <_scanf_float+0x182>
 801209e:	2b74      	cmp	r3, #116	; 0x74
 80120a0:	d034      	beq.n	801210c <_scanf_float+0x1cc>
 80120a2:	2b79      	cmp	r3, #121	; 0x79
 80120a4:	d184      	bne.n	8011fb0 <_scanf_float+0x70>
 80120a6:	f1bb 0f07 	cmp.w	fp, #7
 80120aa:	d181      	bne.n	8011fb0 <_scanf_float+0x70>
 80120ac:	f04f 0b08 	mov.w	fp, #8
 80120b0:	e007      	b.n	80120c2 <_scanf_float+0x182>
 80120b2:	eb12 0f0b 	cmn.w	r2, fp
 80120b6:	f47f af7b 	bne.w	8011fb0 <_scanf_float+0x70>
 80120ba:	6821      	ldr	r1, [r4, #0]
 80120bc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80120c0:	6021      	str	r1, [r4, #0]
 80120c2:	702b      	strb	r3, [r5, #0]
 80120c4:	3501      	adds	r5, #1
 80120c6:	e79a      	b.n	8011ffe <_scanf_float+0xbe>
 80120c8:	6821      	ldr	r1, [r4, #0]
 80120ca:	0608      	lsls	r0, r1, #24
 80120cc:	f57f af70 	bpl.w	8011fb0 <_scanf_float+0x70>
 80120d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80120d4:	e7f4      	b.n	80120c0 <_scanf_float+0x180>
 80120d6:	2a02      	cmp	r2, #2
 80120d8:	d047      	beq.n	801216a <_scanf_float+0x22a>
 80120da:	f1bb 0f01 	cmp.w	fp, #1
 80120de:	d003      	beq.n	80120e8 <_scanf_float+0x1a8>
 80120e0:	f1bb 0f04 	cmp.w	fp, #4
 80120e4:	f47f af64 	bne.w	8011fb0 <_scanf_float+0x70>
 80120e8:	f10b 0b01 	add.w	fp, fp, #1
 80120ec:	fa5f fb8b 	uxtb.w	fp, fp
 80120f0:	e7e7      	b.n	80120c2 <_scanf_float+0x182>
 80120f2:	f1bb 0f03 	cmp.w	fp, #3
 80120f6:	d0f7      	beq.n	80120e8 <_scanf_float+0x1a8>
 80120f8:	f1bb 0f05 	cmp.w	fp, #5
 80120fc:	e7f2      	b.n	80120e4 <_scanf_float+0x1a4>
 80120fe:	f1bb 0f02 	cmp.w	fp, #2
 8012102:	f47f af55 	bne.w	8011fb0 <_scanf_float+0x70>
 8012106:	f04f 0b03 	mov.w	fp, #3
 801210a:	e7da      	b.n	80120c2 <_scanf_float+0x182>
 801210c:	f1bb 0f06 	cmp.w	fp, #6
 8012110:	f47f af4e 	bne.w	8011fb0 <_scanf_float+0x70>
 8012114:	f04f 0b07 	mov.w	fp, #7
 8012118:	e7d3      	b.n	80120c2 <_scanf_float+0x182>
 801211a:	6821      	ldr	r1, [r4, #0]
 801211c:	0588      	lsls	r0, r1, #22
 801211e:	f57f af47 	bpl.w	8011fb0 <_scanf_float+0x70>
 8012122:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012126:	6021      	str	r1, [r4, #0]
 8012128:	f8cd 9008 	str.w	r9, [sp, #8]
 801212c:	e7c9      	b.n	80120c2 <_scanf_float+0x182>
 801212e:	6821      	ldr	r1, [r4, #0]
 8012130:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012134:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012138:	d006      	beq.n	8012148 <_scanf_float+0x208>
 801213a:	0548      	lsls	r0, r1, #21
 801213c:	f57f af38 	bpl.w	8011fb0 <_scanf_float+0x70>
 8012140:	f1b9 0f00 	cmp.w	r9, #0
 8012144:	f43f af3b 	beq.w	8011fbe <_scanf_float+0x7e>
 8012148:	0588      	lsls	r0, r1, #22
 801214a:	bf58      	it	pl
 801214c:	9802      	ldrpl	r0, [sp, #8]
 801214e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012152:	bf58      	it	pl
 8012154:	eba9 0000 	subpl.w	r0, r9, r0
 8012158:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801215c:	bf58      	it	pl
 801215e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012162:	6021      	str	r1, [r4, #0]
 8012164:	f04f 0900 	mov.w	r9, #0
 8012168:	e7ab      	b.n	80120c2 <_scanf_float+0x182>
 801216a:	2203      	movs	r2, #3
 801216c:	e7a9      	b.n	80120c2 <_scanf_float+0x182>
 801216e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012172:	9205      	str	r2, [sp, #20]
 8012174:	4631      	mov	r1, r6
 8012176:	4638      	mov	r0, r7
 8012178:	4798      	blx	r3
 801217a:	9a05      	ldr	r2, [sp, #20]
 801217c:	2800      	cmp	r0, #0
 801217e:	f43f af04 	beq.w	8011f8a <_scanf_float+0x4a>
 8012182:	e715      	b.n	8011fb0 <_scanf_float+0x70>
 8012184:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012188:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801218c:	4632      	mov	r2, r6
 801218e:	4638      	mov	r0, r7
 8012190:	4798      	blx	r3
 8012192:	6923      	ldr	r3, [r4, #16]
 8012194:	3b01      	subs	r3, #1
 8012196:	6123      	str	r3, [r4, #16]
 8012198:	e715      	b.n	8011fc6 <_scanf_float+0x86>
 801219a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801219e:	2b06      	cmp	r3, #6
 80121a0:	d80a      	bhi.n	80121b8 <_scanf_float+0x278>
 80121a2:	f1bb 0f02 	cmp.w	fp, #2
 80121a6:	d966      	bls.n	8012276 <_scanf_float+0x336>
 80121a8:	f1ab 0b03 	sub.w	fp, fp, #3
 80121ac:	fa5f fb8b 	uxtb.w	fp, fp
 80121b0:	eba5 0b0b 	sub.w	fp, r5, fp
 80121b4:	455d      	cmp	r5, fp
 80121b6:	d149      	bne.n	801224c <_scanf_float+0x30c>
 80121b8:	6823      	ldr	r3, [r4, #0]
 80121ba:	05da      	lsls	r2, r3, #23
 80121bc:	d51f      	bpl.n	80121fe <_scanf_float+0x2be>
 80121be:	055b      	lsls	r3, r3, #21
 80121c0:	d466      	bmi.n	8012290 <_scanf_float+0x350>
 80121c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80121c6:	6923      	ldr	r3, [r4, #16]
 80121c8:	2965      	cmp	r1, #101	; 0x65
 80121ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80121ce:	f105 3bff 	add.w	fp, r5, #4294967295
 80121d2:	6123      	str	r3, [r4, #16]
 80121d4:	d00d      	beq.n	80121f2 <_scanf_float+0x2b2>
 80121d6:	2945      	cmp	r1, #69	; 0x45
 80121d8:	d00b      	beq.n	80121f2 <_scanf_float+0x2b2>
 80121da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80121de:	4632      	mov	r2, r6
 80121e0:	4638      	mov	r0, r7
 80121e2:	4798      	blx	r3
 80121e4:	6923      	ldr	r3, [r4, #16]
 80121e6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80121ea:	3b01      	subs	r3, #1
 80121ec:	f1a5 0b02 	sub.w	fp, r5, #2
 80121f0:	6123      	str	r3, [r4, #16]
 80121f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80121f6:	4632      	mov	r2, r6
 80121f8:	4638      	mov	r0, r7
 80121fa:	4798      	blx	r3
 80121fc:	465d      	mov	r5, fp
 80121fe:	6826      	ldr	r6, [r4, #0]
 8012200:	f016 0610 	ands.w	r6, r6, #16
 8012204:	d170      	bne.n	80122e8 <_scanf_float+0x3a8>
 8012206:	702e      	strb	r6, [r5, #0]
 8012208:	6823      	ldr	r3, [r4, #0]
 801220a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801220e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012212:	d140      	bne.n	8012296 <_scanf_float+0x356>
 8012214:	9b02      	ldr	r3, [sp, #8]
 8012216:	eba9 0303 	sub.w	r3, r9, r3
 801221a:	425a      	negs	r2, r3
 801221c:	2b00      	cmp	r3, #0
 801221e:	d147      	bne.n	80122b0 <_scanf_float+0x370>
 8012220:	2200      	movs	r2, #0
 8012222:	4638      	mov	r0, r7
 8012224:	4641      	mov	r1, r8
 8012226:	f000 ff43 	bl	80130b0 <_strtod_r>
 801222a:	6820      	ldr	r0, [r4, #0]
 801222c:	f8da 3000 	ldr.w	r3, [sl]
 8012230:	f010 0f02 	tst.w	r0, #2
 8012234:	f103 0204 	add.w	r2, r3, #4
 8012238:	f8ca 2000 	str.w	r2, [sl]
 801223c:	d043      	beq.n	80122c6 <_scanf_float+0x386>
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	ed83 0b00 	vstr	d0, [r3]
 8012244:	68e3      	ldr	r3, [r4, #12]
 8012246:	3301      	adds	r3, #1
 8012248:	60e3      	str	r3, [r4, #12]
 801224a:	e6c0      	b.n	8011fce <_scanf_float+0x8e>
 801224c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012250:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012254:	4632      	mov	r2, r6
 8012256:	4638      	mov	r0, r7
 8012258:	4798      	blx	r3
 801225a:	6923      	ldr	r3, [r4, #16]
 801225c:	3b01      	subs	r3, #1
 801225e:	6123      	str	r3, [r4, #16]
 8012260:	e7a8      	b.n	80121b4 <_scanf_float+0x274>
 8012262:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012266:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801226a:	4632      	mov	r2, r6
 801226c:	4638      	mov	r0, r7
 801226e:	4798      	blx	r3
 8012270:	6923      	ldr	r3, [r4, #16]
 8012272:	3b01      	subs	r3, #1
 8012274:	6123      	str	r3, [r4, #16]
 8012276:	4545      	cmp	r5, r8
 8012278:	d8f3      	bhi.n	8012262 <_scanf_float+0x322>
 801227a:	e6a7      	b.n	8011fcc <_scanf_float+0x8c>
 801227c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012280:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012284:	4632      	mov	r2, r6
 8012286:	4638      	mov	r0, r7
 8012288:	4798      	blx	r3
 801228a:	6923      	ldr	r3, [r4, #16]
 801228c:	3b01      	subs	r3, #1
 801228e:	6123      	str	r3, [r4, #16]
 8012290:	4545      	cmp	r5, r8
 8012292:	d8f3      	bhi.n	801227c <_scanf_float+0x33c>
 8012294:	e69a      	b.n	8011fcc <_scanf_float+0x8c>
 8012296:	9b03      	ldr	r3, [sp, #12]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d0c1      	beq.n	8012220 <_scanf_float+0x2e0>
 801229c:	9904      	ldr	r1, [sp, #16]
 801229e:	230a      	movs	r3, #10
 80122a0:	4632      	mov	r2, r6
 80122a2:	3101      	adds	r1, #1
 80122a4:	4638      	mov	r0, r7
 80122a6:	f000 ff8f 	bl	80131c8 <_strtol_r>
 80122aa:	9b03      	ldr	r3, [sp, #12]
 80122ac:	9d04      	ldr	r5, [sp, #16]
 80122ae:	1ac2      	subs	r2, r0, r3
 80122b0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80122b4:	429d      	cmp	r5, r3
 80122b6:	bf28      	it	cs
 80122b8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80122bc:	490b      	ldr	r1, [pc, #44]	; (80122ec <_scanf_float+0x3ac>)
 80122be:	4628      	mov	r0, r5
 80122c0:	f000 f8f4 	bl	80124ac <siprintf>
 80122c4:	e7ac      	b.n	8012220 <_scanf_float+0x2e0>
 80122c6:	f010 0004 	ands.w	r0, r0, #4
 80122ca:	d1b8      	bne.n	801223e <_scanf_float+0x2fe>
 80122cc:	eeb4 0b40 	vcmp.f64	d0, d0
 80122d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122d4:	681d      	ldr	r5, [r3, #0]
 80122d6:	d704      	bvc.n	80122e2 <_scanf_float+0x3a2>
 80122d8:	f000 f89e 	bl	8012418 <nanf>
 80122dc:	ed85 0a00 	vstr	s0, [r5]
 80122e0:	e7b0      	b.n	8012244 <_scanf_float+0x304>
 80122e2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80122e6:	e7f9      	b.n	80122dc <_scanf_float+0x39c>
 80122e8:	2600      	movs	r6, #0
 80122ea:	e670      	b.n	8011fce <_scanf_float+0x8e>
 80122ec:	08015ed0 	.word	0x08015ed0

080122f0 <iprintf>:
 80122f0:	b40f      	push	{r0, r1, r2, r3}
 80122f2:	4b0a      	ldr	r3, [pc, #40]	; (801231c <iprintf+0x2c>)
 80122f4:	b513      	push	{r0, r1, r4, lr}
 80122f6:	681c      	ldr	r4, [r3, #0]
 80122f8:	b124      	cbz	r4, 8012304 <iprintf+0x14>
 80122fa:	69a3      	ldr	r3, [r4, #24]
 80122fc:	b913      	cbnz	r3, 8012304 <iprintf+0x14>
 80122fe:	4620      	mov	r0, r4
 8012300:	f001 fefe 	bl	8014100 <__sinit>
 8012304:	ab05      	add	r3, sp, #20
 8012306:	9a04      	ldr	r2, [sp, #16]
 8012308:	68a1      	ldr	r1, [r4, #8]
 801230a:	9301      	str	r3, [sp, #4]
 801230c:	4620      	mov	r0, r4
 801230e:	f003 f8d5 	bl	80154bc <_vfiprintf_r>
 8012312:	b002      	add	sp, #8
 8012314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012318:	b004      	add	sp, #16
 801231a:	4770      	bx	lr
 801231c:	2000019c 	.word	0x2000019c

08012320 <_puts_r>:
 8012320:	b570      	push	{r4, r5, r6, lr}
 8012322:	460e      	mov	r6, r1
 8012324:	4605      	mov	r5, r0
 8012326:	b118      	cbz	r0, 8012330 <_puts_r+0x10>
 8012328:	6983      	ldr	r3, [r0, #24]
 801232a:	b90b      	cbnz	r3, 8012330 <_puts_r+0x10>
 801232c:	f001 fee8 	bl	8014100 <__sinit>
 8012330:	69ab      	ldr	r3, [r5, #24]
 8012332:	68ac      	ldr	r4, [r5, #8]
 8012334:	b913      	cbnz	r3, 801233c <_puts_r+0x1c>
 8012336:	4628      	mov	r0, r5
 8012338:	f001 fee2 	bl	8014100 <__sinit>
 801233c:	4b23      	ldr	r3, [pc, #140]	; (80123cc <_puts_r+0xac>)
 801233e:	429c      	cmp	r4, r3
 8012340:	d117      	bne.n	8012372 <_puts_r+0x52>
 8012342:	686c      	ldr	r4, [r5, #4]
 8012344:	89a3      	ldrh	r3, [r4, #12]
 8012346:	071b      	lsls	r3, r3, #28
 8012348:	d51d      	bpl.n	8012386 <_puts_r+0x66>
 801234a:	6923      	ldr	r3, [r4, #16]
 801234c:	b1db      	cbz	r3, 8012386 <_puts_r+0x66>
 801234e:	3e01      	subs	r6, #1
 8012350:	68a3      	ldr	r3, [r4, #8]
 8012352:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012356:	3b01      	subs	r3, #1
 8012358:	60a3      	str	r3, [r4, #8]
 801235a:	b9e9      	cbnz	r1, 8012398 <_puts_r+0x78>
 801235c:	2b00      	cmp	r3, #0
 801235e:	da2e      	bge.n	80123be <_puts_r+0x9e>
 8012360:	4622      	mov	r2, r4
 8012362:	210a      	movs	r1, #10
 8012364:	4628      	mov	r0, r5
 8012366:	f000 ff41 	bl	80131ec <__swbuf_r>
 801236a:	3001      	adds	r0, #1
 801236c:	d011      	beq.n	8012392 <_puts_r+0x72>
 801236e:	200a      	movs	r0, #10
 8012370:	e011      	b.n	8012396 <_puts_r+0x76>
 8012372:	4b17      	ldr	r3, [pc, #92]	; (80123d0 <_puts_r+0xb0>)
 8012374:	429c      	cmp	r4, r3
 8012376:	d101      	bne.n	801237c <_puts_r+0x5c>
 8012378:	68ac      	ldr	r4, [r5, #8]
 801237a:	e7e3      	b.n	8012344 <_puts_r+0x24>
 801237c:	4b15      	ldr	r3, [pc, #84]	; (80123d4 <_puts_r+0xb4>)
 801237e:	429c      	cmp	r4, r3
 8012380:	bf08      	it	eq
 8012382:	68ec      	ldreq	r4, [r5, #12]
 8012384:	e7de      	b.n	8012344 <_puts_r+0x24>
 8012386:	4621      	mov	r1, r4
 8012388:	4628      	mov	r0, r5
 801238a:	f000 ff81 	bl	8013290 <__swsetup_r>
 801238e:	2800      	cmp	r0, #0
 8012390:	d0dd      	beq.n	801234e <_puts_r+0x2e>
 8012392:	f04f 30ff 	mov.w	r0, #4294967295
 8012396:	bd70      	pop	{r4, r5, r6, pc}
 8012398:	2b00      	cmp	r3, #0
 801239a:	da04      	bge.n	80123a6 <_puts_r+0x86>
 801239c:	69a2      	ldr	r2, [r4, #24]
 801239e:	429a      	cmp	r2, r3
 80123a0:	dc06      	bgt.n	80123b0 <_puts_r+0x90>
 80123a2:	290a      	cmp	r1, #10
 80123a4:	d004      	beq.n	80123b0 <_puts_r+0x90>
 80123a6:	6823      	ldr	r3, [r4, #0]
 80123a8:	1c5a      	adds	r2, r3, #1
 80123aa:	6022      	str	r2, [r4, #0]
 80123ac:	7019      	strb	r1, [r3, #0]
 80123ae:	e7cf      	b.n	8012350 <_puts_r+0x30>
 80123b0:	4622      	mov	r2, r4
 80123b2:	4628      	mov	r0, r5
 80123b4:	f000 ff1a 	bl	80131ec <__swbuf_r>
 80123b8:	3001      	adds	r0, #1
 80123ba:	d1c9      	bne.n	8012350 <_puts_r+0x30>
 80123bc:	e7e9      	b.n	8012392 <_puts_r+0x72>
 80123be:	6823      	ldr	r3, [r4, #0]
 80123c0:	200a      	movs	r0, #10
 80123c2:	1c5a      	adds	r2, r3, #1
 80123c4:	6022      	str	r2, [r4, #0]
 80123c6:	7018      	strb	r0, [r3, #0]
 80123c8:	e7e5      	b.n	8012396 <_puts_r+0x76>
 80123ca:	bf00      	nop
 80123cc:	08015f58 	.word	0x08015f58
 80123d0:	08015f78 	.word	0x08015f78
 80123d4:	08015f38 	.word	0x08015f38

080123d8 <puts>:
 80123d8:	4b02      	ldr	r3, [pc, #8]	; (80123e4 <puts+0xc>)
 80123da:	4601      	mov	r1, r0
 80123dc:	6818      	ldr	r0, [r3, #0]
 80123de:	f7ff bf9f 	b.w	8012320 <_puts_r>
 80123e2:	bf00      	nop
 80123e4:	2000019c 	.word	0x2000019c

080123e8 <realloc>:
 80123e8:	4b02      	ldr	r3, [pc, #8]	; (80123f4 <realloc+0xc>)
 80123ea:	460a      	mov	r2, r1
 80123ec:	4601      	mov	r1, r0
 80123ee:	6818      	ldr	r0, [r3, #0]
 80123f0:	f002 bec2 	b.w	8015178 <_realloc_r>
 80123f4:	2000019c 	.word	0x2000019c

080123f8 <_sbrk_r>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	4c06      	ldr	r4, [pc, #24]	; (8012414 <_sbrk_r+0x1c>)
 80123fc:	2300      	movs	r3, #0
 80123fe:	4605      	mov	r5, r0
 8012400:	4608      	mov	r0, r1
 8012402:	6023      	str	r3, [r4, #0]
 8012404:	f003 fa94 	bl	8015930 <_sbrk>
 8012408:	1c43      	adds	r3, r0, #1
 801240a:	d102      	bne.n	8012412 <_sbrk_r+0x1a>
 801240c:	6823      	ldr	r3, [r4, #0]
 801240e:	b103      	cbz	r3, 8012412 <_sbrk_r+0x1a>
 8012410:	602b      	str	r3, [r5, #0]
 8012412:	bd38      	pop	{r3, r4, r5, pc}
 8012414:	20011e34 	.word	0x20011e34

08012418 <nanf>:
 8012418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012420 <nanf+0x8>
 801241c:	4770      	bx	lr
 801241e:	bf00      	nop
 8012420:	7fc00000 	.word	0x7fc00000

08012424 <_raise_r>:
 8012424:	291f      	cmp	r1, #31
 8012426:	b538      	push	{r3, r4, r5, lr}
 8012428:	4604      	mov	r4, r0
 801242a:	460d      	mov	r5, r1
 801242c:	d904      	bls.n	8012438 <_raise_r+0x14>
 801242e:	2316      	movs	r3, #22
 8012430:	6003      	str	r3, [r0, #0]
 8012432:	f04f 30ff 	mov.w	r0, #4294967295
 8012436:	bd38      	pop	{r3, r4, r5, pc}
 8012438:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801243a:	b112      	cbz	r2, 8012442 <_raise_r+0x1e>
 801243c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012440:	b94b      	cbnz	r3, 8012456 <_raise_r+0x32>
 8012442:	4620      	mov	r0, r4
 8012444:	f000 f830 	bl	80124a8 <_getpid_r>
 8012448:	462a      	mov	r2, r5
 801244a:	4601      	mov	r1, r0
 801244c:	4620      	mov	r0, r4
 801244e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012452:	f000 b817 	b.w	8012484 <_kill_r>
 8012456:	2b01      	cmp	r3, #1
 8012458:	d00a      	beq.n	8012470 <_raise_r+0x4c>
 801245a:	1c59      	adds	r1, r3, #1
 801245c:	d103      	bne.n	8012466 <_raise_r+0x42>
 801245e:	2316      	movs	r3, #22
 8012460:	6003      	str	r3, [r0, #0]
 8012462:	2001      	movs	r0, #1
 8012464:	e7e7      	b.n	8012436 <_raise_r+0x12>
 8012466:	2400      	movs	r4, #0
 8012468:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801246c:	4628      	mov	r0, r5
 801246e:	4798      	blx	r3
 8012470:	2000      	movs	r0, #0
 8012472:	e7e0      	b.n	8012436 <_raise_r+0x12>

08012474 <raise>:
 8012474:	4b02      	ldr	r3, [pc, #8]	; (8012480 <raise+0xc>)
 8012476:	4601      	mov	r1, r0
 8012478:	6818      	ldr	r0, [r3, #0]
 801247a:	f7ff bfd3 	b.w	8012424 <_raise_r>
 801247e:	bf00      	nop
 8012480:	2000019c 	.word	0x2000019c

08012484 <_kill_r>:
 8012484:	b538      	push	{r3, r4, r5, lr}
 8012486:	4c07      	ldr	r4, [pc, #28]	; (80124a4 <_kill_r+0x20>)
 8012488:	2300      	movs	r3, #0
 801248a:	4605      	mov	r5, r0
 801248c:	4608      	mov	r0, r1
 801248e:	4611      	mov	r1, r2
 8012490:	6023      	str	r3, [r4, #0]
 8012492:	f003 fa35 	bl	8015900 <_kill>
 8012496:	1c43      	adds	r3, r0, #1
 8012498:	d102      	bne.n	80124a0 <_kill_r+0x1c>
 801249a:	6823      	ldr	r3, [r4, #0]
 801249c:	b103      	cbz	r3, 80124a0 <_kill_r+0x1c>
 801249e:	602b      	str	r3, [r5, #0]
 80124a0:	bd38      	pop	{r3, r4, r5, pc}
 80124a2:	bf00      	nop
 80124a4:	20011e34 	.word	0x20011e34

080124a8 <_getpid_r>:
 80124a8:	f003 ba1a 	b.w	80158e0 <_getpid>

080124ac <siprintf>:
 80124ac:	b40e      	push	{r1, r2, r3}
 80124ae:	b500      	push	{lr}
 80124b0:	b09c      	sub	sp, #112	; 0x70
 80124b2:	ab1d      	add	r3, sp, #116	; 0x74
 80124b4:	9002      	str	r0, [sp, #8]
 80124b6:	9006      	str	r0, [sp, #24]
 80124b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80124bc:	4809      	ldr	r0, [pc, #36]	; (80124e4 <siprintf+0x38>)
 80124be:	9107      	str	r1, [sp, #28]
 80124c0:	9104      	str	r1, [sp, #16]
 80124c2:	4909      	ldr	r1, [pc, #36]	; (80124e8 <siprintf+0x3c>)
 80124c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80124c8:	9105      	str	r1, [sp, #20]
 80124ca:	6800      	ldr	r0, [r0, #0]
 80124cc:	9301      	str	r3, [sp, #4]
 80124ce:	a902      	add	r1, sp, #8
 80124d0:	f002 fed2 	bl	8015278 <_svfiprintf_r>
 80124d4:	9b02      	ldr	r3, [sp, #8]
 80124d6:	2200      	movs	r2, #0
 80124d8:	701a      	strb	r2, [r3, #0]
 80124da:	b01c      	add	sp, #112	; 0x70
 80124dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80124e0:	b003      	add	sp, #12
 80124e2:	4770      	bx	lr
 80124e4:	2000019c 	.word	0x2000019c
 80124e8:	ffff0208 	.word	0xffff0208

080124ec <sulp>:
 80124ec:	b570      	push	{r4, r5, r6, lr}
 80124ee:	4604      	mov	r4, r0
 80124f0:	460d      	mov	r5, r1
 80124f2:	4616      	mov	r6, r2
 80124f4:	ec45 4b10 	vmov	d0, r4, r5
 80124f8:	f002 fd0a 	bl	8014f10 <__ulp>
 80124fc:	b17e      	cbz	r6, 801251e <sulp+0x32>
 80124fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012502:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012506:	2b00      	cmp	r3, #0
 8012508:	dd09      	ble.n	801251e <sulp+0x32>
 801250a:	051b      	lsls	r3, r3, #20
 801250c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8012510:	2000      	movs	r0, #0
 8012512:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8012516:	ec41 0b17 	vmov	d7, r0, r1
 801251a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801251e:	bd70      	pop	{r4, r5, r6, pc}

08012520 <_strtod_l>:
 8012520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012524:	ed2d 8b0c 	vpush	{d8-d13}
 8012528:	4698      	mov	r8, r3
 801252a:	b09d      	sub	sp, #116	; 0x74
 801252c:	2300      	movs	r3, #0
 801252e:	4604      	mov	r4, r0
 8012530:	4640      	mov	r0, r8
 8012532:	460e      	mov	r6, r1
 8012534:	9214      	str	r2, [sp, #80]	; 0x50
 8012536:	9318      	str	r3, [sp, #96]	; 0x60
 8012538:	f002 f995 	bl	8014866 <__localeconv_l>
 801253c:	4681      	mov	r9, r0
 801253e:	6800      	ldr	r0, [r0, #0]
 8012540:	f7ed fe7e 	bl	8000240 <strlen>
 8012544:	f04f 0a00 	mov.w	sl, #0
 8012548:	4607      	mov	r7, r0
 801254a:	f04f 0b00 	mov.w	fp, #0
 801254e:	9617      	str	r6, [sp, #92]	; 0x5c
 8012550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012552:	781a      	ldrb	r2, [r3, #0]
 8012554:	2a0d      	cmp	r2, #13
 8012556:	d834      	bhi.n	80125c2 <_strtod_l+0xa2>
 8012558:	2a09      	cmp	r2, #9
 801255a:	d238      	bcs.n	80125ce <_strtod_l+0xae>
 801255c:	2a00      	cmp	r2, #0
 801255e:	d040      	beq.n	80125e2 <_strtod_l+0xc2>
 8012560:	2300      	movs	r3, #0
 8012562:	930d      	str	r3, [sp, #52]	; 0x34
 8012564:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8012566:	782b      	ldrb	r3, [r5, #0]
 8012568:	2b30      	cmp	r3, #48	; 0x30
 801256a:	f040 80b3 	bne.w	80126d4 <_strtod_l+0x1b4>
 801256e:	786b      	ldrb	r3, [r5, #1]
 8012570:	2b58      	cmp	r3, #88	; 0x58
 8012572:	d001      	beq.n	8012578 <_strtod_l+0x58>
 8012574:	2b78      	cmp	r3, #120	; 0x78
 8012576:	d169      	bne.n	801264c <_strtod_l+0x12c>
 8012578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801257a:	9301      	str	r3, [sp, #4]
 801257c:	ab18      	add	r3, sp, #96	; 0x60
 801257e:	9300      	str	r3, [sp, #0]
 8012580:	f8cd 8008 	str.w	r8, [sp, #8]
 8012584:	ab19      	add	r3, sp, #100	; 0x64
 8012586:	4a8f      	ldr	r2, [pc, #572]	; (80127c4 <_strtod_l+0x2a4>)
 8012588:	a917      	add	r1, sp, #92	; 0x5c
 801258a:	4620      	mov	r0, r4
 801258c:	f001 fe91 	bl	80142b2 <__gethex>
 8012590:	f010 0607 	ands.w	r6, r0, #7
 8012594:	4607      	mov	r7, r0
 8012596:	d005      	beq.n	80125a4 <_strtod_l+0x84>
 8012598:	2e06      	cmp	r6, #6
 801259a:	d12c      	bne.n	80125f6 <_strtod_l+0xd6>
 801259c:	3501      	adds	r5, #1
 801259e:	2300      	movs	r3, #0
 80125a0:	9517      	str	r5, [sp, #92]	; 0x5c
 80125a2:	930d      	str	r3, [sp, #52]	; 0x34
 80125a4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	f040 855e 	bne.w	8013068 <_strtod_l+0xb48>
 80125ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125ae:	b1eb      	cbz	r3, 80125ec <_strtod_l+0xcc>
 80125b0:	ec4b ab17 	vmov	d7, sl, fp
 80125b4:	eeb1 0b47 	vneg.f64	d0, d7
 80125b8:	b01d      	add	sp, #116	; 0x74
 80125ba:	ecbd 8b0c 	vpop	{d8-d13}
 80125be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c2:	2a2b      	cmp	r2, #43	; 0x2b
 80125c4:	d015      	beq.n	80125f2 <_strtod_l+0xd2>
 80125c6:	2a2d      	cmp	r2, #45	; 0x2d
 80125c8:	d004      	beq.n	80125d4 <_strtod_l+0xb4>
 80125ca:	2a20      	cmp	r2, #32
 80125cc:	d1c8      	bne.n	8012560 <_strtod_l+0x40>
 80125ce:	3301      	adds	r3, #1
 80125d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80125d2:	e7bd      	b.n	8012550 <_strtod_l+0x30>
 80125d4:	2201      	movs	r2, #1
 80125d6:	920d      	str	r2, [sp, #52]	; 0x34
 80125d8:	1c5a      	adds	r2, r3, #1
 80125da:	9217      	str	r2, [sp, #92]	; 0x5c
 80125dc:	785b      	ldrb	r3, [r3, #1]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d1c0      	bne.n	8012564 <_strtod_l+0x44>
 80125e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125e4:	9617      	str	r6, [sp, #92]	; 0x5c
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	f040 853c 	bne.w	8013064 <_strtod_l+0xb44>
 80125ec:	ec4b ab10 	vmov	d0, sl, fp
 80125f0:	e7e2      	b.n	80125b8 <_strtod_l+0x98>
 80125f2:	2200      	movs	r2, #0
 80125f4:	e7ef      	b.n	80125d6 <_strtod_l+0xb6>
 80125f6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80125f8:	b13a      	cbz	r2, 801260a <_strtod_l+0xea>
 80125fa:	2135      	movs	r1, #53	; 0x35
 80125fc:	a81a      	add	r0, sp, #104	; 0x68
 80125fe:	f002 fd80 	bl	8015102 <__copybits>
 8012602:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012604:	4620      	mov	r0, r4
 8012606:	f002 f9eb 	bl	80149e0 <_Bfree>
 801260a:	3e01      	subs	r6, #1
 801260c:	2e04      	cmp	r6, #4
 801260e:	d806      	bhi.n	801261e <_strtod_l+0xfe>
 8012610:	e8df f006 	tbb	[pc, r6]
 8012614:	1714030a 	.word	0x1714030a
 8012618:	0a          	.byte	0x0a
 8012619:	00          	.byte	0x00
 801261a:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801261e:	073b      	lsls	r3, r7, #28
 8012620:	d5c0      	bpl.n	80125a4 <_strtod_l+0x84>
 8012622:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012626:	e7bd      	b.n	80125a4 <_strtod_l+0x84>
 8012628:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801262c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801262e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012632:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012636:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801263a:	e7f0      	b.n	801261e <_strtod_l+0xfe>
 801263c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80127c8 <_strtod_l+0x2a8>
 8012640:	e7ed      	b.n	801261e <_strtod_l+0xfe>
 8012642:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012646:	f04f 3aff 	mov.w	sl, #4294967295
 801264a:	e7e8      	b.n	801261e <_strtod_l+0xfe>
 801264c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801264e:	1c5a      	adds	r2, r3, #1
 8012650:	9217      	str	r2, [sp, #92]	; 0x5c
 8012652:	785b      	ldrb	r3, [r3, #1]
 8012654:	2b30      	cmp	r3, #48	; 0x30
 8012656:	d0f9      	beq.n	801264c <_strtod_l+0x12c>
 8012658:	2b00      	cmp	r3, #0
 801265a:	d0a3      	beq.n	80125a4 <_strtod_l+0x84>
 801265c:	2301      	movs	r3, #1
 801265e:	930a      	str	r3, [sp, #40]	; 0x28
 8012660:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012662:	930c      	str	r3, [sp, #48]	; 0x30
 8012664:	2300      	movs	r3, #0
 8012666:	9306      	str	r3, [sp, #24]
 8012668:	9308      	str	r3, [sp, #32]
 801266a:	461d      	mov	r5, r3
 801266c:	220a      	movs	r2, #10
 801266e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8012670:	f890 8000 	ldrb.w	r8, [r0]
 8012674:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8012678:	b2d9      	uxtb	r1, r3
 801267a:	2909      	cmp	r1, #9
 801267c:	d92c      	bls.n	80126d8 <_strtod_l+0x1b8>
 801267e:	463a      	mov	r2, r7
 8012680:	f8d9 1000 	ldr.w	r1, [r9]
 8012684:	f003 f873 	bl	801576e <strncmp>
 8012688:	2800      	cmp	r0, #0
 801268a:	d035      	beq.n	80126f8 <_strtod_l+0x1d8>
 801268c:	2000      	movs	r0, #0
 801268e:	4642      	mov	r2, r8
 8012690:	462b      	mov	r3, r5
 8012692:	4601      	mov	r1, r0
 8012694:	9004      	str	r0, [sp, #16]
 8012696:	2a65      	cmp	r2, #101	; 0x65
 8012698:	d001      	beq.n	801269e <_strtod_l+0x17e>
 801269a:	2a45      	cmp	r2, #69	; 0x45
 801269c:	d117      	bne.n	80126ce <_strtod_l+0x1ae>
 801269e:	b923      	cbnz	r3, 80126aa <_strtod_l+0x18a>
 80126a0:	b910      	cbnz	r0, 80126a8 <_strtod_l+0x188>
 80126a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d09c      	beq.n	80125e2 <_strtod_l+0xc2>
 80126a8:	2300      	movs	r3, #0
 80126aa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80126ac:	1c72      	adds	r2, r6, #1
 80126ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80126b0:	7872      	ldrb	r2, [r6, #1]
 80126b2:	2a2b      	cmp	r2, #43	; 0x2b
 80126b4:	f000 8082 	beq.w	80127bc <_strtod_l+0x29c>
 80126b8:	2a2d      	cmp	r2, #45	; 0x2d
 80126ba:	d079      	beq.n	80127b0 <_strtod_l+0x290>
 80126bc:	f04f 0e00 	mov.w	lr, #0
 80126c0:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80126c4:	f1bc 0f09 	cmp.w	ip, #9
 80126c8:	f240 8086 	bls.w	80127d8 <_strtod_l+0x2b8>
 80126cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80126ce:	f04f 0800 	mov.w	r8, #0
 80126d2:	e0a8      	b.n	8012826 <_strtod_l+0x306>
 80126d4:	2300      	movs	r3, #0
 80126d6:	e7c2      	b.n	801265e <_strtod_l+0x13e>
 80126d8:	2d08      	cmp	r5, #8
 80126da:	bfd5      	itete	le
 80126dc:	9908      	ldrle	r1, [sp, #32]
 80126de:	9906      	ldrgt	r1, [sp, #24]
 80126e0:	fb02 3301 	mlale	r3, r2, r1, r3
 80126e4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80126e8:	f100 0001 	add.w	r0, r0, #1
 80126ec:	bfd4      	ite	le
 80126ee:	9308      	strle	r3, [sp, #32]
 80126f0:	9306      	strgt	r3, [sp, #24]
 80126f2:	3501      	adds	r5, #1
 80126f4:	9017      	str	r0, [sp, #92]	; 0x5c
 80126f6:	e7ba      	b.n	801266e <_strtod_l+0x14e>
 80126f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80126fa:	19da      	adds	r2, r3, r7
 80126fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80126fe:	5dda      	ldrb	r2, [r3, r7]
 8012700:	2d00      	cmp	r5, #0
 8012702:	d038      	beq.n	8012776 <_strtod_l+0x256>
 8012704:	4601      	mov	r1, r0
 8012706:	462b      	mov	r3, r5
 8012708:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801270c:	2f09      	cmp	r7, #9
 801270e:	d913      	bls.n	8012738 <_strtod_l+0x218>
 8012710:	2701      	movs	r7, #1
 8012712:	9704      	str	r7, [sp, #16]
 8012714:	e7bf      	b.n	8012696 <_strtod_l+0x176>
 8012716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012718:	1c5a      	adds	r2, r3, #1
 801271a:	9217      	str	r2, [sp, #92]	; 0x5c
 801271c:	785a      	ldrb	r2, [r3, #1]
 801271e:	3001      	adds	r0, #1
 8012720:	2a30      	cmp	r2, #48	; 0x30
 8012722:	d0f8      	beq.n	8012716 <_strtod_l+0x1f6>
 8012724:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012728:	2b08      	cmp	r3, #8
 801272a:	f200 84a2 	bhi.w	8013072 <_strtod_l+0xb52>
 801272e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012730:	930c      	str	r3, [sp, #48]	; 0x30
 8012732:	4601      	mov	r1, r0
 8012734:	2000      	movs	r0, #0
 8012736:	4603      	mov	r3, r0
 8012738:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 801273c:	f100 0701 	add.w	r7, r0, #1
 8012740:	d013      	beq.n	801276a <_strtod_l+0x24a>
 8012742:	4439      	add	r1, r7
 8012744:	eb00 0e03 	add.w	lr, r0, r3
 8012748:	461f      	mov	r7, r3
 801274a:	f04f 0c0a 	mov.w	ip, #10
 801274e:	45be      	cmp	lr, r7
 8012750:	d113      	bne.n	801277a <_strtod_l+0x25a>
 8012752:	181f      	adds	r7, r3, r0
 8012754:	2f08      	cmp	r7, #8
 8012756:	f103 0301 	add.w	r3, r3, #1
 801275a:	4403      	add	r3, r0
 801275c:	dc1d      	bgt.n	801279a <_strtod_l+0x27a>
 801275e:	9a08      	ldr	r2, [sp, #32]
 8012760:	200a      	movs	r0, #10
 8012762:	fb00 8202 	mla	r2, r0, r2, r8
 8012766:	9208      	str	r2, [sp, #32]
 8012768:	2700      	movs	r7, #0
 801276a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801276c:	1c50      	adds	r0, r2, #1
 801276e:	9017      	str	r0, [sp, #92]	; 0x5c
 8012770:	7852      	ldrb	r2, [r2, #1]
 8012772:	4638      	mov	r0, r7
 8012774:	e7c8      	b.n	8012708 <_strtod_l+0x1e8>
 8012776:	4628      	mov	r0, r5
 8012778:	e7d2      	b.n	8012720 <_strtod_l+0x200>
 801277a:	2f08      	cmp	r7, #8
 801277c:	f107 0701 	add.w	r7, r7, #1
 8012780:	dc04      	bgt.n	801278c <_strtod_l+0x26c>
 8012782:	9a08      	ldr	r2, [sp, #32]
 8012784:	fb0c f202 	mul.w	r2, ip, r2
 8012788:	9208      	str	r2, [sp, #32]
 801278a:	e7e0      	b.n	801274e <_strtod_l+0x22e>
 801278c:	2f10      	cmp	r7, #16
 801278e:	bfde      	ittt	le
 8012790:	9a06      	ldrle	r2, [sp, #24]
 8012792:	fb0c f202 	mulle.w	r2, ip, r2
 8012796:	9206      	strle	r2, [sp, #24]
 8012798:	e7d9      	b.n	801274e <_strtod_l+0x22e>
 801279a:	2b10      	cmp	r3, #16
 801279c:	bfdf      	itttt	le
 801279e:	9a06      	ldrle	r2, [sp, #24]
 80127a0:	200a      	movle	r0, #10
 80127a2:	fb00 8202 	mlale	r2, r0, r2, r8
 80127a6:	9206      	strle	r2, [sp, #24]
 80127a8:	e7de      	b.n	8012768 <_strtod_l+0x248>
 80127aa:	2301      	movs	r3, #1
 80127ac:	9304      	str	r3, [sp, #16]
 80127ae:	e777      	b.n	80126a0 <_strtod_l+0x180>
 80127b0:	f04f 0e01 	mov.w	lr, #1
 80127b4:	1cb2      	adds	r2, r6, #2
 80127b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80127b8:	78b2      	ldrb	r2, [r6, #2]
 80127ba:	e781      	b.n	80126c0 <_strtod_l+0x1a0>
 80127bc:	f04f 0e00 	mov.w	lr, #0
 80127c0:	e7f8      	b.n	80127b4 <_strtod_l+0x294>
 80127c2:	bf00      	nop
 80127c4:	08015ed8 	.word	0x08015ed8
 80127c8:	7ff00000 	.word	0x7ff00000
 80127cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80127ce:	f102 0c01 	add.w	ip, r2, #1
 80127d2:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80127d6:	7852      	ldrb	r2, [r2, #1]
 80127d8:	2a30      	cmp	r2, #48	; 0x30
 80127da:	d0f7      	beq.n	80127cc <_strtod_l+0x2ac>
 80127dc:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 80127e0:	f1bc 0f08 	cmp.w	ip, #8
 80127e4:	f63f af73 	bhi.w	80126ce <_strtod_l+0x1ae>
 80127e8:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 80127ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80127ee:	920e      	str	r2, [sp, #56]	; 0x38
 80127f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80127f2:	f102 0c01 	add.w	ip, r2, #1
 80127f6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 80127fa:	7852      	ldrb	r2, [r2, #1]
 80127fc:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8012800:	f1b9 0f09 	cmp.w	r9, #9
 8012804:	d939      	bls.n	801287a <_strtod_l+0x35a>
 8012806:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8012808:	ebac 0c07 	sub.w	ip, ip, r7
 801280c:	f1bc 0f08 	cmp.w	ip, #8
 8012810:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8012814:	dc37      	bgt.n	8012886 <_strtod_l+0x366>
 8012816:	45e0      	cmp	r8, ip
 8012818:	bfa8      	it	ge
 801281a:	46e0      	movge	r8, ip
 801281c:	f1be 0f00 	cmp.w	lr, #0
 8012820:	d001      	beq.n	8012826 <_strtod_l+0x306>
 8012822:	f1c8 0800 	rsb	r8, r8, #0
 8012826:	2b00      	cmp	r3, #0
 8012828:	d151      	bne.n	80128ce <_strtod_l+0x3ae>
 801282a:	2800      	cmp	r0, #0
 801282c:	f47f aeba 	bne.w	80125a4 <_strtod_l+0x84>
 8012830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012832:	2b00      	cmp	r3, #0
 8012834:	f47f aeb6 	bne.w	80125a4 <_strtod_l+0x84>
 8012838:	9b04      	ldr	r3, [sp, #16]
 801283a:	2b00      	cmp	r3, #0
 801283c:	f47f aed1 	bne.w	80125e2 <_strtod_l+0xc2>
 8012840:	2a4e      	cmp	r2, #78	; 0x4e
 8012842:	d027      	beq.n	8012894 <_strtod_l+0x374>
 8012844:	dc21      	bgt.n	801288a <_strtod_l+0x36a>
 8012846:	2a49      	cmp	r2, #73	; 0x49
 8012848:	f47f aecb 	bne.w	80125e2 <_strtod_l+0xc2>
 801284c:	499a      	ldr	r1, [pc, #616]	; (8012ab8 <_strtod_l+0x598>)
 801284e:	a817      	add	r0, sp, #92	; 0x5c
 8012850:	f001 ff62 	bl	8014718 <__match>
 8012854:	2800      	cmp	r0, #0
 8012856:	f43f aec4 	beq.w	80125e2 <_strtod_l+0xc2>
 801285a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801285c:	4997      	ldr	r1, [pc, #604]	; (8012abc <_strtod_l+0x59c>)
 801285e:	3b01      	subs	r3, #1
 8012860:	a817      	add	r0, sp, #92	; 0x5c
 8012862:	9317      	str	r3, [sp, #92]	; 0x5c
 8012864:	f001 ff58 	bl	8014718 <__match>
 8012868:	b910      	cbnz	r0, 8012870 <_strtod_l+0x350>
 801286a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801286c:	3301      	adds	r3, #1
 801286e:	9317      	str	r3, [sp, #92]	; 0x5c
 8012870:	f8df b260 	ldr.w	fp, [pc, #608]	; 8012ad4 <_strtod_l+0x5b4>
 8012874:	f04f 0a00 	mov.w	sl, #0
 8012878:	e694      	b.n	80125a4 <_strtod_l+0x84>
 801287a:	270a      	movs	r7, #10
 801287c:	fb07 2808 	mla	r8, r7, r8, r2
 8012880:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8012884:	e7b4      	b.n	80127f0 <_strtod_l+0x2d0>
 8012886:	46e0      	mov	r8, ip
 8012888:	e7c8      	b.n	801281c <_strtod_l+0x2fc>
 801288a:	2a69      	cmp	r2, #105	; 0x69
 801288c:	d0de      	beq.n	801284c <_strtod_l+0x32c>
 801288e:	2a6e      	cmp	r2, #110	; 0x6e
 8012890:	f47f aea7 	bne.w	80125e2 <_strtod_l+0xc2>
 8012894:	498a      	ldr	r1, [pc, #552]	; (8012ac0 <_strtod_l+0x5a0>)
 8012896:	a817      	add	r0, sp, #92	; 0x5c
 8012898:	f001 ff3e 	bl	8014718 <__match>
 801289c:	2800      	cmp	r0, #0
 801289e:	f43f aea0 	beq.w	80125e2 <_strtod_l+0xc2>
 80128a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	2b28      	cmp	r3, #40	; 0x28
 80128a8:	d10e      	bne.n	80128c8 <_strtod_l+0x3a8>
 80128aa:	aa1a      	add	r2, sp, #104	; 0x68
 80128ac:	4985      	ldr	r1, [pc, #532]	; (8012ac4 <_strtod_l+0x5a4>)
 80128ae:	a817      	add	r0, sp, #92	; 0x5c
 80128b0:	f001 ff46 	bl	8014740 <__hexnan>
 80128b4:	2805      	cmp	r0, #5
 80128b6:	d107      	bne.n	80128c8 <_strtod_l+0x3a8>
 80128b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80128ba:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80128be:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80128c2:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80128c6:	e66d      	b.n	80125a4 <_strtod_l+0x84>
 80128c8:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8012ad8 <_strtod_l+0x5b8>
 80128cc:	e7d2      	b.n	8012874 <_strtod_l+0x354>
 80128ce:	eddd 7a08 	vldr	s15, [sp, #32]
 80128d2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80128d6:	eba8 0201 	sub.w	r2, r8, r1
 80128da:	2d00      	cmp	r5, #0
 80128dc:	bf08      	it	eq
 80128de:	461d      	moveq	r5, r3
 80128e0:	2b10      	cmp	r3, #16
 80128e2:	9204      	str	r2, [sp, #16]
 80128e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80128e8:	461a      	mov	r2, r3
 80128ea:	bfa8      	it	ge
 80128ec:	2210      	movge	r2, #16
 80128ee:	2b09      	cmp	r3, #9
 80128f0:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80128f4:	dc14      	bgt.n	8012920 <_strtod_l+0x400>
 80128f6:	9904      	ldr	r1, [sp, #16]
 80128f8:	2900      	cmp	r1, #0
 80128fa:	f43f ae53 	beq.w	80125a4 <_strtod_l+0x84>
 80128fe:	9904      	ldr	r1, [sp, #16]
 8012900:	dd72      	ble.n	80129e8 <_strtod_l+0x4c8>
 8012902:	2916      	cmp	r1, #22
 8012904:	dc5a      	bgt.n	80129bc <_strtod_l+0x49c>
 8012906:	4970      	ldr	r1, [pc, #448]	; (8012ac8 <_strtod_l+0x5a8>)
 8012908:	9b04      	ldr	r3, [sp, #16]
 801290a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801290e:	ed91 7b00 	vldr	d7, [r1]
 8012912:	ec4b ab16 	vmov	d6, sl, fp
 8012916:	ee27 7b06 	vmul.f64	d7, d7, d6
 801291a:	ec5b ab17 	vmov	sl, fp, d7
 801291e:	e641      	b.n	80125a4 <_strtod_l+0x84>
 8012920:	4969      	ldr	r1, [pc, #420]	; (8012ac8 <_strtod_l+0x5a8>)
 8012922:	eddd 7a06 	vldr	s15, [sp, #24]
 8012926:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801292a:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 801292e:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8012932:	2b0f      	cmp	r3, #15
 8012934:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012938:	eea5 7b06 	vfma.f64	d7, d5, d6
 801293c:	ec5b ab17 	vmov	sl, fp, d7
 8012940:	ddd9      	ble.n	80128f6 <_strtod_l+0x3d6>
 8012942:	9904      	ldr	r1, [sp, #16]
 8012944:	1a9a      	subs	r2, r3, r2
 8012946:	440a      	add	r2, r1
 8012948:	2a00      	cmp	r2, #0
 801294a:	f340 8096 	ble.w	8012a7a <_strtod_l+0x55a>
 801294e:	f012 000f 	ands.w	r0, r2, #15
 8012952:	d00a      	beq.n	801296a <_strtod_l+0x44a>
 8012954:	495c      	ldr	r1, [pc, #368]	; (8012ac8 <_strtod_l+0x5a8>)
 8012956:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801295a:	ed91 7b00 	vldr	d7, [r1]
 801295e:	ec4b ab16 	vmov	d6, sl, fp
 8012962:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012966:	ec5b ab17 	vmov	sl, fp, d7
 801296a:	f032 020f 	bics.w	r2, r2, #15
 801296e:	d072      	beq.n	8012a56 <_strtod_l+0x536>
 8012970:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8012974:	dd45      	ble.n	8012a02 <_strtod_l+0x4e2>
 8012976:	2500      	movs	r5, #0
 8012978:	46a8      	mov	r8, r5
 801297a:	9506      	str	r5, [sp, #24]
 801297c:	46a9      	mov	r9, r5
 801297e:	2322      	movs	r3, #34	; 0x22
 8012980:	f8df b150 	ldr.w	fp, [pc, #336]	; 8012ad4 <_strtod_l+0x5b4>
 8012984:	6023      	str	r3, [r4, #0]
 8012986:	f04f 0a00 	mov.w	sl, #0
 801298a:	9b06      	ldr	r3, [sp, #24]
 801298c:	2b00      	cmp	r3, #0
 801298e:	f43f ae09 	beq.w	80125a4 <_strtod_l+0x84>
 8012992:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012994:	4620      	mov	r0, r4
 8012996:	f002 f823 	bl	80149e0 <_Bfree>
 801299a:	4649      	mov	r1, r9
 801299c:	4620      	mov	r0, r4
 801299e:	f002 f81f 	bl	80149e0 <_Bfree>
 80129a2:	4641      	mov	r1, r8
 80129a4:	4620      	mov	r0, r4
 80129a6:	f002 f81b 	bl	80149e0 <_Bfree>
 80129aa:	9906      	ldr	r1, [sp, #24]
 80129ac:	4620      	mov	r0, r4
 80129ae:	f002 f817 	bl	80149e0 <_Bfree>
 80129b2:	4629      	mov	r1, r5
 80129b4:	4620      	mov	r0, r4
 80129b6:	f002 f813 	bl	80149e0 <_Bfree>
 80129ba:	e5f3      	b.n	80125a4 <_strtod_l+0x84>
 80129bc:	9804      	ldr	r0, [sp, #16]
 80129be:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80129c2:	4281      	cmp	r1, r0
 80129c4:	dbbd      	blt.n	8012942 <_strtod_l+0x422>
 80129c6:	4a40      	ldr	r2, [pc, #256]	; (8012ac8 <_strtod_l+0x5a8>)
 80129c8:	f1c3 030f 	rsb	r3, r3, #15
 80129cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80129d0:	ed91 7b00 	vldr	d7, [r1]
 80129d4:	ec4b ab16 	vmov	d6, sl, fp
 80129d8:	1ac3      	subs	r3, r0, r3
 80129da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80129de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80129e2:	ed92 6b00 	vldr	d6, [r2]
 80129e6:	e796      	b.n	8012916 <_strtod_l+0x3f6>
 80129e8:	3116      	adds	r1, #22
 80129ea:	dbaa      	blt.n	8012942 <_strtod_l+0x422>
 80129ec:	4936      	ldr	r1, [pc, #216]	; (8012ac8 <_strtod_l+0x5a8>)
 80129ee:	9b04      	ldr	r3, [sp, #16]
 80129f0:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 80129f4:	ed91 7b00 	vldr	d7, [r1]
 80129f8:	ec4b ab16 	vmov	d6, sl, fp
 80129fc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012a00:	e78b      	b.n	801291a <_strtod_l+0x3fa>
 8012a02:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8012a06:	2000      	movs	r0, #0
 8012a08:	4e30      	ldr	r6, [pc, #192]	; (8012acc <_strtod_l+0x5ac>)
 8012a0a:	1112      	asrs	r2, r2, #4
 8012a0c:	4601      	mov	r1, r0
 8012a0e:	2a01      	cmp	r2, #1
 8012a10:	dc23      	bgt.n	8012a5a <_strtod_l+0x53a>
 8012a12:	b108      	cbz	r0, 8012a18 <_strtod_l+0x4f8>
 8012a14:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012a18:	4a2c      	ldr	r2, [pc, #176]	; (8012acc <_strtod_l+0x5ac>)
 8012a1a:	482d      	ldr	r0, [pc, #180]	; (8012ad0 <_strtod_l+0x5b0>)
 8012a1c:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8012a20:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8012a24:	ed91 7b00 	vldr	d7, [r1]
 8012a28:	ec4b ab16 	vmov	d6, sl, fp
 8012a2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012a30:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a34:	9907      	ldr	r1, [sp, #28]
 8012a36:	4a27      	ldr	r2, [pc, #156]	; (8012ad4 <_strtod_l+0x5b4>)
 8012a38:	400a      	ands	r2, r1
 8012a3a:	4282      	cmp	r2, r0
 8012a3c:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012a40:	d899      	bhi.n	8012976 <_strtod_l+0x456>
 8012a42:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8012a46:	4282      	cmp	r2, r0
 8012a48:	bf86      	itte	hi
 8012a4a:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 8012adc <_strtod_l+0x5bc>
 8012a4e:	f04f 3aff 	movhi.w	sl, #4294967295
 8012a52:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 8012a56:	2700      	movs	r7, #0
 8012a58:	e070      	b.n	8012b3c <_strtod_l+0x61c>
 8012a5a:	07d7      	lsls	r7, r2, #31
 8012a5c:	d50a      	bpl.n	8012a74 <_strtod_l+0x554>
 8012a5e:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 8012a62:	ed90 7b00 	vldr	d7, [r0]
 8012a66:	ed9d 6b06 	vldr	d6, [sp, #24]
 8012a6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012a6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a72:	2001      	movs	r0, #1
 8012a74:	3101      	adds	r1, #1
 8012a76:	1052      	asrs	r2, r2, #1
 8012a78:	e7c9      	b.n	8012a0e <_strtod_l+0x4ee>
 8012a7a:	d0ec      	beq.n	8012a56 <_strtod_l+0x536>
 8012a7c:	4252      	negs	r2, r2
 8012a7e:	f012 000f 	ands.w	r0, r2, #15
 8012a82:	d00a      	beq.n	8012a9a <_strtod_l+0x57a>
 8012a84:	4910      	ldr	r1, [pc, #64]	; (8012ac8 <_strtod_l+0x5a8>)
 8012a86:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8012a8a:	ed91 7b00 	vldr	d7, [r1]
 8012a8e:	ec4b ab16 	vmov	d6, sl, fp
 8012a92:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012a96:	ec5b ab17 	vmov	sl, fp, d7
 8012a9a:	1112      	asrs	r2, r2, #4
 8012a9c:	d0db      	beq.n	8012a56 <_strtod_l+0x536>
 8012a9e:	2a1f      	cmp	r2, #31
 8012aa0:	dd1e      	ble.n	8012ae0 <_strtod_l+0x5c0>
 8012aa2:	2500      	movs	r5, #0
 8012aa4:	46a8      	mov	r8, r5
 8012aa6:	9506      	str	r5, [sp, #24]
 8012aa8:	46a9      	mov	r9, r5
 8012aaa:	2322      	movs	r3, #34	; 0x22
 8012aac:	f04f 0a00 	mov.w	sl, #0
 8012ab0:	f04f 0b00 	mov.w	fp, #0
 8012ab4:	6023      	str	r3, [r4, #0]
 8012ab6:	e768      	b.n	801298a <_strtod_l+0x46a>
 8012ab8:	08015ea1 	.word	0x08015ea1
 8012abc:	08015f2b 	.word	0x08015f2b
 8012ac0:	08015ea9 	.word	0x08015ea9
 8012ac4:	08015eec 	.word	0x08015eec
 8012ac8:	08015fd0 	.word	0x08015fd0
 8012acc:	08015fa8 	.word	0x08015fa8
 8012ad0:	7ca00000 	.word	0x7ca00000
 8012ad4:	7ff00000 	.word	0x7ff00000
 8012ad8:	fff80000 	.word	0xfff80000
 8012adc:	7fefffff 	.word	0x7fefffff
 8012ae0:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8012ae4:	f012 0710 	ands.w	r7, r2, #16
 8012ae8:	49ab      	ldr	r1, [pc, #684]	; (8012d98 <_strtod_l+0x878>)
 8012aea:	bf18      	it	ne
 8012aec:	276a      	movne	r7, #106	; 0x6a
 8012aee:	2000      	movs	r0, #0
 8012af0:	2a00      	cmp	r2, #0
 8012af2:	f300 8113 	bgt.w	8012d1c <_strtod_l+0x7fc>
 8012af6:	b108      	cbz	r0, 8012afc <_strtod_l+0x5dc>
 8012af8:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 8012afc:	b1bf      	cbz	r7, 8012b2e <_strtod_l+0x60e>
 8012afe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8012b02:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8012b06:	2a00      	cmp	r2, #0
 8012b08:	4659      	mov	r1, fp
 8012b0a:	dd10      	ble.n	8012b2e <_strtod_l+0x60e>
 8012b0c:	2a1f      	cmp	r2, #31
 8012b0e:	f340 8113 	ble.w	8012d38 <_strtod_l+0x818>
 8012b12:	2a34      	cmp	r2, #52	; 0x34
 8012b14:	bfde      	ittt	le
 8012b16:	3a20      	suble	r2, #32
 8012b18:	f04f 30ff 	movle.w	r0, #4294967295
 8012b1c:	fa00 f202 	lslle.w	r2, r0, r2
 8012b20:	f04f 0a00 	mov.w	sl, #0
 8012b24:	bfcc      	ite	gt
 8012b26:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012b2a:	ea02 0b01 	andle.w	fp, r2, r1
 8012b2e:	ec4b ab17 	vmov	d7, sl, fp
 8012b32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b3a:	d0b2      	beq.n	8012aa2 <_strtod_l+0x582>
 8012b3c:	9a08      	ldr	r2, [sp, #32]
 8012b3e:	9200      	str	r2, [sp, #0]
 8012b40:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b42:	462a      	mov	r2, r5
 8012b44:	4620      	mov	r0, r4
 8012b46:	f001 ff9d 	bl	8014a84 <__s2b>
 8012b4a:	9006      	str	r0, [sp, #24]
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	f43f af12 	beq.w	8012976 <_strtod_l+0x456>
 8012b52:	9a04      	ldr	r2, [sp, #16]
 8012b54:	9b04      	ldr	r3, [sp, #16]
 8012b56:	2a00      	cmp	r2, #0
 8012b58:	f1c3 0300 	rsb	r3, r3, #0
 8012b5c:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8012d80 <_strtod_l+0x860>
 8012b60:	bfa8      	it	ge
 8012b62:	2300      	movge	r3, #0
 8012b64:	ed9f ab88 	vldr	d10, [pc, #544]	; 8012d88 <_strtod_l+0x868>
 8012b68:	ed9f bb89 	vldr	d11, [pc, #548]	; 8012d90 <_strtod_l+0x870>
 8012b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8012b6e:	2500      	movs	r5, #0
 8012b70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012b74:	9310      	str	r3, [sp, #64]	; 0x40
 8012b76:	46a8      	mov	r8, r5
 8012b78:	9b06      	ldr	r3, [sp, #24]
 8012b7a:	4620      	mov	r0, r4
 8012b7c:	6859      	ldr	r1, [r3, #4]
 8012b7e:	f001 fefb 	bl	8014978 <_Balloc>
 8012b82:	4681      	mov	r9, r0
 8012b84:	2800      	cmp	r0, #0
 8012b86:	f43f aefa 	beq.w	801297e <_strtod_l+0x45e>
 8012b8a:	9b06      	ldr	r3, [sp, #24]
 8012b8c:	691a      	ldr	r2, [r3, #16]
 8012b8e:	3202      	adds	r2, #2
 8012b90:	f103 010c 	add.w	r1, r3, #12
 8012b94:	0092      	lsls	r2, r2, #2
 8012b96:	300c      	adds	r0, #12
 8012b98:	f7fe fccc 	bl	8011534 <memcpy>
 8012b9c:	aa1a      	add	r2, sp, #104	; 0x68
 8012b9e:	a919      	add	r1, sp, #100	; 0x64
 8012ba0:	ec4b ab10 	vmov	d0, sl, fp
 8012ba4:	4620      	mov	r0, r4
 8012ba6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8012baa:	f002 fa27 	bl	8014ffc <__d2b>
 8012bae:	9018      	str	r0, [sp, #96]	; 0x60
 8012bb0:	2800      	cmp	r0, #0
 8012bb2:	f43f aee4 	beq.w	801297e <_strtod_l+0x45e>
 8012bb6:	2101      	movs	r1, #1
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f001 ffef 	bl	8014b9c <__i2b>
 8012bbe:	4680      	mov	r8, r0
 8012bc0:	2800      	cmp	r0, #0
 8012bc2:	f43f aedc 	beq.w	801297e <_strtod_l+0x45e>
 8012bc6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8012bc8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012bca:	2e00      	cmp	r6, #0
 8012bcc:	bfb1      	iteee	lt
 8012bce:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8012bd0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8012bd2:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8012bd4:	18f3      	addge	r3, r6, r3
 8012bd6:	bfba      	itte	lt
 8012bd8:	1b98      	sublt	r0, r3, r6
 8012bda:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012bdc:	9308      	strge	r3, [sp, #32]
 8012bde:	eba6 0607 	sub.w	r6, r6, r7
 8012be2:	bfb8      	it	lt
 8012be4:	9308      	strlt	r3, [sp, #32]
 8012be6:	4416      	add	r6, r2
 8012be8:	4b6c      	ldr	r3, [pc, #432]	; (8012d9c <_strtod_l+0x87c>)
 8012bea:	3e01      	subs	r6, #1
 8012bec:	429e      	cmp	r6, r3
 8012bee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012bf2:	f280 80b4 	bge.w	8012d5e <_strtod_l+0x83e>
 8012bf6:	1b9b      	subs	r3, r3, r6
 8012bf8:	2b1f      	cmp	r3, #31
 8012bfa:	eba2 0203 	sub.w	r2, r2, r3
 8012bfe:	f04f 0101 	mov.w	r1, #1
 8012c02:	f300 80a0 	bgt.w	8012d46 <_strtod_l+0x826>
 8012c06:	fa01 f303 	lsl.w	r3, r1, r3
 8012c0a:	9311      	str	r3, [sp, #68]	; 0x44
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012c10:	9b08      	ldr	r3, [sp, #32]
 8012c12:	4413      	add	r3, r2
 8012c14:	4402      	add	r2, r0
 8012c16:	18be      	adds	r6, r7, r2
 8012c18:	9a08      	ldr	r2, [sp, #32]
 8012c1a:	429a      	cmp	r2, r3
 8012c1c:	bfa8      	it	ge
 8012c1e:	461a      	movge	r2, r3
 8012c20:	42b2      	cmp	r2, r6
 8012c22:	bfa8      	it	ge
 8012c24:	4632      	movge	r2, r6
 8012c26:	2a00      	cmp	r2, #0
 8012c28:	dd04      	ble.n	8012c34 <_strtod_l+0x714>
 8012c2a:	9908      	ldr	r1, [sp, #32]
 8012c2c:	1a9b      	subs	r3, r3, r2
 8012c2e:	1ab6      	subs	r6, r6, r2
 8012c30:	1a8a      	subs	r2, r1, r2
 8012c32:	9208      	str	r2, [sp, #32]
 8012c34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c36:	b1c2      	cbz	r2, 8012c6a <_strtod_l+0x74a>
 8012c38:	4641      	mov	r1, r8
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	9315      	str	r3, [sp, #84]	; 0x54
 8012c3e:	f002 f84d 	bl	8014cdc <__pow5mult>
 8012c42:	4680      	mov	r8, r0
 8012c44:	2800      	cmp	r0, #0
 8012c46:	f43f ae9a 	beq.w	801297e <_strtod_l+0x45e>
 8012c4a:	4601      	mov	r1, r0
 8012c4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012c4e:	4620      	mov	r0, r4
 8012c50:	f001 ffad 	bl	8014bae <__multiply>
 8012c54:	900c      	str	r0, [sp, #48]	; 0x30
 8012c56:	2800      	cmp	r0, #0
 8012c58:	f43f ae91 	beq.w	801297e <_strtod_l+0x45e>
 8012c5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f001 febe 	bl	80149e0 <_Bfree>
 8012c64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012c66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012c68:	9218      	str	r2, [sp, #96]	; 0x60
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	dc7c      	bgt.n	8012d68 <_strtod_l+0x848>
 8012c6e:	9b04      	ldr	r3, [sp, #16]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	dd08      	ble.n	8012c86 <_strtod_l+0x766>
 8012c74:	4649      	mov	r1, r9
 8012c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012c78:	4620      	mov	r0, r4
 8012c7a:	f002 f82f 	bl	8014cdc <__pow5mult>
 8012c7e:	4681      	mov	r9, r0
 8012c80:	2800      	cmp	r0, #0
 8012c82:	f43f ae7c 	beq.w	801297e <_strtod_l+0x45e>
 8012c86:	2e00      	cmp	r6, #0
 8012c88:	dd08      	ble.n	8012c9c <_strtod_l+0x77c>
 8012c8a:	4649      	mov	r1, r9
 8012c8c:	4632      	mov	r2, r6
 8012c8e:	4620      	mov	r0, r4
 8012c90:	f002 f872 	bl	8014d78 <__lshift>
 8012c94:	4681      	mov	r9, r0
 8012c96:	2800      	cmp	r0, #0
 8012c98:	f43f ae71 	beq.w	801297e <_strtod_l+0x45e>
 8012c9c:	9b08      	ldr	r3, [sp, #32]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	dd08      	ble.n	8012cb4 <_strtod_l+0x794>
 8012ca2:	4641      	mov	r1, r8
 8012ca4:	461a      	mov	r2, r3
 8012ca6:	4620      	mov	r0, r4
 8012ca8:	f002 f866 	bl	8014d78 <__lshift>
 8012cac:	4680      	mov	r8, r0
 8012cae:	2800      	cmp	r0, #0
 8012cb0:	f43f ae65 	beq.w	801297e <_strtod_l+0x45e>
 8012cb4:	464a      	mov	r2, r9
 8012cb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012cb8:	4620      	mov	r0, r4
 8012cba:	f002 f8cb 	bl	8014e54 <__mdiff>
 8012cbe:	4605      	mov	r5, r0
 8012cc0:	2800      	cmp	r0, #0
 8012cc2:	f43f ae5c 	beq.w	801297e <_strtod_l+0x45e>
 8012cc6:	68c3      	ldr	r3, [r0, #12]
 8012cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8012cca:	2300      	movs	r3, #0
 8012ccc:	60c3      	str	r3, [r0, #12]
 8012cce:	4641      	mov	r1, r8
 8012cd0:	f002 f8a6 	bl	8014e20 <__mcmp>
 8012cd4:	2800      	cmp	r0, #0
 8012cd6:	da63      	bge.n	8012da0 <_strtod_l+0x880>
 8012cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012cda:	b9e3      	cbnz	r3, 8012d16 <_strtod_l+0x7f6>
 8012cdc:	f1ba 0f00 	cmp.w	sl, #0
 8012ce0:	d119      	bne.n	8012d16 <_strtod_l+0x7f6>
 8012ce2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012ce6:	b9b3      	cbnz	r3, 8012d16 <_strtod_l+0x7f6>
 8012ce8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012cec:	0d1b      	lsrs	r3, r3, #20
 8012cee:	051b      	lsls	r3, r3, #20
 8012cf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012cf4:	d90f      	bls.n	8012d16 <_strtod_l+0x7f6>
 8012cf6:	696b      	ldr	r3, [r5, #20]
 8012cf8:	b913      	cbnz	r3, 8012d00 <_strtod_l+0x7e0>
 8012cfa:	692b      	ldr	r3, [r5, #16]
 8012cfc:	2b01      	cmp	r3, #1
 8012cfe:	dd0a      	ble.n	8012d16 <_strtod_l+0x7f6>
 8012d00:	4629      	mov	r1, r5
 8012d02:	2201      	movs	r2, #1
 8012d04:	4620      	mov	r0, r4
 8012d06:	f002 f837 	bl	8014d78 <__lshift>
 8012d0a:	4641      	mov	r1, r8
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	f002 f887 	bl	8014e20 <__mcmp>
 8012d12:	2800      	cmp	r0, #0
 8012d14:	dc75      	bgt.n	8012e02 <_strtod_l+0x8e2>
 8012d16:	2f00      	cmp	r7, #0
 8012d18:	d17f      	bne.n	8012e1a <_strtod_l+0x8fa>
 8012d1a:	e63a      	b.n	8012992 <_strtod_l+0x472>
 8012d1c:	07d6      	lsls	r6, r2, #31
 8012d1e:	d508      	bpl.n	8012d32 <_strtod_l+0x812>
 8012d20:	ed9d 6b06 	vldr	d6, [sp, #24]
 8012d24:	ed91 7b00 	vldr	d7, [r1]
 8012d28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8012d2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012d30:	2001      	movs	r0, #1
 8012d32:	1052      	asrs	r2, r2, #1
 8012d34:	3108      	adds	r1, #8
 8012d36:	e6db      	b.n	8012af0 <_strtod_l+0x5d0>
 8012d38:	f04f 31ff 	mov.w	r1, #4294967295
 8012d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8012d40:	ea02 0a0a 	and.w	sl, r2, sl
 8012d44:	e6f3      	b.n	8012b2e <_strtod_l+0x60e>
 8012d46:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012d4a:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012d4e:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012d52:	36e2      	adds	r6, #226	; 0xe2
 8012d54:	fa01 f306 	lsl.w	r3, r1, r6
 8012d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d5a:	9111      	str	r1, [sp, #68]	; 0x44
 8012d5c:	e758      	b.n	8012c10 <_strtod_l+0x6f0>
 8012d5e:	2300      	movs	r3, #0
 8012d60:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d62:	2301      	movs	r3, #1
 8012d64:	9311      	str	r3, [sp, #68]	; 0x44
 8012d66:	e753      	b.n	8012c10 <_strtod_l+0x6f0>
 8012d68:	461a      	mov	r2, r3
 8012d6a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012d6c:	4620      	mov	r0, r4
 8012d6e:	f002 f803 	bl	8014d78 <__lshift>
 8012d72:	9018      	str	r0, [sp, #96]	; 0x60
 8012d74:	2800      	cmp	r0, #0
 8012d76:	f47f af7a 	bne.w	8012c6e <_strtod_l+0x74e>
 8012d7a:	e600      	b.n	801297e <_strtod_l+0x45e>
 8012d7c:	f3af 8000 	nop.w
 8012d80:	94a03595 	.word	0x94a03595
 8012d84:	3fdfffff 	.word	0x3fdfffff
 8012d88:	35afe535 	.word	0x35afe535
 8012d8c:	3fe00000 	.word	0x3fe00000
 8012d90:	94a03595 	.word	0x94a03595
 8012d94:	3fcfffff 	.word	0x3fcfffff
 8012d98:	08015f00 	.word	0x08015f00
 8012d9c:	fffffc02 	.word	0xfffffc02
 8012da0:	f8cd b020 	str.w	fp, [sp, #32]
 8012da4:	f040 8085 	bne.w	8012eb2 <_strtod_l+0x992>
 8012da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012daa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012dae:	b322      	cbz	r2, 8012dfa <_strtod_l+0x8da>
 8012db0:	4ab7      	ldr	r2, [pc, #732]	; (8013090 <_strtod_l+0xb70>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d154      	bne.n	8012e60 <_strtod_l+0x940>
 8012db6:	4651      	mov	r1, sl
 8012db8:	b1e7      	cbz	r7, 8012df4 <_strtod_l+0x8d4>
 8012dba:	4bb6      	ldr	r3, [pc, #728]	; (8013094 <_strtod_l+0xb74>)
 8012dbc:	465a      	mov	r2, fp
 8012dbe:	4013      	ands	r3, r2
 8012dc0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8012dc8:	d803      	bhi.n	8012dd2 <_strtod_l+0x8b2>
 8012dca:	0d1b      	lsrs	r3, r3, #20
 8012dcc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012dd0:	409a      	lsls	r2, r3
 8012dd2:	4291      	cmp	r1, r2
 8012dd4:	d144      	bne.n	8012e60 <_strtod_l+0x940>
 8012dd6:	4bb0      	ldr	r3, [pc, #704]	; (8013098 <_strtod_l+0xb78>)
 8012dd8:	9a08      	ldr	r2, [sp, #32]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d102      	bne.n	8012de4 <_strtod_l+0x8c4>
 8012dde:	3101      	adds	r1, #1
 8012de0:	f43f adcd 	beq.w	801297e <_strtod_l+0x45e>
 8012de4:	4bab      	ldr	r3, [pc, #684]	; (8013094 <_strtod_l+0xb74>)
 8012de6:	9a08      	ldr	r2, [sp, #32]
 8012de8:	401a      	ands	r2, r3
 8012dea:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 8012dee:	f04f 0a00 	mov.w	sl, #0
 8012df2:	e790      	b.n	8012d16 <_strtod_l+0x7f6>
 8012df4:	f04f 32ff 	mov.w	r2, #4294967295
 8012df8:	e7eb      	b.n	8012dd2 <_strtod_l+0x8b2>
 8012dfa:	bb8b      	cbnz	r3, 8012e60 <_strtod_l+0x940>
 8012dfc:	f1ba 0f00 	cmp.w	sl, #0
 8012e00:	d12e      	bne.n	8012e60 <_strtod_l+0x940>
 8012e02:	465b      	mov	r3, fp
 8012e04:	4aa3      	ldr	r2, [pc, #652]	; (8013094 <_strtod_l+0xb74>)
 8012e06:	b30f      	cbz	r7, 8012e4c <_strtod_l+0x92c>
 8012e08:	ea02 010b 	and.w	r1, r2, fp
 8012e0c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012e10:	dc1c      	bgt.n	8012e4c <_strtod_l+0x92c>
 8012e12:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012e16:	f77f ae48 	ble.w	8012aaa <_strtod_l+0x58a>
 8012e1a:	4aa0      	ldr	r2, [pc, #640]	; (801309c <_strtod_l+0xb7c>)
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 8012e22:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 8012e26:	ec4b ab17 	vmov	d7, sl, fp
 8012e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e2e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012e32:	9b05      	ldr	r3, [sp, #20]
 8012e34:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f47f adaa 	bne.w	8012992 <_strtod_l+0x472>
 8012e3e:	9b04      	ldr	r3, [sp, #16]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	f47f ada6 	bne.w	8012992 <_strtod_l+0x472>
 8012e46:	2322      	movs	r3, #34	; 0x22
 8012e48:	6023      	str	r3, [r4, #0]
 8012e4a:	e5a2      	b.n	8012992 <_strtod_l+0x472>
 8012e4c:	4013      	ands	r3, r2
 8012e4e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012e52:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8012e56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012e5a:	f04f 3aff 	mov.w	sl, #4294967295
 8012e5e:	e75a      	b.n	8012d16 <_strtod_l+0x7f6>
 8012e60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e62:	b18b      	cbz	r3, 8012e88 <_strtod_l+0x968>
 8012e64:	9a08      	ldr	r2, [sp, #32]
 8012e66:	4213      	tst	r3, r2
 8012e68:	f43f af55 	beq.w	8012d16 <_strtod_l+0x7f6>
 8012e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e6e:	463a      	mov	r2, r7
 8012e70:	4650      	mov	r0, sl
 8012e72:	4659      	mov	r1, fp
 8012e74:	b163      	cbz	r3, 8012e90 <_strtod_l+0x970>
 8012e76:	f7ff fb39 	bl	80124ec <sulp>
 8012e7a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012e7e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8012e82:	ec5b ab17 	vmov	sl, fp, d7
 8012e86:	e746      	b.n	8012d16 <_strtod_l+0x7f6>
 8012e88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012e8a:	ea13 0f0a 	tst.w	r3, sl
 8012e8e:	e7eb      	b.n	8012e68 <_strtod_l+0x948>
 8012e90:	f7ff fb2c 	bl	80124ec <sulp>
 8012e94:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8012e98:	ee37 7b40 	vsub.f64	d7, d7, d0
 8012e9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012ea0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea8:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8012eac:	f43f adfd 	beq.w	8012aaa <_strtod_l+0x58a>
 8012eb0:	e731      	b.n	8012d16 <_strtod_l+0x7f6>
 8012eb2:	4641      	mov	r1, r8
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	f002 f8f0 	bl	801509a <__ratio>
 8012eba:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8012ebe:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec6:	d869      	bhi.n	8012f9c <_strtod_l+0xa7c>
 8012ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d045      	beq.n	8012f5a <_strtod_l+0xa3a>
 8012ece:	4b74      	ldr	r3, [pc, #464]	; (80130a0 <_strtod_l+0xb80>)
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8012ed6:	9808      	ldr	r0, [sp, #32]
 8012ed8:	496e      	ldr	r1, [pc, #440]	; (8013094 <_strtod_l+0xb74>)
 8012eda:	ea00 0601 	and.w	r6, r0, r1
 8012ede:	4871      	ldr	r0, [pc, #452]	; (80130a4 <_strtod_l+0xb84>)
 8012ee0:	4286      	cmp	r6, r0
 8012ee2:	f040 8089 	bne.w	8012ff8 <_strtod_l+0xad8>
 8012ee6:	910f      	str	r1, [sp, #60]	; 0x3c
 8012ee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012eec:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8012ef0:	9908      	ldr	r1, [sp, #32]
 8012ef2:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8012ef6:	ec4b ab10 	vmov	d0, sl, fp
 8012efa:	ec43 2b1c 	vmov	d12, r2, r3
 8012efe:	f002 f807 	bl	8014f10 <__ulp>
 8012f02:	ec4b ab1d 	vmov	d13, sl, fp
 8012f06:	eeac db00 	vfma.f64	d13, d12, d0
 8012f0a:	ed8d db08 	vstr	d13, [sp, #32]
 8012f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012f12:	4a65      	ldr	r2, [pc, #404]	; (80130a8 <_strtod_l+0xb88>)
 8012f14:	4019      	ands	r1, r3
 8012f16:	4291      	cmp	r1, r2
 8012f18:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 8012f1c:	d948      	bls.n	8012fb0 <_strtod_l+0xa90>
 8012f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f20:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d103      	bne.n	8012f30 <_strtod_l+0xa10>
 8012f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	f43f ad27 	beq.w	801297e <_strtod_l+0x45e>
 8012f30:	f8df b164 	ldr.w	fp, [pc, #356]	; 8013098 <_strtod_l+0xb78>
 8012f34:	f04f 3aff 	mov.w	sl, #4294967295
 8012f38:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012f3a:	4620      	mov	r0, r4
 8012f3c:	f001 fd50 	bl	80149e0 <_Bfree>
 8012f40:	4649      	mov	r1, r9
 8012f42:	4620      	mov	r0, r4
 8012f44:	f001 fd4c 	bl	80149e0 <_Bfree>
 8012f48:	4641      	mov	r1, r8
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	f001 fd48 	bl	80149e0 <_Bfree>
 8012f50:	4629      	mov	r1, r5
 8012f52:	4620      	mov	r0, r4
 8012f54:	f001 fd44 	bl	80149e0 <_Bfree>
 8012f58:	e60e      	b.n	8012b78 <_strtod_l+0x658>
 8012f5a:	f1ba 0f00 	cmp.w	sl, #0
 8012f5e:	d113      	bne.n	8012f88 <_strtod_l+0xa68>
 8012f60:	9b08      	ldr	r3, [sp, #32]
 8012f62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f66:	b9b3      	cbnz	r3, 8012f96 <_strtod_l+0xa76>
 8012f68:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8012f6c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8012f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f74:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012f78:	d401      	bmi.n	8012f7e <_strtod_l+0xa5e>
 8012f7a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012f7e:	eeb1 7b48 	vneg.f64	d7, d8
 8012f82:	ec53 2b17 	vmov	r2, r3, d7
 8012f86:	e7a6      	b.n	8012ed6 <_strtod_l+0x9b6>
 8012f88:	f1ba 0f01 	cmp.w	sl, #1
 8012f8c:	d103      	bne.n	8012f96 <_strtod_l+0xa76>
 8012f8e:	9b08      	ldr	r3, [sp, #32]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	f43f ad8a 	beq.w	8012aaa <_strtod_l+0x58a>
 8012f96:	2200      	movs	r2, #0
 8012f98:	4b44      	ldr	r3, [pc, #272]	; (80130ac <_strtod_l+0xb8c>)
 8012f9a:	e79a      	b.n	8012ed2 <_strtod_l+0x9b2>
 8012f9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012f9e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8012fa2:	ee20 8b08 	vmul.f64	d8, d0, d8
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d0e9      	beq.n	8012f7e <_strtod_l+0xa5e>
 8012faa:	ec53 2b18 	vmov	r2, r3, d8
 8012fae:	e792      	b.n	8012ed6 <_strtod_l+0x9b6>
 8012fb0:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8012fb4:	2f00      	cmp	r7, #0
 8012fb6:	d1bf      	bne.n	8012f38 <_strtod_l+0xa18>
 8012fb8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012fbc:	0d1b      	lsrs	r3, r3, #20
 8012fbe:	051b      	lsls	r3, r3, #20
 8012fc0:	429e      	cmp	r6, r3
 8012fc2:	d1b9      	bne.n	8012f38 <_strtod_l+0xa18>
 8012fc4:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8012fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012fca:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8012fce:	ee38 8b40 	vsub.f64	d8, d8, d0
 8012fd2:	b92b      	cbnz	r3, 8012fe0 <_strtod_l+0xac0>
 8012fd4:	f1ba 0f00 	cmp.w	sl, #0
 8012fd8:	d102      	bne.n	8012fe0 <_strtod_l+0xac0>
 8012fda:	f3cb 0213 	ubfx	r2, fp, #0, #20
 8012fde:	b3d2      	cbz	r2, 8013056 <_strtod_l+0xb36>
 8012fe0:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8012fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fe8:	f53f acd3 	bmi.w	8012992 <_strtod_l+0x472>
 8012fec:	eeb4 8bca 	vcmpe.f64	d8, d10
 8012ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff4:	dda0      	ble.n	8012f38 <_strtod_l+0xa18>
 8012ff6:	e4cc      	b.n	8012992 <_strtod_l+0x472>
 8012ff8:	b1ef      	cbz	r7, 8013036 <_strtod_l+0xb16>
 8012ffa:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 8012ffe:	d81a      	bhi.n	8013036 <_strtod_l+0xb16>
 8013000:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8013088 <_strtod_l+0xb68>
 8013004:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801300c:	d810      	bhi.n	8013030 <_strtod_l+0xb10>
 801300e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 8013012:	ee17 3a90 	vmov	r3, s15
 8013016:	2b00      	cmp	r3, #0
 8013018:	bf08      	it	eq
 801301a:	2301      	moveq	r3, #1
 801301c:	ee07 3a90 	vmov	s15, r3
 8013020:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013022:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8013026:	b99b      	cbnz	r3, 8013050 <_strtod_l+0xb30>
 8013028:	eeb1 7b48 	vneg.f64	d7, d8
 801302c:	ec53 2b17 	vmov	r2, r3, d7
 8013030:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8013034:	1b8b      	subs	r3, r1, r6
 8013036:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801303a:	ec43 2b1c 	vmov	d12, r2, r3
 801303e:	f001 ff67 	bl	8014f10 <__ulp>
 8013042:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8013046:	eeac 7b00 	vfma.f64	d7, d12, d0
 801304a:	ec5b ab17 	vmov	sl, fp, d7
 801304e:	e7b1      	b.n	8012fb4 <_strtod_l+0xa94>
 8013050:	ec53 2b18 	vmov	r2, r3, d8
 8013054:	e7ec      	b.n	8013030 <_strtod_l+0xb10>
 8013056:	eeb4 8bcb 	vcmpe.f64	d8, d11
 801305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801305e:	f57f af6b 	bpl.w	8012f38 <_strtod_l+0xa18>
 8013062:	e496      	b.n	8012992 <_strtod_l+0x472>
 8013064:	2300      	movs	r3, #0
 8013066:	930d      	str	r3, [sp, #52]	; 0x34
 8013068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801306a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801306c:	6013      	str	r3, [r2, #0]
 801306e:	f7ff ba9d 	b.w	80125ac <_strtod_l+0x8c>
 8013072:	2a65      	cmp	r2, #101	; 0x65
 8013074:	f04f 0100 	mov.w	r1, #0
 8013078:	f43f ab97 	beq.w	80127aa <_strtod_l+0x28a>
 801307c:	2701      	movs	r7, #1
 801307e:	460b      	mov	r3, r1
 8013080:	9704      	str	r7, [sp, #16]
 8013082:	f7ff bb0a 	b.w	801269a <_strtod_l+0x17a>
 8013086:	bf00      	nop
 8013088:	ffc00000 	.word	0xffc00000
 801308c:	41dfffff 	.word	0x41dfffff
 8013090:	000fffff 	.word	0x000fffff
 8013094:	7ff00000 	.word	0x7ff00000
 8013098:	7fefffff 	.word	0x7fefffff
 801309c:	39500000 	.word	0x39500000
 80130a0:	3ff00000 	.word	0x3ff00000
 80130a4:	7fe00000 	.word	0x7fe00000
 80130a8:	7c9fffff 	.word	0x7c9fffff
 80130ac:	bff00000 	.word	0xbff00000

080130b0 <_strtod_r>:
 80130b0:	4b05      	ldr	r3, [pc, #20]	; (80130c8 <_strtod_r+0x18>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	b410      	push	{r4}
 80130b6:	6a1b      	ldr	r3, [r3, #32]
 80130b8:	4c04      	ldr	r4, [pc, #16]	; (80130cc <_strtod_r+0x1c>)
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	bf08      	it	eq
 80130be:	4623      	moveq	r3, r4
 80130c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80130c4:	f7ff ba2c 	b.w	8012520 <_strtod_l>
 80130c8:	2000019c 	.word	0x2000019c
 80130cc:	20000200 	.word	0x20000200

080130d0 <_strtol_l.isra.0>:
 80130d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80130d4:	4680      	mov	r8, r0
 80130d6:	4689      	mov	r9, r1
 80130d8:	4692      	mov	sl, r2
 80130da:	461e      	mov	r6, r3
 80130dc:	460f      	mov	r7, r1
 80130de:	463d      	mov	r5, r7
 80130e0:	9808      	ldr	r0, [sp, #32]
 80130e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130e6:	f001 fbbb 	bl	8014860 <__locale_ctype_ptr_l>
 80130ea:	4420      	add	r0, r4
 80130ec:	7843      	ldrb	r3, [r0, #1]
 80130ee:	f013 0308 	ands.w	r3, r3, #8
 80130f2:	d132      	bne.n	801315a <_strtol_l.isra.0+0x8a>
 80130f4:	2c2d      	cmp	r4, #45	; 0x2d
 80130f6:	d132      	bne.n	801315e <_strtol_l.isra.0+0x8e>
 80130f8:	787c      	ldrb	r4, [r7, #1]
 80130fa:	1cbd      	adds	r5, r7, #2
 80130fc:	2201      	movs	r2, #1
 80130fe:	2e00      	cmp	r6, #0
 8013100:	d05d      	beq.n	80131be <_strtol_l.isra.0+0xee>
 8013102:	2e10      	cmp	r6, #16
 8013104:	d109      	bne.n	801311a <_strtol_l.isra.0+0x4a>
 8013106:	2c30      	cmp	r4, #48	; 0x30
 8013108:	d107      	bne.n	801311a <_strtol_l.isra.0+0x4a>
 801310a:	782b      	ldrb	r3, [r5, #0]
 801310c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013110:	2b58      	cmp	r3, #88	; 0x58
 8013112:	d14f      	bne.n	80131b4 <_strtol_l.isra.0+0xe4>
 8013114:	786c      	ldrb	r4, [r5, #1]
 8013116:	2610      	movs	r6, #16
 8013118:	3502      	adds	r5, #2
 801311a:	2a00      	cmp	r2, #0
 801311c:	bf14      	ite	ne
 801311e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013122:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013126:	2700      	movs	r7, #0
 8013128:	fbb1 fcf6 	udiv	ip, r1, r6
 801312c:	4638      	mov	r0, r7
 801312e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013132:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013136:	2b09      	cmp	r3, #9
 8013138:	d817      	bhi.n	801316a <_strtol_l.isra.0+0x9a>
 801313a:	461c      	mov	r4, r3
 801313c:	42a6      	cmp	r6, r4
 801313e:	dd23      	ble.n	8013188 <_strtol_l.isra.0+0xb8>
 8013140:	1c7b      	adds	r3, r7, #1
 8013142:	d007      	beq.n	8013154 <_strtol_l.isra.0+0x84>
 8013144:	4584      	cmp	ip, r0
 8013146:	d31c      	bcc.n	8013182 <_strtol_l.isra.0+0xb2>
 8013148:	d101      	bne.n	801314e <_strtol_l.isra.0+0x7e>
 801314a:	45a6      	cmp	lr, r4
 801314c:	db19      	blt.n	8013182 <_strtol_l.isra.0+0xb2>
 801314e:	fb00 4006 	mla	r0, r0, r6, r4
 8013152:	2701      	movs	r7, #1
 8013154:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013158:	e7eb      	b.n	8013132 <_strtol_l.isra.0+0x62>
 801315a:	462f      	mov	r7, r5
 801315c:	e7bf      	b.n	80130de <_strtol_l.isra.0+0xe>
 801315e:	2c2b      	cmp	r4, #43	; 0x2b
 8013160:	bf04      	itt	eq
 8013162:	1cbd      	addeq	r5, r7, #2
 8013164:	787c      	ldrbeq	r4, [r7, #1]
 8013166:	461a      	mov	r2, r3
 8013168:	e7c9      	b.n	80130fe <_strtol_l.isra.0+0x2e>
 801316a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801316e:	2b19      	cmp	r3, #25
 8013170:	d801      	bhi.n	8013176 <_strtol_l.isra.0+0xa6>
 8013172:	3c37      	subs	r4, #55	; 0x37
 8013174:	e7e2      	b.n	801313c <_strtol_l.isra.0+0x6c>
 8013176:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801317a:	2b19      	cmp	r3, #25
 801317c:	d804      	bhi.n	8013188 <_strtol_l.isra.0+0xb8>
 801317e:	3c57      	subs	r4, #87	; 0x57
 8013180:	e7dc      	b.n	801313c <_strtol_l.isra.0+0x6c>
 8013182:	f04f 37ff 	mov.w	r7, #4294967295
 8013186:	e7e5      	b.n	8013154 <_strtol_l.isra.0+0x84>
 8013188:	1c7b      	adds	r3, r7, #1
 801318a:	d108      	bne.n	801319e <_strtol_l.isra.0+0xce>
 801318c:	2322      	movs	r3, #34	; 0x22
 801318e:	f8c8 3000 	str.w	r3, [r8]
 8013192:	4608      	mov	r0, r1
 8013194:	f1ba 0f00 	cmp.w	sl, #0
 8013198:	d107      	bne.n	80131aa <_strtol_l.isra.0+0xda>
 801319a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801319e:	b102      	cbz	r2, 80131a2 <_strtol_l.isra.0+0xd2>
 80131a0:	4240      	negs	r0, r0
 80131a2:	f1ba 0f00 	cmp.w	sl, #0
 80131a6:	d0f8      	beq.n	801319a <_strtol_l.isra.0+0xca>
 80131a8:	b10f      	cbz	r7, 80131ae <_strtol_l.isra.0+0xde>
 80131aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80131ae:	f8ca 9000 	str.w	r9, [sl]
 80131b2:	e7f2      	b.n	801319a <_strtol_l.isra.0+0xca>
 80131b4:	2430      	movs	r4, #48	; 0x30
 80131b6:	2e00      	cmp	r6, #0
 80131b8:	d1af      	bne.n	801311a <_strtol_l.isra.0+0x4a>
 80131ba:	2608      	movs	r6, #8
 80131bc:	e7ad      	b.n	801311a <_strtol_l.isra.0+0x4a>
 80131be:	2c30      	cmp	r4, #48	; 0x30
 80131c0:	d0a3      	beq.n	801310a <_strtol_l.isra.0+0x3a>
 80131c2:	260a      	movs	r6, #10
 80131c4:	e7a9      	b.n	801311a <_strtol_l.isra.0+0x4a>
	...

080131c8 <_strtol_r>:
 80131c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131ca:	4c06      	ldr	r4, [pc, #24]	; (80131e4 <_strtol_r+0x1c>)
 80131cc:	4d06      	ldr	r5, [pc, #24]	; (80131e8 <_strtol_r+0x20>)
 80131ce:	6824      	ldr	r4, [r4, #0]
 80131d0:	6a24      	ldr	r4, [r4, #32]
 80131d2:	2c00      	cmp	r4, #0
 80131d4:	bf08      	it	eq
 80131d6:	462c      	moveq	r4, r5
 80131d8:	9400      	str	r4, [sp, #0]
 80131da:	f7ff ff79 	bl	80130d0 <_strtol_l.isra.0>
 80131de:	b003      	add	sp, #12
 80131e0:	bd30      	pop	{r4, r5, pc}
 80131e2:	bf00      	nop
 80131e4:	2000019c 	.word	0x2000019c
 80131e8:	20000200 	.word	0x20000200

080131ec <__swbuf_r>:
 80131ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ee:	460e      	mov	r6, r1
 80131f0:	4614      	mov	r4, r2
 80131f2:	4605      	mov	r5, r0
 80131f4:	b118      	cbz	r0, 80131fe <__swbuf_r+0x12>
 80131f6:	6983      	ldr	r3, [r0, #24]
 80131f8:	b90b      	cbnz	r3, 80131fe <__swbuf_r+0x12>
 80131fa:	f000 ff81 	bl	8014100 <__sinit>
 80131fe:	4b21      	ldr	r3, [pc, #132]	; (8013284 <__swbuf_r+0x98>)
 8013200:	429c      	cmp	r4, r3
 8013202:	d12a      	bne.n	801325a <__swbuf_r+0x6e>
 8013204:	686c      	ldr	r4, [r5, #4]
 8013206:	69a3      	ldr	r3, [r4, #24]
 8013208:	60a3      	str	r3, [r4, #8]
 801320a:	89a3      	ldrh	r3, [r4, #12]
 801320c:	071a      	lsls	r2, r3, #28
 801320e:	d52e      	bpl.n	801326e <__swbuf_r+0x82>
 8013210:	6923      	ldr	r3, [r4, #16]
 8013212:	b363      	cbz	r3, 801326e <__swbuf_r+0x82>
 8013214:	6923      	ldr	r3, [r4, #16]
 8013216:	6820      	ldr	r0, [r4, #0]
 8013218:	1ac0      	subs	r0, r0, r3
 801321a:	6963      	ldr	r3, [r4, #20]
 801321c:	b2f6      	uxtb	r6, r6
 801321e:	4283      	cmp	r3, r0
 8013220:	4637      	mov	r7, r6
 8013222:	dc04      	bgt.n	801322e <__swbuf_r+0x42>
 8013224:	4621      	mov	r1, r4
 8013226:	4628      	mov	r0, r5
 8013228:	f000 ff00 	bl	801402c <_fflush_r>
 801322c:	bb28      	cbnz	r0, 801327a <__swbuf_r+0x8e>
 801322e:	68a3      	ldr	r3, [r4, #8]
 8013230:	3b01      	subs	r3, #1
 8013232:	60a3      	str	r3, [r4, #8]
 8013234:	6823      	ldr	r3, [r4, #0]
 8013236:	1c5a      	adds	r2, r3, #1
 8013238:	6022      	str	r2, [r4, #0]
 801323a:	701e      	strb	r6, [r3, #0]
 801323c:	6963      	ldr	r3, [r4, #20]
 801323e:	3001      	adds	r0, #1
 8013240:	4283      	cmp	r3, r0
 8013242:	d004      	beq.n	801324e <__swbuf_r+0x62>
 8013244:	89a3      	ldrh	r3, [r4, #12]
 8013246:	07db      	lsls	r3, r3, #31
 8013248:	d519      	bpl.n	801327e <__swbuf_r+0x92>
 801324a:	2e0a      	cmp	r6, #10
 801324c:	d117      	bne.n	801327e <__swbuf_r+0x92>
 801324e:	4621      	mov	r1, r4
 8013250:	4628      	mov	r0, r5
 8013252:	f000 feeb 	bl	801402c <_fflush_r>
 8013256:	b190      	cbz	r0, 801327e <__swbuf_r+0x92>
 8013258:	e00f      	b.n	801327a <__swbuf_r+0x8e>
 801325a:	4b0b      	ldr	r3, [pc, #44]	; (8013288 <__swbuf_r+0x9c>)
 801325c:	429c      	cmp	r4, r3
 801325e:	d101      	bne.n	8013264 <__swbuf_r+0x78>
 8013260:	68ac      	ldr	r4, [r5, #8]
 8013262:	e7d0      	b.n	8013206 <__swbuf_r+0x1a>
 8013264:	4b09      	ldr	r3, [pc, #36]	; (801328c <__swbuf_r+0xa0>)
 8013266:	429c      	cmp	r4, r3
 8013268:	bf08      	it	eq
 801326a:	68ec      	ldreq	r4, [r5, #12]
 801326c:	e7cb      	b.n	8013206 <__swbuf_r+0x1a>
 801326e:	4621      	mov	r1, r4
 8013270:	4628      	mov	r0, r5
 8013272:	f000 f80d 	bl	8013290 <__swsetup_r>
 8013276:	2800      	cmp	r0, #0
 8013278:	d0cc      	beq.n	8013214 <__swbuf_r+0x28>
 801327a:	f04f 37ff 	mov.w	r7, #4294967295
 801327e:	4638      	mov	r0, r7
 8013280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013282:	bf00      	nop
 8013284:	08015f58 	.word	0x08015f58
 8013288:	08015f78 	.word	0x08015f78
 801328c:	08015f38 	.word	0x08015f38

08013290 <__swsetup_r>:
 8013290:	4b32      	ldr	r3, [pc, #200]	; (801335c <__swsetup_r+0xcc>)
 8013292:	b570      	push	{r4, r5, r6, lr}
 8013294:	681d      	ldr	r5, [r3, #0]
 8013296:	4606      	mov	r6, r0
 8013298:	460c      	mov	r4, r1
 801329a:	b125      	cbz	r5, 80132a6 <__swsetup_r+0x16>
 801329c:	69ab      	ldr	r3, [r5, #24]
 801329e:	b913      	cbnz	r3, 80132a6 <__swsetup_r+0x16>
 80132a0:	4628      	mov	r0, r5
 80132a2:	f000 ff2d 	bl	8014100 <__sinit>
 80132a6:	4b2e      	ldr	r3, [pc, #184]	; (8013360 <__swsetup_r+0xd0>)
 80132a8:	429c      	cmp	r4, r3
 80132aa:	d10f      	bne.n	80132cc <__swsetup_r+0x3c>
 80132ac:	686c      	ldr	r4, [r5, #4]
 80132ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132b2:	b29a      	uxth	r2, r3
 80132b4:	0715      	lsls	r5, r2, #28
 80132b6:	d42c      	bmi.n	8013312 <__swsetup_r+0x82>
 80132b8:	06d0      	lsls	r0, r2, #27
 80132ba:	d411      	bmi.n	80132e0 <__swsetup_r+0x50>
 80132bc:	2209      	movs	r2, #9
 80132be:	6032      	str	r2, [r6, #0]
 80132c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132c4:	81a3      	strh	r3, [r4, #12]
 80132c6:	f04f 30ff 	mov.w	r0, #4294967295
 80132ca:	e03e      	b.n	801334a <__swsetup_r+0xba>
 80132cc:	4b25      	ldr	r3, [pc, #148]	; (8013364 <__swsetup_r+0xd4>)
 80132ce:	429c      	cmp	r4, r3
 80132d0:	d101      	bne.n	80132d6 <__swsetup_r+0x46>
 80132d2:	68ac      	ldr	r4, [r5, #8]
 80132d4:	e7eb      	b.n	80132ae <__swsetup_r+0x1e>
 80132d6:	4b24      	ldr	r3, [pc, #144]	; (8013368 <__swsetup_r+0xd8>)
 80132d8:	429c      	cmp	r4, r3
 80132da:	bf08      	it	eq
 80132dc:	68ec      	ldreq	r4, [r5, #12]
 80132de:	e7e6      	b.n	80132ae <__swsetup_r+0x1e>
 80132e0:	0751      	lsls	r1, r2, #29
 80132e2:	d512      	bpl.n	801330a <__swsetup_r+0x7a>
 80132e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80132e6:	b141      	cbz	r1, 80132fa <__swsetup_r+0x6a>
 80132e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80132ec:	4299      	cmp	r1, r3
 80132ee:	d002      	beq.n	80132f6 <__swsetup_r+0x66>
 80132f0:	4630      	mov	r0, r6
 80132f2:	f7fe f941 	bl	8011578 <_free_r>
 80132f6:	2300      	movs	r3, #0
 80132f8:	6363      	str	r3, [r4, #52]	; 0x34
 80132fa:	89a3      	ldrh	r3, [r4, #12]
 80132fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013300:	81a3      	strh	r3, [r4, #12]
 8013302:	2300      	movs	r3, #0
 8013304:	6063      	str	r3, [r4, #4]
 8013306:	6923      	ldr	r3, [r4, #16]
 8013308:	6023      	str	r3, [r4, #0]
 801330a:	89a3      	ldrh	r3, [r4, #12]
 801330c:	f043 0308 	orr.w	r3, r3, #8
 8013310:	81a3      	strh	r3, [r4, #12]
 8013312:	6923      	ldr	r3, [r4, #16]
 8013314:	b94b      	cbnz	r3, 801332a <__swsetup_r+0x9a>
 8013316:	89a3      	ldrh	r3, [r4, #12]
 8013318:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801331c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013320:	d003      	beq.n	801332a <__swsetup_r+0x9a>
 8013322:	4621      	mov	r1, r4
 8013324:	4630      	mov	r0, r6
 8013326:	f001 fad3 	bl	80148d0 <__smakebuf_r>
 801332a:	89a2      	ldrh	r2, [r4, #12]
 801332c:	f012 0301 	ands.w	r3, r2, #1
 8013330:	d00c      	beq.n	801334c <__swsetup_r+0xbc>
 8013332:	2300      	movs	r3, #0
 8013334:	60a3      	str	r3, [r4, #8]
 8013336:	6963      	ldr	r3, [r4, #20]
 8013338:	425b      	negs	r3, r3
 801333a:	61a3      	str	r3, [r4, #24]
 801333c:	6923      	ldr	r3, [r4, #16]
 801333e:	b953      	cbnz	r3, 8013356 <__swsetup_r+0xc6>
 8013340:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013344:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013348:	d1ba      	bne.n	80132c0 <__swsetup_r+0x30>
 801334a:	bd70      	pop	{r4, r5, r6, pc}
 801334c:	0792      	lsls	r2, r2, #30
 801334e:	bf58      	it	pl
 8013350:	6963      	ldrpl	r3, [r4, #20]
 8013352:	60a3      	str	r3, [r4, #8]
 8013354:	e7f2      	b.n	801333c <__swsetup_r+0xac>
 8013356:	2000      	movs	r0, #0
 8013358:	e7f7      	b.n	801334a <__swsetup_r+0xba>
 801335a:	bf00      	nop
 801335c:	2000019c 	.word	0x2000019c
 8013360:	08015f58 	.word	0x08015f58
 8013364:	08015f78 	.word	0x08015f78
 8013368:	08015f38 	.word	0x08015f38

0801336c <quorem>:
 801336c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013370:	6903      	ldr	r3, [r0, #16]
 8013372:	690c      	ldr	r4, [r1, #16]
 8013374:	42a3      	cmp	r3, r4
 8013376:	4680      	mov	r8, r0
 8013378:	f2c0 8082 	blt.w	8013480 <quorem+0x114>
 801337c:	3c01      	subs	r4, #1
 801337e:	f101 0714 	add.w	r7, r1, #20
 8013382:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013386:	f100 0614 	add.w	r6, r0, #20
 801338a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801338e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013392:	eb06 030c 	add.w	r3, r6, ip
 8013396:	3501      	adds	r5, #1
 8013398:	eb07 090c 	add.w	r9, r7, ip
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	fbb0 f5f5 	udiv	r5, r0, r5
 80133a2:	b395      	cbz	r5, 801340a <quorem+0x9e>
 80133a4:	f04f 0a00 	mov.w	sl, #0
 80133a8:	4638      	mov	r0, r7
 80133aa:	46b6      	mov	lr, r6
 80133ac:	46d3      	mov	fp, sl
 80133ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80133b2:	b293      	uxth	r3, r2
 80133b4:	fb05 a303 	mla	r3, r5, r3, sl
 80133b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80133bc:	b29b      	uxth	r3, r3
 80133be:	ebab 0303 	sub.w	r3, fp, r3
 80133c2:	0c12      	lsrs	r2, r2, #16
 80133c4:	f8de b000 	ldr.w	fp, [lr]
 80133c8:	fb05 a202 	mla	r2, r5, r2, sl
 80133cc:	fa13 f38b 	uxtah	r3, r3, fp
 80133d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80133d4:	fa1f fb82 	uxth.w	fp, r2
 80133d8:	f8de 2000 	ldr.w	r2, [lr]
 80133dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80133e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133ea:	4581      	cmp	r9, r0
 80133ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80133f0:	f84e 3b04 	str.w	r3, [lr], #4
 80133f4:	d2db      	bcs.n	80133ae <quorem+0x42>
 80133f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80133fa:	b933      	cbnz	r3, 801340a <quorem+0x9e>
 80133fc:	9b01      	ldr	r3, [sp, #4]
 80133fe:	3b04      	subs	r3, #4
 8013400:	429e      	cmp	r6, r3
 8013402:	461a      	mov	r2, r3
 8013404:	d330      	bcc.n	8013468 <quorem+0xfc>
 8013406:	f8c8 4010 	str.w	r4, [r8, #16]
 801340a:	4640      	mov	r0, r8
 801340c:	f001 fd08 	bl	8014e20 <__mcmp>
 8013410:	2800      	cmp	r0, #0
 8013412:	db25      	blt.n	8013460 <quorem+0xf4>
 8013414:	3501      	adds	r5, #1
 8013416:	4630      	mov	r0, r6
 8013418:	f04f 0c00 	mov.w	ip, #0
 801341c:	f857 2b04 	ldr.w	r2, [r7], #4
 8013420:	f8d0 e000 	ldr.w	lr, [r0]
 8013424:	b293      	uxth	r3, r2
 8013426:	ebac 0303 	sub.w	r3, ip, r3
 801342a:	0c12      	lsrs	r2, r2, #16
 801342c:	fa13 f38e 	uxtah	r3, r3, lr
 8013430:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013434:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013438:	b29b      	uxth	r3, r3
 801343a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801343e:	45b9      	cmp	r9, r7
 8013440:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013444:	f840 3b04 	str.w	r3, [r0], #4
 8013448:	d2e8      	bcs.n	801341c <quorem+0xb0>
 801344a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801344e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013452:	b92a      	cbnz	r2, 8013460 <quorem+0xf4>
 8013454:	3b04      	subs	r3, #4
 8013456:	429e      	cmp	r6, r3
 8013458:	461a      	mov	r2, r3
 801345a:	d30b      	bcc.n	8013474 <quorem+0x108>
 801345c:	f8c8 4010 	str.w	r4, [r8, #16]
 8013460:	4628      	mov	r0, r5
 8013462:	b003      	add	sp, #12
 8013464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013468:	6812      	ldr	r2, [r2, #0]
 801346a:	3b04      	subs	r3, #4
 801346c:	2a00      	cmp	r2, #0
 801346e:	d1ca      	bne.n	8013406 <quorem+0x9a>
 8013470:	3c01      	subs	r4, #1
 8013472:	e7c5      	b.n	8013400 <quorem+0x94>
 8013474:	6812      	ldr	r2, [r2, #0]
 8013476:	3b04      	subs	r3, #4
 8013478:	2a00      	cmp	r2, #0
 801347a:	d1ef      	bne.n	801345c <quorem+0xf0>
 801347c:	3c01      	subs	r4, #1
 801347e:	e7ea      	b.n	8013456 <quorem+0xea>
 8013480:	2000      	movs	r0, #0
 8013482:	e7ee      	b.n	8013462 <quorem+0xf6>
 8013484:	0000      	movs	r0, r0
	...

08013488 <_dtoa_r>:
 8013488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801348c:	ec57 6b10 	vmov	r6, r7, d0
 8013490:	b095      	sub	sp, #84	; 0x54
 8013492:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013494:	9108      	str	r1, [sp, #32]
 8013496:	4604      	mov	r4, r0
 8013498:	920a      	str	r2, [sp, #40]	; 0x28
 801349a:	9311      	str	r3, [sp, #68]	; 0x44
 801349c:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80134a0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80134a4:	b93d      	cbnz	r5, 80134b6 <_dtoa_r+0x2e>
 80134a6:	2010      	movs	r0, #16
 80134a8:	f7fe f83c 	bl	8011524 <malloc>
 80134ac:	6260      	str	r0, [r4, #36]	; 0x24
 80134ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80134b2:	6005      	str	r5, [r0, #0]
 80134b4:	60c5      	str	r5, [r0, #12]
 80134b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134b8:	6819      	ldr	r1, [r3, #0]
 80134ba:	b151      	cbz	r1, 80134d2 <_dtoa_r+0x4a>
 80134bc:	685a      	ldr	r2, [r3, #4]
 80134be:	604a      	str	r2, [r1, #4]
 80134c0:	2301      	movs	r3, #1
 80134c2:	4093      	lsls	r3, r2
 80134c4:	608b      	str	r3, [r1, #8]
 80134c6:	4620      	mov	r0, r4
 80134c8:	f001 fa8a 	bl	80149e0 <_Bfree>
 80134cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134ce:	2200      	movs	r2, #0
 80134d0:	601a      	str	r2, [r3, #0]
 80134d2:	1e3b      	subs	r3, r7, #0
 80134d4:	bfb9      	ittee	lt
 80134d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80134da:	9303      	strlt	r3, [sp, #12]
 80134dc:	2300      	movge	r3, #0
 80134de:	f8c8 3000 	strge.w	r3, [r8]
 80134e2:	9d03      	ldr	r5, [sp, #12]
 80134e4:	4bac      	ldr	r3, [pc, #688]	; (8013798 <_dtoa_r+0x310>)
 80134e6:	bfbc      	itt	lt
 80134e8:	2201      	movlt	r2, #1
 80134ea:	f8c8 2000 	strlt.w	r2, [r8]
 80134ee:	43ab      	bics	r3, r5
 80134f0:	d11b      	bne.n	801352a <_dtoa_r+0xa2>
 80134f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80134f4:	f242 730f 	movw	r3, #9999	; 0x270f
 80134f8:	6013      	str	r3, [r2, #0]
 80134fa:	9b02      	ldr	r3, [sp, #8]
 80134fc:	b923      	cbnz	r3, 8013508 <_dtoa_r+0x80>
 80134fe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013502:	2d00      	cmp	r5, #0
 8013504:	f000 84dd 	beq.w	8013ec2 <_dtoa_r+0xa3a>
 8013508:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801350a:	b953      	cbnz	r3, 8013522 <_dtoa_r+0x9a>
 801350c:	4ba3      	ldr	r3, [pc, #652]	; (801379c <_dtoa_r+0x314>)
 801350e:	e020      	b.n	8013552 <_dtoa_r+0xca>
 8013510:	4ba3      	ldr	r3, [pc, #652]	; (80137a0 <_dtoa_r+0x318>)
 8013512:	9304      	str	r3, [sp, #16]
 8013514:	3308      	adds	r3, #8
 8013516:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8013518:	6013      	str	r3, [r2, #0]
 801351a:	9804      	ldr	r0, [sp, #16]
 801351c:	b015      	add	sp, #84	; 0x54
 801351e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013522:	4b9e      	ldr	r3, [pc, #632]	; (801379c <_dtoa_r+0x314>)
 8013524:	9304      	str	r3, [sp, #16]
 8013526:	3303      	adds	r3, #3
 8013528:	e7f5      	b.n	8013516 <_dtoa_r+0x8e>
 801352a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801352e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013536:	ed8d 7b04 	vstr	d7, [sp, #16]
 801353a:	d10c      	bne.n	8013556 <_dtoa_r+0xce>
 801353c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801353e:	2301      	movs	r3, #1
 8013540:	6013      	str	r3, [r2, #0]
 8013542:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013544:	2b00      	cmp	r3, #0
 8013546:	f000 84b9 	beq.w	8013ebc <_dtoa_r+0xa34>
 801354a:	4b96      	ldr	r3, [pc, #600]	; (80137a4 <_dtoa_r+0x31c>)
 801354c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801354e:	6013      	str	r3, [r2, #0]
 8013550:	3b01      	subs	r3, #1
 8013552:	9304      	str	r3, [sp, #16]
 8013554:	e7e1      	b.n	801351a <_dtoa_r+0x92>
 8013556:	a913      	add	r1, sp, #76	; 0x4c
 8013558:	aa12      	add	r2, sp, #72	; 0x48
 801355a:	ed9d 0b04 	vldr	d0, [sp, #16]
 801355e:	4620      	mov	r0, r4
 8013560:	f001 fd4c 	bl	8014ffc <__d2b>
 8013564:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8013568:	9001      	str	r0, [sp, #4]
 801356a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801356c:	2e00      	cmp	r6, #0
 801356e:	d046      	beq.n	80135fe <_dtoa_r+0x176>
 8013570:	9805      	ldr	r0, [sp, #20]
 8013572:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8013576:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801357a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 801357e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013582:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8013586:	2700      	movs	r7, #0
 8013588:	ee07 aa90 	vmov	s15, sl
 801358c:	ec43 2b16 	vmov	d6, r2, r3
 8013590:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8013594:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8013780 <_dtoa_r+0x2f8>
 8013598:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801359c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80135a0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8013788 <_dtoa_r+0x300>
 80135a4:	eea7 6b04 	vfma.f64	d6, d7, d4
 80135a8:	eeb0 7b46 	vmov.f64	d7, d6
 80135ac:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8013790 <_dtoa_r+0x308>
 80135b0:	eea5 7b06 	vfma.f64	d7, d5, d6
 80135b4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80135b8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80135bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c0:	ee16 ba90 	vmov	fp, s13
 80135c4:	d508      	bpl.n	80135d8 <_dtoa_r+0x150>
 80135c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80135ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80135ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d2:	bf18      	it	ne
 80135d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80135d8:	f1bb 0f16 	cmp.w	fp, #22
 80135dc:	d834      	bhi.n	8013648 <_dtoa_r+0x1c0>
 80135de:	4b72      	ldr	r3, [pc, #456]	; (80137a8 <_dtoa_r+0x320>)
 80135e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80135e4:	ed93 7b00 	vldr	d7, [r3]
 80135e8:	ed9d 6b02 	vldr	d6, [sp, #8]
 80135ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80135f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f4:	dd01      	ble.n	80135fa <_dtoa_r+0x172>
 80135f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80135fa:	2300      	movs	r3, #0
 80135fc:	e025      	b.n	801364a <_dtoa_r+0x1c2>
 80135fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013600:	eb01 0a03 	add.w	sl, r1, r3
 8013604:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8013608:	2b20      	cmp	r3, #32
 801360a:	dd17      	ble.n	801363c <_dtoa_r+0x1b4>
 801360c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8013610:	9a02      	ldr	r2, [sp, #8]
 8013612:	409d      	lsls	r5, r3
 8013614:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8013618:	fa22 f303 	lsr.w	r3, r2, r3
 801361c:	432b      	orrs	r3, r5
 801361e:	ee07 3a90 	vmov	s15, r3
 8013622:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013626:	f10a 3aff 	add.w	sl, sl, #4294967295
 801362a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801362e:	9805      	ldr	r0, [sp, #20]
 8013630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013634:	2701      	movs	r7, #1
 8013636:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 801363a:	e7a5      	b.n	8013588 <_dtoa_r+0x100>
 801363c:	9a02      	ldr	r2, [sp, #8]
 801363e:	f1c3 0320 	rsb	r3, r3, #32
 8013642:	fa02 f303 	lsl.w	r3, r2, r3
 8013646:	e7ea      	b.n	801361e <_dtoa_r+0x196>
 8013648:	2301      	movs	r3, #1
 801364a:	eba1 0a0a 	sub.w	sl, r1, sl
 801364e:	9310      	str	r3, [sp, #64]	; 0x40
 8013650:	f1ba 0301 	subs.w	r3, sl, #1
 8013654:	9307      	str	r3, [sp, #28]
 8013656:	bf43      	ittte	mi
 8013658:	2300      	movmi	r3, #0
 801365a:	f1ca 0a01 	rsbmi	sl, sl, #1
 801365e:	9307      	strmi	r3, [sp, #28]
 8013660:	f04f 0a00 	movpl.w	sl, #0
 8013664:	f1bb 0f00 	cmp.w	fp, #0
 8013668:	db19      	blt.n	801369e <_dtoa_r+0x216>
 801366a:	9b07      	ldr	r3, [sp, #28]
 801366c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013670:	445b      	add	r3, fp
 8013672:	9307      	str	r3, [sp, #28]
 8013674:	f04f 0800 	mov.w	r8, #0
 8013678:	9b08      	ldr	r3, [sp, #32]
 801367a:	2b09      	cmp	r3, #9
 801367c:	d866      	bhi.n	801374c <_dtoa_r+0x2c4>
 801367e:	2b05      	cmp	r3, #5
 8013680:	bfc4      	itt	gt
 8013682:	3b04      	subgt	r3, #4
 8013684:	9308      	strgt	r3, [sp, #32]
 8013686:	9b08      	ldr	r3, [sp, #32]
 8013688:	f1a3 0302 	sub.w	r3, r3, #2
 801368c:	bfcc      	ite	gt
 801368e:	2500      	movgt	r5, #0
 8013690:	2501      	movle	r5, #1
 8013692:	2b03      	cmp	r3, #3
 8013694:	d866      	bhi.n	8013764 <_dtoa_r+0x2dc>
 8013696:	e8df f003 	tbb	[pc, r3]
 801369a:	5755      	.short	0x5755
 801369c:	4909      	.short	0x4909
 801369e:	2300      	movs	r3, #0
 80136a0:	ebaa 0a0b 	sub.w	sl, sl, fp
 80136a4:	f1cb 0800 	rsb	r8, fp, #0
 80136a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80136aa:	e7e5      	b.n	8013678 <_dtoa_r+0x1f0>
 80136ac:	2301      	movs	r3, #1
 80136ae:	9309      	str	r3, [sp, #36]	; 0x24
 80136b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	dd59      	ble.n	801376a <_dtoa_r+0x2e2>
 80136b6:	9306      	str	r3, [sp, #24]
 80136b8:	4699      	mov	r9, r3
 80136ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80136bc:	2200      	movs	r2, #0
 80136be:	6072      	str	r2, [r6, #4]
 80136c0:	2204      	movs	r2, #4
 80136c2:	f102 0014 	add.w	r0, r2, #20
 80136c6:	4298      	cmp	r0, r3
 80136c8:	6871      	ldr	r1, [r6, #4]
 80136ca:	d953      	bls.n	8013774 <_dtoa_r+0x2ec>
 80136cc:	4620      	mov	r0, r4
 80136ce:	f001 f953 	bl	8014978 <_Balloc>
 80136d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80136d4:	6030      	str	r0, [r6, #0]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	9304      	str	r3, [sp, #16]
 80136da:	f1b9 0f0e 	cmp.w	r9, #14
 80136de:	f200 80c2 	bhi.w	8013866 <_dtoa_r+0x3de>
 80136e2:	2d00      	cmp	r5, #0
 80136e4:	f000 80bf 	beq.w	8013866 <_dtoa_r+0x3de>
 80136e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80136ec:	f1bb 0f00 	cmp.w	fp, #0
 80136f0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80136f4:	f340 80e6 	ble.w	80138c4 <_dtoa_r+0x43c>
 80136f8:	4a2b      	ldr	r2, [pc, #172]	; (80137a8 <_dtoa_r+0x320>)
 80136fa:	f00b 030f 	and.w	r3, fp, #15
 80136fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013702:	ed93 7b00 	vldr	d7, [r3]
 8013706:	ea4f 132b 	mov.w	r3, fp, asr #4
 801370a:	06da      	lsls	r2, r3, #27
 801370c:	f140 80d8 	bpl.w	80138c0 <_dtoa_r+0x438>
 8013710:	4a26      	ldr	r2, [pc, #152]	; (80137ac <_dtoa_r+0x324>)
 8013712:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8013716:	ed92 6b08 	vldr	d6, [r2, #32]
 801371a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801371e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013722:	f003 030f 	and.w	r3, r3, #15
 8013726:	2203      	movs	r2, #3
 8013728:	4920      	ldr	r1, [pc, #128]	; (80137ac <_dtoa_r+0x324>)
 801372a:	e04a      	b.n	80137c2 <_dtoa_r+0x33a>
 801372c:	2301      	movs	r3, #1
 801372e:	9309      	str	r3, [sp, #36]	; 0x24
 8013730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013732:	445b      	add	r3, fp
 8013734:	f103 0901 	add.w	r9, r3, #1
 8013738:	9306      	str	r3, [sp, #24]
 801373a:	464b      	mov	r3, r9
 801373c:	2b01      	cmp	r3, #1
 801373e:	bfb8      	it	lt
 8013740:	2301      	movlt	r3, #1
 8013742:	e7ba      	b.n	80136ba <_dtoa_r+0x232>
 8013744:	2300      	movs	r3, #0
 8013746:	e7b2      	b.n	80136ae <_dtoa_r+0x226>
 8013748:	2300      	movs	r3, #0
 801374a:	e7f0      	b.n	801372e <_dtoa_r+0x2a6>
 801374c:	2501      	movs	r5, #1
 801374e:	2300      	movs	r3, #0
 8013750:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8013754:	f04f 33ff 	mov.w	r3, #4294967295
 8013758:	9306      	str	r3, [sp, #24]
 801375a:	4699      	mov	r9, r3
 801375c:	2200      	movs	r2, #0
 801375e:	2312      	movs	r3, #18
 8013760:	920a      	str	r2, [sp, #40]	; 0x28
 8013762:	e7aa      	b.n	80136ba <_dtoa_r+0x232>
 8013764:	2301      	movs	r3, #1
 8013766:	9309      	str	r3, [sp, #36]	; 0x24
 8013768:	e7f4      	b.n	8013754 <_dtoa_r+0x2cc>
 801376a:	2301      	movs	r3, #1
 801376c:	9306      	str	r3, [sp, #24]
 801376e:	4699      	mov	r9, r3
 8013770:	461a      	mov	r2, r3
 8013772:	e7f5      	b.n	8013760 <_dtoa_r+0x2d8>
 8013774:	3101      	adds	r1, #1
 8013776:	6071      	str	r1, [r6, #4]
 8013778:	0052      	lsls	r2, r2, #1
 801377a:	e7a2      	b.n	80136c2 <_dtoa_r+0x23a>
 801377c:	f3af 8000 	nop.w
 8013780:	636f4361 	.word	0x636f4361
 8013784:	3fd287a7 	.word	0x3fd287a7
 8013788:	8b60c8b3 	.word	0x8b60c8b3
 801378c:	3fc68a28 	.word	0x3fc68a28
 8013790:	509f79fb 	.word	0x509f79fb
 8013794:	3fd34413 	.word	0x3fd34413
 8013798:	7ff00000 	.word	0x7ff00000
 801379c:	08015f31 	.word	0x08015f31
 80137a0:	08015f28 	.word	0x08015f28
 80137a4:	08015ead 	.word	0x08015ead
 80137a8:	08015fd0 	.word	0x08015fd0
 80137ac:	08015fa8 	.word	0x08015fa8
 80137b0:	07de      	lsls	r6, r3, #31
 80137b2:	d504      	bpl.n	80137be <_dtoa_r+0x336>
 80137b4:	ed91 6b00 	vldr	d6, [r1]
 80137b8:	3201      	adds	r2, #1
 80137ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80137be:	105b      	asrs	r3, r3, #1
 80137c0:	3108      	adds	r1, #8
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d1f4      	bne.n	80137b0 <_dtoa_r+0x328>
 80137c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80137ca:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80137ce:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	f000 80a7 	beq.w	8013928 <_dtoa_r+0x4a0>
 80137da:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80137de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80137e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137ea:	f140 809d 	bpl.w	8013928 <_dtoa_r+0x4a0>
 80137ee:	f1b9 0f00 	cmp.w	r9, #0
 80137f2:	f000 8099 	beq.w	8013928 <_dtoa_r+0x4a0>
 80137f6:	9b06      	ldr	r3, [sp, #24]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	dd30      	ble.n	801385e <_dtoa_r+0x3d6>
 80137fc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013800:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013808:	9d06      	ldr	r5, [sp, #24]
 801380a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801380e:	3201      	adds	r2, #1
 8013810:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013814:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013818:	ee07 2a90 	vmov	s15, r2
 801381c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013820:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013824:	ed8d 5b02 	vstr	d5, [sp, #8]
 8013828:	9a03      	ldr	r2, [sp, #12]
 801382a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801382e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8013832:	2d00      	cmp	r5, #0
 8013834:	d17b      	bne.n	801392e <_dtoa_r+0x4a6>
 8013836:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801383a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801383e:	ec41 0b17 	vmov	d7, r0, r1
 8013842:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801384a:	f300 8253 	bgt.w	8013cf4 <_dtoa_r+0x86c>
 801384e:	eeb1 7b47 	vneg.f64	d7, d7
 8013852:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385a:	f100 8249 	bmi.w	8013cf0 <_dtoa_r+0x868>
 801385e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013862:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013866:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013868:	2b00      	cmp	r3, #0
 801386a:	f2c0 8119 	blt.w	8013aa0 <_dtoa_r+0x618>
 801386e:	f1bb 0f0e 	cmp.w	fp, #14
 8013872:	f300 8115 	bgt.w	8013aa0 <_dtoa_r+0x618>
 8013876:	4bc3      	ldr	r3, [pc, #780]	; (8013b84 <_dtoa_r+0x6fc>)
 8013878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801387c:	ed93 6b00 	vldr	d6, [r3]
 8013880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013882:	2b00      	cmp	r3, #0
 8013884:	f280 80ba 	bge.w	80139fc <_dtoa_r+0x574>
 8013888:	f1b9 0f00 	cmp.w	r9, #0
 801388c:	f300 80b6 	bgt.w	80139fc <_dtoa_r+0x574>
 8013890:	f040 822d 	bne.w	8013cee <_dtoa_r+0x866>
 8013894:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013898:	ee26 6b07 	vmul.f64	d6, d6, d7
 801389c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80138a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a8:	464d      	mov	r5, r9
 80138aa:	464f      	mov	r7, r9
 80138ac:	f280 8204 	bge.w	8013cb8 <_dtoa_r+0x830>
 80138b0:	9b04      	ldr	r3, [sp, #16]
 80138b2:	9a04      	ldr	r2, [sp, #16]
 80138b4:	1c5e      	adds	r6, r3, #1
 80138b6:	2331      	movs	r3, #49	; 0x31
 80138b8:	7013      	strb	r3, [r2, #0]
 80138ba:	f10b 0b01 	add.w	fp, fp, #1
 80138be:	e1ff      	b.n	8013cc0 <_dtoa_r+0x838>
 80138c0:	2202      	movs	r2, #2
 80138c2:	e731      	b.n	8013728 <_dtoa_r+0x2a0>
 80138c4:	d02e      	beq.n	8013924 <_dtoa_r+0x49c>
 80138c6:	f1cb 0300 	rsb	r3, fp, #0
 80138ca:	4aae      	ldr	r2, [pc, #696]	; (8013b84 <_dtoa_r+0x6fc>)
 80138cc:	f003 010f 	and.w	r1, r3, #15
 80138d0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80138d4:	ed92 7b00 	vldr	d7, [r2]
 80138d8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 80138dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80138e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80138e4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 80138e8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80138ec:	49a6      	ldr	r1, [pc, #664]	; (8013b88 <_dtoa_r+0x700>)
 80138ee:	111b      	asrs	r3, r3, #4
 80138f0:	2000      	movs	r0, #0
 80138f2:	2202      	movs	r2, #2
 80138f4:	b93b      	cbnz	r3, 8013906 <_dtoa_r+0x47e>
 80138f6:	2800      	cmp	r0, #0
 80138f8:	f43f af6b 	beq.w	80137d2 <_dtoa_r+0x34a>
 80138fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8013900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013904:	e765      	b.n	80137d2 <_dtoa_r+0x34a>
 8013906:	07dd      	lsls	r5, r3, #31
 8013908:	d509      	bpl.n	801391e <_dtoa_r+0x496>
 801390a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801390e:	ed91 7b00 	vldr	d7, [r1]
 8013912:	ee26 7b07 	vmul.f64	d7, d6, d7
 8013916:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801391a:	3201      	adds	r2, #1
 801391c:	2001      	movs	r0, #1
 801391e:	105b      	asrs	r3, r3, #1
 8013920:	3108      	adds	r1, #8
 8013922:	e7e7      	b.n	80138f4 <_dtoa_r+0x46c>
 8013924:	2202      	movs	r2, #2
 8013926:	e754      	b.n	80137d2 <_dtoa_r+0x34a>
 8013928:	465b      	mov	r3, fp
 801392a:	464d      	mov	r5, r9
 801392c:	e770      	b.n	8013810 <_dtoa_r+0x388>
 801392e:	4a95      	ldr	r2, [pc, #596]	; (8013b84 <_dtoa_r+0x6fc>)
 8013930:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8013934:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801393a:	ec41 0b17 	vmov	d7, r0, r1
 801393e:	b35a      	cbz	r2, 8013998 <_dtoa_r+0x510>
 8013940:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013944:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013948:	9e04      	ldr	r6, [sp, #16]
 801394a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801394e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013952:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013956:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801395a:	ee14 2a90 	vmov	r2, s9
 801395e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013962:	3230      	adds	r2, #48	; 0x30
 8013964:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013968:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013970:	f806 2b01 	strb.w	r2, [r6], #1
 8013974:	d43b      	bmi.n	80139ee <_dtoa_r+0x566>
 8013976:	ee32 5b46 	vsub.f64	d5, d2, d6
 801397a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013982:	d472      	bmi.n	8013a6a <_dtoa_r+0x5e2>
 8013984:	9a04      	ldr	r2, [sp, #16]
 8013986:	1ab2      	subs	r2, r6, r2
 8013988:	4295      	cmp	r5, r2
 801398a:	f77f af68 	ble.w	801385e <_dtoa_r+0x3d6>
 801398e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013992:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013996:	e7de      	b.n	8013956 <_dtoa_r+0x4ce>
 8013998:	9a04      	ldr	r2, [sp, #16]
 801399a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801399e:	1956      	adds	r6, r2, r5
 80139a0:	4611      	mov	r1, r2
 80139a2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80139a6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80139aa:	ee14 2a90 	vmov	r2, s9
 80139ae:	3230      	adds	r2, #48	; 0x30
 80139b0:	f801 2b01 	strb.w	r2, [r1], #1
 80139b4:	42b1      	cmp	r1, r6
 80139b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80139ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80139be:	d11a      	bne.n	80139f6 <_dtoa_r+0x56e>
 80139c0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80139c4:	ee37 4b05 	vadd.f64	d4, d7, d5
 80139c8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80139cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139d0:	dc4b      	bgt.n	8013a6a <_dtoa_r+0x5e2>
 80139d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80139d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80139da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139de:	f57f af3e 	bpl.w	801385e <_dtoa_r+0x3d6>
 80139e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80139e6:	2a30      	cmp	r2, #48	; 0x30
 80139e8:	f106 31ff 	add.w	r1, r6, #4294967295
 80139ec:	d001      	beq.n	80139f2 <_dtoa_r+0x56a>
 80139ee:	469b      	mov	fp, r3
 80139f0:	e02a      	b.n	8013a48 <_dtoa_r+0x5c0>
 80139f2:	460e      	mov	r6, r1
 80139f4:	e7f5      	b.n	80139e2 <_dtoa_r+0x55a>
 80139f6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80139fa:	e7d4      	b.n	80139a6 <_dtoa_r+0x51e>
 80139fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a00:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013a04:	9e04      	ldr	r6, [sp, #16]
 8013a06:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013a0a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013a0e:	ee15 3a10 	vmov	r3, s10
 8013a12:	3330      	adds	r3, #48	; 0x30
 8013a14:	f806 3b01 	strb.w	r3, [r6], #1
 8013a18:	9b04      	ldr	r3, [sp, #16]
 8013a1a:	1af3      	subs	r3, r6, r3
 8013a1c:	4599      	cmp	r9, r3
 8013a1e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013a22:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013a26:	d133      	bne.n	8013a90 <_dtoa_r+0x608>
 8013a28:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013a2c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a34:	dc18      	bgt.n	8013a68 <_dtoa_r+0x5e0>
 8013a36:	eeb4 7b46 	vcmp.f64	d7, d6
 8013a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3e:	d103      	bne.n	8013a48 <_dtoa_r+0x5c0>
 8013a40:	ee15 3a10 	vmov	r3, s10
 8013a44:	07db      	lsls	r3, r3, #31
 8013a46:	d40f      	bmi.n	8013a68 <_dtoa_r+0x5e0>
 8013a48:	9901      	ldr	r1, [sp, #4]
 8013a4a:	4620      	mov	r0, r4
 8013a4c:	f000 ffc8 	bl	80149e0 <_Bfree>
 8013a50:	2300      	movs	r3, #0
 8013a52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8013a54:	7033      	strb	r3, [r6, #0]
 8013a56:	f10b 0301 	add.w	r3, fp, #1
 8013a5a:	6013      	str	r3, [r2, #0]
 8013a5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	f43f ad5b 	beq.w	801351a <_dtoa_r+0x92>
 8013a64:	601e      	str	r6, [r3, #0]
 8013a66:	e558      	b.n	801351a <_dtoa_r+0x92>
 8013a68:	465b      	mov	r3, fp
 8013a6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8013a6e:	2939      	cmp	r1, #57	; 0x39
 8013a70:	f106 32ff 	add.w	r2, r6, #4294967295
 8013a74:	d106      	bne.n	8013a84 <_dtoa_r+0x5fc>
 8013a76:	9904      	ldr	r1, [sp, #16]
 8013a78:	4291      	cmp	r1, r2
 8013a7a:	d107      	bne.n	8013a8c <_dtoa_r+0x604>
 8013a7c:	2230      	movs	r2, #48	; 0x30
 8013a7e:	700a      	strb	r2, [r1, #0]
 8013a80:	3301      	adds	r3, #1
 8013a82:	460a      	mov	r2, r1
 8013a84:	7811      	ldrb	r1, [r2, #0]
 8013a86:	3101      	adds	r1, #1
 8013a88:	7011      	strb	r1, [r2, #0]
 8013a8a:	e7b0      	b.n	80139ee <_dtoa_r+0x566>
 8013a8c:	4616      	mov	r6, r2
 8013a8e:	e7ec      	b.n	8013a6a <_dtoa_r+0x5e2>
 8013a90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013a94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a9c:	d1b3      	bne.n	8013a06 <_dtoa_r+0x57e>
 8013a9e:	e7d3      	b.n	8013a48 <_dtoa_r+0x5c0>
 8013aa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013aa2:	2a00      	cmp	r2, #0
 8013aa4:	f000 808d 	beq.w	8013bc2 <_dtoa_r+0x73a>
 8013aa8:	9a08      	ldr	r2, [sp, #32]
 8013aaa:	2a01      	cmp	r2, #1
 8013aac:	dc72      	bgt.n	8013b94 <_dtoa_r+0x70c>
 8013aae:	2f00      	cmp	r7, #0
 8013ab0:	d06c      	beq.n	8013b8c <_dtoa_r+0x704>
 8013ab2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013ab6:	4645      	mov	r5, r8
 8013ab8:	4656      	mov	r6, sl
 8013aba:	9a07      	ldr	r2, [sp, #28]
 8013abc:	2101      	movs	r1, #1
 8013abe:	441a      	add	r2, r3
 8013ac0:	4620      	mov	r0, r4
 8013ac2:	449a      	add	sl, r3
 8013ac4:	9207      	str	r2, [sp, #28]
 8013ac6:	f001 f869 	bl	8014b9c <__i2b>
 8013aca:	4607      	mov	r7, r0
 8013acc:	2e00      	cmp	r6, #0
 8013ace:	dd0b      	ble.n	8013ae8 <_dtoa_r+0x660>
 8013ad0:	9b07      	ldr	r3, [sp, #28]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	dd08      	ble.n	8013ae8 <_dtoa_r+0x660>
 8013ad6:	42b3      	cmp	r3, r6
 8013ad8:	9a07      	ldr	r2, [sp, #28]
 8013ada:	bfa8      	it	ge
 8013adc:	4633      	movge	r3, r6
 8013ade:	ebaa 0a03 	sub.w	sl, sl, r3
 8013ae2:	1af6      	subs	r6, r6, r3
 8013ae4:	1ad3      	subs	r3, r2, r3
 8013ae6:	9307      	str	r3, [sp, #28]
 8013ae8:	f1b8 0f00 	cmp.w	r8, #0
 8013aec:	d01d      	beq.n	8013b2a <_dtoa_r+0x6a2>
 8013aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d06a      	beq.n	8013bca <_dtoa_r+0x742>
 8013af4:	b18d      	cbz	r5, 8013b1a <_dtoa_r+0x692>
 8013af6:	4639      	mov	r1, r7
 8013af8:	462a      	mov	r2, r5
 8013afa:	4620      	mov	r0, r4
 8013afc:	f001 f8ee 	bl	8014cdc <__pow5mult>
 8013b00:	9a01      	ldr	r2, [sp, #4]
 8013b02:	4601      	mov	r1, r0
 8013b04:	4607      	mov	r7, r0
 8013b06:	4620      	mov	r0, r4
 8013b08:	f001 f851 	bl	8014bae <__multiply>
 8013b0c:	9901      	ldr	r1, [sp, #4]
 8013b0e:	900c      	str	r0, [sp, #48]	; 0x30
 8013b10:	4620      	mov	r0, r4
 8013b12:	f000 ff65 	bl	80149e0 <_Bfree>
 8013b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b18:	9301      	str	r3, [sp, #4]
 8013b1a:	ebb8 0205 	subs.w	r2, r8, r5
 8013b1e:	d004      	beq.n	8013b2a <_dtoa_r+0x6a2>
 8013b20:	9901      	ldr	r1, [sp, #4]
 8013b22:	4620      	mov	r0, r4
 8013b24:	f001 f8da 	bl	8014cdc <__pow5mult>
 8013b28:	9001      	str	r0, [sp, #4]
 8013b2a:	2101      	movs	r1, #1
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f001 f835 	bl	8014b9c <__i2b>
 8013b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b34:	4605      	mov	r5, r0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	f000 81ca 	beq.w	8013ed0 <_dtoa_r+0xa48>
 8013b3c:	461a      	mov	r2, r3
 8013b3e:	4601      	mov	r1, r0
 8013b40:	4620      	mov	r0, r4
 8013b42:	f001 f8cb 	bl	8014cdc <__pow5mult>
 8013b46:	9b08      	ldr	r3, [sp, #32]
 8013b48:	2b01      	cmp	r3, #1
 8013b4a:	4605      	mov	r5, r0
 8013b4c:	dc44      	bgt.n	8013bd8 <_dtoa_r+0x750>
 8013b4e:	9b02      	ldr	r3, [sp, #8]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d13c      	bne.n	8013bce <_dtoa_r+0x746>
 8013b54:	9b03      	ldr	r3, [sp, #12]
 8013b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d137      	bne.n	8013bce <_dtoa_r+0x746>
 8013b5e:	9b03      	ldr	r3, [sp, #12]
 8013b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013b64:	0d1b      	lsrs	r3, r3, #20
 8013b66:	051b      	lsls	r3, r3, #20
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d033      	beq.n	8013bd4 <_dtoa_r+0x74c>
 8013b6c:	9b07      	ldr	r3, [sp, #28]
 8013b6e:	3301      	adds	r3, #1
 8013b70:	f10a 0a01 	add.w	sl, sl, #1
 8013b74:	9307      	str	r3, [sp, #28]
 8013b76:	f04f 0801 	mov.w	r8, #1
 8013b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b7c:	bb73      	cbnz	r3, 8013bdc <_dtoa_r+0x754>
 8013b7e:	2001      	movs	r0, #1
 8013b80:	e034      	b.n	8013bec <_dtoa_r+0x764>
 8013b82:	bf00      	nop
 8013b84:	08015fd0 	.word	0x08015fd0
 8013b88:	08015fa8 	.word	0x08015fa8
 8013b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013b8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013b92:	e790      	b.n	8013ab6 <_dtoa_r+0x62e>
 8013b94:	f109 35ff 	add.w	r5, r9, #4294967295
 8013b98:	45a8      	cmp	r8, r5
 8013b9a:	bfbf      	itttt	lt
 8013b9c:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8013b9e:	eba5 0808 	sublt.w	r8, r5, r8
 8013ba2:	4443      	addlt	r3, r8
 8013ba4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8013ba6:	bfb6      	itet	lt
 8013ba8:	46a8      	movlt	r8, r5
 8013baa:	eba8 0505 	subge.w	r5, r8, r5
 8013bae:	2500      	movlt	r5, #0
 8013bb0:	f1b9 0f00 	cmp.w	r9, #0
 8013bb4:	bfb9      	ittee	lt
 8013bb6:	ebaa 0609 	sublt.w	r6, sl, r9
 8013bba:	2300      	movlt	r3, #0
 8013bbc:	4656      	movge	r6, sl
 8013bbe:	464b      	movge	r3, r9
 8013bc0:	e77b      	b.n	8013aba <_dtoa_r+0x632>
 8013bc2:	4645      	mov	r5, r8
 8013bc4:	4656      	mov	r6, sl
 8013bc6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013bc8:	e780      	b.n	8013acc <_dtoa_r+0x644>
 8013bca:	4642      	mov	r2, r8
 8013bcc:	e7a8      	b.n	8013b20 <_dtoa_r+0x698>
 8013bce:	f04f 0800 	mov.w	r8, #0
 8013bd2:	e7d2      	b.n	8013b7a <_dtoa_r+0x6f2>
 8013bd4:	4698      	mov	r8, r3
 8013bd6:	e7d0      	b.n	8013b7a <_dtoa_r+0x6f2>
 8013bd8:	f04f 0800 	mov.w	r8, #0
 8013bdc:	692b      	ldr	r3, [r5, #16]
 8013bde:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8013be2:	6918      	ldr	r0, [r3, #16]
 8013be4:	f000 ff8c 	bl	8014b00 <__hi0bits>
 8013be8:	f1c0 0020 	rsb	r0, r0, #32
 8013bec:	9b07      	ldr	r3, [sp, #28]
 8013bee:	4418      	add	r0, r3
 8013bf0:	f010 001f 	ands.w	r0, r0, #31
 8013bf4:	d047      	beq.n	8013c86 <_dtoa_r+0x7fe>
 8013bf6:	f1c0 0320 	rsb	r3, r0, #32
 8013bfa:	2b04      	cmp	r3, #4
 8013bfc:	dd3b      	ble.n	8013c76 <_dtoa_r+0x7ee>
 8013bfe:	9b07      	ldr	r3, [sp, #28]
 8013c00:	f1c0 001c 	rsb	r0, r0, #28
 8013c04:	4482      	add	sl, r0
 8013c06:	4406      	add	r6, r0
 8013c08:	4403      	add	r3, r0
 8013c0a:	9307      	str	r3, [sp, #28]
 8013c0c:	f1ba 0f00 	cmp.w	sl, #0
 8013c10:	dd05      	ble.n	8013c1e <_dtoa_r+0x796>
 8013c12:	4652      	mov	r2, sl
 8013c14:	9901      	ldr	r1, [sp, #4]
 8013c16:	4620      	mov	r0, r4
 8013c18:	f001 f8ae 	bl	8014d78 <__lshift>
 8013c1c:	9001      	str	r0, [sp, #4]
 8013c1e:	9b07      	ldr	r3, [sp, #28]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	dd05      	ble.n	8013c30 <_dtoa_r+0x7a8>
 8013c24:	4629      	mov	r1, r5
 8013c26:	461a      	mov	r2, r3
 8013c28:	4620      	mov	r0, r4
 8013c2a:	f001 f8a5 	bl	8014d78 <__lshift>
 8013c2e:	4605      	mov	r5, r0
 8013c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013c32:	b353      	cbz	r3, 8013c8a <_dtoa_r+0x802>
 8013c34:	4629      	mov	r1, r5
 8013c36:	9801      	ldr	r0, [sp, #4]
 8013c38:	f001 f8f2 	bl	8014e20 <__mcmp>
 8013c3c:	2800      	cmp	r0, #0
 8013c3e:	da24      	bge.n	8013c8a <_dtoa_r+0x802>
 8013c40:	2300      	movs	r3, #0
 8013c42:	220a      	movs	r2, #10
 8013c44:	9901      	ldr	r1, [sp, #4]
 8013c46:	4620      	mov	r0, r4
 8013c48:	f000 fee1 	bl	8014a0e <__multadd>
 8013c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c4e:	9001      	str	r0, [sp, #4]
 8013c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	f000 8142 	beq.w	8013ede <_dtoa_r+0xa56>
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	4639      	mov	r1, r7
 8013c5e:	220a      	movs	r2, #10
 8013c60:	4620      	mov	r0, r4
 8013c62:	f000 fed4 	bl	8014a0e <__multadd>
 8013c66:	9b06      	ldr	r3, [sp, #24]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	4607      	mov	r7, r0
 8013c6c:	dc4b      	bgt.n	8013d06 <_dtoa_r+0x87e>
 8013c6e:	9b08      	ldr	r3, [sp, #32]
 8013c70:	2b02      	cmp	r3, #2
 8013c72:	dd48      	ble.n	8013d06 <_dtoa_r+0x87e>
 8013c74:	e011      	b.n	8013c9a <_dtoa_r+0x812>
 8013c76:	d0c9      	beq.n	8013c0c <_dtoa_r+0x784>
 8013c78:	9a07      	ldr	r2, [sp, #28]
 8013c7a:	331c      	adds	r3, #28
 8013c7c:	441a      	add	r2, r3
 8013c7e:	449a      	add	sl, r3
 8013c80:	441e      	add	r6, r3
 8013c82:	4613      	mov	r3, r2
 8013c84:	e7c1      	b.n	8013c0a <_dtoa_r+0x782>
 8013c86:	4603      	mov	r3, r0
 8013c88:	e7f6      	b.n	8013c78 <_dtoa_r+0x7f0>
 8013c8a:	f1b9 0f00 	cmp.w	r9, #0
 8013c8e:	dc34      	bgt.n	8013cfa <_dtoa_r+0x872>
 8013c90:	9b08      	ldr	r3, [sp, #32]
 8013c92:	2b02      	cmp	r3, #2
 8013c94:	dd31      	ble.n	8013cfa <_dtoa_r+0x872>
 8013c96:	f8cd 9018 	str.w	r9, [sp, #24]
 8013c9a:	9b06      	ldr	r3, [sp, #24]
 8013c9c:	b963      	cbnz	r3, 8013cb8 <_dtoa_r+0x830>
 8013c9e:	4629      	mov	r1, r5
 8013ca0:	2205      	movs	r2, #5
 8013ca2:	4620      	mov	r0, r4
 8013ca4:	f000 feb3 	bl	8014a0e <__multadd>
 8013ca8:	4601      	mov	r1, r0
 8013caa:	4605      	mov	r5, r0
 8013cac:	9801      	ldr	r0, [sp, #4]
 8013cae:	f001 f8b7 	bl	8014e20 <__mcmp>
 8013cb2:	2800      	cmp	r0, #0
 8013cb4:	f73f adfc 	bgt.w	80138b0 <_dtoa_r+0x428>
 8013cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cba:	9e04      	ldr	r6, [sp, #16]
 8013cbc:	ea6f 0b03 	mvn.w	fp, r3
 8013cc0:	f04f 0900 	mov.w	r9, #0
 8013cc4:	4629      	mov	r1, r5
 8013cc6:	4620      	mov	r0, r4
 8013cc8:	f000 fe8a 	bl	80149e0 <_Bfree>
 8013ccc:	2f00      	cmp	r7, #0
 8013cce:	f43f aebb 	beq.w	8013a48 <_dtoa_r+0x5c0>
 8013cd2:	f1b9 0f00 	cmp.w	r9, #0
 8013cd6:	d005      	beq.n	8013ce4 <_dtoa_r+0x85c>
 8013cd8:	45b9      	cmp	r9, r7
 8013cda:	d003      	beq.n	8013ce4 <_dtoa_r+0x85c>
 8013cdc:	4649      	mov	r1, r9
 8013cde:	4620      	mov	r0, r4
 8013ce0:	f000 fe7e 	bl	80149e0 <_Bfree>
 8013ce4:	4639      	mov	r1, r7
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	f000 fe7a 	bl	80149e0 <_Bfree>
 8013cec:	e6ac      	b.n	8013a48 <_dtoa_r+0x5c0>
 8013cee:	2500      	movs	r5, #0
 8013cf0:	462f      	mov	r7, r5
 8013cf2:	e7e1      	b.n	8013cb8 <_dtoa_r+0x830>
 8013cf4:	469b      	mov	fp, r3
 8013cf6:	462f      	mov	r7, r5
 8013cf8:	e5da      	b.n	80138b0 <_dtoa_r+0x428>
 8013cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cfc:	f8cd 9018 	str.w	r9, [sp, #24]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	f000 80f3 	beq.w	8013eec <_dtoa_r+0xa64>
 8013d06:	2e00      	cmp	r6, #0
 8013d08:	dd05      	ble.n	8013d16 <_dtoa_r+0x88e>
 8013d0a:	4639      	mov	r1, r7
 8013d0c:	4632      	mov	r2, r6
 8013d0e:	4620      	mov	r0, r4
 8013d10:	f001 f832 	bl	8014d78 <__lshift>
 8013d14:	4607      	mov	r7, r0
 8013d16:	f1b8 0f00 	cmp.w	r8, #0
 8013d1a:	d04c      	beq.n	8013db6 <_dtoa_r+0x92e>
 8013d1c:	6879      	ldr	r1, [r7, #4]
 8013d1e:	4620      	mov	r0, r4
 8013d20:	f000 fe2a 	bl	8014978 <_Balloc>
 8013d24:	693a      	ldr	r2, [r7, #16]
 8013d26:	3202      	adds	r2, #2
 8013d28:	4606      	mov	r6, r0
 8013d2a:	0092      	lsls	r2, r2, #2
 8013d2c:	f107 010c 	add.w	r1, r7, #12
 8013d30:	300c      	adds	r0, #12
 8013d32:	f7fd fbff 	bl	8011534 <memcpy>
 8013d36:	2201      	movs	r2, #1
 8013d38:	4631      	mov	r1, r6
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f001 f81c 	bl	8014d78 <__lshift>
 8013d40:	9b02      	ldr	r3, [sp, #8]
 8013d42:	f8dd a010 	ldr.w	sl, [sp, #16]
 8013d46:	f003 0301 	and.w	r3, r3, #1
 8013d4a:	46b9      	mov	r9, r7
 8013d4c:	9307      	str	r3, [sp, #28]
 8013d4e:	4607      	mov	r7, r0
 8013d50:	4629      	mov	r1, r5
 8013d52:	9801      	ldr	r0, [sp, #4]
 8013d54:	f7ff fb0a 	bl	801336c <quorem>
 8013d58:	4649      	mov	r1, r9
 8013d5a:	4606      	mov	r6, r0
 8013d5c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013d60:	9801      	ldr	r0, [sp, #4]
 8013d62:	f001 f85d 	bl	8014e20 <__mcmp>
 8013d66:	463a      	mov	r2, r7
 8013d68:	9002      	str	r0, [sp, #8]
 8013d6a:	4629      	mov	r1, r5
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f001 f871 	bl	8014e54 <__mdiff>
 8013d72:	68c3      	ldr	r3, [r0, #12]
 8013d74:	4602      	mov	r2, r0
 8013d76:	bb03      	cbnz	r3, 8013dba <_dtoa_r+0x932>
 8013d78:	4601      	mov	r1, r0
 8013d7a:	9009      	str	r0, [sp, #36]	; 0x24
 8013d7c:	9801      	ldr	r0, [sp, #4]
 8013d7e:	f001 f84f 	bl	8014e20 <__mcmp>
 8013d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d84:	4603      	mov	r3, r0
 8013d86:	4611      	mov	r1, r2
 8013d88:	4620      	mov	r0, r4
 8013d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8013d8c:	f000 fe28 	bl	80149e0 <_Bfree>
 8013d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d92:	b9a3      	cbnz	r3, 8013dbe <_dtoa_r+0x936>
 8013d94:	9a08      	ldr	r2, [sp, #32]
 8013d96:	b992      	cbnz	r2, 8013dbe <_dtoa_r+0x936>
 8013d98:	9a07      	ldr	r2, [sp, #28]
 8013d9a:	b982      	cbnz	r2, 8013dbe <_dtoa_r+0x936>
 8013d9c:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013da0:	d029      	beq.n	8013df6 <_dtoa_r+0x96e>
 8013da2:	9b02      	ldr	r3, [sp, #8]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	dd01      	ble.n	8013dac <_dtoa_r+0x924>
 8013da8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8013dac:	f10a 0601 	add.w	r6, sl, #1
 8013db0:	f88a 8000 	strb.w	r8, [sl]
 8013db4:	e786      	b.n	8013cc4 <_dtoa_r+0x83c>
 8013db6:	4638      	mov	r0, r7
 8013db8:	e7c2      	b.n	8013d40 <_dtoa_r+0x8b8>
 8013dba:	2301      	movs	r3, #1
 8013dbc:	e7e3      	b.n	8013d86 <_dtoa_r+0x8fe>
 8013dbe:	9a02      	ldr	r2, [sp, #8]
 8013dc0:	2a00      	cmp	r2, #0
 8013dc2:	db04      	blt.n	8013dce <_dtoa_r+0x946>
 8013dc4:	d124      	bne.n	8013e10 <_dtoa_r+0x988>
 8013dc6:	9a08      	ldr	r2, [sp, #32]
 8013dc8:	bb12      	cbnz	r2, 8013e10 <_dtoa_r+0x988>
 8013dca:	9a07      	ldr	r2, [sp, #28]
 8013dcc:	bb02      	cbnz	r2, 8013e10 <_dtoa_r+0x988>
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	ddec      	ble.n	8013dac <_dtoa_r+0x924>
 8013dd2:	2201      	movs	r2, #1
 8013dd4:	9901      	ldr	r1, [sp, #4]
 8013dd6:	4620      	mov	r0, r4
 8013dd8:	f000 ffce 	bl	8014d78 <__lshift>
 8013ddc:	4629      	mov	r1, r5
 8013dde:	9001      	str	r0, [sp, #4]
 8013de0:	f001 f81e 	bl	8014e20 <__mcmp>
 8013de4:	2800      	cmp	r0, #0
 8013de6:	dc03      	bgt.n	8013df0 <_dtoa_r+0x968>
 8013de8:	d1e0      	bne.n	8013dac <_dtoa_r+0x924>
 8013dea:	f018 0f01 	tst.w	r8, #1
 8013dee:	d0dd      	beq.n	8013dac <_dtoa_r+0x924>
 8013df0:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013df4:	d1d8      	bne.n	8013da8 <_dtoa_r+0x920>
 8013df6:	2339      	movs	r3, #57	; 0x39
 8013df8:	f10a 0601 	add.w	r6, sl, #1
 8013dfc:	f88a 3000 	strb.w	r3, [sl]
 8013e00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e04:	2b39      	cmp	r3, #57	; 0x39
 8013e06:	f106 32ff 	add.w	r2, r6, #4294967295
 8013e0a:	d04c      	beq.n	8013ea6 <_dtoa_r+0xa1e>
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	e051      	b.n	8013eb4 <_dtoa_r+0xa2c>
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	f10a 0601 	add.w	r6, sl, #1
 8013e16:	dd05      	ble.n	8013e24 <_dtoa_r+0x99c>
 8013e18:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013e1c:	d0eb      	beq.n	8013df6 <_dtoa_r+0x96e>
 8013e1e:	f108 0801 	add.w	r8, r8, #1
 8013e22:	e7c5      	b.n	8013db0 <_dtoa_r+0x928>
 8013e24:	9b04      	ldr	r3, [sp, #16]
 8013e26:	9a06      	ldr	r2, [sp, #24]
 8013e28:	f806 8c01 	strb.w	r8, [r6, #-1]
 8013e2c:	1af3      	subs	r3, r6, r3
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	d021      	beq.n	8013e76 <_dtoa_r+0x9ee>
 8013e32:	2300      	movs	r3, #0
 8013e34:	220a      	movs	r2, #10
 8013e36:	9901      	ldr	r1, [sp, #4]
 8013e38:	4620      	mov	r0, r4
 8013e3a:	f000 fde8 	bl	8014a0e <__multadd>
 8013e3e:	45b9      	cmp	r9, r7
 8013e40:	9001      	str	r0, [sp, #4]
 8013e42:	f04f 0300 	mov.w	r3, #0
 8013e46:	f04f 020a 	mov.w	r2, #10
 8013e4a:	4649      	mov	r1, r9
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	d105      	bne.n	8013e5c <_dtoa_r+0x9d4>
 8013e50:	f000 fddd 	bl	8014a0e <__multadd>
 8013e54:	4681      	mov	r9, r0
 8013e56:	4607      	mov	r7, r0
 8013e58:	46b2      	mov	sl, r6
 8013e5a:	e779      	b.n	8013d50 <_dtoa_r+0x8c8>
 8013e5c:	f000 fdd7 	bl	8014a0e <__multadd>
 8013e60:	4639      	mov	r1, r7
 8013e62:	4681      	mov	r9, r0
 8013e64:	2300      	movs	r3, #0
 8013e66:	220a      	movs	r2, #10
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f000 fdd0 	bl	8014a0e <__multadd>
 8013e6e:	4607      	mov	r7, r0
 8013e70:	e7f2      	b.n	8013e58 <_dtoa_r+0x9d0>
 8013e72:	f04f 0900 	mov.w	r9, #0
 8013e76:	2201      	movs	r2, #1
 8013e78:	9901      	ldr	r1, [sp, #4]
 8013e7a:	4620      	mov	r0, r4
 8013e7c:	f000 ff7c 	bl	8014d78 <__lshift>
 8013e80:	4629      	mov	r1, r5
 8013e82:	9001      	str	r0, [sp, #4]
 8013e84:	f000 ffcc 	bl	8014e20 <__mcmp>
 8013e88:	2800      	cmp	r0, #0
 8013e8a:	dcb9      	bgt.n	8013e00 <_dtoa_r+0x978>
 8013e8c:	d102      	bne.n	8013e94 <_dtoa_r+0xa0c>
 8013e8e:	f018 0f01 	tst.w	r8, #1
 8013e92:	d1b5      	bne.n	8013e00 <_dtoa_r+0x978>
 8013e94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013e98:	2b30      	cmp	r3, #48	; 0x30
 8013e9a:	f106 32ff 	add.w	r2, r6, #4294967295
 8013e9e:	f47f af11 	bne.w	8013cc4 <_dtoa_r+0x83c>
 8013ea2:	4616      	mov	r6, r2
 8013ea4:	e7f6      	b.n	8013e94 <_dtoa_r+0xa0c>
 8013ea6:	9b04      	ldr	r3, [sp, #16]
 8013ea8:	4293      	cmp	r3, r2
 8013eaa:	d105      	bne.n	8013eb8 <_dtoa_r+0xa30>
 8013eac:	9a04      	ldr	r2, [sp, #16]
 8013eae:	f10b 0b01 	add.w	fp, fp, #1
 8013eb2:	2331      	movs	r3, #49	; 0x31
 8013eb4:	7013      	strb	r3, [r2, #0]
 8013eb6:	e705      	b.n	8013cc4 <_dtoa_r+0x83c>
 8013eb8:	4616      	mov	r6, r2
 8013eba:	e7a1      	b.n	8013e00 <_dtoa_r+0x978>
 8013ebc:	4b16      	ldr	r3, [pc, #88]	; (8013f18 <_dtoa_r+0xa90>)
 8013ebe:	f7ff bb48 	b.w	8013552 <_dtoa_r+0xca>
 8013ec2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	f47f ab23 	bne.w	8013510 <_dtoa_r+0x88>
 8013eca:	4b14      	ldr	r3, [pc, #80]	; (8013f1c <_dtoa_r+0xa94>)
 8013ecc:	f7ff bb41 	b.w	8013552 <_dtoa_r+0xca>
 8013ed0:	9b08      	ldr	r3, [sp, #32]
 8013ed2:	2b01      	cmp	r3, #1
 8013ed4:	f77f ae3b 	ble.w	8013b4e <_dtoa_r+0x6c6>
 8013ed8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8013edc:	e64f      	b.n	8013b7e <_dtoa_r+0x6f6>
 8013ede:	9b06      	ldr	r3, [sp, #24]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	dc03      	bgt.n	8013eec <_dtoa_r+0xa64>
 8013ee4:	9b08      	ldr	r3, [sp, #32]
 8013ee6:	2b02      	cmp	r3, #2
 8013ee8:	f73f aed7 	bgt.w	8013c9a <_dtoa_r+0x812>
 8013eec:	9e04      	ldr	r6, [sp, #16]
 8013eee:	9801      	ldr	r0, [sp, #4]
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	f7ff fa3b 	bl	801336c <quorem>
 8013ef6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013efa:	f806 8b01 	strb.w	r8, [r6], #1
 8013efe:	9b04      	ldr	r3, [sp, #16]
 8013f00:	9a06      	ldr	r2, [sp, #24]
 8013f02:	1af3      	subs	r3, r6, r3
 8013f04:	429a      	cmp	r2, r3
 8013f06:	ddb4      	ble.n	8013e72 <_dtoa_r+0x9ea>
 8013f08:	2300      	movs	r3, #0
 8013f0a:	220a      	movs	r2, #10
 8013f0c:	9901      	ldr	r1, [sp, #4]
 8013f0e:	4620      	mov	r0, r4
 8013f10:	f000 fd7d 	bl	8014a0e <__multadd>
 8013f14:	9001      	str	r0, [sp, #4]
 8013f16:	e7ea      	b.n	8013eee <_dtoa_r+0xa66>
 8013f18:	08015eac 	.word	0x08015eac
 8013f1c:	08015f28 	.word	0x08015f28

08013f20 <__sflush_r>:
 8013f20:	898a      	ldrh	r2, [r1, #12]
 8013f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f26:	4605      	mov	r5, r0
 8013f28:	0710      	lsls	r0, r2, #28
 8013f2a:	460c      	mov	r4, r1
 8013f2c:	d458      	bmi.n	8013fe0 <__sflush_r+0xc0>
 8013f2e:	684b      	ldr	r3, [r1, #4]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	dc05      	bgt.n	8013f40 <__sflush_r+0x20>
 8013f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	dc02      	bgt.n	8013f40 <__sflush_r+0x20>
 8013f3a:	2000      	movs	r0, #0
 8013f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f42:	2e00      	cmp	r6, #0
 8013f44:	d0f9      	beq.n	8013f3a <__sflush_r+0x1a>
 8013f46:	2300      	movs	r3, #0
 8013f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f4c:	682f      	ldr	r7, [r5, #0]
 8013f4e:	6a21      	ldr	r1, [r4, #32]
 8013f50:	602b      	str	r3, [r5, #0]
 8013f52:	d032      	beq.n	8013fba <__sflush_r+0x9a>
 8013f54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f56:	89a3      	ldrh	r3, [r4, #12]
 8013f58:	075a      	lsls	r2, r3, #29
 8013f5a:	d505      	bpl.n	8013f68 <__sflush_r+0x48>
 8013f5c:	6863      	ldr	r3, [r4, #4]
 8013f5e:	1ac0      	subs	r0, r0, r3
 8013f60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f62:	b10b      	cbz	r3, 8013f68 <__sflush_r+0x48>
 8013f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f66:	1ac0      	subs	r0, r0, r3
 8013f68:	2300      	movs	r3, #0
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f6e:	6a21      	ldr	r1, [r4, #32]
 8013f70:	4628      	mov	r0, r5
 8013f72:	47b0      	blx	r6
 8013f74:	1c43      	adds	r3, r0, #1
 8013f76:	89a3      	ldrh	r3, [r4, #12]
 8013f78:	d106      	bne.n	8013f88 <__sflush_r+0x68>
 8013f7a:	6829      	ldr	r1, [r5, #0]
 8013f7c:	291d      	cmp	r1, #29
 8013f7e:	d848      	bhi.n	8014012 <__sflush_r+0xf2>
 8013f80:	4a29      	ldr	r2, [pc, #164]	; (8014028 <__sflush_r+0x108>)
 8013f82:	40ca      	lsrs	r2, r1
 8013f84:	07d6      	lsls	r6, r2, #31
 8013f86:	d544      	bpl.n	8014012 <__sflush_r+0xf2>
 8013f88:	2200      	movs	r2, #0
 8013f8a:	6062      	str	r2, [r4, #4]
 8013f8c:	04d9      	lsls	r1, r3, #19
 8013f8e:	6922      	ldr	r2, [r4, #16]
 8013f90:	6022      	str	r2, [r4, #0]
 8013f92:	d504      	bpl.n	8013f9e <__sflush_r+0x7e>
 8013f94:	1c42      	adds	r2, r0, #1
 8013f96:	d101      	bne.n	8013f9c <__sflush_r+0x7c>
 8013f98:	682b      	ldr	r3, [r5, #0]
 8013f9a:	b903      	cbnz	r3, 8013f9e <__sflush_r+0x7e>
 8013f9c:	6560      	str	r0, [r4, #84]	; 0x54
 8013f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fa0:	602f      	str	r7, [r5, #0]
 8013fa2:	2900      	cmp	r1, #0
 8013fa4:	d0c9      	beq.n	8013f3a <__sflush_r+0x1a>
 8013fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013faa:	4299      	cmp	r1, r3
 8013fac:	d002      	beq.n	8013fb4 <__sflush_r+0x94>
 8013fae:	4628      	mov	r0, r5
 8013fb0:	f7fd fae2 	bl	8011578 <_free_r>
 8013fb4:	2000      	movs	r0, #0
 8013fb6:	6360      	str	r0, [r4, #52]	; 0x34
 8013fb8:	e7c0      	b.n	8013f3c <__sflush_r+0x1c>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	4628      	mov	r0, r5
 8013fbe:	47b0      	blx	r6
 8013fc0:	1c41      	adds	r1, r0, #1
 8013fc2:	d1c8      	bne.n	8013f56 <__sflush_r+0x36>
 8013fc4:	682b      	ldr	r3, [r5, #0]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d0c5      	beq.n	8013f56 <__sflush_r+0x36>
 8013fca:	2b1d      	cmp	r3, #29
 8013fcc:	d001      	beq.n	8013fd2 <__sflush_r+0xb2>
 8013fce:	2b16      	cmp	r3, #22
 8013fd0:	d101      	bne.n	8013fd6 <__sflush_r+0xb6>
 8013fd2:	602f      	str	r7, [r5, #0]
 8013fd4:	e7b1      	b.n	8013f3a <__sflush_r+0x1a>
 8013fd6:	89a3      	ldrh	r3, [r4, #12]
 8013fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fdc:	81a3      	strh	r3, [r4, #12]
 8013fde:	e7ad      	b.n	8013f3c <__sflush_r+0x1c>
 8013fe0:	690f      	ldr	r7, [r1, #16]
 8013fe2:	2f00      	cmp	r7, #0
 8013fe4:	d0a9      	beq.n	8013f3a <__sflush_r+0x1a>
 8013fe6:	0793      	lsls	r3, r2, #30
 8013fe8:	680e      	ldr	r6, [r1, #0]
 8013fea:	bf08      	it	eq
 8013fec:	694b      	ldreq	r3, [r1, #20]
 8013fee:	600f      	str	r7, [r1, #0]
 8013ff0:	bf18      	it	ne
 8013ff2:	2300      	movne	r3, #0
 8013ff4:	eba6 0807 	sub.w	r8, r6, r7
 8013ff8:	608b      	str	r3, [r1, #8]
 8013ffa:	f1b8 0f00 	cmp.w	r8, #0
 8013ffe:	dd9c      	ble.n	8013f3a <__sflush_r+0x1a>
 8014000:	4643      	mov	r3, r8
 8014002:	463a      	mov	r2, r7
 8014004:	6a21      	ldr	r1, [r4, #32]
 8014006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014008:	4628      	mov	r0, r5
 801400a:	47b0      	blx	r6
 801400c:	2800      	cmp	r0, #0
 801400e:	dc06      	bgt.n	801401e <__sflush_r+0xfe>
 8014010:	89a3      	ldrh	r3, [r4, #12]
 8014012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014016:	81a3      	strh	r3, [r4, #12]
 8014018:	f04f 30ff 	mov.w	r0, #4294967295
 801401c:	e78e      	b.n	8013f3c <__sflush_r+0x1c>
 801401e:	4407      	add	r7, r0
 8014020:	eba8 0800 	sub.w	r8, r8, r0
 8014024:	e7e9      	b.n	8013ffa <__sflush_r+0xda>
 8014026:	bf00      	nop
 8014028:	20400001 	.word	0x20400001

0801402c <_fflush_r>:
 801402c:	b538      	push	{r3, r4, r5, lr}
 801402e:	690b      	ldr	r3, [r1, #16]
 8014030:	4605      	mov	r5, r0
 8014032:	460c      	mov	r4, r1
 8014034:	b1db      	cbz	r3, 801406e <_fflush_r+0x42>
 8014036:	b118      	cbz	r0, 8014040 <_fflush_r+0x14>
 8014038:	6983      	ldr	r3, [r0, #24]
 801403a:	b90b      	cbnz	r3, 8014040 <_fflush_r+0x14>
 801403c:	f000 f860 	bl	8014100 <__sinit>
 8014040:	4b0c      	ldr	r3, [pc, #48]	; (8014074 <_fflush_r+0x48>)
 8014042:	429c      	cmp	r4, r3
 8014044:	d109      	bne.n	801405a <_fflush_r+0x2e>
 8014046:	686c      	ldr	r4, [r5, #4]
 8014048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801404c:	b17b      	cbz	r3, 801406e <_fflush_r+0x42>
 801404e:	4621      	mov	r1, r4
 8014050:	4628      	mov	r0, r5
 8014052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014056:	f7ff bf63 	b.w	8013f20 <__sflush_r>
 801405a:	4b07      	ldr	r3, [pc, #28]	; (8014078 <_fflush_r+0x4c>)
 801405c:	429c      	cmp	r4, r3
 801405e:	d101      	bne.n	8014064 <_fflush_r+0x38>
 8014060:	68ac      	ldr	r4, [r5, #8]
 8014062:	e7f1      	b.n	8014048 <_fflush_r+0x1c>
 8014064:	4b05      	ldr	r3, [pc, #20]	; (801407c <_fflush_r+0x50>)
 8014066:	429c      	cmp	r4, r3
 8014068:	bf08      	it	eq
 801406a:	68ec      	ldreq	r4, [r5, #12]
 801406c:	e7ec      	b.n	8014048 <_fflush_r+0x1c>
 801406e:	2000      	movs	r0, #0
 8014070:	bd38      	pop	{r3, r4, r5, pc}
 8014072:	bf00      	nop
 8014074:	08015f58 	.word	0x08015f58
 8014078:	08015f78 	.word	0x08015f78
 801407c:	08015f38 	.word	0x08015f38

08014080 <std>:
 8014080:	2300      	movs	r3, #0
 8014082:	b510      	push	{r4, lr}
 8014084:	4604      	mov	r4, r0
 8014086:	e9c0 3300 	strd	r3, r3, [r0]
 801408a:	6083      	str	r3, [r0, #8]
 801408c:	8181      	strh	r1, [r0, #12]
 801408e:	6643      	str	r3, [r0, #100]	; 0x64
 8014090:	81c2      	strh	r2, [r0, #14]
 8014092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014096:	6183      	str	r3, [r0, #24]
 8014098:	4619      	mov	r1, r3
 801409a:	2208      	movs	r2, #8
 801409c:	305c      	adds	r0, #92	; 0x5c
 801409e:	f7fd fa54 	bl	801154a <memset>
 80140a2:	4b05      	ldr	r3, [pc, #20]	; (80140b8 <std+0x38>)
 80140a4:	6263      	str	r3, [r4, #36]	; 0x24
 80140a6:	4b05      	ldr	r3, [pc, #20]	; (80140bc <std+0x3c>)
 80140a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80140aa:	4b05      	ldr	r3, [pc, #20]	; (80140c0 <std+0x40>)
 80140ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80140ae:	4b05      	ldr	r3, [pc, #20]	; (80140c4 <std+0x44>)
 80140b0:	6224      	str	r4, [r4, #32]
 80140b2:	6323      	str	r3, [r4, #48]	; 0x30
 80140b4:	bd10      	pop	{r4, pc}
 80140b6:	bf00      	nop
 80140b8:	080156e9 	.word	0x080156e9
 80140bc:	0801570b 	.word	0x0801570b
 80140c0:	08015743 	.word	0x08015743
 80140c4:	08015767 	.word	0x08015767

080140c8 <_cleanup_r>:
 80140c8:	4901      	ldr	r1, [pc, #4]	; (80140d0 <_cleanup_r+0x8>)
 80140ca:	f000 b885 	b.w	80141d8 <_fwalk_reent>
 80140ce:	bf00      	nop
 80140d0:	0801402d 	.word	0x0801402d

080140d4 <__sfmoreglue>:
 80140d4:	b570      	push	{r4, r5, r6, lr}
 80140d6:	1e4a      	subs	r2, r1, #1
 80140d8:	2568      	movs	r5, #104	; 0x68
 80140da:	4355      	muls	r5, r2
 80140dc:	460e      	mov	r6, r1
 80140de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80140e2:	f7fd fa97 	bl	8011614 <_malloc_r>
 80140e6:	4604      	mov	r4, r0
 80140e8:	b140      	cbz	r0, 80140fc <__sfmoreglue+0x28>
 80140ea:	2100      	movs	r1, #0
 80140ec:	e9c0 1600 	strd	r1, r6, [r0]
 80140f0:	300c      	adds	r0, #12
 80140f2:	60a0      	str	r0, [r4, #8]
 80140f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80140f8:	f7fd fa27 	bl	801154a <memset>
 80140fc:	4620      	mov	r0, r4
 80140fe:	bd70      	pop	{r4, r5, r6, pc}

08014100 <__sinit>:
 8014100:	6983      	ldr	r3, [r0, #24]
 8014102:	b510      	push	{r4, lr}
 8014104:	4604      	mov	r4, r0
 8014106:	bb33      	cbnz	r3, 8014156 <__sinit+0x56>
 8014108:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801410c:	6503      	str	r3, [r0, #80]	; 0x50
 801410e:	4b12      	ldr	r3, [pc, #72]	; (8014158 <__sinit+0x58>)
 8014110:	4a12      	ldr	r2, [pc, #72]	; (801415c <__sinit+0x5c>)
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	6282      	str	r2, [r0, #40]	; 0x28
 8014116:	4298      	cmp	r0, r3
 8014118:	bf04      	itt	eq
 801411a:	2301      	moveq	r3, #1
 801411c:	6183      	streq	r3, [r0, #24]
 801411e:	f000 f81f 	bl	8014160 <__sfp>
 8014122:	6060      	str	r0, [r4, #4]
 8014124:	4620      	mov	r0, r4
 8014126:	f000 f81b 	bl	8014160 <__sfp>
 801412a:	60a0      	str	r0, [r4, #8]
 801412c:	4620      	mov	r0, r4
 801412e:	f000 f817 	bl	8014160 <__sfp>
 8014132:	2200      	movs	r2, #0
 8014134:	60e0      	str	r0, [r4, #12]
 8014136:	2104      	movs	r1, #4
 8014138:	6860      	ldr	r0, [r4, #4]
 801413a:	f7ff ffa1 	bl	8014080 <std>
 801413e:	2201      	movs	r2, #1
 8014140:	2109      	movs	r1, #9
 8014142:	68a0      	ldr	r0, [r4, #8]
 8014144:	f7ff ff9c 	bl	8014080 <std>
 8014148:	2202      	movs	r2, #2
 801414a:	2112      	movs	r1, #18
 801414c:	68e0      	ldr	r0, [r4, #12]
 801414e:	f7ff ff97 	bl	8014080 <std>
 8014152:	2301      	movs	r3, #1
 8014154:	61a3      	str	r3, [r4, #24]
 8014156:	bd10      	pop	{r4, pc}
 8014158:	08015e98 	.word	0x08015e98
 801415c:	080140c9 	.word	0x080140c9

08014160 <__sfp>:
 8014160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014162:	4b1b      	ldr	r3, [pc, #108]	; (80141d0 <__sfp+0x70>)
 8014164:	681e      	ldr	r6, [r3, #0]
 8014166:	69b3      	ldr	r3, [r6, #24]
 8014168:	4607      	mov	r7, r0
 801416a:	b913      	cbnz	r3, 8014172 <__sfp+0x12>
 801416c:	4630      	mov	r0, r6
 801416e:	f7ff ffc7 	bl	8014100 <__sinit>
 8014172:	3648      	adds	r6, #72	; 0x48
 8014174:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014178:	3b01      	subs	r3, #1
 801417a:	d503      	bpl.n	8014184 <__sfp+0x24>
 801417c:	6833      	ldr	r3, [r6, #0]
 801417e:	b133      	cbz	r3, 801418e <__sfp+0x2e>
 8014180:	6836      	ldr	r6, [r6, #0]
 8014182:	e7f7      	b.n	8014174 <__sfp+0x14>
 8014184:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014188:	b16d      	cbz	r5, 80141a6 <__sfp+0x46>
 801418a:	3468      	adds	r4, #104	; 0x68
 801418c:	e7f4      	b.n	8014178 <__sfp+0x18>
 801418e:	2104      	movs	r1, #4
 8014190:	4638      	mov	r0, r7
 8014192:	f7ff ff9f 	bl	80140d4 <__sfmoreglue>
 8014196:	6030      	str	r0, [r6, #0]
 8014198:	2800      	cmp	r0, #0
 801419a:	d1f1      	bne.n	8014180 <__sfp+0x20>
 801419c:	230c      	movs	r3, #12
 801419e:	603b      	str	r3, [r7, #0]
 80141a0:	4604      	mov	r4, r0
 80141a2:	4620      	mov	r0, r4
 80141a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141a6:	4b0b      	ldr	r3, [pc, #44]	; (80141d4 <__sfp+0x74>)
 80141a8:	6665      	str	r5, [r4, #100]	; 0x64
 80141aa:	e9c4 5500 	strd	r5, r5, [r4]
 80141ae:	60a5      	str	r5, [r4, #8]
 80141b0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80141b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80141b8:	2208      	movs	r2, #8
 80141ba:	4629      	mov	r1, r5
 80141bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80141c0:	f7fd f9c3 	bl	801154a <memset>
 80141c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80141c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80141cc:	e7e9      	b.n	80141a2 <__sfp+0x42>
 80141ce:	bf00      	nop
 80141d0:	08015e98 	.word	0x08015e98
 80141d4:	ffff0001 	.word	0xffff0001

080141d8 <_fwalk_reent>:
 80141d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141dc:	4680      	mov	r8, r0
 80141de:	4689      	mov	r9, r1
 80141e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80141e4:	2600      	movs	r6, #0
 80141e6:	b914      	cbnz	r4, 80141ee <_fwalk_reent+0x16>
 80141e8:	4630      	mov	r0, r6
 80141ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141ee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80141f2:	3f01      	subs	r7, #1
 80141f4:	d501      	bpl.n	80141fa <_fwalk_reent+0x22>
 80141f6:	6824      	ldr	r4, [r4, #0]
 80141f8:	e7f5      	b.n	80141e6 <_fwalk_reent+0xe>
 80141fa:	89ab      	ldrh	r3, [r5, #12]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d907      	bls.n	8014210 <_fwalk_reent+0x38>
 8014200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014204:	3301      	adds	r3, #1
 8014206:	d003      	beq.n	8014210 <_fwalk_reent+0x38>
 8014208:	4629      	mov	r1, r5
 801420a:	4640      	mov	r0, r8
 801420c:	47c8      	blx	r9
 801420e:	4306      	orrs	r6, r0
 8014210:	3568      	adds	r5, #104	; 0x68
 8014212:	e7ee      	b.n	80141f2 <_fwalk_reent+0x1a>

08014214 <rshift>:
 8014214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014216:	6906      	ldr	r6, [r0, #16]
 8014218:	114b      	asrs	r3, r1, #5
 801421a:	429e      	cmp	r6, r3
 801421c:	f100 0414 	add.w	r4, r0, #20
 8014220:	dd30      	ble.n	8014284 <rshift+0x70>
 8014222:	f011 011f 	ands.w	r1, r1, #31
 8014226:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801422a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801422e:	d108      	bne.n	8014242 <rshift+0x2e>
 8014230:	4621      	mov	r1, r4
 8014232:	42b2      	cmp	r2, r6
 8014234:	460b      	mov	r3, r1
 8014236:	d211      	bcs.n	801425c <rshift+0x48>
 8014238:	f852 3b04 	ldr.w	r3, [r2], #4
 801423c:	f841 3b04 	str.w	r3, [r1], #4
 8014240:	e7f7      	b.n	8014232 <rshift+0x1e>
 8014242:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014246:	f1c1 0c20 	rsb	ip, r1, #32
 801424a:	40cd      	lsrs	r5, r1
 801424c:	3204      	adds	r2, #4
 801424e:	4623      	mov	r3, r4
 8014250:	42b2      	cmp	r2, r6
 8014252:	4617      	mov	r7, r2
 8014254:	d30c      	bcc.n	8014270 <rshift+0x5c>
 8014256:	601d      	str	r5, [r3, #0]
 8014258:	b105      	cbz	r5, 801425c <rshift+0x48>
 801425a:	3304      	adds	r3, #4
 801425c:	1b1a      	subs	r2, r3, r4
 801425e:	42a3      	cmp	r3, r4
 8014260:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014264:	bf08      	it	eq
 8014266:	2300      	moveq	r3, #0
 8014268:	6102      	str	r2, [r0, #16]
 801426a:	bf08      	it	eq
 801426c:	6143      	streq	r3, [r0, #20]
 801426e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014270:	683f      	ldr	r7, [r7, #0]
 8014272:	fa07 f70c 	lsl.w	r7, r7, ip
 8014276:	433d      	orrs	r5, r7
 8014278:	f843 5b04 	str.w	r5, [r3], #4
 801427c:	f852 5b04 	ldr.w	r5, [r2], #4
 8014280:	40cd      	lsrs	r5, r1
 8014282:	e7e5      	b.n	8014250 <rshift+0x3c>
 8014284:	4623      	mov	r3, r4
 8014286:	e7e9      	b.n	801425c <rshift+0x48>

08014288 <__hexdig_fun>:
 8014288:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801428c:	2b09      	cmp	r3, #9
 801428e:	d802      	bhi.n	8014296 <__hexdig_fun+0xe>
 8014290:	3820      	subs	r0, #32
 8014292:	b2c0      	uxtb	r0, r0
 8014294:	4770      	bx	lr
 8014296:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801429a:	2b05      	cmp	r3, #5
 801429c:	d801      	bhi.n	80142a2 <__hexdig_fun+0x1a>
 801429e:	3847      	subs	r0, #71	; 0x47
 80142a0:	e7f7      	b.n	8014292 <__hexdig_fun+0xa>
 80142a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80142a6:	2b05      	cmp	r3, #5
 80142a8:	d801      	bhi.n	80142ae <__hexdig_fun+0x26>
 80142aa:	3827      	subs	r0, #39	; 0x27
 80142ac:	e7f1      	b.n	8014292 <__hexdig_fun+0xa>
 80142ae:	2000      	movs	r0, #0
 80142b0:	4770      	bx	lr

080142b2 <__gethex>:
 80142b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142b6:	b08b      	sub	sp, #44	; 0x2c
 80142b8:	468a      	mov	sl, r1
 80142ba:	9002      	str	r0, [sp, #8]
 80142bc:	9816      	ldr	r0, [sp, #88]	; 0x58
 80142be:	9306      	str	r3, [sp, #24]
 80142c0:	4690      	mov	r8, r2
 80142c2:	f000 fad0 	bl	8014866 <__localeconv_l>
 80142c6:	6803      	ldr	r3, [r0, #0]
 80142c8:	9303      	str	r3, [sp, #12]
 80142ca:	4618      	mov	r0, r3
 80142cc:	f7eb ffb8 	bl	8000240 <strlen>
 80142d0:	9b03      	ldr	r3, [sp, #12]
 80142d2:	9001      	str	r0, [sp, #4]
 80142d4:	4403      	add	r3, r0
 80142d6:	f04f 0b00 	mov.w	fp, #0
 80142da:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80142de:	9307      	str	r3, [sp, #28]
 80142e0:	f8da 3000 	ldr.w	r3, [sl]
 80142e4:	3302      	adds	r3, #2
 80142e6:	461f      	mov	r7, r3
 80142e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80142ec:	2830      	cmp	r0, #48	; 0x30
 80142ee:	d06c      	beq.n	80143ca <__gethex+0x118>
 80142f0:	f7ff ffca 	bl	8014288 <__hexdig_fun>
 80142f4:	4604      	mov	r4, r0
 80142f6:	2800      	cmp	r0, #0
 80142f8:	d16a      	bne.n	80143d0 <__gethex+0x11e>
 80142fa:	9a01      	ldr	r2, [sp, #4]
 80142fc:	9903      	ldr	r1, [sp, #12]
 80142fe:	4638      	mov	r0, r7
 8014300:	f001 fa35 	bl	801576e <strncmp>
 8014304:	2800      	cmp	r0, #0
 8014306:	d166      	bne.n	80143d6 <__gethex+0x124>
 8014308:	9b01      	ldr	r3, [sp, #4]
 801430a:	5cf8      	ldrb	r0, [r7, r3]
 801430c:	18fe      	adds	r6, r7, r3
 801430e:	f7ff ffbb 	bl	8014288 <__hexdig_fun>
 8014312:	2800      	cmp	r0, #0
 8014314:	d062      	beq.n	80143dc <__gethex+0x12a>
 8014316:	4633      	mov	r3, r6
 8014318:	7818      	ldrb	r0, [r3, #0]
 801431a:	2830      	cmp	r0, #48	; 0x30
 801431c:	461f      	mov	r7, r3
 801431e:	f103 0301 	add.w	r3, r3, #1
 8014322:	d0f9      	beq.n	8014318 <__gethex+0x66>
 8014324:	f7ff ffb0 	bl	8014288 <__hexdig_fun>
 8014328:	fab0 f580 	clz	r5, r0
 801432c:	096d      	lsrs	r5, r5, #5
 801432e:	4634      	mov	r4, r6
 8014330:	f04f 0b01 	mov.w	fp, #1
 8014334:	463a      	mov	r2, r7
 8014336:	4616      	mov	r6, r2
 8014338:	3201      	adds	r2, #1
 801433a:	7830      	ldrb	r0, [r6, #0]
 801433c:	f7ff ffa4 	bl	8014288 <__hexdig_fun>
 8014340:	2800      	cmp	r0, #0
 8014342:	d1f8      	bne.n	8014336 <__gethex+0x84>
 8014344:	9a01      	ldr	r2, [sp, #4]
 8014346:	9903      	ldr	r1, [sp, #12]
 8014348:	4630      	mov	r0, r6
 801434a:	f001 fa10 	bl	801576e <strncmp>
 801434e:	b950      	cbnz	r0, 8014366 <__gethex+0xb4>
 8014350:	b954      	cbnz	r4, 8014368 <__gethex+0xb6>
 8014352:	9b01      	ldr	r3, [sp, #4]
 8014354:	18f4      	adds	r4, r6, r3
 8014356:	4622      	mov	r2, r4
 8014358:	4616      	mov	r6, r2
 801435a:	3201      	adds	r2, #1
 801435c:	7830      	ldrb	r0, [r6, #0]
 801435e:	f7ff ff93 	bl	8014288 <__hexdig_fun>
 8014362:	2800      	cmp	r0, #0
 8014364:	d1f8      	bne.n	8014358 <__gethex+0xa6>
 8014366:	b10c      	cbz	r4, 801436c <__gethex+0xba>
 8014368:	1ba4      	subs	r4, r4, r6
 801436a:	00a4      	lsls	r4, r4, #2
 801436c:	7833      	ldrb	r3, [r6, #0]
 801436e:	2b50      	cmp	r3, #80	; 0x50
 8014370:	d001      	beq.n	8014376 <__gethex+0xc4>
 8014372:	2b70      	cmp	r3, #112	; 0x70
 8014374:	d140      	bne.n	80143f8 <__gethex+0x146>
 8014376:	7873      	ldrb	r3, [r6, #1]
 8014378:	2b2b      	cmp	r3, #43	; 0x2b
 801437a:	d031      	beq.n	80143e0 <__gethex+0x12e>
 801437c:	2b2d      	cmp	r3, #45	; 0x2d
 801437e:	d033      	beq.n	80143e8 <__gethex+0x136>
 8014380:	1c71      	adds	r1, r6, #1
 8014382:	f04f 0900 	mov.w	r9, #0
 8014386:	7808      	ldrb	r0, [r1, #0]
 8014388:	f7ff ff7e 	bl	8014288 <__hexdig_fun>
 801438c:	1e43      	subs	r3, r0, #1
 801438e:	b2db      	uxtb	r3, r3
 8014390:	2b18      	cmp	r3, #24
 8014392:	d831      	bhi.n	80143f8 <__gethex+0x146>
 8014394:	f1a0 0210 	sub.w	r2, r0, #16
 8014398:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801439c:	f7ff ff74 	bl	8014288 <__hexdig_fun>
 80143a0:	1e43      	subs	r3, r0, #1
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	2b18      	cmp	r3, #24
 80143a6:	d922      	bls.n	80143ee <__gethex+0x13c>
 80143a8:	f1b9 0f00 	cmp.w	r9, #0
 80143ac:	d000      	beq.n	80143b0 <__gethex+0xfe>
 80143ae:	4252      	negs	r2, r2
 80143b0:	4414      	add	r4, r2
 80143b2:	f8ca 1000 	str.w	r1, [sl]
 80143b6:	b30d      	cbz	r5, 80143fc <__gethex+0x14a>
 80143b8:	f1bb 0f00 	cmp.w	fp, #0
 80143bc:	bf0c      	ite	eq
 80143be:	2706      	moveq	r7, #6
 80143c0:	2700      	movne	r7, #0
 80143c2:	4638      	mov	r0, r7
 80143c4:	b00b      	add	sp, #44	; 0x2c
 80143c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ca:	f10b 0b01 	add.w	fp, fp, #1
 80143ce:	e78a      	b.n	80142e6 <__gethex+0x34>
 80143d0:	2500      	movs	r5, #0
 80143d2:	462c      	mov	r4, r5
 80143d4:	e7ae      	b.n	8014334 <__gethex+0x82>
 80143d6:	463e      	mov	r6, r7
 80143d8:	2501      	movs	r5, #1
 80143da:	e7c7      	b.n	801436c <__gethex+0xba>
 80143dc:	4604      	mov	r4, r0
 80143de:	e7fb      	b.n	80143d8 <__gethex+0x126>
 80143e0:	f04f 0900 	mov.w	r9, #0
 80143e4:	1cb1      	adds	r1, r6, #2
 80143e6:	e7ce      	b.n	8014386 <__gethex+0xd4>
 80143e8:	f04f 0901 	mov.w	r9, #1
 80143ec:	e7fa      	b.n	80143e4 <__gethex+0x132>
 80143ee:	230a      	movs	r3, #10
 80143f0:	fb03 0202 	mla	r2, r3, r2, r0
 80143f4:	3a10      	subs	r2, #16
 80143f6:	e7cf      	b.n	8014398 <__gethex+0xe6>
 80143f8:	4631      	mov	r1, r6
 80143fa:	e7da      	b.n	80143b2 <__gethex+0x100>
 80143fc:	1bf3      	subs	r3, r6, r7
 80143fe:	3b01      	subs	r3, #1
 8014400:	4629      	mov	r1, r5
 8014402:	2b07      	cmp	r3, #7
 8014404:	dc49      	bgt.n	801449a <__gethex+0x1e8>
 8014406:	9802      	ldr	r0, [sp, #8]
 8014408:	f000 fab6 	bl	8014978 <_Balloc>
 801440c:	9b01      	ldr	r3, [sp, #4]
 801440e:	f100 0914 	add.w	r9, r0, #20
 8014412:	f04f 0b00 	mov.w	fp, #0
 8014416:	f1c3 0301 	rsb	r3, r3, #1
 801441a:	4605      	mov	r5, r0
 801441c:	f8cd 9010 	str.w	r9, [sp, #16]
 8014420:	46da      	mov	sl, fp
 8014422:	9308      	str	r3, [sp, #32]
 8014424:	42b7      	cmp	r7, r6
 8014426:	d33b      	bcc.n	80144a0 <__gethex+0x1ee>
 8014428:	9804      	ldr	r0, [sp, #16]
 801442a:	f840 ab04 	str.w	sl, [r0], #4
 801442e:	eba0 0009 	sub.w	r0, r0, r9
 8014432:	1080      	asrs	r0, r0, #2
 8014434:	6128      	str	r0, [r5, #16]
 8014436:	0147      	lsls	r7, r0, #5
 8014438:	4650      	mov	r0, sl
 801443a:	f000 fb61 	bl	8014b00 <__hi0bits>
 801443e:	f8d8 6000 	ldr.w	r6, [r8]
 8014442:	1a3f      	subs	r7, r7, r0
 8014444:	42b7      	cmp	r7, r6
 8014446:	dd64      	ble.n	8014512 <__gethex+0x260>
 8014448:	1bbf      	subs	r7, r7, r6
 801444a:	4639      	mov	r1, r7
 801444c:	4628      	mov	r0, r5
 801444e:	f000 fe72 	bl	8015136 <__any_on>
 8014452:	4682      	mov	sl, r0
 8014454:	b178      	cbz	r0, 8014476 <__gethex+0x1c4>
 8014456:	1e7b      	subs	r3, r7, #1
 8014458:	1159      	asrs	r1, r3, #5
 801445a:	f003 021f 	and.w	r2, r3, #31
 801445e:	f04f 0a01 	mov.w	sl, #1
 8014462:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014466:	fa0a f202 	lsl.w	r2, sl, r2
 801446a:	420a      	tst	r2, r1
 801446c:	d003      	beq.n	8014476 <__gethex+0x1c4>
 801446e:	4553      	cmp	r3, sl
 8014470:	dc46      	bgt.n	8014500 <__gethex+0x24e>
 8014472:	f04f 0a02 	mov.w	sl, #2
 8014476:	4639      	mov	r1, r7
 8014478:	4628      	mov	r0, r5
 801447a:	f7ff fecb 	bl	8014214 <rshift>
 801447e:	443c      	add	r4, r7
 8014480:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014484:	42a3      	cmp	r3, r4
 8014486:	da52      	bge.n	801452e <__gethex+0x27c>
 8014488:	4629      	mov	r1, r5
 801448a:	9802      	ldr	r0, [sp, #8]
 801448c:	f000 faa8 	bl	80149e0 <_Bfree>
 8014490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014492:	2300      	movs	r3, #0
 8014494:	6013      	str	r3, [r2, #0]
 8014496:	27a3      	movs	r7, #163	; 0xa3
 8014498:	e793      	b.n	80143c2 <__gethex+0x110>
 801449a:	3101      	adds	r1, #1
 801449c:	105b      	asrs	r3, r3, #1
 801449e:	e7b0      	b.n	8014402 <__gethex+0x150>
 80144a0:	1e73      	subs	r3, r6, #1
 80144a2:	9305      	str	r3, [sp, #20]
 80144a4:	9a07      	ldr	r2, [sp, #28]
 80144a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80144aa:	4293      	cmp	r3, r2
 80144ac:	d018      	beq.n	80144e0 <__gethex+0x22e>
 80144ae:	f1bb 0f20 	cmp.w	fp, #32
 80144b2:	d107      	bne.n	80144c4 <__gethex+0x212>
 80144b4:	9b04      	ldr	r3, [sp, #16]
 80144b6:	f8c3 a000 	str.w	sl, [r3]
 80144ba:	3304      	adds	r3, #4
 80144bc:	f04f 0a00 	mov.w	sl, #0
 80144c0:	9304      	str	r3, [sp, #16]
 80144c2:	46d3      	mov	fp, sl
 80144c4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80144c8:	f7ff fede 	bl	8014288 <__hexdig_fun>
 80144cc:	f000 000f 	and.w	r0, r0, #15
 80144d0:	fa00 f00b 	lsl.w	r0, r0, fp
 80144d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80144d8:	f10b 0b04 	add.w	fp, fp, #4
 80144dc:	9b05      	ldr	r3, [sp, #20]
 80144de:	e00d      	b.n	80144fc <__gethex+0x24a>
 80144e0:	9b05      	ldr	r3, [sp, #20]
 80144e2:	9a08      	ldr	r2, [sp, #32]
 80144e4:	4413      	add	r3, r2
 80144e6:	42bb      	cmp	r3, r7
 80144e8:	d3e1      	bcc.n	80144ae <__gethex+0x1fc>
 80144ea:	4618      	mov	r0, r3
 80144ec:	9a01      	ldr	r2, [sp, #4]
 80144ee:	9903      	ldr	r1, [sp, #12]
 80144f0:	9309      	str	r3, [sp, #36]	; 0x24
 80144f2:	f001 f93c 	bl	801576e <strncmp>
 80144f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144f8:	2800      	cmp	r0, #0
 80144fa:	d1d8      	bne.n	80144ae <__gethex+0x1fc>
 80144fc:	461e      	mov	r6, r3
 80144fe:	e791      	b.n	8014424 <__gethex+0x172>
 8014500:	1eb9      	subs	r1, r7, #2
 8014502:	4628      	mov	r0, r5
 8014504:	f000 fe17 	bl	8015136 <__any_on>
 8014508:	2800      	cmp	r0, #0
 801450a:	d0b2      	beq.n	8014472 <__gethex+0x1c0>
 801450c:	f04f 0a03 	mov.w	sl, #3
 8014510:	e7b1      	b.n	8014476 <__gethex+0x1c4>
 8014512:	da09      	bge.n	8014528 <__gethex+0x276>
 8014514:	1bf7      	subs	r7, r6, r7
 8014516:	4629      	mov	r1, r5
 8014518:	463a      	mov	r2, r7
 801451a:	9802      	ldr	r0, [sp, #8]
 801451c:	f000 fc2c 	bl	8014d78 <__lshift>
 8014520:	1be4      	subs	r4, r4, r7
 8014522:	4605      	mov	r5, r0
 8014524:	f100 0914 	add.w	r9, r0, #20
 8014528:	f04f 0a00 	mov.w	sl, #0
 801452c:	e7a8      	b.n	8014480 <__gethex+0x1ce>
 801452e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014532:	42a0      	cmp	r0, r4
 8014534:	dd6a      	ble.n	801460c <__gethex+0x35a>
 8014536:	1b04      	subs	r4, r0, r4
 8014538:	42a6      	cmp	r6, r4
 801453a:	dc2e      	bgt.n	801459a <__gethex+0x2e8>
 801453c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014540:	2b02      	cmp	r3, #2
 8014542:	d022      	beq.n	801458a <__gethex+0x2d8>
 8014544:	2b03      	cmp	r3, #3
 8014546:	d024      	beq.n	8014592 <__gethex+0x2e0>
 8014548:	2b01      	cmp	r3, #1
 801454a:	d115      	bne.n	8014578 <__gethex+0x2c6>
 801454c:	42a6      	cmp	r6, r4
 801454e:	d113      	bne.n	8014578 <__gethex+0x2c6>
 8014550:	2e01      	cmp	r6, #1
 8014552:	dc0b      	bgt.n	801456c <__gethex+0x2ba>
 8014554:	9a06      	ldr	r2, [sp, #24]
 8014556:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801455a:	6013      	str	r3, [r2, #0]
 801455c:	2301      	movs	r3, #1
 801455e:	612b      	str	r3, [r5, #16]
 8014560:	f8c9 3000 	str.w	r3, [r9]
 8014564:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014566:	2762      	movs	r7, #98	; 0x62
 8014568:	601d      	str	r5, [r3, #0]
 801456a:	e72a      	b.n	80143c2 <__gethex+0x110>
 801456c:	1e71      	subs	r1, r6, #1
 801456e:	4628      	mov	r0, r5
 8014570:	f000 fde1 	bl	8015136 <__any_on>
 8014574:	2800      	cmp	r0, #0
 8014576:	d1ed      	bne.n	8014554 <__gethex+0x2a2>
 8014578:	4629      	mov	r1, r5
 801457a:	9802      	ldr	r0, [sp, #8]
 801457c:	f000 fa30 	bl	80149e0 <_Bfree>
 8014580:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014582:	2300      	movs	r3, #0
 8014584:	6013      	str	r3, [r2, #0]
 8014586:	2750      	movs	r7, #80	; 0x50
 8014588:	e71b      	b.n	80143c2 <__gethex+0x110>
 801458a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801458c:	2b00      	cmp	r3, #0
 801458e:	d0e1      	beq.n	8014554 <__gethex+0x2a2>
 8014590:	e7f2      	b.n	8014578 <__gethex+0x2c6>
 8014592:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014594:	2b00      	cmp	r3, #0
 8014596:	d1dd      	bne.n	8014554 <__gethex+0x2a2>
 8014598:	e7ee      	b.n	8014578 <__gethex+0x2c6>
 801459a:	1e67      	subs	r7, r4, #1
 801459c:	f1ba 0f00 	cmp.w	sl, #0
 80145a0:	d131      	bne.n	8014606 <__gethex+0x354>
 80145a2:	b127      	cbz	r7, 80145ae <__gethex+0x2fc>
 80145a4:	4639      	mov	r1, r7
 80145a6:	4628      	mov	r0, r5
 80145a8:	f000 fdc5 	bl	8015136 <__any_on>
 80145ac:	4682      	mov	sl, r0
 80145ae:	117a      	asrs	r2, r7, #5
 80145b0:	2301      	movs	r3, #1
 80145b2:	f007 071f 	and.w	r7, r7, #31
 80145b6:	fa03 f707 	lsl.w	r7, r3, r7
 80145ba:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80145be:	4621      	mov	r1, r4
 80145c0:	421f      	tst	r7, r3
 80145c2:	4628      	mov	r0, r5
 80145c4:	bf18      	it	ne
 80145c6:	f04a 0a02 	orrne.w	sl, sl, #2
 80145ca:	1b36      	subs	r6, r6, r4
 80145cc:	f7ff fe22 	bl	8014214 <rshift>
 80145d0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80145d4:	2702      	movs	r7, #2
 80145d6:	f1ba 0f00 	cmp.w	sl, #0
 80145da:	d048      	beq.n	801466e <__gethex+0x3bc>
 80145dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80145e0:	2b02      	cmp	r3, #2
 80145e2:	d015      	beq.n	8014610 <__gethex+0x35e>
 80145e4:	2b03      	cmp	r3, #3
 80145e6:	d017      	beq.n	8014618 <__gethex+0x366>
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	d109      	bne.n	8014600 <__gethex+0x34e>
 80145ec:	f01a 0f02 	tst.w	sl, #2
 80145f0:	d006      	beq.n	8014600 <__gethex+0x34e>
 80145f2:	f8d9 3000 	ldr.w	r3, [r9]
 80145f6:	ea4a 0a03 	orr.w	sl, sl, r3
 80145fa:	f01a 0f01 	tst.w	sl, #1
 80145fe:	d10e      	bne.n	801461e <__gethex+0x36c>
 8014600:	f047 0710 	orr.w	r7, r7, #16
 8014604:	e033      	b.n	801466e <__gethex+0x3bc>
 8014606:	f04f 0a01 	mov.w	sl, #1
 801460a:	e7d0      	b.n	80145ae <__gethex+0x2fc>
 801460c:	2701      	movs	r7, #1
 801460e:	e7e2      	b.n	80145d6 <__gethex+0x324>
 8014610:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014612:	f1c3 0301 	rsb	r3, r3, #1
 8014616:	9315      	str	r3, [sp, #84]	; 0x54
 8014618:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801461a:	2b00      	cmp	r3, #0
 801461c:	d0f0      	beq.n	8014600 <__gethex+0x34e>
 801461e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8014622:	f105 0314 	add.w	r3, r5, #20
 8014626:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801462a:	eb03 010a 	add.w	r1, r3, sl
 801462e:	f04f 0c00 	mov.w	ip, #0
 8014632:	4618      	mov	r0, r3
 8014634:	f853 2b04 	ldr.w	r2, [r3], #4
 8014638:	f1b2 3fff 	cmp.w	r2, #4294967295
 801463c:	d01c      	beq.n	8014678 <__gethex+0x3c6>
 801463e:	3201      	adds	r2, #1
 8014640:	6002      	str	r2, [r0, #0]
 8014642:	2f02      	cmp	r7, #2
 8014644:	f105 0314 	add.w	r3, r5, #20
 8014648:	d138      	bne.n	80146bc <__gethex+0x40a>
 801464a:	f8d8 2000 	ldr.w	r2, [r8]
 801464e:	3a01      	subs	r2, #1
 8014650:	42b2      	cmp	r2, r6
 8014652:	d10a      	bne.n	801466a <__gethex+0x3b8>
 8014654:	1171      	asrs	r1, r6, #5
 8014656:	2201      	movs	r2, #1
 8014658:	f006 061f 	and.w	r6, r6, #31
 801465c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014660:	fa02 f606 	lsl.w	r6, r2, r6
 8014664:	421e      	tst	r6, r3
 8014666:	bf18      	it	ne
 8014668:	4617      	movne	r7, r2
 801466a:	f047 0720 	orr.w	r7, r7, #32
 801466e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014670:	601d      	str	r5, [r3, #0]
 8014672:	9b06      	ldr	r3, [sp, #24]
 8014674:	601c      	str	r4, [r3, #0]
 8014676:	e6a4      	b.n	80143c2 <__gethex+0x110>
 8014678:	4299      	cmp	r1, r3
 801467a:	f843 cc04 	str.w	ip, [r3, #-4]
 801467e:	d8d8      	bhi.n	8014632 <__gethex+0x380>
 8014680:	68ab      	ldr	r3, [r5, #8]
 8014682:	4599      	cmp	r9, r3
 8014684:	db12      	blt.n	80146ac <__gethex+0x3fa>
 8014686:	6869      	ldr	r1, [r5, #4]
 8014688:	9802      	ldr	r0, [sp, #8]
 801468a:	3101      	adds	r1, #1
 801468c:	f000 f974 	bl	8014978 <_Balloc>
 8014690:	692a      	ldr	r2, [r5, #16]
 8014692:	3202      	adds	r2, #2
 8014694:	f105 010c 	add.w	r1, r5, #12
 8014698:	4683      	mov	fp, r0
 801469a:	0092      	lsls	r2, r2, #2
 801469c:	300c      	adds	r0, #12
 801469e:	f7fc ff49 	bl	8011534 <memcpy>
 80146a2:	4629      	mov	r1, r5
 80146a4:	9802      	ldr	r0, [sp, #8]
 80146a6:	f000 f99b 	bl	80149e0 <_Bfree>
 80146aa:	465d      	mov	r5, fp
 80146ac:	692b      	ldr	r3, [r5, #16]
 80146ae:	1c5a      	adds	r2, r3, #1
 80146b0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80146b4:	612a      	str	r2, [r5, #16]
 80146b6:	2201      	movs	r2, #1
 80146b8:	615a      	str	r2, [r3, #20]
 80146ba:	e7c2      	b.n	8014642 <__gethex+0x390>
 80146bc:	692a      	ldr	r2, [r5, #16]
 80146be:	454a      	cmp	r2, r9
 80146c0:	dd0b      	ble.n	80146da <__gethex+0x428>
 80146c2:	2101      	movs	r1, #1
 80146c4:	4628      	mov	r0, r5
 80146c6:	f7ff fda5 	bl	8014214 <rshift>
 80146ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80146ce:	3401      	adds	r4, #1
 80146d0:	42a3      	cmp	r3, r4
 80146d2:	f6ff aed9 	blt.w	8014488 <__gethex+0x1d6>
 80146d6:	2701      	movs	r7, #1
 80146d8:	e7c7      	b.n	801466a <__gethex+0x3b8>
 80146da:	f016 061f 	ands.w	r6, r6, #31
 80146de:	d0fa      	beq.n	80146d6 <__gethex+0x424>
 80146e0:	449a      	add	sl, r3
 80146e2:	f1c6 0620 	rsb	r6, r6, #32
 80146e6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80146ea:	f000 fa09 	bl	8014b00 <__hi0bits>
 80146ee:	42b0      	cmp	r0, r6
 80146f0:	dbe7      	blt.n	80146c2 <__gethex+0x410>
 80146f2:	e7f0      	b.n	80146d6 <__gethex+0x424>

080146f4 <L_shift>:
 80146f4:	f1c2 0208 	rsb	r2, r2, #8
 80146f8:	0092      	lsls	r2, r2, #2
 80146fa:	b570      	push	{r4, r5, r6, lr}
 80146fc:	f1c2 0620 	rsb	r6, r2, #32
 8014700:	6843      	ldr	r3, [r0, #4]
 8014702:	6804      	ldr	r4, [r0, #0]
 8014704:	fa03 f506 	lsl.w	r5, r3, r6
 8014708:	432c      	orrs	r4, r5
 801470a:	40d3      	lsrs	r3, r2
 801470c:	6004      	str	r4, [r0, #0]
 801470e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014712:	4288      	cmp	r0, r1
 8014714:	d3f4      	bcc.n	8014700 <L_shift+0xc>
 8014716:	bd70      	pop	{r4, r5, r6, pc}

08014718 <__match>:
 8014718:	b530      	push	{r4, r5, lr}
 801471a:	6803      	ldr	r3, [r0, #0]
 801471c:	3301      	adds	r3, #1
 801471e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014722:	b914      	cbnz	r4, 801472a <__match+0x12>
 8014724:	6003      	str	r3, [r0, #0]
 8014726:	2001      	movs	r0, #1
 8014728:	bd30      	pop	{r4, r5, pc}
 801472a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801472e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8014732:	2d19      	cmp	r5, #25
 8014734:	bf98      	it	ls
 8014736:	3220      	addls	r2, #32
 8014738:	42a2      	cmp	r2, r4
 801473a:	d0f0      	beq.n	801471e <__match+0x6>
 801473c:	2000      	movs	r0, #0
 801473e:	e7f3      	b.n	8014728 <__match+0x10>

08014740 <__hexnan>:
 8014740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014744:	680b      	ldr	r3, [r1, #0]
 8014746:	6801      	ldr	r1, [r0, #0]
 8014748:	115f      	asrs	r7, r3, #5
 801474a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801474e:	f013 031f 	ands.w	r3, r3, #31
 8014752:	b087      	sub	sp, #28
 8014754:	bf18      	it	ne
 8014756:	3704      	addne	r7, #4
 8014758:	2500      	movs	r5, #0
 801475a:	1f3e      	subs	r6, r7, #4
 801475c:	4682      	mov	sl, r0
 801475e:	4690      	mov	r8, r2
 8014760:	9301      	str	r3, [sp, #4]
 8014762:	f847 5c04 	str.w	r5, [r7, #-4]
 8014766:	46b1      	mov	r9, r6
 8014768:	4634      	mov	r4, r6
 801476a:	9502      	str	r5, [sp, #8]
 801476c:	46ab      	mov	fp, r5
 801476e:	784a      	ldrb	r2, [r1, #1]
 8014770:	1c4b      	adds	r3, r1, #1
 8014772:	9303      	str	r3, [sp, #12]
 8014774:	b342      	cbz	r2, 80147c8 <__hexnan+0x88>
 8014776:	4610      	mov	r0, r2
 8014778:	9105      	str	r1, [sp, #20]
 801477a:	9204      	str	r2, [sp, #16]
 801477c:	f7ff fd84 	bl	8014288 <__hexdig_fun>
 8014780:	2800      	cmp	r0, #0
 8014782:	d143      	bne.n	801480c <__hexnan+0xcc>
 8014784:	9a04      	ldr	r2, [sp, #16]
 8014786:	9905      	ldr	r1, [sp, #20]
 8014788:	2a20      	cmp	r2, #32
 801478a:	d818      	bhi.n	80147be <__hexnan+0x7e>
 801478c:	9b02      	ldr	r3, [sp, #8]
 801478e:	459b      	cmp	fp, r3
 8014790:	dd13      	ble.n	80147ba <__hexnan+0x7a>
 8014792:	454c      	cmp	r4, r9
 8014794:	d206      	bcs.n	80147a4 <__hexnan+0x64>
 8014796:	2d07      	cmp	r5, #7
 8014798:	dc04      	bgt.n	80147a4 <__hexnan+0x64>
 801479a:	462a      	mov	r2, r5
 801479c:	4649      	mov	r1, r9
 801479e:	4620      	mov	r0, r4
 80147a0:	f7ff ffa8 	bl	80146f4 <L_shift>
 80147a4:	4544      	cmp	r4, r8
 80147a6:	d944      	bls.n	8014832 <__hexnan+0xf2>
 80147a8:	2300      	movs	r3, #0
 80147aa:	f1a4 0904 	sub.w	r9, r4, #4
 80147ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80147b2:	f8cd b008 	str.w	fp, [sp, #8]
 80147b6:	464c      	mov	r4, r9
 80147b8:	461d      	mov	r5, r3
 80147ba:	9903      	ldr	r1, [sp, #12]
 80147bc:	e7d7      	b.n	801476e <__hexnan+0x2e>
 80147be:	2a29      	cmp	r2, #41	; 0x29
 80147c0:	d14a      	bne.n	8014858 <__hexnan+0x118>
 80147c2:	3102      	adds	r1, #2
 80147c4:	f8ca 1000 	str.w	r1, [sl]
 80147c8:	f1bb 0f00 	cmp.w	fp, #0
 80147cc:	d044      	beq.n	8014858 <__hexnan+0x118>
 80147ce:	454c      	cmp	r4, r9
 80147d0:	d206      	bcs.n	80147e0 <__hexnan+0xa0>
 80147d2:	2d07      	cmp	r5, #7
 80147d4:	dc04      	bgt.n	80147e0 <__hexnan+0xa0>
 80147d6:	462a      	mov	r2, r5
 80147d8:	4649      	mov	r1, r9
 80147da:	4620      	mov	r0, r4
 80147dc:	f7ff ff8a 	bl	80146f4 <L_shift>
 80147e0:	4544      	cmp	r4, r8
 80147e2:	d928      	bls.n	8014836 <__hexnan+0xf6>
 80147e4:	4643      	mov	r3, r8
 80147e6:	f854 2b04 	ldr.w	r2, [r4], #4
 80147ea:	f843 2b04 	str.w	r2, [r3], #4
 80147ee:	42a6      	cmp	r6, r4
 80147f0:	d2f9      	bcs.n	80147e6 <__hexnan+0xa6>
 80147f2:	2200      	movs	r2, #0
 80147f4:	f843 2b04 	str.w	r2, [r3], #4
 80147f8:	429e      	cmp	r6, r3
 80147fa:	d2fb      	bcs.n	80147f4 <__hexnan+0xb4>
 80147fc:	6833      	ldr	r3, [r6, #0]
 80147fe:	b91b      	cbnz	r3, 8014808 <__hexnan+0xc8>
 8014800:	4546      	cmp	r6, r8
 8014802:	d127      	bne.n	8014854 <__hexnan+0x114>
 8014804:	2301      	movs	r3, #1
 8014806:	6033      	str	r3, [r6, #0]
 8014808:	2005      	movs	r0, #5
 801480a:	e026      	b.n	801485a <__hexnan+0x11a>
 801480c:	3501      	adds	r5, #1
 801480e:	2d08      	cmp	r5, #8
 8014810:	f10b 0b01 	add.w	fp, fp, #1
 8014814:	dd06      	ble.n	8014824 <__hexnan+0xe4>
 8014816:	4544      	cmp	r4, r8
 8014818:	d9cf      	bls.n	80147ba <__hexnan+0x7a>
 801481a:	2300      	movs	r3, #0
 801481c:	f844 3c04 	str.w	r3, [r4, #-4]
 8014820:	2501      	movs	r5, #1
 8014822:	3c04      	subs	r4, #4
 8014824:	6822      	ldr	r2, [r4, #0]
 8014826:	f000 000f 	and.w	r0, r0, #15
 801482a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801482e:	6020      	str	r0, [r4, #0]
 8014830:	e7c3      	b.n	80147ba <__hexnan+0x7a>
 8014832:	2508      	movs	r5, #8
 8014834:	e7c1      	b.n	80147ba <__hexnan+0x7a>
 8014836:	9b01      	ldr	r3, [sp, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d0df      	beq.n	80147fc <__hexnan+0xbc>
 801483c:	f04f 32ff 	mov.w	r2, #4294967295
 8014840:	f1c3 0320 	rsb	r3, r3, #32
 8014844:	fa22 f303 	lsr.w	r3, r2, r3
 8014848:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801484c:	401a      	ands	r2, r3
 801484e:	f847 2c04 	str.w	r2, [r7, #-4]
 8014852:	e7d3      	b.n	80147fc <__hexnan+0xbc>
 8014854:	3e04      	subs	r6, #4
 8014856:	e7d1      	b.n	80147fc <__hexnan+0xbc>
 8014858:	2004      	movs	r0, #4
 801485a:	b007      	add	sp, #28
 801485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014860 <__locale_ctype_ptr_l>:
 8014860:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8014864:	4770      	bx	lr

08014866 <__localeconv_l>:
 8014866:	30f0      	adds	r0, #240	; 0xf0
 8014868:	4770      	bx	lr
	...

0801486c <_localeconv_r>:
 801486c:	4b04      	ldr	r3, [pc, #16]	; (8014880 <_localeconv_r+0x14>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	6a18      	ldr	r0, [r3, #32]
 8014872:	4b04      	ldr	r3, [pc, #16]	; (8014884 <_localeconv_r+0x18>)
 8014874:	2800      	cmp	r0, #0
 8014876:	bf08      	it	eq
 8014878:	4618      	moveq	r0, r3
 801487a:	30f0      	adds	r0, #240	; 0xf0
 801487c:	4770      	bx	lr
 801487e:	bf00      	nop
 8014880:	2000019c 	.word	0x2000019c
 8014884:	20000200 	.word	0x20000200

08014888 <__swhatbuf_r>:
 8014888:	b570      	push	{r4, r5, r6, lr}
 801488a:	460e      	mov	r6, r1
 801488c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014890:	2900      	cmp	r1, #0
 8014892:	b096      	sub	sp, #88	; 0x58
 8014894:	4614      	mov	r4, r2
 8014896:	461d      	mov	r5, r3
 8014898:	da07      	bge.n	80148aa <__swhatbuf_r+0x22>
 801489a:	2300      	movs	r3, #0
 801489c:	602b      	str	r3, [r5, #0]
 801489e:	89b3      	ldrh	r3, [r6, #12]
 80148a0:	061a      	lsls	r2, r3, #24
 80148a2:	d410      	bmi.n	80148c6 <__swhatbuf_r+0x3e>
 80148a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148a8:	e00e      	b.n	80148c8 <__swhatbuf_r+0x40>
 80148aa:	466a      	mov	r2, sp
 80148ac:	f000 ffa0 	bl	80157f0 <_fstat_r>
 80148b0:	2800      	cmp	r0, #0
 80148b2:	dbf2      	blt.n	801489a <__swhatbuf_r+0x12>
 80148b4:	9a01      	ldr	r2, [sp, #4]
 80148b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80148ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80148be:	425a      	negs	r2, r3
 80148c0:	415a      	adcs	r2, r3
 80148c2:	602a      	str	r2, [r5, #0]
 80148c4:	e7ee      	b.n	80148a4 <__swhatbuf_r+0x1c>
 80148c6:	2340      	movs	r3, #64	; 0x40
 80148c8:	2000      	movs	r0, #0
 80148ca:	6023      	str	r3, [r4, #0]
 80148cc:	b016      	add	sp, #88	; 0x58
 80148ce:	bd70      	pop	{r4, r5, r6, pc}

080148d0 <__smakebuf_r>:
 80148d0:	898b      	ldrh	r3, [r1, #12]
 80148d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80148d4:	079d      	lsls	r5, r3, #30
 80148d6:	4606      	mov	r6, r0
 80148d8:	460c      	mov	r4, r1
 80148da:	d507      	bpl.n	80148ec <__smakebuf_r+0x1c>
 80148dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80148e0:	6023      	str	r3, [r4, #0]
 80148e2:	6123      	str	r3, [r4, #16]
 80148e4:	2301      	movs	r3, #1
 80148e6:	6163      	str	r3, [r4, #20]
 80148e8:	b002      	add	sp, #8
 80148ea:	bd70      	pop	{r4, r5, r6, pc}
 80148ec:	ab01      	add	r3, sp, #4
 80148ee:	466a      	mov	r2, sp
 80148f0:	f7ff ffca 	bl	8014888 <__swhatbuf_r>
 80148f4:	9900      	ldr	r1, [sp, #0]
 80148f6:	4605      	mov	r5, r0
 80148f8:	4630      	mov	r0, r6
 80148fa:	f7fc fe8b 	bl	8011614 <_malloc_r>
 80148fe:	b948      	cbnz	r0, 8014914 <__smakebuf_r+0x44>
 8014900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014904:	059a      	lsls	r2, r3, #22
 8014906:	d4ef      	bmi.n	80148e8 <__smakebuf_r+0x18>
 8014908:	f023 0303 	bic.w	r3, r3, #3
 801490c:	f043 0302 	orr.w	r3, r3, #2
 8014910:	81a3      	strh	r3, [r4, #12]
 8014912:	e7e3      	b.n	80148dc <__smakebuf_r+0xc>
 8014914:	4b0d      	ldr	r3, [pc, #52]	; (801494c <__smakebuf_r+0x7c>)
 8014916:	62b3      	str	r3, [r6, #40]	; 0x28
 8014918:	89a3      	ldrh	r3, [r4, #12]
 801491a:	6020      	str	r0, [r4, #0]
 801491c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014920:	81a3      	strh	r3, [r4, #12]
 8014922:	9b00      	ldr	r3, [sp, #0]
 8014924:	6163      	str	r3, [r4, #20]
 8014926:	9b01      	ldr	r3, [sp, #4]
 8014928:	6120      	str	r0, [r4, #16]
 801492a:	b15b      	cbz	r3, 8014944 <__smakebuf_r+0x74>
 801492c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014930:	4630      	mov	r0, r6
 8014932:	f000 ff6f 	bl	8015814 <_isatty_r>
 8014936:	b128      	cbz	r0, 8014944 <__smakebuf_r+0x74>
 8014938:	89a3      	ldrh	r3, [r4, #12]
 801493a:	f023 0303 	bic.w	r3, r3, #3
 801493e:	f043 0301 	orr.w	r3, r3, #1
 8014942:	81a3      	strh	r3, [r4, #12]
 8014944:	89a3      	ldrh	r3, [r4, #12]
 8014946:	431d      	orrs	r5, r3
 8014948:	81a5      	strh	r5, [r4, #12]
 801494a:	e7cd      	b.n	80148e8 <__smakebuf_r+0x18>
 801494c:	080140c9 	.word	0x080140c9

08014950 <__ascii_mbtowc>:
 8014950:	b082      	sub	sp, #8
 8014952:	b901      	cbnz	r1, 8014956 <__ascii_mbtowc+0x6>
 8014954:	a901      	add	r1, sp, #4
 8014956:	b142      	cbz	r2, 801496a <__ascii_mbtowc+0x1a>
 8014958:	b14b      	cbz	r3, 801496e <__ascii_mbtowc+0x1e>
 801495a:	7813      	ldrb	r3, [r2, #0]
 801495c:	600b      	str	r3, [r1, #0]
 801495e:	7812      	ldrb	r2, [r2, #0]
 8014960:	1c10      	adds	r0, r2, #0
 8014962:	bf18      	it	ne
 8014964:	2001      	movne	r0, #1
 8014966:	b002      	add	sp, #8
 8014968:	4770      	bx	lr
 801496a:	4610      	mov	r0, r2
 801496c:	e7fb      	b.n	8014966 <__ascii_mbtowc+0x16>
 801496e:	f06f 0001 	mvn.w	r0, #1
 8014972:	e7f8      	b.n	8014966 <__ascii_mbtowc+0x16>

08014974 <__malloc_lock>:
 8014974:	4770      	bx	lr

08014976 <__malloc_unlock>:
 8014976:	4770      	bx	lr

08014978 <_Balloc>:
 8014978:	b570      	push	{r4, r5, r6, lr}
 801497a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801497c:	4604      	mov	r4, r0
 801497e:	460e      	mov	r6, r1
 8014980:	b93d      	cbnz	r5, 8014992 <_Balloc+0x1a>
 8014982:	2010      	movs	r0, #16
 8014984:	f7fc fdce 	bl	8011524 <malloc>
 8014988:	6260      	str	r0, [r4, #36]	; 0x24
 801498a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801498e:	6005      	str	r5, [r0, #0]
 8014990:	60c5      	str	r5, [r0, #12]
 8014992:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014994:	68eb      	ldr	r3, [r5, #12]
 8014996:	b183      	cbz	r3, 80149ba <_Balloc+0x42>
 8014998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80149a0:	b9b8      	cbnz	r0, 80149d2 <_Balloc+0x5a>
 80149a2:	2101      	movs	r1, #1
 80149a4:	fa01 f506 	lsl.w	r5, r1, r6
 80149a8:	1d6a      	adds	r2, r5, #5
 80149aa:	0092      	lsls	r2, r2, #2
 80149ac:	4620      	mov	r0, r4
 80149ae:	f7fc fdd4 	bl	801155a <_calloc_r>
 80149b2:	b160      	cbz	r0, 80149ce <_Balloc+0x56>
 80149b4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80149b8:	e00e      	b.n	80149d8 <_Balloc+0x60>
 80149ba:	2221      	movs	r2, #33	; 0x21
 80149bc:	2104      	movs	r1, #4
 80149be:	4620      	mov	r0, r4
 80149c0:	f7fc fdcb 	bl	801155a <_calloc_r>
 80149c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149c6:	60e8      	str	r0, [r5, #12]
 80149c8:	68db      	ldr	r3, [r3, #12]
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d1e4      	bne.n	8014998 <_Balloc+0x20>
 80149ce:	2000      	movs	r0, #0
 80149d0:	bd70      	pop	{r4, r5, r6, pc}
 80149d2:	6802      	ldr	r2, [r0, #0]
 80149d4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80149d8:	2300      	movs	r3, #0
 80149da:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80149de:	e7f7      	b.n	80149d0 <_Balloc+0x58>

080149e0 <_Bfree>:
 80149e0:	b570      	push	{r4, r5, r6, lr}
 80149e2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80149e4:	4606      	mov	r6, r0
 80149e6:	460d      	mov	r5, r1
 80149e8:	b93c      	cbnz	r4, 80149fa <_Bfree+0x1a>
 80149ea:	2010      	movs	r0, #16
 80149ec:	f7fc fd9a 	bl	8011524 <malloc>
 80149f0:	6270      	str	r0, [r6, #36]	; 0x24
 80149f2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80149f6:	6004      	str	r4, [r0, #0]
 80149f8:	60c4      	str	r4, [r0, #12]
 80149fa:	b13d      	cbz	r5, 8014a0c <_Bfree+0x2c>
 80149fc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80149fe:	686a      	ldr	r2, [r5, #4]
 8014a00:	68db      	ldr	r3, [r3, #12]
 8014a02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014a06:	6029      	str	r1, [r5, #0]
 8014a08:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014a0c:	bd70      	pop	{r4, r5, r6, pc}

08014a0e <__multadd>:
 8014a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a12:	690d      	ldr	r5, [r1, #16]
 8014a14:	461f      	mov	r7, r3
 8014a16:	4606      	mov	r6, r0
 8014a18:	460c      	mov	r4, r1
 8014a1a:	f101 0c14 	add.w	ip, r1, #20
 8014a1e:	2300      	movs	r3, #0
 8014a20:	f8dc 0000 	ldr.w	r0, [ip]
 8014a24:	b281      	uxth	r1, r0
 8014a26:	fb02 7101 	mla	r1, r2, r1, r7
 8014a2a:	0c0f      	lsrs	r7, r1, #16
 8014a2c:	0c00      	lsrs	r0, r0, #16
 8014a2e:	fb02 7000 	mla	r0, r2, r0, r7
 8014a32:	b289      	uxth	r1, r1
 8014a34:	3301      	adds	r3, #1
 8014a36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014a3a:	429d      	cmp	r5, r3
 8014a3c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014a40:	f84c 1b04 	str.w	r1, [ip], #4
 8014a44:	dcec      	bgt.n	8014a20 <__multadd+0x12>
 8014a46:	b1d7      	cbz	r7, 8014a7e <__multadd+0x70>
 8014a48:	68a3      	ldr	r3, [r4, #8]
 8014a4a:	42ab      	cmp	r3, r5
 8014a4c:	dc12      	bgt.n	8014a74 <__multadd+0x66>
 8014a4e:	6861      	ldr	r1, [r4, #4]
 8014a50:	4630      	mov	r0, r6
 8014a52:	3101      	adds	r1, #1
 8014a54:	f7ff ff90 	bl	8014978 <_Balloc>
 8014a58:	6922      	ldr	r2, [r4, #16]
 8014a5a:	3202      	adds	r2, #2
 8014a5c:	f104 010c 	add.w	r1, r4, #12
 8014a60:	4680      	mov	r8, r0
 8014a62:	0092      	lsls	r2, r2, #2
 8014a64:	300c      	adds	r0, #12
 8014a66:	f7fc fd65 	bl	8011534 <memcpy>
 8014a6a:	4621      	mov	r1, r4
 8014a6c:	4630      	mov	r0, r6
 8014a6e:	f7ff ffb7 	bl	80149e0 <_Bfree>
 8014a72:	4644      	mov	r4, r8
 8014a74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014a78:	3501      	adds	r5, #1
 8014a7a:	615f      	str	r7, [r3, #20]
 8014a7c:	6125      	str	r5, [r4, #16]
 8014a7e:	4620      	mov	r0, r4
 8014a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014a84 <__s2b>:
 8014a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a88:	460c      	mov	r4, r1
 8014a8a:	4615      	mov	r5, r2
 8014a8c:	461f      	mov	r7, r3
 8014a8e:	2209      	movs	r2, #9
 8014a90:	3308      	adds	r3, #8
 8014a92:	4606      	mov	r6, r0
 8014a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8014a98:	2100      	movs	r1, #0
 8014a9a:	2201      	movs	r2, #1
 8014a9c:	429a      	cmp	r2, r3
 8014a9e:	db20      	blt.n	8014ae2 <__s2b+0x5e>
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	f7ff ff69 	bl	8014978 <_Balloc>
 8014aa6:	9b08      	ldr	r3, [sp, #32]
 8014aa8:	6143      	str	r3, [r0, #20]
 8014aaa:	2d09      	cmp	r5, #9
 8014aac:	f04f 0301 	mov.w	r3, #1
 8014ab0:	6103      	str	r3, [r0, #16]
 8014ab2:	dd19      	ble.n	8014ae8 <__s2b+0x64>
 8014ab4:	f104 0809 	add.w	r8, r4, #9
 8014ab8:	46c1      	mov	r9, r8
 8014aba:	442c      	add	r4, r5
 8014abc:	f819 3b01 	ldrb.w	r3, [r9], #1
 8014ac0:	4601      	mov	r1, r0
 8014ac2:	3b30      	subs	r3, #48	; 0x30
 8014ac4:	220a      	movs	r2, #10
 8014ac6:	4630      	mov	r0, r6
 8014ac8:	f7ff ffa1 	bl	8014a0e <__multadd>
 8014acc:	45a1      	cmp	r9, r4
 8014ace:	d1f5      	bne.n	8014abc <__s2b+0x38>
 8014ad0:	eb08 0405 	add.w	r4, r8, r5
 8014ad4:	3c08      	subs	r4, #8
 8014ad6:	1b2d      	subs	r5, r5, r4
 8014ad8:	1963      	adds	r3, r4, r5
 8014ada:	42bb      	cmp	r3, r7
 8014adc:	db07      	blt.n	8014aee <__s2b+0x6a>
 8014ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ae2:	0052      	lsls	r2, r2, #1
 8014ae4:	3101      	adds	r1, #1
 8014ae6:	e7d9      	b.n	8014a9c <__s2b+0x18>
 8014ae8:	340a      	adds	r4, #10
 8014aea:	2509      	movs	r5, #9
 8014aec:	e7f3      	b.n	8014ad6 <__s2b+0x52>
 8014aee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014af2:	4601      	mov	r1, r0
 8014af4:	3b30      	subs	r3, #48	; 0x30
 8014af6:	220a      	movs	r2, #10
 8014af8:	4630      	mov	r0, r6
 8014afa:	f7ff ff88 	bl	8014a0e <__multadd>
 8014afe:	e7eb      	b.n	8014ad8 <__s2b+0x54>

08014b00 <__hi0bits>:
 8014b00:	0c02      	lsrs	r2, r0, #16
 8014b02:	0412      	lsls	r2, r2, #16
 8014b04:	4603      	mov	r3, r0
 8014b06:	b9b2      	cbnz	r2, 8014b36 <__hi0bits+0x36>
 8014b08:	0403      	lsls	r3, r0, #16
 8014b0a:	2010      	movs	r0, #16
 8014b0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8014b10:	bf04      	itt	eq
 8014b12:	021b      	lsleq	r3, r3, #8
 8014b14:	3008      	addeq	r0, #8
 8014b16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014b1a:	bf04      	itt	eq
 8014b1c:	011b      	lsleq	r3, r3, #4
 8014b1e:	3004      	addeq	r0, #4
 8014b20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014b24:	bf04      	itt	eq
 8014b26:	009b      	lsleq	r3, r3, #2
 8014b28:	3002      	addeq	r0, #2
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	db06      	blt.n	8014b3c <__hi0bits+0x3c>
 8014b2e:	005b      	lsls	r3, r3, #1
 8014b30:	d503      	bpl.n	8014b3a <__hi0bits+0x3a>
 8014b32:	3001      	adds	r0, #1
 8014b34:	4770      	bx	lr
 8014b36:	2000      	movs	r0, #0
 8014b38:	e7e8      	b.n	8014b0c <__hi0bits+0xc>
 8014b3a:	2020      	movs	r0, #32
 8014b3c:	4770      	bx	lr

08014b3e <__lo0bits>:
 8014b3e:	6803      	ldr	r3, [r0, #0]
 8014b40:	f013 0207 	ands.w	r2, r3, #7
 8014b44:	4601      	mov	r1, r0
 8014b46:	d00b      	beq.n	8014b60 <__lo0bits+0x22>
 8014b48:	07da      	lsls	r2, r3, #31
 8014b4a:	d423      	bmi.n	8014b94 <__lo0bits+0x56>
 8014b4c:	0798      	lsls	r0, r3, #30
 8014b4e:	bf49      	itett	mi
 8014b50:	085b      	lsrmi	r3, r3, #1
 8014b52:	089b      	lsrpl	r3, r3, #2
 8014b54:	2001      	movmi	r0, #1
 8014b56:	600b      	strmi	r3, [r1, #0]
 8014b58:	bf5c      	itt	pl
 8014b5a:	600b      	strpl	r3, [r1, #0]
 8014b5c:	2002      	movpl	r0, #2
 8014b5e:	4770      	bx	lr
 8014b60:	b298      	uxth	r0, r3
 8014b62:	b9a8      	cbnz	r0, 8014b90 <__lo0bits+0x52>
 8014b64:	0c1b      	lsrs	r3, r3, #16
 8014b66:	2010      	movs	r0, #16
 8014b68:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014b6c:	bf04      	itt	eq
 8014b6e:	0a1b      	lsreq	r3, r3, #8
 8014b70:	3008      	addeq	r0, #8
 8014b72:	071a      	lsls	r2, r3, #28
 8014b74:	bf04      	itt	eq
 8014b76:	091b      	lsreq	r3, r3, #4
 8014b78:	3004      	addeq	r0, #4
 8014b7a:	079a      	lsls	r2, r3, #30
 8014b7c:	bf04      	itt	eq
 8014b7e:	089b      	lsreq	r3, r3, #2
 8014b80:	3002      	addeq	r0, #2
 8014b82:	07da      	lsls	r2, r3, #31
 8014b84:	d402      	bmi.n	8014b8c <__lo0bits+0x4e>
 8014b86:	085b      	lsrs	r3, r3, #1
 8014b88:	d006      	beq.n	8014b98 <__lo0bits+0x5a>
 8014b8a:	3001      	adds	r0, #1
 8014b8c:	600b      	str	r3, [r1, #0]
 8014b8e:	4770      	bx	lr
 8014b90:	4610      	mov	r0, r2
 8014b92:	e7e9      	b.n	8014b68 <__lo0bits+0x2a>
 8014b94:	2000      	movs	r0, #0
 8014b96:	4770      	bx	lr
 8014b98:	2020      	movs	r0, #32
 8014b9a:	4770      	bx	lr

08014b9c <__i2b>:
 8014b9c:	b510      	push	{r4, lr}
 8014b9e:	460c      	mov	r4, r1
 8014ba0:	2101      	movs	r1, #1
 8014ba2:	f7ff fee9 	bl	8014978 <_Balloc>
 8014ba6:	2201      	movs	r2, #1
 8014ba8:	6144      	str	r4, [r0, #20]
 8014baa:	6102      	str	r2, [r0, #16]
 8014bac:	bd10      	pop	{r4, pc}

08014bae <__multiply>:
 8014bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb2:	4614      	mov	r4, r2
 8014bb4:	690a      	ldr	r2, [r1, #16]
 8014bb6:	6923      	ldr	r3, [r4, #16]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	bfb8      	it	lt
 8014bbc:	460b      	movlt	r3, r1
 8014bbe:	4688      	mov	r8, r1
 8014bc0:	bfbc      	itt	lt
 8014bc2:	46a0      	movlt	r8, r4
 8014bc4:	461c      	movlt	r4, r3
 8014bc6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014bca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014bd2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014bd6:	eb07 0609 	add.w	r6, r7, r9
 8014bda:	42b3      	cmp	r3, r6
 8014bdc:	bfb8      	it	lt
 8014bde:	3101      	addlt	r1, #1
 8014be0:	f7ff feca 	bl	8014978 <_Balloc>
 8014be4:	f100 0514 	add.w	r5, r0, #20
 8014be8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014bec:	462b      	mov	r3, r5
 8014bee:	2200      	movs	r2, #0
 8014bf0:	4573      	cmp	r3, lr
 8014bf2:	d316      	bcc.n	8014c22 <__multiply+0x74>
 8014bf4:	f104 0214 	add.w	r2, r4, #20
 8014bf8:	f108 0114 	add.w	r1, r8, #20
 8014bfc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8014c00:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014c04:	9300      	str	r3, [sp, #0]
 8014c06:	9b00      	ldr	r3, [sp, #0]
 8014c08:	9201      	str	r2, [sp, #4]
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	d80c      	bhi.n	8014c28 <__multiply+0x7a>
 8014c0e:	2e00      	cmp	r6, #0
 8014c10:	dd03      	ble.n	8014c1a <__multiply+0x6c>
 8014c12:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d05d      	beq.n	8014cd6 <__multiply+0x128>
 8014c1a:	6106      	str	r6, [r0, #16]
 8014c1c:	b003      	add	sp, #12
 8014c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c22:	f843 2b04 	str.w	r2, [r3], #4
 8014c26:	e7e3      	b.n	8014bf0 <__multiply+0x42>
 8014c28:	f8b2 b000 	ldrh.w	fp, [r2]
 8014c2c:	f1bb 0f00 	cmp.w	fp, #0
 8014c30:	d023      	beq.n	8014c7a <__multiply+0xcc>
 8014c32:	4689      	mov	r9, r1
 8014c34:	46ac      	mov	ip, r5
 8014c36:	f04f 0800 	mov.w	r8, #0
 8014c3a:	f859 4b04 	ldr.w	r4, [r9], #4
 8014c3e:	f8dc a000 	ldr.w	sl, [ip]
 8014c42:	b2a3      	uxth	r3, r4
 8014c44:	fa1f fa8a 	uxth.w	sl, sl
 8014c48:	fb0b a303 	mla	r3, fp, r3, sl
 8014c4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014c50:	f8dc 4000 	ldr.w	r4, [ip]
 8014c54:	4443      	add	r3, r8
 8014c56:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014c5a:	fb0b 840a 	mla	r4, fp, sl, r8
 8014c5e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8014c62:	46e2      	mov	sl, ip
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014c6a:	454f      	cmp	r7, r9
 8014c6c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014c70:	f84a 3b04 	str.w	r3, [sl], #4
 8014c74:	d82b      	bhi.n	8014cce <__multiply+0x120>
 8014c76:	f8cc 8004 	str.w	r8, [ip, #4]
 8014c7a:	9b01      	ldr	r3, [sp, #4]
 8014c7c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8014c80:	3204      	adds	r2, #4
 8014c82:	f1ba 0f00 	cmp.w	sl, #0
 8014c86:	d020      	beq.n	8014cca <__multiply+0x11c>
 8014c88:	682b      	ldr	r3, [r5, #0]
 8014c8a:	4689      	mov	r9, r1
 8014c8c:	46a8      	mov	r8, r5
 8014c8e:	f04f 0b00 	mov.w	fp, #0
 8014c92:	f8b9 c000 	ldrh.w	ip, [r9]
 8014c96:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014c9a:	fb0a 440c 	mla	r4, sl, ip, r4
 8014c9e:	445c      	add	r4, fp
 8014ca0:	46c4      	mov	ip, r8
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014ca8:	f84c 3b04 	str.w	r3, [ip], #4
 8014cac:	f859 3b04 	ldr.w	r3, [r9], #4
 8014cb0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014cb4:	0c1b      	lsrs	r3, r3, #16
 8014cb6:	fb0a b303 	mla	r3, sl, r3, fp
 8014cba:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8014cbe:	454f      	cmp	r7, r9
 8014cc0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014cc4:	d805      	bhi.n	8014cd2 <__multiply+0x124>
 8014cc6:	f8c8 3004 	str.w	r3, [r8, #4]
 8014cca:	3504      	adds	r5, #4
 8014ccc:	e79b      	b.n	8014c06 <__multiply+0x58>
 8014cce:	46d4      	mov	ip, sl
 8014cd0:	e7b3      	b.n	8014c3a <__multiply+0x8c>
 8014cd2:	46e0      	mov	r8, ip
 8014cd4:	e7dd      	b.n	8014c92 <__multiply+0xe4>
 8014cd6:	3e01      	subs	r6, #1
 8014cd8:	e799      	b.n	8014c0e <__multiply+0x60>
	...

08014cdc <__pow5mult>:
 8014cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ce0:	4615      	mov	r5, r2
 8014ce2:	f012 0203 	ands.w	r2, r2, #3
 8014ce6:	4606      	mov	r6, r0
 8014ce8:	460f      	mov	r7, r1
 8014cea:	d007      	beq.n	8014cfc <__pow5mult+0x20>
 8014cec:	3a01      	subs	r2, #1
 8014cee:	4c21      	ldr	r4, [pc, #132]	; (8014d74 <__pow5mult+0x98>)
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014cf6:	f7ff fe8a 	bl	8014a0e <__multadd>
 8014cfa:	4607      	mov	r7, r0
 8014cfc:	10ad      	asrs	r5, r5, #2
 8014cfe:	d035      	beq.n	8014d6c <__pow5mult+0x90>
 8014d00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014d02:	b93c      	cbnz	r4, 8014d14 <__pow5mult+0x38>
 8014d04:	2010      	movs	r0, #16
 8014d06:	f7fc fc0d 	bl	8011524 <malloc>
 8014d0a:	6270      	str	r0, [r6, #36]	; 0x24
 8014d0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014d10:	6004      	str	r4, [r0, #0]
 8014d12:	60c4      	str	r4, [r0, #12]
 8014d14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014d18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014d1c:	b94c      	cbnz	r4, 8014d32 <__pow5mult+0x56>
 8014d1e:	f240 2171 	movw	r1, #625	; 0x271
 8014d22:	4630      	mov	r0, r6
 8014d24:	f7ff ff3a 	bl	8014b9c <__i2b>
 8014d28:	2300      	movs	r3, #0
 8014d2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8014d2e:	4604      	mov	r4, r0
 8014d30:	6003      	str	r3, [r0, #0]
 8014d32:	f04f 0800 	mov.w	r8, #0
 8014d36:	07eb      	lsls	r3, r5, #31
 8014d38:	d50a      	bpl.n	8014d50 <__pow5mult+0x74>
 8014d3a:	4639      	mov	r1, r7
 8014d3c:	4622      	mov	r2, r4
 8014d3e:	4630      	mov	r0, r6
 8014d40:	f7ff ff35 	bl	8014bae <__multiply>
 8014d44:	4639      	mov	r1, r7
 8014d46:	4681      	mov	r9, r0
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f7ff fe49 	bl	80149e0 <_Bfree>
 8014d4e:	464f      	mov	r7, r9
 8014d50:	106d      	asrs	r5, r5, #1
 8014d52:	d00b      	beq.n	8014d6c <__pow5mult+0x90>
 8014d54:	6820      	ldr	r0, [r4, #0]
 8014d56:	b938      	cbnz	r0, 8014d68 <__pow5mult+0x8c>
 8014d58:	4622      	mov	r2, r4
 8014d5a:	4621      	mov	r1, r4
 8014d5c:	4630      	mov	r0, r6
 8014d5e:	f7ff ff26 	bl	8014bae <__multiply>
 8014d62:	6020      	str	r0, [r4, #0]
 8014d64:	f8c0 8000 	str.w	r8, [r0]
 8014d68:	4604      	mov	r4, r0
 8014d6a:	e7e4      	b.n	8014d36 <__pow5mult+0x5a>
 8014d6c:	4638      	mov	r0, r7
 8014d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d72:	bf00      	nop
 8014d74:	08016098 	.word	0x08016098

08014d78 <__lshift>:
 8014d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d7c:	460c      	mov	r4, r1
 8014d7e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014d82:	6923      	ldr	r3, [r4, #16]
 8014d84:	6849      	ldr	r1, [r1, #4]
 8014d86:	eb0a 0903 	add.w	r9, sl, r3
 8014d8a:	68a3      	ldr	r3, [r4, #8]
 8014d8c:	4607      	mov	r7, r0
 8014d8e:	4616      	mov	r6, r2
 8014d90:	f109 0501 	add.w	r5, r9, #1
 8014d94:	42ab      	cmp	r3, r5
 8014d96:	db32      	blt.n	8014dfe <__lshift+0x86>
 8014d98:	4638      	mov	r0, r7
 8014d9a:	f7ff fded 	bl	8014978 <_Balloc>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	4680      	mov	r8, r0
 8014da2:	f100 0114 	add.w	r1, r0, #20
 8014da6:	461a      	mov	r2, r3
 8014da8:	4553      	cmp	r3, sl
 8014daa:	db2b      	blt.n	8014e04 <__lshift+0x8c>
 8014dac:	6920      	ldr	r0, [r4, #16]
 8014dae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014db2:	f104 0314 	add.w	r3, r4, #20
 8014db6:	f016 021f 	ands.w	r2, r6, #31
 8014dba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014dbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014dc2:	d025      	beq.n	8014e10 <__lshift+0x98>
 8014dc4:	f1c2 0e20 	rsb	lr, r2, #32
 8014dc8:	2000      	movs	r0, #0
 8014dca:	681e      	ldr	r6, [r3, #0]
 8014dcc:	468a      	mov	sl, r1
 8014dce:	4096      	lsls	r6, r2
 8014dd0:	4330      	orrs	r0, r6
 8014dd2:	f84a 0b04 	str.w	r0, [sl], #4
 8014dd6:	f853 0b04 	ldr.w	r0, [r3], #4
 8014dda:	459c      	cmp	ip, r3
 8014ddc:	fa20 f00e 	lsr.w	r0, r0, lr
 8014de0:	d814      	bhi.n	8014e0c <__lshift+0x94>
 8014de2:	6048      	str	r0, [r1, #4]
 8014de4:	b108      	cbz	r0, 8014dea <__lshift+0x72>
 8014de6:	f109 0502 	add.w	r5, r9, #2
 8014dea:	3d01      	subs	r5, #1
 8014dec:	4638      	mov	r0, r7
 8014dee:	f8c8 5010 	str.w	r5, [r8, #16]
 8014df2:	4621      	mov	r1, r4
 8014df4:	f7ff fdf4 	bl	80149e0 <_Bfree>
 8014df8:	4640      	mov	r0, r8
 8014dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014dfe:	3101      	adds	r1, #1
 8014e00:	005b      	lsls	r3, r3, #1
 8014e02:	e7c7      	b.n	8014d94 <__lshift+0x1c>
 8014e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014e08:	3301      	adds	r3, #1
 8014e0a:	e7cd      	b.n	8014da8 <__lshift+0x30>
 8014e0c:	4651      	mov	r1, sl
 8014e0e:	e7dc      	b.n	8014dca <__lshift+0x52>
 8014e10:	3904      	subs	r1, #4
 8014e12:	f853 2b04 	ldr.w	r2, [r3], #4
 8014e16:	f841 2f04 	str.w	r2, [r1, #4]!
 8014e1a:	459c      	cmp	ip, r3
 8014e1c:	d8f9      	bhi.n	8014e12 <__lshift+0x9a>
 8014e1e:	e7e4      	b.n	8014dea <__lshift+0x72>

08014e20 <__mcmp>:
 8014e20:	6903      	ldr	r3, [r0, #16]
 8014e22:	690a      	ldr	r2, [r1, #16]
 8014e24:	1a9b      	subs	r3, r3, r2
 8014e26:	b530      	push	{r4, r5, lr}
 8014e28:	d10c      	bne.n	8014e44 <__mcmp+0x24>
 8014e2a:	0092      	lsls	r2, r2, #2
 8014e2c:	3014      	adds	r0, #20
 8014e2e:	3114      	adds	r1, #20
 8014e30:	1884      	adds	r4, r0, r2
 8014e32:	4411      	add	r1, r2
 8014e34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014e38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014e3c:	4295      	cmp	r5, r2
 8014e3e:	d003      	beq.n	8014e48 <__mcmp+0x28>
 8014e40:	d305      	bcc.n	8014e4e <__mcmp+0x2e>
 8014e42:	2301      	movs	r3, #1
 8014e44:	4618      	mov	r0, r3
 8014e46:	bd30      	pop	{r4, r5, pc}
 8014e48:	42a0      	cmp	r0, r4
 8014e4a:	d3f3      	bcc.n	8014e34 <__mcmp+0x14>
 8014e4c:	e7fa      	b.n	8014e44 <__mcmp+0x24>
 8014e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e52:	e7f7      	b.n	8014e44 <__mcmp+0x24>

08014e54 <__mdiff>:
 8014e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e58:	460d      	mov	r5, r1
 8014e5a:	4607      	mov	r7, r0
 8014e5c:	4611      	mov	r1, r2
 8014e5e:	4628      	mov	r0, r5
 8014e60:	4614      	mov	r4, r2
 8014e62:	f7ff ffdd 	bl	8014e20 <__mcmp>
 8014e66:	1e06      	subs	r6, r0, #0
 8014e68:	d108      	bne.n	8014e7c <__mdiff+0x28>
 8014e6a:	4631      	mov	r1, r6
 8014e6c:	4638      	mov	r0, r7
 8014e6e:	f7ff fd83 	bl	8014978 <_Balloc>
 8014e72:	2301      	movs	r3, #1
 8014e74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e7c:	bfa4      	itt	ge
 8014e7e:	4623      	movge	r3, r4
 8014e80:	462c      	movge	r4, r5
 8014e82:	4638      	mov	r0, r7
 8014e84:	6861      	ldr	r1, [r4, #4]
 8014e86:	bfa6      	itte	ge
 8014e88:	461d      	movge	r5, r3
 8014e8a:	2600      	movge	r6, #0
 8014e8c:	2601      	movlt	r6, #1
 8014e8e:	f7ff fd73 	bl	8014978 <_Balloc>
 8014e92:	692b      	ldr	r3, [r5, #16]
 8014e94:	60c6      	str	r6, [r0, #12]
 8014e96:	6926      	ldr	r6, [r4, #16]
 8014e98:	f105 0914 	add.w	r9, r5, #20
 8014e9c:	f104 0214 	add.w	r2, r4, #20
 8014ea0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014ea4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014ea8:	f100 0514 	add.w	r5, r0, #20
 8014eac:	f04f 0e00 	mov.w	lr, #0
 8014eb0:	f852 ab04 	ldr.w	sl, [r2], #4
 8014eb4:	f859 4b04 	ldr.w	r4, [r9], #4
 8014eb8:	fa1e f18a 	uxtah	r1, lr, sl
 8014ebc:	b2a3      	uxth	r3, r4
 8014ebe:	1ac9      	subs	r1, r1, r3
 8014ec0:	0c23      	lsrs	r3, r4, #16
 8014ec2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014ec6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014eca:	b289      	uxth	r1, r1
 8014ecc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8014ed0:	45c8      	cmp	r8, r9
 8014ed2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014ed6:	4694      	mov	ip, r2
 8014ed8:	f845 3b04 	str.w	r3, [r5], #4
 8014edc:	d8e8      	bhi.n	8014eb0 <__mdiff+0x5c>
 8014ede:	45bc      	cmp	ip, r7
 8014ee0:	d304      	bcc.n	8014eec <__mdiff+0x98>
 8014ee2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014ee6:	b183      	cbz	r3, 8014f0a <__mdiff+0xb6>
 8014ee8:	6106      	str	r6, [r0, #16]
 8014eea:	e7c5      	b.n	8014e78 <__mdiff+0x24>
 8014eec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014ef0:	fa1e f381 	uxtah	r3, lr, r1
 8014ef4:	141a      	asrs	r2, r3, #16
 8014ef6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f00:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014f04:	f845 3b04 	str.w	r3, [r5], #4
 8014f08:	e7e9      	b.n	8014ede <__mdiff+0x8a>
 8014f0a:	3e01      	subs	r6, #1
 8014f0c:	e7e9      	b.n	8014ee2 <__mdiff+0x8e>
	...

08014f10 <__ulp>:
 8014f10:	4b12      	ldr	r3, [pc, #72]	; (8014f5c <__ulp+0x4c>)
 8014f12:	ee10 2a90 	vmov	r2, s1
 8014f16:	401a      	ands	r2, r3
 8014f18:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	dd04      	ble.n	8014f2a <__ulp+0x1a>
 8014f20:	2000      	movs	r0, #0
 8014f22:	4619      	mov	r1, r3
 8014f24:	ec41 0b10 	vmov	d0, r0, r1
 8014f28:	4770      	bx	lr
 8014f2a:	425b      	negs	r3, r3
 8014f2c:	151b      	asrs	r3, r3, #20
 8014f2e:	2b13      	cmp	r3, #19
 8014f30:	f04f 0000 	mov.w	r0, #0
 8014f34:	f04f 0100 	mov.w	r1, #0
 8014f38:	dc04      	bgt.n	8014f44 <__ulp+0x34>
 8014f3a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014f3e:	fa42 f103 	asr.w	r1, r2, r3
 8014f42:	e7ef      	b.n	8014f24 <__ulp+0x14>
 8014f44:	3b14      	subs	r3, #20
 8014f46:	2b1e      	cmp	r3, #30
 8014f48:	f04f 0201 	mov.w	r2, #1
 8014f4c:	bfda      	itte	le
 8014f4e:	f1c3 031f 	rsble	r3, r3, #31
 8014f52:	fa02 f303 	lslle.w	r3, r2, r3
 8014f56:	4613      	movgt	r3, r2
 8014f58:	4618      	mov	r0, r3
 8014f5a:	e7e3      	b.n	8014f24 <__ulp+0x14>
 8014f5c:	7ff00000 	.word	0x7ff00000

08014f60 <__b2d>:
 8014f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f62:	6905      	ldr	r5, [r0, #16]
 8014f64:	f100 0714 	add.w	r7, r0, #20
 8014f68:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014f6c:	1f2e      	subs	r6, r5, #4
 8014f6e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014f72:	4620      	mov	r0, r4
 8014f74:	f7ff fdc4 	bl	8014b00 <__hi0bits>
 8014f78:	f1c0 0320 	rsb	r3, r0, #32
 8014f7c:	280a      	cmp	r0, #10
 8014f7e:	600b      	str	r3, [r1, #0]
 8014f80:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014ff8 <__b2d+0x98>
 8014f84:	dc14      	bgt.n	8014fb0 <__b2d+0x50>
 8014f86:	f1c0 0e0b 	rsb	lr, r0, #11
 8014f8a:	fa24 f10e 	lsr.w	r1, r4, lr
 8014f8e:	42b7      	cmp	r7, r6
 8014f90:	ea41 030c 	orr.w	r3, r1, ip
 8014f94:	bf34      	ite	cc
 8014f96:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014f9a:	2100      	movcs	r1, #0
 8014f9c:	3015      	adds	r0, #21
 8014f9e:	fa04 f000 	lsl.w	r0, r4, r0
 8014fa2:	fa21 f10e 	lsr.w	r1, r1, lr
 8014fa6:	ea40 0201 	orr.w	r2, r0, r1
 8014faa:	ec43 2b10 	vmov	d0, r2, r3
 8014fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fb0:	42b7      	cmp	r7, r6
 8014fb2:	bf3a      	itte	cc
 8014fb4:	f1a5 0608 	subcc.w	r6, r5, #8
 8014fb8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014fbc:	2100      	movcs	r1, #0
 8014fbe:	380b      	subs	r0, #11
 8014fc0:	d015      	beq.n	8014fee <__b2d+0x8e>
 8014fc2:	4084      	lsls	r4, r0
 8014fc4:	f1c0 0520 	rsb	r5, r0, #32
 8014fc8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8014fcc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8014fd0:	42be      	cmp	r6, r7
 8014fd2:	fa21 fc05 	lsr.w	ip, r1, r5
 8014fd6:	ea44 030c 	orr.w	r3, r4, ip
 8014fda:	bf8c      	ite	hi
 8014fdc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014fe0:	2400      	movls	r4, #0
 8014fe2:	fa01 f000 	lsl.w	r0, r1, r0
 8014fe6:	40ec      	lsrs	r4, r5
 8014fe8:	ea40 0204 	orr.w	r2, r0, r4
 8014fec:	e7dd      	b.n	8014faa <__b2d+0x4a>
 8014fee:	ea44 030c 	orr.w	r3, r4, ip
 8014ff2:	460a      	mov	r2, r1
 8014ff4:	e7d9      	b.n	8014faa <__b2d+0x4a>
 8014ff6:	bf00      	nop
 8014ff8:	3ff00000 	.word	0x3ff00000

08014ffc <__d2b>:
 8014ffc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015000:	460e      	mov	r6, r1
 8015002:	2101      	movs	r1, #1
 8015004:	ec59 8b10 	vmov	r8, r9, d0
 8015008:	4615      	mov	r5, r2
 801500a:	f7ff fcb5 	bl	8014978 <_Balloc>
 801500e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015012:	4607      	mov	r7, r0
 8015014:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015018:	bb34      	cbnz	r4, 8015068 <__d2b+0x6c>
 801501a:	9301      	str	r3, [sp, #4]
 801501c:	f1b8 0300 	subs.w	r3, r8, #0
 8015020:	d027      	beq.n	8015072 <__d2b+0x76>
 8015022:	a802      	add	r0, sp, #8
 8015024:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015028:	f7ff fd89 	bl	8014b3e <__lo0bits>
 801502c:	9900      	ldr	r1, [sp, #0]
 801502e:	b1f0      	cbz	r0, 801506e <__d2b+0x72>
 8015030:	9a01      	ldr	r2, [sp, #4]
 8015032:	f1c0 0320 	rsb	r3, r0, #32
 8015036:	fa02 f303 	lsl.w	r3, r2, r3
 801503a:	430b      	orrs	r3, r1
 801503c:	40c2      	lsrs	r2, r0
 801503e:	617b      	str	r3, [r7, #20]
 8015040:	9201      	str	r2, [sp, #4]
 8015042:	9b01      	ldr	r3, [sp, #4]
 8015044:	61bb      	str	r3, [r7, #24]
 8015046:	2b00      	cmp	r3, #0
 8015048:	bf14      	ite	ne
 801504a:	2102      	movne	r1, #2
 801504c:	2101      	moveq	r1, #1
 801504e:	6139      	str	r1, [r7, #16]
 8015050:	b1c4      	cbz	r4, 8015084 <__d2b+0x88>
 8015052:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015056:	4404      	add	r4, r0
 8015058:	6034      	str	r4, [r6, #0]
 801505a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801505e:	6028      	str	r0, [r5, #0]
 8015060:	4638      	mov	r0, r7
 8015062:	b003      	add	sp, #12
 8015064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801506c:	e7d5      	b.n	801501a <__d2b+0x1e>
 801506e:	6179      	str	r1, [r7, #20]
 8015070:	e7e7      	b.n	8015042 <__d2b+0x46>
 8015072:	a801      	add	r0, sp, #4
 8015074:	f7ff fd63 	bl	8014b3e <__lo0bits>
 8015078:	9b01      	ldr	r3, [sp, #4]
 801507a:	617b      	str	r3, [r7, #20]
 801507c:	2101      	movs	r1, #1
 801507e:	6139      	str	r1, [r7, #16]
 8015080:	3020      	adds	r0, #32
 8015082:	e7e5      	b.n	8015050 <__d2b+0x54>
 8015084:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801508c:	6030      	str	r0, [r6, #0]
 801508e:	6918      	ldr	r0, [r3, #16]
 8015090:	f7ff fd36 	bl	8014b00 <__hi0bits>
 8015094:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015098:	e7e1      	b.n	801505e <__d2b+0x62>

0801509a <__ratio>:
 801509a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801509e:	4688      	mov	r8, r1
 80150a0:	4669      	mov	r1, sp
 80150a2:	4681      	mov	r9, r0
 80150a4:	f7ff ff5c 	bl	8014f60 <__b2d>
 80150a8:	a901      	add	r1, sp, #4
 80150aa:	4640      	mov	r0, r8
 80150ac:	ec57 6b10 	vmov	r6, r7, d0
 80150b0:	ee10 4a10 	vmov	r4, s0
 80150b4:	f7ff ff54 	bl	8014f60 <__b2d>
 80150b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80150bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80150c0:	eba3 0c02 	sub.w	ip, r3, r2
 80150c4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80150c8:	1a9b      	subs	r3, r3, r2
 80150ca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80150ce:	ec51 0b10 	vmov	r0, r1, d0
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	ee10 aa10 	vmov	sl, s0
 80150d8:	bfce      	itee	gt
 80150da:	463a      	movgt	r2, r7
 80150dc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80150e0:	460a      	movle	r2, r1
 80150e2:	463d      	mov	r5, r7
 80150e4:	468b      	mov	fp, r1
 80150e6:	bfcc      	ite	gt
 80150e8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80150ec:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80150f0:	ec45 4b17 	vmov	d7, r4, r5
 80150f4:	ec4b ab16 	vmov	d6, sl, fp
 80150f8:	ee87 0b06 	vdiv.f64	d0, d7, d6
 80150fc:	b003      	add	sp, #12
 80150fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015102 <__copybits>:
 8015102:	3901      	subs	r1, #1
 8015104:	b510      	push	{r4, lr}
 8015106:	1149      	asrs	r1, r1, #5
 8015108:	6914      	ldr	r4, [r2, #16]
 801510a:	3101      	adds	r1, #1
 801510c:	f102 0314 	add.w	r3, r2, #20
 8015110:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015114:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015118:	42a3      	cmp	r3, r4
 801511a:	4602      	mov	r2, r0
 801511c:	d303      	bcc.n	8015126 <__copybits+0x24>
 801511e:	2300      	movs	r3, #0
 8015120:	428a      	cmp	r2, r1
 8015122:	d305      	bcc.n	8015130 <__copybits+0x2e>
 8015124:	bd10      	pop	{r4, pc}
 8015126:	f853 2b04 	ldr.w	r2, [r3], #4
 801512a:	f840 2b04 	str.w	r2, [r0], #4
 801512e:	e7f3      	b.n	8015118 <__copybits+0x16>
 8015130:	f842 3b04 	str.w	r3, [r2], #4
 8015134:	e7f4      	b.n	8015120 <__copybits+0x1e>

08015136 <__any_on>:
 8015136:	f100 0214 	add.w	r2, r0, #20
 801513a:	6900      	ldr	r0, [r0, #16]
 801513c:	114b      	asrs	r3, r1, #5
 801513e:	4298      	cmp	r0, r3
 8015140:	b510      	push	{r4, lr}
 8015142:	db11      	blt.n	8015168 <__any_on+0x32>
 8015144:	dd0a      	ble.n	801515c <__any_on+0x26>
 8015146:	f011 011f 	ands.w	r1, r1, #31
 801514a:	d007      	beq.n	801515c <__any_on+0x26>
 801514c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015150:	fa24 f001 	lsr.w	r0, r4, r1
 8015154:	fa00 f101 	lsl.w	r1, r0, r1
 8015158:	428c      	cmp	r4, r1
 801515a:	d10b      	bne.n	8015174 <__any_on+0x3e>
 801515c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015160:	4293      	cmp	r3, r2
 8015162:	d803      	bhi.n	801516c <__any_on+0x36>
 8015164:	2000      	movs	r0, #0
 8015166:	bd10      	pop	{r4, pc}
 8015168:	4603      	mov	r3, r0
 801516a:	e7f7      	b.n	801515c <__any_on+0x26>
 801516c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015170:	2900      	cmp	r1, #0
 8015172:	d0f5      	beq.n	8015160 <__any_on+0x2a>
 8015174:	2001      	movs	r0, #1
 8015176:	e7f6      	b.n	8015166 <__any_on+0x30>

08015178 <_realloc_r>:
 8015178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801517a:	4607      	mov	r7, r0
 801517c:	4614      	mov	r4, r2
 801517e:	460e      	mov	r6, r1
 8015180:	b921      	cbnz	r1, 801518c <_realloc_r+0x14>
 8015182:	4611      	mov	r1, r2
 8015184:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8015188:	f7fc ba44 	b.w	8011614 <_malloc_r>
 801518c:	b922      	cbnz	r2, 8015198 <_realloc_r+0x20>
 801518e:	f7fc f9f3 	bl	8011578 <_free_r>
 8015192:	4625      	mov	r5, r4
 8015194:	4628      	mov	r0, r5
 8015196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015198:	f000 fb77 	bl	801588a <_malloc_usable_size_r>
 801519c:	42a0      	cmp	r0, r4
 801519e:	d20f      	bcs.n	80151c0 <_realloc_r+0x48>
 80151a0:	4621      	mov	r1, r4
 80151a2:	4638      	mov	r0, r7
 80151a4:	f7fc fa36 	bl	8011614 <_malloc_r>
 80151a8:	4605      	mov	r5, r0
 80151aa:	2800      	cmp	r0, #0
 80151ac:	d0f2      	beq.n	8015194 <_realloc_r+0x1c>
 80151ae:	4631      	mov	r1, r6
 80151b0:	4622      	mov	r2, r4
 80151b2:	f7fc f9bf 	bl	8011534 <memcpy>
 80151b6:	4631      	mov	r1, r6
 80151b8:	4638      	mov	r0, r7
 80151ba:	f7fc f9dd 	bl	8011578 <_free_r>
 80151be:	e7e9      	b.n	8015194 <_realloc_r+0x1c>
 80151c0:	4635      	mov	r5, r6
 80151c2:	e7e7      	b.n	8015194 <_realloc_r+0x1c>

080151c4 <__ssputs_r>:
 80151c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151c8:	688e      	ldr	r6, [r1, #8]
 80151ca:	429e      	cmp	r6, r3
 80151cc:	4682      	mov	sl, r0
 80151ce:	460c      	mov	r4, r1
 80151d0:	4690      	mov	r8, r2
 80151d2:	4699      	mov	r9, r3
 80151d4:	d837      	bhi.n	8015246 <__ssputs_r+0x82>
 80151d6:	898a      	ldrh	r2, [r1, #12]
 80151d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80151dc:	d031      	beq.n	8015242 <__ssputs_r+0x7e>
 80151de:	6825      	ldr	r5, [r4, #0]
 80151e0:	6909      	ldr	r1, [r1, #16]
 80151e2:	1a6f      	subs	r7, r5, r1
 80151e4:	6965      	ldr	r5, [r4, #20]
 80151e6:	2302      	movs	r3, #2
 80151e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80151ec:	fb95 f5f3 	sdiv	r5, r5, r3
 80151f0:	f109 0301 	add.w	r3, r9, #1
 80151f4:	443b      	add	r3, r7
 80151f6:	429d      	cmp	r5, r3
 80151f8:	bf38      	it	cc
 80151fa:	461d      	movcc	r5, r3
 80151fc:	0553      	lsls	r3, r2, #21
 80151fe:	d530      	bpl.n	8015262 <__ssputs_r+0x9e>
 8015200:	4629      	mov	r1, r5
 8015202:	f7fc fa07 	bl	8011614 <_malloc_r>
 8015206:	4606      	mov	r6, r0
 8015208:	b950      	cbnz	r0, 8015220 <__ssputs_r+0x5c>
 801520a:	230c      	movs	r3, #12
 801520c:	f8ca 3000 	str.w	r3, [sl]
 8015210:	89a3      	ldrh	r3, [r4, #12]
 8015212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015216:	81a3      	strh	r3, [r4, #12]
 8015218:	f04f 30ff 	mov.w	r0, #4294967295
 801521c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015220:	463a      	mov	r2, r7
 8015222:	6921      	ldr	r1, [r4, #16]
 8015224:	f7fc f986 	bl	8011534 <memcpy>
 8015228:	89a3      	ldrh	r3, [r4, #12]
 801522a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801522e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015232:	81a3      	strh	r3, [r4, #12]
 8015234:	6126      	str	r6, [r4, #16]
 8015236:	6165      	str	r5, [r4, #20]
 8015238:	443e      	add	r6, r7
 801523a:	1bed      	subs	r5, r5, r7
 801523c:	6026      	str	r6, [r4, #0]
 801523e:	60a5      	str	r5, [r4, #8]
 8015240:	464e      	mov	r6, r9
 8015242:	454e      	cmp	r6, r9
 8015244:	d900      	bls.n	8015248 <__ssputs_r+0x84>
 8015246:	464e      	mov	r6, r9
 8015248:	4632      	mov	r2, r6
 801524a:	4641      	mov	r1, r8
 801524c:	6820      	ldr	r0, [r4, #0]
 801524e:	f000 fb03 	bl	8015858 <memmove>
 8015252:	68a3      	ldr	r3, [r4, #8]
 8015254:	1b9b      	subs	r3, r3, r6
 8015256:	60a3      	str	r3, [r4, #8]
 8015258:	6823      	ldr	r3, [r4, #0]
 801525a:	441e      	add	r6, r3
 801525c:	6026      	str	r6, [r4, #0]
 801525e:	2000      	movs	r0, #0
 8015260:	e7dc      	b.n	801521c <__ssputs_r+0x58>
 8015262:	462a      	mov	r2, r5
 8015264:	f7ff ff88 	bl	8015178 <_realloc_r>
 8015268:	4606      	mov	r6, r0
 801526a:	2800      	cmp	r0, #0
 801526c:	d1e2      	bne.n	8015234 <__ssputs_r+0x70>
 801526e:	6921      	ldr	r1, [r4, #16]
 8015270:	4650      	mov	r0, sl
 8015272:	f7fc f981 	bl	8011578 <_free_r>
 8015276:	e7c8      	b.n	801520a <__ssputs_r+0x46>

08015278 <_svfiprintf_r>:
 8015278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801527c:	461d      	mov	r5, r3
 801527e:	898b      	ldrh	r3, [r1, #12]
 8015280:	061f      	lsls	r7, r3, #24
 8015282:	b09d      	sub	sp, #116	; 0x74
 8015284:	4680      	mov	r8, r0
 8015286:	460c      	mov	r4, r1
 8015288:	4616      	mov	r6, r2
 801528a:	d50f      	bpl.n	80152ac <_svfiprintf_r+0x34>
 801528c:	690b      	ldr	r3, [r1, #16]
 801528e:	b96b      	cbnz	r3, 80152ac <_svfiprintf_r+0x34>
 8015290:	2140      	movs	r1, #64	; 0x40
 8015292:	f7fc f9bf 	bl	8011614 <_malloc_r>
 8015296:	6020      	str	r0, [r4, #0]
 8015298:	6120      	str	r0, [r4, #16]
 801529a:	b928      	cbnz	r0, 80152a8 <_svfiprintf_r+0x30>
 801529c:	230c      	movs	r3, #12
 801529e:	f8c8 3000 	str.w	r3, [r8]
 80152a2:	f04f 30ff 	mov.w	r0, #4294967295
 80152a6:	e0c8      	b.n	801543a <_svfiprintf_r+0x1c2>
 80152a8:	2340      	movs	r3, #64	; 0x40
 80152aa:	6163      	str	r3, [r4, #20]
 80152ac:	2300      	movs	r3, #0
 80152ae:	9309      	str	r3, [sp, #36]	; 0x24
 80152b0:	2320      	movs	r3, #32
 80152b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80152b6:	2330      	movs	r3, #48	; 0x30
 80152b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80152bc:	9503      	str	r5, [sp, #12]
 80152be:	f04f 0b01 	mov.w	fp, #1
 80152c2:	4637      	mov	r7, r6
 80152c4:	463d      	mov	r5, r7
 80152c6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80152ca:	b10b      	cbz	r3, 80152d0 <_svfiprintf_r+0x58>
 80152cc:	2b25      	cmp	r3, #37	; 0x25
 80152ce:	d13e      	bne.n	801534e <_svfiprintf_r+0xd6>
 80152d0:	ebb7 0a06 	subs.w	sl, r7, r6
 80152d4:	d00b      	beq.n	80152ee <_svfiprintf_r+0x76>
 80152d6:	4653      	mov	r3, sl
 80152d8:	4632      	mov	r2, r6
 80152da:	4621      	mov	r1, r4
 80152dc:	4640      	mov	r0, r8
 80152de:	f7ff ff71 	bl	80151c4 <__ssputs_r>
 80152e2:	3001      	adds	r0, #1
 80152e4:	f000 80a4 	beq.w	8015430 <_svfiprintf_r+0x1b8>
 80152e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152ea:	4453      	add	r3, sl
 80152ec:	9309      	str	r3, [sp, #36]	; 0x24
 80152ee:	783b      	ldrb	r3, [r7, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	f000 809d 	beq.w	8015430 <_svfiprintf_r+0x1b8>
 80152f6:	2300      	movs	r3, #0
 80152f8:	f04f 32ff 	mov.w	r2, #4294967295
 80152fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015300:	9304      	str	r3, [sp, #16]
 8015302:	9307      	str	r3, [sp, #28]
 8015304:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015308:	931a      	str	r3, [sp, #104]	; 0x68
 801530a:	462f      	mov	r7, r5
 801530c:	2205      	movs	r2, #5
 801530e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015312:	4850      	ldr	r0, [pc, #320]	; (8015454 <_svfiprintf_r+0x1dc>)
 8015314:	f7ea ff9c 	bl	8000250 <memchr>
 8015318:	9b04      	ldr	r3, [sp, #16]
 801531a:	b9d0      	cbnz	r0, 8015352 <_svfiprintf_r+0xda>
 801531c:	06d9      	lsls	r1, r3, #27
 801531e:	bf44      	itt	mi
 8015320:	2220      	movmi	r2, #32
 8015322:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015326:	071a      	lsls	r2, r3, #28
 8015328:	bf44      	itt	mi
 801532a:	222b      	movmi	r2, #43	; 0x2b
 801532c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015330:	782a      	ldrb	r2, [r5, #0]
 8015332:	2a2a      	cmp	r2, #42	; 0x2a
 8015334:	d015      	beq.n	8015362 <_svfiprintf_r+0xea>
 8015336:	9a07      	ldr	r2, [sp, #28]
 8015338:	462f      	mov	r7, r5
 801533a:	2000      	movs	r0, #0
 801533c:	250a      	movs	r5, #10
 801533e:	4639      	mov	r1, r7
 8015340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015344:	3b30      	subs	r3, #48	; 0x30
 8015346:	2b09      	cmp	r3, #9
 8015348:	d94d      	bls.n	80153e6 <_svfiprintf_r+0x16e>
 801534a:	b1b8      	cbz	r0, 801537c <_svfiprintf_r+0x104>
 801534c:	e00f      	b.n	801536e <_svfiprintf_r+0xf6>
 801534e:	462f      	mov	r7, r5
 8015350:	e7b8      	b.n	80152c4 <_svfiprintf_r+0x4c>
 8015352:	4a40      	ldr	r2, [pc, #256]	; (8015454 <_svfiprintf_r+0x1dc>)
 8015354:	1a80      	subs	r0, r0, r2
 8015356:	fa0b f000 	lsl.w	r0, fp, r0
 801535a:	4318      	orrs	r0, r3
 801535c:	9004      	str	r0, [sp, #16]
 801535e:	463d      	mov	r5, r7
 8015360:	e7d3      	b.n	801530a <_svfiprintf_r+0x92>
 8015362:	9a03      	ldr	r2, [sp, #12]
 8015364:	1d11      	adds	r1, r2, #4
 8015366:	6812      	ldr	r2, [r2, #0]
 8015368:	9103      	str	r1, [sp, #12]
 801536a:	2a00      	cmp	r2, #0
 801536c:	db01      	blt.n	8015372 <_svfiprintf_r+0xfa>
 801536e:	9207      	str	r2, [sp, #28]
 8015370:	e004      	b.n	801537c <_svfiprintf_r+0x104>
 8015372:	4252      	negs	r2, r2
 8015374:	f043 0302 	orr.w	r3, r3, #2
 8015378:	9207      	str	r2, [sp, #28]
 801537a:	9304      	str	r3, [sp, #16]
 801537c:	783b      	ldrb	r3, [r7, #0]
 801537e:	2b2e      	cmp	r3, #46	; 0x2e
 8015380:	d10c      	bne.n	801539c <_svfiprintf_r+0x124>
 8015382:	787b      	ldrb	r3, [r7, #1]
 8015384:	2b2a      	cmp	r3, #42	; 0x2a
 8015386:	d133      	bne.n	80153f0 <_svfiprintf_r+0x178>
 8015388:	9b03      	ldr	r3, [sp, #12]
 801538a:	1d1a      	adds	r2, r3, #4
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	9203      	str	r2, [sp, #12]
 8015390:	2b00      	cmp	r3, #0
 8015392:	bfb8      	it	lt
 8015394:	f04f 33ff 	movlt.w	r3, #4294967295
 8015398:	3702      	adds	r7, #2
 801539a:	9305      	str	r3, [sp, #20]
 801539c:	4d2e      	ldr	r5, [pc, #184]	; (8015458 <_svfiprintf_r+0x1e0>)
 801539e:	7839      	ldrb	r1, [r7, #0]
 80153a0:	2203      	movs	r2, #3
 80153a2:	4628      	mov	r0, r5
 80153a4:	f7ea ff54 	bl	8000250 <memchr>
 80153a8:	b138      	cbz	r0, 80153ba <_svfiprintf_r+0x142>
 80153aa:	2340      	movs	r3, #64	; 0x40
 80153ac:	1b40      	subs	r0, r0, r5
 80153ae:	fa03 f000 	lsl.w	r0, r3, r0
 80153b2:	9b04      	ldr	r3, [sp, #16]
 80153b4:	4303      	orrs	r3, r0
 80153b6:	3701      	adds	r7, #1
 80153b8:	9304      	str	r3, [sp, #16]
 80153ba:	7839      	ldrb	r1, [r7, #0]
 80153bc:	4827      	ldr	r0, [pc, #156]	; (801545c <_svfiprintf_r+0x1e4>)
 80153be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80153c2:	2206      	movs	r2, #6
 80153c4:	1c7e      	adds	r6, r7, #1
 80153c6:	f7ea ff43 	bl	8000250 <memchr>
 80153ca:	2800      	cmp	r0, #0
 80153cc:	d038      	beq.n	8015440 <_svfiprintf_r+0x1c8>
 80153ce:	4b24      	ldr	r3, [pc, #144]	; (8015460 <_svfiprintf_r+0x1e8>)
 80153d0:	bb13      	cbnz	r3, 8015418 <_svfiprintf_r+0x1a0>
 80153d2:	9b03      	ldr	r3, [sp, #12]
 80153d4:	3307      	adds	r3, #7
 80153d6:	f023 0307 	bic.w	r3, r3, #7
 80153da:	3308      	adds	r3, #8
 80153dc:	9303      	str	r3, [sp, #12]
 80153de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153e0:	444b      	add	r3, r9
 80153e2:	9309      	str	r3, [sp, #36]	; 0x24
 80153e4:	e76d      	b.n	80152c2 <_svfiprintf_r+0x4a>
 80153e6:	fb05 3202 	mla	r2, r5, r2, r3
 80153ea:	2001      	movs	r0, #1
 80153ec:	460f      	mov	r7, r1
 80153ee:	e7a6      	b.n	801533e <_svfiprintf_r+0xc6>
 80153f0:	2300      	movs	r3, #0
 80153f2:	3701      	adds	r7, #1
 80153f4:	9305      	str	r3, [sp, #20]
 80153f6:	4619      	mov	r1, r3
 80153f8:	250a      	movs	r5, #10
 80153fa:	4638      	mov	r0, r7
 80153fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015400:	3a30      	subs	r2, #48	; 0x30
 8015402:	2a09      	cmp	r2, #9
 8015404:	d903      	bls.n	801540e <_svfiprintf_r+0x196>
 8015406:	2b00      	cmp	r3, #0
 8015408:	d0c8      	beq.n	801539c <_svfiprintf_r+0x124>
 801540a:	9105      	str	r1, [sp, #20]
 801540c:	e7c6      	b.n	801539c <_svfiprintf_r+0x124>
 801540e:	fb05 2101 	mla	r1, r5, r1, r2
 8015412:	2301      	movs	r3, #1
 8015414:	4607      	mov	r7, r0
 8015416:	e7f0      	b.n	80153fa <_svfiprintf_r+0x182>
 8015418:	ab03      	add	r3, sp, #12
 801541a:	9300      	str	r3, [sp, #0]
 801541c:	4622      	mov	r2, r4
 801541e:	4b11      	ldr	r3, [pc, #68]	; (8015464 <_svfiprintf_r+0x1ec>)
 8015420:	a904      	add	r1, sp, #16
 8015422:	4640      	mov	r0, r8
 8015424:	f7fc f9d8 	bl	80117d8 <_printf_float>
 8015428:	f1b0 3fff 	cmp.w	r0, #4294967295
 801542c:	4681      	mov	r9, r0
 801542e:	d1d6      	bne.n	80153de <_svfiprintf_r+0x166>
 8015430:	89a3      	ldrh	r3, [r4, #12]
 8015432:	065b      	lsls	r3, r3, #25
 8015434:	f53f af35 	bmi.w	80152a2 <_svfiprintf_r+0x2a>
 8015438:	9809      	ldr	r0, [sp, #36]	; 0x24
 801543a:	b01d      	add	sp, #116	; 0x74
 801543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015440:	ab03      	add	r3, sp, #12
 8015442:	9300      	str	r3, [sp, #0]
 8015444:	4622      	mov	r2, r4
 8015446:	4b07      	ldr	r3, [pc, #28]	; (8015464 <_svfiprintf_r+0x1ec>)
 8015448:	a904      	add	r1, sp, #16
 801544a:	4640      	mov	r0, r8
 801544c:	f7fc fc66 	bl	8011d1c <_printf_i>
 8015450:	e7ea      	b.n	8015428 <_svfiprintf_r+0x1b0>
 8015452:	bf00      	nop
 8015454:	080160a4 	.word	0x080160a4
 8015458:	080160aa 	.word	0x080160aa
 801545c:	080160ae 	.word	0x080160ae
 8015460:	080117d9 	.word	0x080117d9
 8015464:	080151c5 	.word	0x080151c5

08015468 <__sfputc_r>:
 8015468:	6893      	ldr	r3, [r2, #8]
 801546a:	3b01      	subs	r3, #1
 801546c:	2b00      	cmp	r3, #0
 801546e:	b410      	push	{r4}
 8015470:	6093      	str	r3, [r2, #8]
 8015472:	da08      	bge.n	8015486 <__sfputc_r+0x1e>
 8015474:	6994      	ldr	r4, [r2, #24]
 8015476:	42a3      	cmp	r3, r4
 8015478:	db01      	blt.n	801547e <__sfputc_r+0x16>
 801547a:	290a      	cmp	r1, #10
 801547c:	d103      	bne.n	8015486 <__sfputc_r+0x1e>
 801547e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015482:	f7fd beb3 	b.w	80131ec <__swbuf_r>
 8015486:	6813      	ldr	r3, [r2, #0]
 8015488:	1c58      	adds	r0, r3, #1
 801548a:	6010      	str	r0, [r2, #0]
 801548c:	7019      	strb	r1, [r3, #0]
 801548e:	4608      	mov	r0, r1
 8015490:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015494:	4770      	bx	lr

08015496 <__sfputs_r>:
 8015496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015498:	4606      	mov	r6, r0
 801549a:	460f      	mov	r7, r1
 801549c:	4614      	mov	r4, r2
 801549e:	18d5      	adds	r5, r2, r3
 80154a0:	42ac      	cmp	r4, r5
 80154a2:	d101      	bne.n	80154a8 <__sfputs_r+0x12>
 80154a4:	2000      	movs	r0, #0
 80154a6:	e007      	b.n	80154b8 <__sfputs_r+0x22>
 80154a8:	463a      	mov	r2, r7
 80154aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154ae:	4630      	mov	r0, r6
 80154b0:	f7ff ffda 	bl	8015468 <__sfputc_r>
 80154b4:	1c43      	adds	r3, r0, #1
 80154b6:	d1f3      	bne.n	80154a0 <__sfputs_r+0xa>
 80154b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154bc <_vfiprintf_r>:
 80154bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c0:	460c      	mov	r4, r1
 80154c2:	b09d      	sub	sp, #116	; 0x74
 80154c4:	4617      	mov	r7, r2
 80154c6:	461d      	mov	r5, r3
 80154c8:	4606      	mov	r6, r0
 80154ca:	b118      	cbz	r0, 80154d4 <_vfiprintf_r+0x18>
 80154cc:	6983      	ldr	r3, [r0, #24]
 80154ce:	b90b      	cbnz	r3, 80154d4 <_vfiprintf_r+0x18>
 80154d0:	f7fe fe16 	bl	8014100 <__sinit>
 80154d4:	4b7c      	ldr	r3, [pc, #496]	; (80156c8 <_vfiprintf_r+0x20c>)
 80154d6:	429c      	cmp	r4, r3
 80154d8:	d158      	bne.n	801558c <_vfiprintf_r+0xd0>
 80154da:	6874      	ldr	r4, [r6, #4]
 80154dc:	89a3      	ldrh	r3, [r4, #12]
 80154de:	0718      	lsls	r0, r3, #28
 80154e0:	d55e      	bpl.n	80155a0 <_vfiprintf_r+0xe4>
 80154e2:	6923      	ldr	r3, [r4, #16]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d05b      	beq.n	80155a0 <_vfiprintf_r+0xe4>
 80154e8:	2300      	movs	r3, #0
 80154ea:	9309      	str	r3, [sp, #36]	; 0x24
 80154ec:	2320      	movs	r3, #32
 80154ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154f2:	2330      	movs	r3, #48	; 0x30
 80154f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154f8:	9503      	str	r5, [sp, #12]
 80154fa:	f04f 0b01 	mov.w	fp, #1
 80154fe:	46b8      	mov	r8, r7
 8015500:	4645      	mov	r5, r8
 8015502:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015506:	b10b      	cbz	r3, 801550c <_vfiprintf_r+0x50>
 8015508:	2b25      	cmp	r3, #37	; 0x25
 801550a:	d154      	bne.n	80155b6 <_vfiprintf_r+0xfa>
 801550c:	ebb8 0a07 	subs.w	sl, r8, r7
 8015510:	d00b      	beq.n	801552a <_vfiprintf_r+0x6e>
 8015512:	4653      	mov	r3, sl
 8015514:	463a      	mov	r2, r7
 8015516:	4621      	mov	r1, r4
 8015518:	4630      	mov	r0, r6
 801551a:	f7ff ffbc 	bl	8015496 <__sfputs_r>
 801551e:	3001      	adds	r0, #1
 8015520:	f000 80c2 	beq.w	80156a8 <_vfiprintf_r+0x1ec>
 8015524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015526:	4453      	add	r3, sl
 8015528:	9309      	str	r3, [sp, #36]	; 0x24
 801552a:	f898 3000 	ldrb.w	r3, [r8]
 801552e:	2b00      	cmp	r3, #0
 8015530:	f000 80ba 	beq.w	80156a8 <_vfiprintf_r+0x1ec>
 8015534:	2300      	movs	r3, #0
 8015536:	f04f 32ff 	mov.w	r2, #4294967295
 801553a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801553e:	9304      	str	r3, [sp, #16]
 8015540:	9307      	str	r3, [sp, #28]
 8015542:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015546:	931a      	str	r3, [sp, #104]	; 0x68
 8015548:	46a8      	mov	r8, r5
 801554a:	2205      	movs	r2, #5
 801554c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015550:	485e      	ldr	r0, [pc, #376]	; (80156cc <_vfiprintf_r+0x210>)
 8015552:	f7ea fe7d 	bl	8000250 <memchr>
 8015556:	9b04      	ldr	r3, [sp, #16]
 8015558:	bb78      	cbnz	r0, 80155ba <_vfiprintf_r+0xfe>
 801555a:	06d9      	lsls	r1, r3, #27
 801555c:	bf44      	itt	mi
 801555e:	2220      	movmi	r2, #32
 8015560:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015564:	071a      	lsls	r2, r3, #28
 8015566:	bf44      	itt	mi
 8015568:	222b      	movmi	r2, #43	; 0x2b
 801556a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801556e:	782a      	ldrb	r2, [r5, #0]
 8015570:	2a2a      	cmp	r2, #42	; 0x2a
 8015572:	d02a      	beq.n	80155ca <_vfiprintf_r+0x10e>
 8015574:	9a07      	ldr	r2, [sp, #28]
 8015576:	46a8      	mov	r8, r5
 8015578:	2000      	movs	r0, #0
 801557a:	250a      	movs	r5, #10
 801557c:	4641      	mov	r1, r8
 801557e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015582:	3b30      	subs	r3, #48	; 0x30
 8015584:	2b09      	cmp	r3, #9
 8015586:	d969      	bls.n	801565c <_vfiprintf_r+0x1a0>
 8015588:	b360      	cbz	r0, 80155e4 <_vfiprintf_r+0x128>
 801558a:	e024      	b.n	80155d6 <_vfiprintf_r+0x11a>
 801558c:	4b50      	ldr	r3, [pc, #320]	; (80156d0 <_vfiprintf_r+0x214>)
 801558e:	429c      	cmp	r4, r3
 8015590:	d101      	bne.n	8015596 <_vfiprintf_r+0xda>
 8015592:	68b4      	ldr	r4, [r6, #8]
 8015594:	e7a2      	b.n	80154dc <_vfiprintf_r+0x20>
 8015596:	4b4f      	ldr	r3, [pc, #316]	; (80156d4 <_vfiprintf_r+0x218>)
 8015598:	429c      	cmp	r4, r3
 801559a:	bf08      	it	eq
 801559c:	68f4      	ldreq	r4, [r6, #12]
 801559e:	e79d      	b.n	80154dc <_vfiprintf_r+0x20>
 80155a0:	4621      	mov	r1, r4
 80155a2:	4630      	mov	r0, r6
 80155a4:	f7fd fe74 	bl	8013290 <__swsetup_r>
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d09d      	beq.n	80154e8 <_vfiprintf_r+0x2c>
 80155ac:	f04f 30ff 	mov.w	r0, #4294967295
 80155b0:	b01d      	add	sp, #116	; 0x74
 80155b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155b6:	46a8      	mov	r8, r5
 80155b8:	e7a2      	b.n	8015500 <_vfiprintf_r+0x44>
 80155ba:	4a44      	ldr	r2, [pc, #272]	; (80156cc <_vfiprintf_r+0x210>)
 80155bc:	1a80      	subs	r0, r0, r2
 80155be:	fa0b f000 	lsl.w	r0, fp, r0
 80155c2:	4318      	orrs	r0, r3
 80155c4:	9004      	str	r0, [sp, #16]
 80155c6:	4645      	mov	r5, r8
 80155c8:	e7be      	b.n	8015548 <_vfiprintf_r+0x8c>
 80155ca:	9a03      	ldr	r2, [sp, #12]
 80155cc:	1d11      	adds	r1, r2, #4
 80155ce:	6812      	ldr	r2, [r2, #0]
 80155d0:	9103      	str	r1, [sp, #12]
 80155d2:	2a00      	cmp	r2, #0
 80155d4:	db01      	blt.n	80155da <_vfiprintf_r+0x11e>
 80155d6:	9207      	str	r2, [sp, #28]
 80155d8:	e004      	b.n	80155e4 <_vfiprintf_r+0x128>
 80155da:	4252      	negs	r2, r2
 80155dc:	f043 0302 	orr.w	r3, r3, #2
 80155e0:	9207      	str	r2, [sp, #28]
 80155e2:	9304      	str	r3, [sp, #16]
 80155e4:	f898 3000 	ldrb.w	r3, [r8]
 80155e8:	2b2e      	cmp	r3, #46	; 0x2e
 80155ea:	d10e      	bne.n	801560a <_vfiprintf_r+0x14e>
 80155ec:	f898 3001 	ldrb.w	r3, [r8, #1]
 80155f0:	2b2a      	cmp	r3, #42	; 0x2a
 80155f2:	d138      	bne.n	8015666 <_vfiprintf_r+0x1aa>
 80155f4:	9b03      	ldr	r3, [sp, #12]
 80155f6:	1d1a      	adds	r2, r3, #4
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	9203      	str	r2, [sp, #12]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	bfb8      	it	lt
 8015600:	f04f 33ff 	movlt.w	r3, #4294967295
 8015604:	f108 0802 	add.w	r8, r8, #2
 8015608:	9305      	str	r3, [sp, #20]
 801560a:	4d33      	ldr	r5, [pc, #204]	; (80156d8 <_vfiprintf_r+0x21c>)
 801560c:	f898 1000 	ldrb.w	r1, [r8]
 8015610:	2203      	movs	r2, #3
 8015612:	4628      	mov	r0, r5
 8015614:	f7ea fe1c 	bl	8000250 <memchr>
 8015618:	b140      	cbz	r0, 801562c <_vfiprintf_r+0x170>
 801561a:	2340      	movs	r3, #64	; 0x40
 801561c:	1b40      	subs	r0, r0, r5
 801561e:	fa03 f000 	lsl.w	r0, r3, r0
 8015622:	9b04      	ldr	r3, [sp, #16]
 8015624:	4303      	orrs	r3, r0
 8015626:	f108 0801 	add.w	r8, r8, #1
 801562a:	9304      	str	r3, [sp, #16]
 801562c:	f898 1000 	ldrb.w	r1, [r8]
 8015630:	482a      	ldr	r0, [pc, #168]	; (80156dc <_vfiprintf_r+0x220>)
 8015632:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015636:	2206      	movs	r2, #6
 8015638:	f108 0701 	add.w	r7, r8, #1
 801563c:	f7ea fe08 	bl	8000250 <memchr>
 8015640:	2800      	cmp	r0, #0
 8015642:	d037      	beq.n	80156b4 <_vfiprintf_r+0x1f8>
 8015644:	4b26      	ldr	r3, [pc, #152]	; (80156e0 <_vfiprintf_r+0x224>)
 8015646:	bb1b      	cbnz	r3, 8015690 <_vfiprintf_r+0x1d4>
 8015648:	9b03      	ldr	r3, [sp, #12]
 801564a:	3307      	adds	r3, #7
 801564c:	f023 0307 	bic.w	r3, r3, #7
 8015650:	3308      	adds	r3, #8
 8015652:	9303      	str	r3, [sp, #12]
 8015654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015656:	444b      	add	r3, r9
 8015658:	9309      	str	r3, [sp, #36]	; 0x24
 801565a:	e750      	b.n	80154fe <_vfiprintf_r+0x42>
 801565c:	fb05 3202 	mla	r2, r5, r2, r3
 8015660:	2001      	movs	r0, #1
 8015662:	4688      	mov	r8, r1
 8015664:	e78a      	b.n	801557c <_vfiprintf_r+0xc0>
 8015666:	2300      	movs	r3, #0
 8015668:	f108 0801 	add.w	r8, r8, #1
 801566c:	9305      	str	r3, [sp, #20]
 801566e:	4619      	mov	r1, r3
 8015670:	250a      	movs	r5, #10
 8015672:	4640      	mov	r0, r8
 8015674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015678:	3a30      	subs	r2, #48	; 0x30
 801567a:	2a09      	cmp	r2, #9
 801567c:	d903      	bls.n	8015686 <_vfiprintf_r+0x1ca>
 801567e:	2b00      	cmp	r3, #0
 8015680:	d0c3      	beq.n	801560a <_vfiprintf_r+0x14e>
 8015682:	9105      	str	r1, [sp, #20]
 8015684:	e7c1      	b.n	801560a <_vfiprintf_r+0x14e>
 8015686:	fb05 2101 	mla	r1, r5, r1, r2
 801568a:	2301      	movs	r3, #1
 801568c:	4680      	mov	r8, r0
 801568e:	e7f0      	b.n	8015672 <_vfiprintf_r+0x1b6>
 8015690:	ab03      	add	r3, sp, #12
 8015692:	9300      	str	r3, [sp, #0]
 8015694:	4622      	mov	r2, r4
 8015696:	4b13      	ldr	r3, [pc, #76]	; (80156e4 <_vfiprintf_r+0x228>)
 8015698:	a904      	add	r1, sp, #16
 801569a:	4630      	mov	r0, r6
 801569c:	f7fc f89c 	bl	80117d8 <_printf_float>
 80156a0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80156a4:	4681      	mov	r9, r0
 80156a6:	d1d5      	bne.n	8015654 <_vfiprintf_r+0x198>
 80156a8:	89a3      	ldrh	r3, [r4, #12]
 80156aa:	065b      	lsls	r3, r3, #25
 80156ac:	f53f af7e 	bmi.w	80155ac <_vfiprintf_r+0xf0>
 80156b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156b2:	e77d      	b.n	80155b0 <_vfiprintf_r+0xf4>
 80156b4:	ab03      	add	r3, sp, #12
 80156b6:	9300      	str	r3, [sp, #0]
 80156b8:	4622      	mov	r2, r4
 80156ba:	4b0a      	ldr	r3, [pc, #40]	; (80156e4 <_vfiprintf_r+0x228>)
 80156bc:	a904      	add	r1, sp, #16
 80156be:	4630      	mov	r0, r6
 80156c0:	f7fc fb2c 	bl	8011d1c <_printf_i>
 80156c4:	e7ec      	b.n	80156a0 <_vfiprintf_r+0x1e4>
 80156c6:	bf00      	nop
 80156c8:	08015f58 	.word	0x08015f58
 80156cc:	080160a4 	.word	0x080160a4
 80156d0:	08015f78 	.word	0x08015f78
 80156d4:	08015f38 	.word	0x08015f38
 80156d8:	080160aa 	.word	0x080160aa
 80156dc:	080160ae 	.word	0x080160ae
 80156e0:	080117d9 	.word	0x080117d9
 80156e4:	08015497 	.word	0x08015497

080156e8 <__sread>:
 80156e8:	b510      	push	{r4, lr}
 80156ea:	460c      	mov	r4, r1
 80156ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156f0:	f000 f8d4 	bl	801589c <_read_r>
 80156f4:	2800      	cmp	r0, #0
 80156f6:	bfab      	itete	ge
 80156f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156fa:	89a3      	ldrhlt	r3, [r4, #12]
 80156fc:	181b      	addge	r3, r3, r0
 80156fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015702:	bfac      	ite	ge
 8015704:	6563      	strge	r3, [r4, #84]	; 0x54
 8015706:	81a3      	strhlt	r3, [r4, #12]
 8015708:	bd10      	pop	{r4, pc}

0801570a <__swrite>:
 801570a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801570e:	461f      	mov	r7, r3
 8015710:	898b      	ldrh	r3, [r1, #12]
 8015712:	05db      	lsls	r3, r3, #23
 8015714:	4605      	mov	r5, r0
 8015716:	460c      	mov	r4, r1
 8015718:	4616      	mov	r6, r2
 801571a:	d505      	bpl.n	8015728 <__swrite+0x1e>
 801571c:	2302      	movs	r3, #2
 801571e:	2200      	movs	r2, #0
 8015720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015724:	f000 f886 	bl	8015834 <_lseek_r>
 8015728:	89a3      	ldrh	r3, [r4, #12]
 801572a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801572e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015732:	81a3      	strh	r3, [r4, #12]
 8015734:	4632      	mov	r2, r6
 8015736:	463b      	mov	r3, r7
 8015738:	4628      	mov	r0, r5
 801573a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801573e:	f000 b835 	b.w	80157ac <_write_r>

08015742 <__sseek>:
 8015742:	b510      	push	{r4, lr}
 8015744:	460c      	mov	r4, r1
 8015746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801574a:	f000 f873 	bl	8015834 <_lseek_r>
 801574e:	1c43      	adds	r3, r0, #1
 8015750:	89a3      	ldrh	r3, [r4, #12]
 8015752:	bf15      	itete	ne
 8015754:	6560      	strne	r0, [r4, #84]	; 0x54
 8015756:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801575a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801575e:	81a3      	strheq	r3, [r4, #12]
 8015760:	bf18      	it	ne
 8015762:	81a3      	strhne	r3, [r4, #12]
 8015764:	bd10      	pop	{r4, pc}

08015766 <__sclose>:
 8015766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801576a:	f000 b831 	b.w	80157d0 <_close_r>

0801576e <strncmp>:
 801576e:	b510      	push	{r4, lr}
 8015770:	b16a      	cbz	r2, 801578e <strncmp+0x20>
 8015772:	3901      	subs	r1, #1
 8015774:	1884      	adds	r4, r0, r2
 8015776:	f810 3b01 	ldrb.w	r3, [r0], #1
 801577a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801577e:	4293      	cmp	r3, r2
 8015780:	d103      	bne.n	801578a <strncmp+0x1c>
 8015782:	42a0      	cmp	r0, r4
 8015784:	d001      	beq.n	801578a <strncmp+0x1c>
 8015786:	2b00      	cmp	r3, #0
 8015788:	d1f5      	bne.n	8015776 <strncmp+0x8>
 801578a:	1a98      	subs	r0, r3, r2
 801578c:	bd10      	pop	{r4, pc}
 801578e:	4610      	mov	r0, r2
 8015790:	e7fc      	b.n	801578c <strncmp+0x1e>

08015792 <__ascii_wctomb>:
 8015792:	b149      	cbz	r1, 80157a8 <__ascii_wctomb+0x16>
 8015794:	2aff      	cmp	r2, #255	; 0xff
 8015796:	bf85      	ittet	hi
 8015798:	238a      	movhi	r3, #138	; 0x8a
 801579a:	6003      	strhi	r3, [r0, #0]
 801579c:	700a      	strbls	r2, [r1, #0]
 801579e:	f04f 30ff 	movhi.w	r0, #4294967295
 80157a2:	bf98      	it	ls
 80157a4:	2001      	movls	r0, #1
 80157a6:	4770      	bx	lr
 80157a8:	4608      	mov	r0, r1
 80157aa:	4770      	bx	lr

080157ac <_write_r>:
 80157ac:	b538      	push	{r3, r4, r5, lr}
 80157ae:	4c07      	ldr	r4, [pc, #28]	; (80157cc <_write_r+0x20>)
 80157b0:	4605      	mov	r5, r0
 80157b2:	4608      	mov	r0, r1
 80157b4:	4611      	mov	r1, r2
 80157b6:	2200      	movs	r2, #0
 80157b8:	6022      	str	r2, [r4, #0]
 80157ba:	461a      	mov	r2, r3
 80157bc:	f7f8 fb2e 	bl	800de1c <_write>
 80157c0:	1c43      	adds	r3, r0, #1
 80157c2:	d102      	bne.n	80157ca <_write_r+0x1e>
 80157c4:	6823      	ldr	r3, [r4, #0]
 80157c6:	b103      	cbz	r3, 80157ca <_write_r+0x1e>
 80157c8:	602b      	str	r3, [r5, #0]
 80157ca:	bd38      	pop	{r3, r4, r5, pc}
 80157cc:	20011e34 	.word	0x20011e34

080157d0 <_close_r>:
 80157d0:	b538      	push	{r3, r4, r5, lr}
 80157d2:	4c06      	ldr	r4, [pc, #24]	; (80157ec <_close_r+0x1c>)
 80157d4:	2300      	movs	r3, #0
 80157d6:	4605      	mov	r5, r0
 80157d8:	4608      	mov	r0, r1
 80157da:	6023      	str	r3, [r4, #0]
 80157dc:	f000 f870 	bl	80158c0 <_close>
 80157e0:	1c43      	adds	r3, r0, #1
 80157e2:	d102      	bne.n	80157ea <_close_r+0x1a>
 80157e4:	6823      	ldr	r3, [r4, #0]
 80157e6:	b103      	cbz	r3, 80157ea <_close_r+0x1a>
 80157e8:	602b      	str	r3, [r5, #0]
 80157ea:	bd38      	pop	{r3, r4, r5, pc}
 80157ec:	20011e34 	.word	0x20011e34

080157f0 <_fstat_r>:
 80157f0:	b538      	push	{r3, r4, r5, lr}
 80157f2:	4c07      	ldr	r4, [pc, #28]	; (8015810 <_fstat_r+0x20>)
 80157f4:	2300      	movs	r3, #0
 80157f6:	4605      	mov	r5, r0
 80157f8:	4608      	mov	r0, r1
 80157fa:	4611      	mov	r1, r2
 80157fc:	6023      	str	r3, [r4, #0]
 80157fe:	f000 f867 	bl	80158d0 <_fstat>
 8015802:	1c43      	adds	r3, r0, #1
 8015804:	d102      	bne.n	801580c <_fstat_r+0x1c>
 8015806:	6823      	ldr	r3, [r4, #0]
 8015808:	b103      	cbz	r3, 801580c <_fstat_r+0x1c>
 801580a:	602b      	str	r3, [r5, #0]
 801580c:	bd38      	pop	{r3, r4, r5, pc}
 801580e:	bf00      	nop
 8015810:	20011e34 	.word	0x20011e34

08015814 <_isatty_r>:
 8015814:	b538      	push	{r3, r4, r5, lr}
 8015816:	4c06      	ldr	r4, [pc, #24]	; (8015830 <_isatty_r+0x1c>)
 8015818:	2300      	movs	r3, #0
 801581a:	4605      	mov	r5, r0
 801581c:	4608      	mov	r0, r1
 801581e:	6023      	str	r3, [r4, #0]
 8015820:	f000 f866 	bl	80158f0 <_isatty>
 8015824:	1c43      	adds	r3, r0, #1
 8015826:	d102      	bne.n	801582e <_isatty_r+0x1a>
 8015828:	6823      	ldr	r3, [r4, #0]
 801582a:	b103      	cbz	r3, 801582e <_isatty_r+0x1a>
 801582c:	602b      	str	r3, [r5, #0]
 801582e:	bd38      	pop	{r3, r4, r5, pc}
 8015830:	20011e34 	.word	0x20011e34

08015834 <_lseek_r>:
 8015834:	b538      	push	{r3, r4, r5, lr}
 8015836:	4c07      	ldr	r4, [pc, #28]	; (8015854 <_lseek_r+0x20>)
 8015838:	4605      	mov	r5, r0
 801583a:	4608      	mov	r0, r1
 801583c:	4611      	mov	r1, r2
 801583e:	2200      	movs	r2, #0
 8015840:	6022      	str	r2, [r4, #0]
 8015842:	461a      	mov	r2, r3
 8015844:	f000 f864 	bl	8015910 <_lseek>
 8015848:	1c43      	adds	r3, r0, #1
 801584a:	d102      	bne.n	8015852 <_lseek_r+0x1e>
 801584c:	6823      	ldr	r3, [r4, #0]
 801584e:	b103      	cbz	r3, 8015852 <_lseek_r+0x1e>
 8015850:	602b      	str	r3, [r5, #0]
 8015852:	bd38      	pop	{r3, r4, r5, pc}
 8015854:	20011e34 	.word	0x20011e34

08015858 <memmove>:
 8015858:	4288      	cmp	r0, r1
 801585a:	b510      	push	{r4, lr}
 801585c:	eb01 0302 	add.w	r3, r1, r2
 8015860:	d807      	bhi.n	8015872 <memmove+0x1a>
 8015862:	1e42      	subs	r2, r0, #1
 8015864:	4299      	cmp	r1, r3
 8015866:	d00a      	beq.n	801587e <memmove+0x26>
 8015868:	f811 4b01 	ldrb.w	r4, [r1], #1
 801586c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8015870:	e7f8      	b.n	8015864 <memmove+0xc>
 8015872:	4283      	cmp	r3, r0
 8015874:	d9f5      	bls.n	8015862 <memmove+0xa>
 8015876:	1881      	adds	r1, r0, r2
 8015878:	1ad2      	subs	r2, r2, r3
 801587a:	42d3      	cmn	r3, r2
 801587c:	d100      	bne.n	8015880 <memmove+0x28>
 801587e:	bd10      	pop	{r4, pc}
 8015880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015884:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015888:	e7f7      	b.n	801587a <memmove+0x22>

0801588a <_malloc_usable_size_r>:
 801588a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801588e:	1f18      	subs	r0, r3, #4
 8015890:	2b00      	cmp	r3, #0
 8015892:	bfbc      	itt	lt
 8015894:	580b      	ldrlt	r3, [r1, r0]
 8015896:	18c0      	addlt	r0, r0, r3
 8015898:	4770      	bx	lr
	...

0801589c <_read_r>:
 801589c:	b538      	push	{r3, r4, r5, lr}
 801589e:	4c07      	ldr	r4, [pc, #28]	; (80158bc <_read_r+0x20>)
 80158a0:	4605      	mov	r5, r0
 80158a2:	4608      	mov	r0, r1
 80158a4:	4611      	mov	r1, r2
 80158a6:	2200      	movs	r2, #0
 80158a8:	6022      	str	r2, [r4, #0]
 80158aa:	461a      	mov	r2, r3
 80158ac:	f000 f838 	bl	8015920 <_read>
 80158b0:	1c43      	adds	r3, r0, #1
 80158b2:	d102      	bne.n	80158ba <_read_r+0x1e>
 80158b4:	6823      	ldr	r3, [r4, #0]
 80158b6:	b103      	cbz	r3, 80158ba <_read_r+0x1e>
 80158b8:	602b      	str	r3, [r5, #0]
 80158ba:	bd38      	pop	{r3, r4, r5, pc}
 80158bc:	20011e34 	.word	0x20011e34

080158c0 <_close>:
 80158c0:	4b02      	ldr	r3, [pc, #8]	; (80158cc <_close+0xc>)
 80158c2:	2258      	movs	r2, #88	; 0x58
 80158c4:	601a      	str	r2, [r3, #0]
 80158c6:	f04f 30ff 	mov.w	r0, #4294967295
 80158ca:	4770      	bx	lr
 80158cc:	20011e34 	.word	0x20011e34

080158d0 <_fstat>:
 80158d0:	4b02      	ldr	r3, [pc, #8]	; (80158dc <_fstat+0xc>)
 80158d2:	2258      	movs	r2, #88	; 0x58
 80158d4:	601a      	str	r2, [r3, #0]
 80158d6:	f04f 30ff 	mov.w	r0, #4294967295
 80158da:	4770      	bx	lr
 80158dc:	20011e34 	.word	0x20011e34

080158e0 <_getpid>:
 80158e0:	4b02      	ldr	r3, [pc, #8]	; (80158ec <_getpid+0xc>)
 80158e2:	2258      	movs	r2, #88	; 0x58
 80158e4:	601a      	str	r2, [r3, #0]
 80158e6:	f04f 30ff 	mov.w	r0, #4294967295
 80158ea:	4770      	bx	lr
 80158ec:	20011e34 	.word	0x20011e34

080158f0 <_isatty>:
 80158f0:	4b02      	ldr	r3, [pc, #8]	; (80158fc <_isatty+0xc>)
 80158f2:	2258      	movs	r2, #88	; 0x58
 80158f4:	601a      	str	r2, [r3, #0]
 80158f6:	2000      	movs	r0, #0
 80158f8:	4770      	bx	lr
 80158fa:	bf00      	nop
 80158fc:	20011e34 	.word	0x20011e34

08015900 <_kill>:
 8015900:	4b02      	ldr	r3, [pc, #8]	; (801590c <_kill+0xc>)
 8015902:	2258      	movs	r2, #88	; 0x58
 8015904:	601a      	str	r2, [r3, #0]
 8015906:	f04f 30ff 	mov.w	r0, #4294967295
 801590a:	4770      	bx	lr
 801590c:	20011e34 	.word	0x20011e34

08015910 <_lseek>:
 8015910:	4b02      	ldr	r3, [pc, #8]	; (801591c <_lseek+0xc>)
 8015912:	2258      	movs	r2, #88	; 0x58
 8015914:	601a      	str	r2, [r3, #0]
 8015916:	f04f 30ff 	mov.w	r0, #4294967295
 801591a:	4770      	bx	lr
 801591c:	20011e34 	.word	0x20011e34

08015920 <_read>:
 8015920:	4b02      	ldr	r3, [pc, #8]	; (801592c <_read+0xc>)
 8015922:	2258      	movs	r2, #88	; 0x58
 8015924:	601a      	str	r2, [r3, #0]
 8015926:	f04f 30ff 	mov.w	r0, #4294967295
 801592a:	4770      	bx	lr
 801592c:	20011e34 	.word	0x20011e34

08015930 <_sbrk>:
 8015930:	4b04      	ldr	r3, [pc, #16]	; (8015944 <_sbrk+0x14>)
 8015932:	6819      	ldr	r1, [r3, #0]
 8015934:	4602      	mov	r2, r0
 8015936:	b909      	cbnz	r1, 801593c <_sbrk+0xc>
 8015938:	4903      	ldr	r1, [pc, #12]	; (8015948 <_sbrk+0x18>)
 801593a:	6019      	str	r1, [r3, #0]
 801593c:	6818      	ldr	r0, [r3, #0]
 801593e:	4402      	add	r2, r0
 8015940:	601a      	str	r2, [r3, #0]
 8015942:	4770      	bx	lr
 8015944:	20002490 	.word	0x20002490
 8015948:	20011e38 	.word	0x20011e38

0801594c <_exit>:
 801594c:	e7fe      	b.n	801594c <_exit>
	...

08015950 <_init>:
 8015950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015952:	bf00      	nop
 8015954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015956:	bc08      	pop	{r3}
 8015958:	469e      	mov	lr, r3
 801595a:	4770      	bx	lr

0801595c <_fini>:
 801595c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801595e:	bf00      	nop
 8015960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015962:	bc08      	pop	{r3}
 8015964:	469e      	mov	lr, r3
 8015966:	4770      	bx	lr
